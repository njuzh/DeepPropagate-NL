[{"index": "0", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/dispatch/DispatcherRuleMatcher.java", "methodName": "com.astamuse.asta4d.web.dispatch.DispatcherRuleMatcher.match", "methodParameterType": "UrlMappingRule#HttpMethod#ExtendHttpMethod#String#String#", "methodParameterName": "rule#method#extendMethod#uri#queryString#", "methodBody": "public UrlMappingResult match(UrlMappingRule rule, HttpMethod method, ExtendHttpMethod extendMethod, String uri, String queryString);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param request", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/dispatch/RedirectUtil.java", "methodName": "com.astamuse.asta4d.web.dispatch.RedirectUtil.registerRedirectInterceptor", "methodParameterType": "String#RedirectInterceptor#", "methodParameterName": "id#interceptor#", "methodBody": "public static final boolean registerRedirectInterceptor(String id, RedirectInterceptor interceptor) {\n        Context context = Context.getCurrentThreadContext();\n        Map<String, RedirectInterceptor> map = context.getData(RedirectInterceptorMapKey);\n        if (map == null) {\n            map = new HashMap<>();\n            context.setData(RedirectInterceptorMapKey, map);\n        }\n\n        // we don't do duplicated check for null id\n        if (id == null) {\n            map.put(id, interceptor);\n            return true;\n        } else {\n            // we don't do thread lock because we believe all the operations about redirection should be done at the handler side, which\n            // means there is no concurrent issue.\n            if (map.get(id) == null) {\n                map.put(id, interceptor);\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "<p> register a redirect interceptor to current context with duplicated id check, if there has been an interceptor registered by same id, the later interceptor will be rejected. <p> <b>NOTE:</b>There is no guaranty about the execution order of registered interceptors.", "call_func_name": ["com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.Context.getData", "java.util.HashMap.<init>", "com.astamuse.asta4d.Context.setData", "java.util.Map.put", "java.util.Map.get"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/dispatch/RequestDispatcher.java", "methodName": "com.astamuse.asta4d.web.dispatch.RequestDispatcher.handleRequest", "methodParameterType": "UrlMappingRule#", "methodParameterName": "currentRule#", "methodBody": "private List<ContentProvider> handleRequest(UrlMappingRule currentRule) throws Exception {\n        Context context = Context.getCurrentThreadContext();\n        RequestHandlerInvokerFactory factory = WebApplicationConfiguration.getWebApplicationConfiguration()\n                .getRequestHandlerInvokerFactory();\n        RequestHandlerInvoker invoker = factory.getInvoker();\n\n        List<ContentProvider> cpList = invoker.invoke(currentRule);\n        context.setData(KEY_REQUEST_HANDLER_RESULT, cpList);\n\n        return cpList;\n\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param request", "call_func_name": ["com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.web.WebApplicationConfiguration.getWebApplicationConfiguration", "com.astamuse.asta4d.web.WebApplicationConfiguration.getRequestHandlerInvokerFactory", "com.astamuse.asta4d.web.dispatch.RequestHandlerInvokerFactory.getInvoker", "com.astamuse.asta4d.web.dispatch.RequestHandlerInvoker.invoke", "com.astamuse.asta4d.Context.setData"], "call_func_parameter": [[""], [""], [""], [""], ["com.astamuse.asta4d.web.dispatch.mapping.UrlMappingRule"], ["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/sitecategory/SiteCategoryAwaredResourceLoader.java", "methodName": "com.astamuse.asta4d.web.sitecategory.SiteCategoryAwaredResourceLoader.load", "methodParameterType": "String#Object#", "methodParameterName": "path#extraInfomation#", "methodBody": "public abstract T load(String path, Object extraInfomation) throws Exception;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "@param path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringAntPathMatcher.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringAntPathMatcher.setPathSeparator", "methodParameterType": "String#", "methodParameterName": "pathSeparator#", "methodBody": "public void setPathSeparator(String pathSeparator) {\n        this.pathSeparator = (pathSeparator != null ? pathSeparator : DEFAULT_PATH_SEPARATOR);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#ConditionalExpression#ParenthesizedExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)ParenthesizedExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the path separator to use for pattern parsing. Default is \"/\", as in Ant.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringAntPathMatcher.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringAntPathMatcher.doMatch", "methodParameterType": "String#String#boolean#Map<String,String>#", "methodParameterName": "pattern#path#fullMatch#uriTemplateVariables#", "methodBody": "protected boolean doMatch(String pattern, String path, boolean fullMatch, Map<String, String> uriTemplateVariables) {\n\n        if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {\n            return false;\n        }\n\n        String[] pattDirs = SpringStringUtils.tokenizeToStringArray(pattern, this.pathSeparator);\n        String[] pathDirs = SpringStringUtils.tokenizeToStringArray(path, this.pathSeparator);\n\n        int pattIdxStart = 0;\n        int pattIdxEnd = pattDirs.length - 1;\n        int pathIdxStart = 0;\n        int pathIdxEnd = pathDirs.length - 1;\n\n        // Match all elements up to the first **\n        while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {\n            String patDir = pattDirs[pattIdxStart];\n            if (\"**\".equals(patDir)) {\n                break;\n            }\n            if (!matchStrings(patDir, pathDirs[pathIdxStart], uriTemplateVariables)) {\n                return false;\n            }\n            pattIdxStart++;\n            pathIdxStart++;\n        }\n\n        if (pathIdxStart > pathIdxEnd) {\n            // Path is exhausted, only match if rest of pattern is * or **'s\n            if (pattIdxStart > pattIdxEnd) {\n                return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator));\n            }\n            if (!fullMatch) {\n                return true;\n            }\n            if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals(\"*\") && path.endsWith(this.pathSeparator)) {\n                return true;\n            }\n            for (int i = pattIdxStart; i <= pattIdxEnd; i++) {\n                if (!pattDirs[i].equals(\"**\")) {\n                    return false;\n                }\n            }\n            return true;\n        } else if (pattIdxStart > pattIdxEnd) {\n            // String not exhausted, but pattern is. Failure.\n            return false;\n        } else if (!fullMatch && \"**\".equals(pattDirs[pattIdxStart])) {\n            // Path start definitely matches due to \"**\" part in pattern.\n            return true;\n        }\n\n        // up to last '**'\n        while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {\n            String patDir = pattDirs[pattIdxEnd];\n            if (patDir.equals(\"**\")) {\n                break;\n            }\n            if (!matchStrings(patDir, pathDirs[pathIdxEnd], uriTemplateVariables)) {\n                return false;\n            }\n            pattIdxEnd--;\n            pathIdxEnd--;\n        }\n        if (pathIdxStart > pathIdxEnd) {\n            // String is exhausted\n            for (int i = pattIdxStart; i <= pattIdxEnd; i++) {\n                if (!pattDirs[i].equals(\"**\")) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {\n            int patIdxTmp = -1;\n            for (int i = pattIdxStart + 1; i <= pattIdxEnd; i++) {\n                if (pattDirs[i].equals(\"**\")) {\n                    patIdxTmp = i;\n                    break;\n                }\n            }\n            if (patIdxTmp == pattIdxStart + 1) {\n                // '**/**' situation, so skip one\n                pattIdxStart++;\n                continue;\n            }\n            // Find the pattern between padIdxStart & padIdxTmp in str between\n            // strIdxStart & strIdxEnd\n            int patLength = (patIdxTmp - pattIdxStart - 1);\n            int strLength = (pathIdxEnd - pathIdxStart + 1);\n            int foundIdx = -1;\n\n            strLoop: for (int i = 0; i <= strLength - patLength; i++) {\n                for (int j = 0; j < patLength; j++) {\n                    String subPat = pattDirs[pattIdxStart + j + 1];\n                    String subStr = pathDirs[pathIdxStart + i + j];\n                    if (!matchStrings(subPat, subStr, uriTemplateVariables)) {\n                        continue strLoop;\n                    }\n                }\n                foundIdx = pathIdxStart + i;\n                break;\n            }\n\n            if (foundIdx == -1) {\n                return false;\n            }\n\n            pattIdxStart = patIdxTmp;\n            pathIdxStart = foundIdx + patLength;\n        }\n\n        for (int i = pattIdxStart; i <= pattIdxEnd; i++) {\n            if (!pattDirs[i].equals(\"**\")) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#BreakStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#PrefixExpression#ConditionalExpression#ParenthesizedExpression#ReturnStatement#Block#IfStatement#SimpleName#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#InfixExpression#BooleanLiteral#ReturnStatement#Block#SimpleName#PrefixExpression#StringLiteral#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#BreakStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#PrimitiveType#SimpleName#NumberLiteral#PrefixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#ContinueStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#PrefixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#ContinueStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#BreakStatement#Block#ForStatement#LabeledStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#WhileStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(BreakStatement)BreakStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(ParenthesizedExpression(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)PrefixExpression)ConditionalExpression)ParenthesizedExpression)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)IfStatement)IfStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(BreakStatement)BreakStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)ForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)VariableDeclarationFragment)VariableDeclarationStatement(LabeledStatement(SimpleName)SimpleName(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ContinueStatement(SimpleName)SimpleName)ContinueStatement)Block)IfStatement)Block)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)ForStatement)LabeledStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)WhileStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Actually match the given <code>path</code> against the given <code>pattern</code>.", "call_func_name": ["java.lang.String.startsWith", "com.astamuse.asta4d.web.copyleft.SpringStringUtils.tokenizeToStringArray", "java.lang.String.equals", "com.astamuse.asta4d.web.copyleft.SpringAntPathMatcher.matchStrings", "java.lang.String.endsWith"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.Object"], ["java.lang.String", "java.lang.String", "java.util.Map"], ["java.lang.String"]], "passed_comments": [{"com.astamuse.asta4d.web.copyleft.SpringStringUtils.tokenizeToStringArray": "Tokenize the given String into a String array via a StringTokenizer. Trims tokens and omits empty tokens. <p> The given delimiters string is supposed to consist of any number of delimiter characters. Each of those characters can be used to separate tokens. A delimiter is always a single character; for multi-character delimiters, consider using <code>delimitedListToStringArray</code>"}, {"com.astamuse.asta4d.web.copyleft.SpringAntPathMatcher.matchStrings": "Tests whether or not a string matches against a pattern. The pattern may contain two special characters:<br> '"}]}, {"index": "6", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringAntPathMatcher.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringAntPathMatcher.matchStrings", "methodParameterType": "String#String#Map<String,String>#", "methodParameterName": "pattern#str#uriTemplateVariables#", "methodBody": "private boolean matchStrings(String pattern, String str, Map<String, String> uriTemplateVariables) {\n        SpringAntPathStringMatcher matcher = new SpringAntPathStringMatcher(pattern, str, uriTemplateVariables);\n        return matcher.matchStrings();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tests whether or not a string matches against a pattern. The pattern may contain two special characters:<br> '", "call_func_name": ["com.astamuse.asta4d.web.copyleft.SpringAntPathStringMatcher.<init>", "com.astamuse.asta4d.web.copyleft.SpringAntPathStringMatcher.matchStrings"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.util.Map"], [""]], "passed_comments": [{"com.astamuse.asta4d.web.copyleft.SpringAntPathStringMatcher.matchStrings": "Main entry point."}]}, {"index": "7", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringAntPathMatcher.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringAntPathMatcher.extractPathWithinPattern", "methodParameterType": "String#String#", "methodParameterName": "pattern#path#", "methodBody": "public String extractPathWithinPattern(String pattern, String path) {\n        String[] patternParts = SpringStringUtils.tokenizeToStringArray(pattern, this.pathSeparator);\n        String[] pathParts = SpringStringUtils.tokenizeToStringArray(path, this.pathSeparator);\n\n        StringBuilder builder = new StringBuilder();\n\n        // Add any path parts that have a wildcarded pattern part.\n        int puts = 0;\n        for (int i = 0; i < patternParts.length; i++) {\n            String patternPart = patternParts[i];\n            if ((patternPart.indexOf('*') > -1 || patternPart.indexOf('?') > -1) && pathParts.length >= i + 1) {\n                if (puts > 0 || (i == 0 && !pattern.startsWith(this.pathSeparator))) {\n                    builder.append(this.pathSeparator);\n                }\n                builder.append(pathParts[i]);\n                puts++;\n            }\n        }\n\n        // Append any trailing path parts.\n        for (int i = patternParts.length; i < pathParts.length; i++) {\n            if (puts > 0 || i > 0) {\n                builder.append(this.pathSeparator);\n            }\n            builder.append(pathParts[i]);\n        }\n\n        return builder.toString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#PrefixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#Block#ForStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)InfixExpression)ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)PrefixExpression)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement)Block)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Given a pattern and a full path, determine the pattern-mapped part. <p> For example: <ul> <li>'<code>/docs/cvs/commit.html</code>' and ' <code>/docs/cvs/commit.html</code> -> ''</li> <li>'<code>/docs/", "call_func_name": ["com.astamuse.asta4d.web.copyleft.SpringStringUtils.tokenizeToStringArray", "java.lang.StringBuilder.<init>", "java.lang.String.indexOf", "java.lang.String.startsWith", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], ["int"], ["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": [{"com.astamuse.asta4d.web.copyleft.SpringStringUtils.tokenizeToStringArray": "Tokenize the given String into a String array via a StringTokenizer. Trims tokens and omits empty tokens. <p> The given delimiters string is supposed to consist of any number of delimiter characters. Each of those characters can be used to separate tokens. A delimiter is always a single character; for multi-character delimiters, consider using <code>delimitedListToStringArray</code>"}]}, {"index": "8", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringAntPathMatcher.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringAntPathMatcher.combine", "methodParameterType": "String#String#", "methodParameterName": "pattern1#pattern2#", "methodBody": "public String combine(String pattern1, String pattern2) {\n        if (!SpringStringUtils.hasText(pattern1) && !SpringStringUtils.hasText(pattern2)) {\n            return \"\";\n        } else if (!SpringStringUtils.hasText(pattern1)) {\n            return pattern2;\n        } else if (!SpringStringUtils.hasText(pattern2)) {\n            return pattern1;\n        } else if (!pattern1.contains(\"{\") && match(pattern1, pattern2)) {\n            return pattern2;\n        } else if (pattern1.endsWith(\"/*\")) {\n            if (pattern2.startsWith(\"/\")) {\n                // /hotels/* + /booking -> /hotels/booking\n                return pattern1.substring(0, pattern1.length() - 1) + pattern2.substring(1);\n            } else {\n                // /hotels/* + booking -> /hotels/booking\n                return pattern1.substring(0, pattern1.length() - 1) + pattern2;\n            }\n        } else if (pattern1.endsWith(\"/**\")) {\n            if (pattern2.startsWith(\"/\")) {\n                // /hotels/** + /booking -> /hotels/**/booking\n                return pattern1 + pattern2;\n            } else {\n                // /hotels/** + booking -> /hotels/**/booking\n                return pattern1 + \"/\" + pattern2;\n            }\n        } else {\n            int dotPos1 = pattern1.indexOf('.');\n            if (dotPos1 == -1) {\n                // simply concatenate the two patterns\n                if (pattern1.endsWith(\"/\") || pattern2.startsWith(\"/\")) {\n                    return pattern1 + pattern2;\n                } else {\n                    return pattern1 + \"/\" + pattern2;\n                }\n            }\n            String fileName1 = pattern1.substring(0, dotPos1);\n            String extension1 = pattern1.substring(dotPos1);\n            String fileName2;\n            String extension2;\n            int dotPos2 = pattern2.indexOf('.');\n            if (dotPos2 != -1) {\n                fileName2 = pattern2.substring(0, dotPos2);\n                extension2 = pattern2.substring(dotPos2);\n            } else {\n                fileName2 = pattern2;\n                extension2 = \"\";\n            }\n            String fileName = fileName1.endsWith(\"*\") ? fileName2 : fileName1;\n            String extension = extension1.startsWith(\"*\") ? extension2 : extension1;\n\n            return fileName + extension;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#StringLiteral#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#ReturnStatement#Block#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#SimpleName#StringLiteral#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#Block#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#SimpleName#StringLiteral#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression)ReturnStatement)Block(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Combines two patterns into a new pattern that is returned. <p> This implementation simply concatenates the two patterns, unless the first pattern contains a file extension match (such as  {@code", "call_func_name": ["com.astamuse.asta4d.web.copyleft.SpringStringUtils.hasText", "java.lang.String.contains", "com.astamuse.asta4d.web.copyleft.SpringAntPathMatcher.match", "java.lang.String.endsWith", "java.lang.String.startsWith", "java.lang.StringBuilder.<init>", "java.lang.String.length", "java.lang.String.substring", "java.lang.StringBuilder.append", "java.lang.String.substring", "java.lang.StringBuilder.toString", "java.lang.String.indexOf"], "call_func_parameter": [["java.lang.String"], ["java.lang.CharSequence"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], [""], ["int", "int"], ["java.lang.String"], ["int"], [""], ["int"]], "passed_comments": [{"com.astamuse.asta4d.web.copyleft.SpringStringUtils.hasText": "Check whether the given String has actual text. More specifically, returns <code>true</code> if the string not <code>null</code>, its length is greater than 0, and it contains at least one non-whitespace character."}]}, {"index": "9", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringAntPathMatcher.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringAntPathMatcher.getPatternComparator", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public Comparator<String> getPatternComparator(String path) {\n        return new AntPatternComparator(path);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Given a full path, returns a  {@link Comparator} suitable for sortingpatterns in order of explicitness. <p> The returned <code>Comparator</code> will {@linkplain java.util.Collections#sort(java.util.List,java.util.Comparator) sort} a list so that more specific patterns (without uri templates orwild cards) come before generic patterns. So given a list with the following patterns: <ol> <li><code>/hotels/new</code></li> <li><code>/hotels/{hotel}</code></li> <li><code>/hotels/", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringAntPathStringMatcher.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringAntPathStringMatcher.SpringAntPathStringMatcher", "methodParameterType": "String#String#Map<String,String>#", "methodParameterName": "pattern#str#uriTemplateVariables#", "methodBody": "SpringAntPathStringMatcher(String pattern, String str, Map<String, String> uriTemplateVariables) {\n        this.str = str;\n        this.uriTemplateVariables = uriTemplateVariables;\n        this.pattern = createPattern(pattern);\n    }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct a new instance of the <code>AntPatchStringMatcher</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringAntPathStringMatcher.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringAntPathStringMatcher.matchStrings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean matchStrings() {\n        Matcher matcher = pattern.matcher(str);\n        if (matcher.matches()) {\n            if (uriTemplateVariables != null) {\n                // SPR-8455\n                Validate.isTrue(variableNames.size() == matcher.groupCount(), \"The number of capturing groups in the pattern segment \" +\n                        pattern + \" does not match the number of URI template variables it defines, which can occur if \" +\n                        \" capturing groups are used in a URI template regex. Use non-capturing groups instead.\");\n                for (int i = 1; i <= matcher.groupCount(); i++) {\n                    String name = this.variableNames.get(i - 1);\n                    String value = matcher.group(i);\n                    uriTemplateVariables.put(name, value);\n                }\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#StringLiteral#SimpleName#StringLiteral#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Main entry point.", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.List.size", "java.util.regex.Matcher.groupCount", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.commons.lang3.Validate.isTrue", "java.util.List.get", "java.util.regex.Matcher.group", "java.util.Map.put"], "call_func_parameter": [["java.lang.CharSequence"], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["boolean", "java.lang.String", "java.lang.Object[]"], ["int"], ["int"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringStringUtils.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringStringUtils.tokenizeToStringArray", "methodParameterType": "String#String#", "methodParameterName": "str#delimiters#", "methodBody": "public static String[] tokenizeToStringArray(String str, String delimiters) {\n        return tokenizeToStringArray(str, delimiters, true, true);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tokenize the given String into a String array via a StringTokenizer. Trims tokens and omits empty tokens. <p> The given delimiters string is supposed to consist of any number of delimiter characters. Each of those characters can be used to separate tokens. A delimiter is always a single character; for multi-character delimiters, consider using <code>delimitedListToStringArray</code>", "call_func_name": ["com.astamuse.asta4d.web.copyleft.SpringStringUtils.tokenizeToStringArray"], "call_func_parameter": [["java.lang.String", "java.lang.String", "boolean", "boolean"]], "passed_comments": [{"com.astamuse.asta4d.web.copyleft.SpringStringUtils.tokenizeToStringArray": "Tokenize the given String into a String array via a StringTokenizer. <p> The given delimiters string is supposed to consist of any number of delimiter characters. Each of those characters can be used to separate tokens. A delimiter is always a single character; for multi-character delimiters, consider using <code>delimitedListToStringArray</code>"}]}, {"index": "13", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringStringUtils.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringStringUtils.tokenizeToStringArray", "methodParameterType": "String#String#boolean#boolean#", "methodParameterName": "str#delimiters#trimTokens#ignoreEmptyTokens#", "methodBody": "public static String[] tokenizeToStringArray(String str, String delimiters, boolean trimTokens, boolean ignoreEmptyTokens) {\n\n        if (str == null) {\n            return null;\n        }\n        StringTokenizer st = new StringTokenizer(str, delimiters);\n        List<String> tokens = new ArrayList<String>();\n        while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (trimTokens) {\n                token = token.trim();\n            }\n            if (!ignoreEmptyTokens || token.length() > 0) {\n                tokens.add(token);\n            }\n        }\n        return toStringArray(tokens);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tokenize the given String into a String array via a StringTokenizer. <p> The given delimiters string is supposed to consist of any number of delimiter characters. Each of those characters can be used to separate tokens. A delimiter is always a single character; for multi-character delimiters, consider using <code>delimitedListToStringArray</code>", "call_func_name": ["java.util.StringTokenizer.<init>", "java.util.ArrayList.<init>", "java.util.StringTokenizer.hasMoreTokens", "java.util.StringTokenizer.nextToken", "java.lang.String.trim", "java.lang.String.length", "java.util.List.add", "com.astamuse.asta4d.web.copyleft.SpringStringUtils.toStringArray"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.Object"], ["java.util.Collection"]], "passed_comments": [{"com.astamuse.asta4d.web.copyleft.SpringStringUtils.toStringArray": "Copy the given Collection into a String array. The Collection must contain String elements only."}]}, {"index": "14", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringStringUtils.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringStringUtils.toStringArray", "methodParameterType": "Collection<String>#", "methodParameterName": "collection#", "methodBody": "public static String[] toStringArray(Collection<String> collection) {\n        if (collection == null) {\n            return null;\n        }\n        return collection.toArray(new String[collection.size()]);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Copy the given Collection into a String array. The Collection must contain String elements only.", "call_func_name": ["java.util.Collection.size", "java.util.Collection.toArray"], "call_func_parameter": [[""], ["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringStringUtils.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringStringUtils.toStringArray", "methodParameterType": "Enumeration<String>#", "methodParameterName": "enumeration#", "methodBody": "public static String[] toStringArray(Enumeration<String> enumeration) {\n        if (enumeration == null) {\n            return null;\n        }\n        List<String> list = Collections.list(enumeration);\n        return list.toArray(new String[list.size()]);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Copy the given Enumeration into a String array. The Enumeration must contain String elements only.", "call_func_name": ["java.util.Collections.list", "java.util.List.size", "java.util.List.toArray"], "call_func_parameter": [["java.util.Enumeration"], [""], ["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringStringUtils.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringStringUtils.hasLength", "methodParameterType": "CharSequence#", "methodParameterName": "str#", "methodBody": "public static boolean hasLength(CharSequence str) {\n        return (str != null && str.length() > 0);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check that the given CharSequence is neither <code>null</code> nor of length 0. Note: Will return <code>true</code> for a CharSequence that purely consists of whitespace. <p> <pre> StringUtils.hasLength(null) = false StringUtils.hasLength(\"\") = false StringUtils.hasLength(\" \") = true StringUtils.hasLength(\"Hello\") = true </pre>", "call_func_name": ["java.lang.CharSequence.length"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringStringUtils.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringStringUtils.hasLength", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "public static boolean hasLength(String str) {\n        return hasLength((CharSequence) str);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check that the given String is neither <code>null</code> nor of length 0. Note: Will return <code>true</code> for a String that purely consists of whitespace.", "call_func_name": ["com.astamuse.asta4d.web.copyleft.SpringStringUtils.hasLength"], "call_func_parameter": [["java.lang.CharSequence"]], "passed_comments": [{"com.astamuse.asta4d.web.copyleft.SpringStringUtils.hasLength": "Check that the given CharSequence is neither <code>null</code> nor of length 0. Note: Will return <code>true</code> for a CharSequence that purely consists of whitespace. <p> <pre> StringUtils.hasLength(null) = false StringUtils.hasLength(\"\") = false StringUtils.hasLength(\" \") = true StringUtils.hasLength(\"Hello\") = true </pre>"}]}, {"index": "18", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringStringUtils.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringStringUtils.hasText", "methodParameterType": "CharSequence#", "methodParameterName": "str#", "methodBody": "public static boolean hasText(CharSequence str) {\n        if (!hasLength(str)) {\n            return false;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            if (!Character.isWhitespace(str.charAt(i))) {\n                return true;\n            }\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the given CharSequence has actual text. More specifically, returns <code>true</code> if the string not <code>null</code>, its length is greater than 0, and it contains at least one non-whitespace character. <p> <pre> StringUtils.hasText(null) = false StringUtils.hasText(\"\") = false StringUtils.hasText(\" \") = false StringUtils.hasText(\"12345\") = true StringUtils.hasText(\" 12345 \") = true </pre>", "call_func_name": ["com.astamuse.asta4d.web.copyleft.SpringStringUtils.hasLength", "java.lang.CharSequence.length", "java.lang.CharSequence.charAt", "java.lang.Character.isWhitespace"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["int"], ["char"]], "passed_comments": [{"com.astamuse.asta4d.web.copyleft.SpringStringUtils.hasLength": "Check that the given CharSequence is neither <code>null</code> nor of length 0. Note: Will return <code>true</code> for a CharSequence that purely consists of whitespace. <p> <pre> StringUtils.hasLength(null) = false StringUtils.hasLength(\"\") = false StringUtils.hasLength(\" \") = true StringUtils.hasLength(\"Hello\") = true </pre>"}]}, {"index": "19", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringStringUtils.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringStringUtils.hasText", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "public static boolean hasText(String str) {\n        return hasText((CharSequence) str);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check whether the given String has actual text. More specifically, returns <code>true</code> if the string not <code>null</code>, its length is greater than 0, and it contains at least one non-whitespace character.", "call_func_name": ["com.astamuse.asta4d.web.copyleft.SpringStringUtils.hasText"], "call_func_parameter": [["java.lang.CharSequence"]], "passed_comments": [{"com.astamuse.asta4d.web.copyleft.SpringStringUtils.hasText": "Check whether the given CharSequence has actual text. More specifically, returns <code>true</code> if the string not <code>null</code>, its length is greater than 0, and it contains at least one non-whitespace character. <p> <pre> StringUtils.hasText(null) = false StringUtils.hasText(\"\") = false StringUtils.hasText(\" \") = false StringUtils.hasText(\"12345\") = true StringUtils.hasText(\" 12345 \") = true </pre>"}]}, {"index": "20", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/copyleft/SpringStringUtils.java", "methodName": "com.astamuse.asta4d.web.copyleft.SpringStringUtils.countOccurrencesOf", "methodParameterType": "String#String#", "methodParameterName": "str#sub#", "methodBody": "public static int countOccurrencesOf(String str, String sub) {\n        if (str == null || sub == null || str.length() == 0 || sub.length() == 0) {\n            return 0;\n        }\n        int count = 0;\n        int pos = 0;\n        int idx;\n        while ((idx = str.indexOf(sub, pos)) != -1) {\n            ++count;\n            pos = idx + sub.length();\n        }\n        return count;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#NumberLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#PrefixExpression#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Count the occurrences of the substring in string s.", "call_func_name": ["java.lang.String.length", "java.lang.String.indexOf"], "call_func_parameter": [[""], ["java.lang.String", "int"]], "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/util/timeout/DefaultSessionAwareExpirableDataManager.java", "methodName": "com.astamuse.asta4d.web.util.timeout.DefaultSessionAwareExpirableDataManager.retrieveSessionCheckId", "methodParameterType": "boolean#", "methodParameterName": "create#", "methodBody": "protected String retrieveSessionCheckId(boolean create) {\n        String sessionCheckId = null;\n        if (sessionAware) {\n            WebApplicationContext context = WebApplicationContext.getCurrentThreadWebApplicationContext();\n            sessionCheckId = context.getData(WebApplicationContext.SCOPE_SESSION, SessionCheckIdKey);\n            if (sessionCheckId == null && create) {\n                sessionCheckId = IdGenerator.createId();\n                context.setData(WebApplicationContext.SCOPE_SESSION, SessionCheckIdKey, sessionCheckId);\n            }\n        }\n        return sessionCheckId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "NOTE: Because there is no way to retrieve the session id via WebApplicationContext, thus we use a independent check id which is different from the http request session id to check whether current request client is the same client from previous request.", "call_func_name": ["com.astamuse.asta4d.web.WebApplicationContext.getCurrentThreadWebApplicationContext", "com.astamuse.asta4d.web.WebApplicationContext.getData", "com.astamuse.asta4d.util.IdGenerator.createId", "com.astamuse.asta4d.web.WebApplicationContext.setData"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.astamuse.asta4d.util.IdGenerator.createId": "a unique id with thread id embedded and a process unique(random) number, as string."}]}, {"index": "22", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/util/data/BinaryDataUtil.java", "methodName": "com.astamuse.asta4d.web.util.data.BinaryDataUtil.retrieveLastModifiedByPath", "methodParameterType": "ServletContext#ClassLoader#String#", "methodParameterName": "servletContext#classLoader#path#", "methodBody": "public final static long retrieveLastModifiedByPath(ServletContext servletContext, ClassLoader classLoader, String path) {\n        if (path.startsWith(\"file:\")) {\n            try {\n                URL url = new URL(path);\n                return retriveLastModifiedFromURL(url);\n            } catch (MalformedURLException e) {\n                throw new RuntimeException(e);\n            }\n        } else if (path.startsWith(\"classpath:\")) {\n            String cls = path.substring(\"classpath:\".length());\n            if (cls.startsWith(\"/\")) {\n                cls = cls.substring(1);\n            }\n            return retriveLastModifiedFromURL(classLoader.getResource(cls));\n        } else {\n            try {\n                return retriveLastModifiedFromURL(servletContext.getResource(path));\n            } catch (MalformedURLException e) {\n                return 0L;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NumberLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "@param servletContext", "call_func_name": ["java.lang.String.startsWith", "java.net.URL.<init>", "com.astamuse.asta4d.web.util.data.BinaryDataUtil.retriveLastModifiedFromURL", "java.lang.RuntimeException.<init>", "java.lang.String.length", "java.lang.String.substring", "java.lang.ClassLoader.getResource", "javax.servlet.ServletContext.getResource"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.net.URL"], ["java.lang.Throwable"], [""], ["int"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/util/message/DefaultMessageRenderingHelper.java", "methodName": "com.astamuse.asta4d.web.util.message.DefaultMessageRenderingHelper.renderMesssages", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Renderer renderMesssages() {\n        List<MessageHolder> allMsgList = new LinkedList<>();\n\n        allMsgList.addAll(messageList.get());\n\n        if (allMsgList.isEmpty()) {\n            return null;\n        }\n        Renderer renderer = Renderer.create();\n\n        final Map<MessageRenderingSelector, List<MessageHolder>> msgMap = new HashMap<>();\n        final Map<MessageRenderingSelector, List<String>> alternativeMsgMap = new HashMap<>();\n        List<MessageHolder> tmpList;\n        for (MessageHolder mh : allMsgList) {\n            tmpList = msgMap.get(mh.selector);\n            if (tmpList == null) {\n                tmpList = new LinkedList<>();\n                msgMap.put(mh.selector, tmpList);\n            }\n            tmpList.add(mh);\n        }\n\n        renderer.disableMissingSelectorWarning();\n\n        for (final Entry<MessageRenderingSelector, List<MessageHolder>> item : msgMap.entrySet()) {\n            if (item.getKey() == null) {\n                List<String> list;\n                for (MessageHolder mh : item.getValue()) {\n                    list = alternativeMsgMap.get(mh.alternativeSelector);\n                    if (list == null) {\n                        list = new LinkedList<>();\n                        alternativeMsgMap.put(mh.alternativeSelector, list);\n                    }\n                    list.add(mh.message);\n                }\n            } else {\n                final MessageRenderingSelector selector = item.getKey();\n                renderer.add(selector.duplicator, item.getValue(), (MessageHolder obj) -> {\n                    Renderer render = Renderer.create(selector.valueTarget, obj.message);\n                    render.add(\":root\", messageDuplicatorIndicatorAttrName, Clear);\n                    return render;\n                });\n                renderer.add(new ElementNotFoundHandler(selector.duplicator) {\n                    @Override\n                    public Renderer alternativeRenderer() {\n                        List<String> list;\n                        for (MessageHolder mh : item.getValue()) {\n                            list = alternativeMsgMap.get(mh.alternativeSelector);\n                            if (list == null) {\n                                list = new LinkedList<>();\n                                alternativeMsgMap.put(mh.alternativeSelector, list);\n                            }\n                            list.add(mh.message);\n                        }\n                        return Renderer.create();\n                    }\n                });\n            }\n        } // end for loop\n\n        renderer.enableMissingSelectorWarning();\n\n        renderer.add(messageGlobalContainerParentSelector, new Renderable() {\n            @Override\n            public Renderer render() {\n                Renderer renderer = Renderer.create();\n                if (!alternativeMsgMap.isEmpty()) {\n                    renderer.add(new ElementNotFoundHandler(messageGlobalContainerSelector) {\n                        @Override\n                        public Renderer alternativeRenderer() {\n                            // add global message container if not exists\n                            return Renderer.create(\":root\", new ElementSetter() {\n                                @Override\n                                public void set(Element elem) {\n                                    List<Element> elems = new ArrayList<>(retrieveCachedContainerSnippet());\n                                    Collections.reverse(elems);\n                                    for (Element child : elems) {\n                                        elem.prependChild(child.clone());\n                                    }\n                                }\n                            });\n                        }// alternativeRenderer\n                    });// ElementNotFoundHandler\n\n                    renderer.add(messageGlobalContainerSelector, new Renderable() {\n                        @Override\n                        public Renderer render() {\n                            Renderer alternativeMsgRenderer = Renderer.create();\n                            for (final Entry<MessageRenderingSelector, List<String>> item : alternativeMsgMap.entrySet()) {\n                                final MessageRenderingSelector selector = item.getKey();\n                                alternativeMsgRenderer.add(selector.duplicator, item.getValue(), (String msg) -> {\n                                    Renderer render = Renderer.create(selector.valueTarget, msg);\n                                    render.add(\":root\", messageDuplicatorIndicatorAttrName, Clear);\n                                    return render;\n                                });\n                            }\n                            return alternativeMsgRenderer;\n                        }\n                    });// messageGlobalContainerSelector\n                }\n                return renderer;\n            }\n        });\n\n        return renderer;\n\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Pair.left: whether the alternative message container is necessary <br>Pair.right: the actual renderer", "call_func_name": ["java.util.LinkedList.<init>", "com.astamuse.asta4d.data.ContextBindData.get", "java.util.List.addAll", "java.util.List.isEmpty", "com.astamuse.asta4d.render.Renderer.create", "java.util.HashMap.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Map.get", "java.util.Map.put", "java.util.List.add", "com.astamuse.asta4d.render.Renderer.disableMissingSelectorWarning", "java.util.Map.entrySet", "java.util.Set.iterator", "com.astamuse.asta4d.render.Renderer.add", "com.astamuse.asta4d.render.Renderer.add", "com.astamuse.asta4d.render.Renderer.enableMissingSelectorWarning", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [[""], [""], ["java.util.Collection"], [""], [""], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], [""], [""], [""], ["java.lang.String", "java.lang.Iterable", "java.util.function.Function"], ["com.astamuse.asta4d.render.Renderer"], [""], ["java.lang.String", "com.astamuse.asta4d.render.Renderable"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "This method is a convenience to creating an instance of  {@link GoThroughRenderer}"}, {"com.astamuse.asta4d.render.Renderer.disableMissingSelectorWarning": "@return a renderer reference for chain calling"}, {"com.astamuse.asta4d.render.Renderer.add": "Create a renderer for list rendering by given parameter with given  {@link RowConvertor} and add it to the current renderer. See{@link #create(String,Iterable,Function)}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}, {"com.astamuse.asta4d.render.Renderer.enableMissingSelectorWarning": "@return a renderer reference for chain calling"}, {"com.astamuse.asta4d.render.Renderer.add": "Create a renderer for delayed rendering callback. See  {@link #create(String,Renderable)}."}]}, {"index": "24", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/builtin/StaticResourceHandler.java", "methodName": "com.astamuse.asta4d.web.builtin.StaticResourceHandler.judgContentType", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "protected String judgContentType(String path) {\n\n        Context context = Context.getCurrentThreadContext();\n\n        String forceContentType = context.getData(WebApplicationContext.SCOPE_PATHVAR, VAR_CONTENT_TYPE);\n        if (forceContentType != null) {\n            return forceContentType;\n        }\n\n        String fileName = FilenameUtils.getName(path);\n\n        // guess the type by file name extension\n        String type = URLConnection.guessContentTypeFromName(fileName);\n\n        if (type == null) {\n            type = MimeTypeMap.get(FilenameUtils.getExtension(fileName));\n        }\n\n        if (type == null) {\n            type = \"application/octet-stream\";\n        }\n        return type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The header value of Content-Type", "call_func_name": ["com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.Context.getData", "org.apache.commons.io.FilenameUtils.getName", "java.net.URLConnection.guessContentTypeFromName", "org.apache.commons.io.FilenameUtils.getExtension", "java.util.Map.get"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/builtin/StaticResourceHandler.java", "methodName": "com.astamuse.asta4d.web.builtin.StaticResourceHandler.decideCacheTime", "methodParameterType": "String#String#", "methodParameterName": "requiredPath#actualTargetFilePath#", "methodBody": "protected long decideCacheTime(String requiredPath, String actualTargetFilePath) {\n        Long varCacheTime = Context.getCurrentThreadContext().getData(WebApplicationContext.SCOPE_PATHVAR, VAR_CACHE_TIME);\n        if (varCacheTime != null) {\n            return varCacheTime;\n        } else {\n            return DefaultCacheTime;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "The header value of Cache-control and Expires. override this method to supply the specialized cache time.", "call_func_name": ["com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.Context.getData", "java.lang.Long.longValue"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""]], "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/builtin/StaticResourceHandler.java", "methodName": "com.astamuse.asta4d.web.builtin.StaticResourceHandler.getLastModifiedTime", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "protected long getLastModifiedTime(String path) {\n        WebApplicationContext context = Context.getCurrentThreadContext();\n        Long varLastModified = context.getData(WebApplicationContext.SCOPE_PATHVAR, VAR_LAST_MODIFIED);\n        if (varLastModified != null) {\n            return varLastModified;\n        } else {\n            long retrieveTime = BinaryDataUtil.retrieveLastModifiedByPath(context.getServletContext(), this.getClass().getClassLoader(),\n                    path);\n            if (retrieveTime == 0L) {\n                return DefaultLastModified;\n            } else {\n                return retrieveTime;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "The header value of Last-Modified. override this method to supply the specialized last modified time", "call_func_name": ["com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.web.WebApplicationContext.getData", "java.lang.Long.longValue", "com.astamuse.asta4d.web.WebApplicationContext.getServletContext", "java.lang.Object.getClass", "java.lang.Class.getClassLoader", "com.astamuse.asta4d.web.util.data.BinaryDataUtil.retrieveLastModifiedByPath"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], [""], [""], ["javax.servlet.ServletContext", "java.lang.ClassLoader", "java.lang.String"]], "passed_comments": [{"com.astamuse.asta4d.web.util.data.BinaryDataUtil.retrieveLastModifiedByPath": "@param servletContext"}]}, {"index": "27", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/builtin/StaticResourceHandler.java", "methodName": "com.astamuse.asta4d.web.builtin.StaticResourceHandler.getContentCacheSizeLimit", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "protected int getContentCacheSizeLimit(String path) {\n        Integer varCacheSize = Context.getCurrentThreadContext().getData(WebApplicationContext.SCOPE_PATHVAR,\n                VAR_CONTENT_CACHE_SIZE_LIMIT_K);\n        if (varCacheSize != null) {\n            return varCacheSize * 1000;\n        } else {\n            return 0;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#NumberLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the max cachable size limit for a certain path in byte unit.Be care of that the path var is set by kilobyte unit for convenience but this method will return in byte unit. <br> This is a default implementation which does not see the path and will return 0 for not caching when path var is not set. <p> Note: we do not cache it by default because the resources in war should have been cached by the servlet container.", "call_func_name": ["com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.Context.getData", "java.lang.Integer.intValue"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""]], "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/servlet/Asta4dServlet.java", "methodName": "com.astamuse.asta4d.web.servlet.Asta4dServlet.service", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void service() throws Exception {\n        if (Configuration.getConfiguration().isCacheEnable()) {\n            dispatcher.dispatchAndProcess(ruleList);\n        } else {\n            dispatcher.dispatchAndProcess(createRuleList());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Subclass can override this method to do something before or after real service process. eg.  {@link WebApplicationContext#setAccessURI(String)} can be called before this method to rewrite access uri.", "call_func_name": ["com.astamuse.asta4d.Configuration.getConfiguration", "com.astamuse.asta4d.Configuration.isCacheEnable", "com.astamuse.asta4d.web.dispatch.RequestDispatcher.dispatchAndProcess", "com.astamuse.asta4d.web.servlet.Asta4dServlet.createRuleList"], "call_func_parameter": [[""], [""], ["java.util.List"], [""]], "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/field/SimpleFormFieldPrepareRenderer.java", "methodName": "com.astamuse.asta4d.web.form.field.SimpleFormFieldPrepareRenderer.SimpleFormFieldPrepareRenderer", "methodParameterType": "String#", "methodParameterName": "fieldName#", "methodBody": "@Deprecated\n    public SimpleFormFieldPrepareRenderer(String fieldName) {\n        givenFieldName = fieldName;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "this constructor is for test purpose, DO NOT USE IT!!!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/field/SimpleFormFieldPrepareRenderer.java", "methodName": "com.astamuse.asta4d.web.form.field.SimpleFormFieldPrepareRenderer.getGivenFieldName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public String getGivenFieldName() {\n        return givenFieldName;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "this method is for test purpose, DO NOT USE IT!!!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/field/impl/CheckboxPrepareRenderer.java", "methodName": "com.astamuse.asta4d.web.form.field.impl.CheckboxPrepareRenderer.CheckboxPrepareRenderer", "methodParameterType": "String#", "methodParameterName": "fieldName#", "methodBody": "@Deprecated\n    public CheckboxPrepareRenderer(String fieldName) {\n        super(fieldName);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "For test purpose, DO NOT USE IT!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "32", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/field/impl/RadioPrepareRenderer.java", "methodName": "com.astamuse.asta4d.web.form.field.impl.RadioPrepareRenderer.RadioPrepareRenderer", "methodParameterType": "String#", "methodParameterName": "fieldName#", "methodBody": "@Deprecated\n    public RadioPrepareRenderer(String fieldName) {\n        super(fieldName);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "for test purpose, DO NOT USE IT!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/field/impl/AbstractRadioAndCheckboxRenderer.java", "methodName": "com.astamuse.asta4d.web.form.field.impl.AbstractRadioAndCheckboxRenderer.allowNonIdItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected boolean allowNonIdItems() {\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "By default, there must be an id for every radio/checkbox item.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/field/impl/SelectPrepareRenderer.java", "methodName": "com.astamuse.asta4d.web.form.field.impl.SelectPrepareRenderer.SelectPrepareRenderer", "methodParameterType": "String#", "methodParameterName": "fieldName#", "methodBody": "@Deprecated\n    public SelectPrepareRenderer(String fieldName) {\n        super(fieldName);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "for test purpose, DO NOT USE IT!!!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/field/impl/AbstractRadioAndCheckboxPrepareRenderer.java", "methodName": "com.astamuse.asta4d.web.form.field.impl.AbstractRadioAndCheckboxPrepareRenderer.AbstractRadioAndCheckboxPrepareRenderer", "methodParameterType": "String#", "methodParameterName": "fieldName#", "methodBody": "@Deprecated\n    public AbstractRadioAndCheckboxPrepareRenderer(String fieldName) {\n        super(fieldName);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "For test purpose", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "36", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/field/impl/AbstractRadioAndCheckboxPrepareRenderer.java", "methodName": "com.astamuse.asta4d.web.form.field.impl.AbstractRadioAndCheckboxPrepareRenderer.getTypeString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract String getTypeString();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "for log purpose, \"radio\" or \"checkbox\" is expected.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/field/impl/AbstractRadioAndCheckboxPrepareRenderer.java", "methodName": "com.astamuse.asta4d.web.form.field.impl.AbstractRadioAndCheckboxPrepareRenderer.setLabelWrapperIndicatorAttr", "methodParameterType": "String#", "methodParameterName": "attrName#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public T setLabelWrapperIndicatorAttr(String attrName) {\n        this.labelWrapperIndicatorAttr = attrName;\n        return (T) this;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#ThisExpression#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "By default, there must be a label tag which \"for\" attribute is specified to the against input element, then this prepare renderer will use a select as \"label[for=id]\" to retrieve the label element of the input element. <br> User can specify a special attribute name to tell this prepare renderer to use selector as \"[attrName=id]\" to retrieve the against label element which may be a label element with some decorating outer parent elements.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/field/impl/AbstractRadioAndCheckboxPrepareRenderer.java", "methodName": "com.astamuse.asta4d.web.form.field.impl.AbstractRadioAndCheckboxPrepareRenderer.setInputIdByValue", "methodParameterType": "boolean#", "methodParameterName": "inputIdByValue#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public T setInputIdByValue(boolean inputIdByValue) {\n        this.inputIdByValue = inputIdByValue;\n        return (T) this;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#ThisExpression#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This prepare renderer will generate new uuids for duplicated input elements but it make test verification difficult. specify true for inputIdByValue will make the generated id fixed to the test value. <p> <b>NOTE:</b> This method is for test purpose and we do not recommend to use it in normal rendering logic.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/field/impl/AbstractRadioAndCheckboxPrepareRenderer.java", "methodName": "com.astamuse.asta4d.web.form.field.impl.AbstractRadioAndCheckboxPrepareRenderer.setDuplicateSelector", "methodParameterType": "String#", "methodParameterName": "duplicateSelector#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public T setDuplicateSelector(String duplicateSelector) {\n        this.duplicateSelector = duplicateSelector;\n        return (T) this;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#ThisExpression#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This prepare renderer will simply duplicate the continuous input/label pair. If the duplicateSelector is specified, the duplicateSelector will be used to duplicate the target element which is assumed to be containing the actual input/label pair.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/field/SimpleFormFieldValueRenderer.java", "methodName": "com.astamuse.asta4d.web.form.field.SimpleFormFieldValueRenderer.renderForDisplay", "methodParameterType": "String#String#String#", "methodParameterName": "editTargetSelector#displayTargetSelector#nonNullString#", "methodBody": "protected Renderer renderForDisplay(final String editTargetSelector, final String displayTargetSelector, final String nonNullString) {\n        // hide the edit element\n        Renderer render = Renderer.create(\":root\", new Renderable() {\n            @Override\n            public Renderer render() {\n                return hideTarget(editTargetSelector);\n            }\n        });\n\n        render.disableMissingSelectorWarning();\n\n        // render.addDebugger(\"before \" + displayTargetSelector);\n\n        // render the shown value to target element by displayTargetSelector\n        render.add(displayTargetSelector, new Renderable() {\n\n            @Override\n            public Renderer render() {\n                return renderToDisplayTarget(displayTargetSelector, nonNullString);\n            }\n        });\n\n        // if the element by displayTargetSelector does not exists, simply add a span to show the value.\n        // since ElementNotFoundHandler has been delayed, so the Renderable is not necessary\n        render.add(new ElementNotFoundHandler(displayTargetSelector) {\n            @Override\n            public Renderer alternativeRenderer() {\n                return addAlternativeDom(editTargetSelector, nonNullString);\n            }\n        });\n\n        render.enableMissingSelectorWarning();\n        return render;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "All the sub rendering is delayed by  {@link Renderable}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.disableMissingSelectorWarning", "com.astamuse.asta4d.render.Renderer.add", "com.astamuse.asta4d.render.Renderer.add", "com.astamuse.asta4d.render.Renderer.enableMissingSelectorWarning"], "call_func_parameter": [["java.lang.String", "com.astamuse.asta4d.render.Renderable"], [""], ["java.lang.String", "com.astamuse.asta4d.render.Renderable"], ["com.astamuse.asta4d.render.Renderer"], [""]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for delayed rendering callback <p> The target element specified by the given selector will be renderer by the returned value of  {@link Renderable#render()} which willnot be invoked until the target element is actually requiring the rendering action."}, {"com.astamuse.asta4d.render.Renderer.disableMissingSelectorWarning": "@return a renderer reference for chain calling"}, {"com.astamuse.asta4d.render.Renderer.add": "Create a renderer for delayed rendering callback. See  {@link #create(String,Renderable)}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}, {"com.astamuse.asta4d.render.Renderer.enableMissingSelectorWarning": "@return a renderer reference for chain calling"}]}, {"index": "41", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/OneStepFormHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.OneStepFormHandlerTrait.firstStepName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    default String firstStepName() {\n        return ClassicalFormFlowConstant.STEP_INPUT;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see ClassicalFormFlowConstant#STEP_INPUT", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/OneStepFormHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.OneStepFormHandlerTrait.skipStoreTraceData", "methodParameterType": "String#String#FormFlowTraceData#", "methodParameterName": "currentStep#renderTargetStep#traceData#", "methodBody": "default boolean skipStoreTraceData(String currentStep, String renderTargetStep, FormFlowTraceData traceData) {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "In the parent class  {@link BasicFormFlowHandlerTrait}'s implementation of skipSaveTraceMap, it says that the sub class have the responsibility to make sure save the trace map well, thus we override it to perform the obligation. <p> The trace map will never be saved for a one step form since there is no necessary to keep the trace", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "43", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/OneStepFormHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.OneStepFormHandlerTrait.clearStoredTraceData", "methodParameterType": "String#", "methodParameterName": "traceId#", "methodBody": "@Override\n    default void clearStoredTraceData(String traceId) {\n        // do nothing\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Do nothing for clear action since we will never store trace map for a one step form flow", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "44", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/OneStepFormHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.OneStepFormHandlerTrait.retrieveTraceData", "methodParameterType": "String#", "methodParameterName": "traceId#", "methodBody": "@Override\n    default FormFlowTraceData retrieveTraceData(String traceId) {\n        return null;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "always return null since we will never store trace map for a one step form flow", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "45", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/OneStepFormHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.OneStepFormHandlerTrait.createMoveTargetForStep", "methodParameterType": "String#", "methodParameterName": "step#", "methodBody": "@Override\n    default String createMoveTargetForStep(String step) {\n        // always exit the flow except the target step is the first step\n        if (firstStepName().equals(step)) {\n            return getInputTemplateFilePath();\n        } else {\n            return null;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sub classes can override this method to customize how to translate a step to a target template file path or redirect target URL.", "call_func_name": ["com.astamuse.asta4d.web.form.flow.classical.OneStepFormHandlerTrait.firstStepName", "java.lang.String.equals", "com.astamuse.asta4d.web.form.flow.classical.OneStepFormHandlerTrait.getInputTemplateFilePath"], "call_func_parameter": [[""], ["java.lang.Object"], [""]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.classical.OneStepFormHandlerTrait.firstStepName": "@see ClassicalFormFlowConstant#STEP_INPUT"}, {"com.astamuse.asta4d.web.form.flow.classical.OneStepFormHandlerTrait.getInputTemplateFilePath": "How to retrieve the target input template file path. The default is retrieving from path var scope by fixed var name {@link #VAR_INPUT_TEMPLATE_FILE}."}]}, {"index": "46", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/OneStepFormHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.OneStepFormHandlerTrait.getInputTemplateFilePath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default String getInputTemplateFilePath() {\n        return Context.getCurrentThreadContext().getData(WebApplicationContext.SCOPE_PATHVAR, VAR_INPUT_TEMPLATE_FILE);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "How to retrieve the target input template file path. The default is retrieving from path var scope by fixed var name {@link #VAR_INPUT_TEMPLATE_FILE}.", "call_func_name": ["com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.Context.getData"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "47", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.updateForm", "methodParameterType": "T#", "methodParameterName": "form#", "methodBody": "public void updateForm(T form);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sub classes must override this method to implement update logic.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "48", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.firstStepName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    default String firstStepName() {\n        return ClassicalFormFlowConstant.STEP_INPUT;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see ClassicalFormFlowConstant#STEP_INPUT", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.confirmStepName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default String confirmStepName() {\n        return ClassicalFormFlowConstant.STEP_CONFIRM;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see ClassicalFormFlowConstant#STEP_CONFIRM", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "50", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.completeStepName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default String completeStepName() {\n        return ClassicalFormFlowConstant.STEP_COMPLETE;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see ClassicalFormFlowConstant#STEP_COMPLETE", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "51", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.treatCompleteStepAsExit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default boolean treatCompleteStepAsExit() {\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub classes should decide whether they want to show a complete page or simply exit current flow. <p> The default is false, which means the complete page will be shown always.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.skipStoreTraceData", "methodParameterType": "String#String#FormFlowTraceData#", "methodParameterName": "currentStep#renderTargetStep#traceData#", "methodBody": "@Override\n    default boolean skipStoreTraceData(String currentStep, String renderTargetStep, FormFlowTraceData traceData) {\n        if (FormFlowConstants.FORM_STEP_BEFORE_FIRST.equals(currentStep)) {// init -> first\n            // when the form flow start\n            return true;\n        } else if (firstStepName().equalsIgnoreCase(currentStep) && currentStep.equalsIgnoreCase(renderTargetStep)) {// first -> first\n            // the form flow is stopped at the first step\n            return true;\n        } else if (firstStepName().equalsIgnoreCase(renderTargetStep)) { // first <- ?\n            return true;\n        } else if (completeStepName().equalsIgnoreCase(renderTargetStep)) {// ? -> complete\n            // the form flow finished\n            return true;\n        } else {\n            return false;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#BooleanLiteral#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "In the parent class  {@link BasicFormFlowHandlerTrait}'s implementation of saveTraceMap, it says that the sub class have the responsibility to make sure save the trace map well, thus we override it to perform the obligation. The trace map will not be saved when the flowing cases: <ul> <li>The form flow starts and the first step is shown as the entry of current flow <li>The form flow is returned to the first step from the first step (usually validation failed). <li>The form flow is returned to the first step from other step when the  {@link #skipSaveTraceMapWhenBackedFromOtherStep()} returnstrue <li>The form flow has finished and is moving to the finish step. </ul> From parent: <p> {@inheritDoc}", "call_func_name": ["java.lang.String.equals", "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.firstStepName", "java.lang.String.equalsIgnoreCase", "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.completeStepName"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], [""]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.firstStepName": "@see ClassicalFormFlowConstant#STEP_INPUT"}, {"com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.completeStepName": "@see ClassicalFormFlowConstant#STEP_COMPLETE"}]}, {"index": "53", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.createMoveTargetForStep", "methodParameterType": "String#", "methodParameterName": "step#", "methodBody": "@Override\n    default String createMoveTargetForStep(String step) {\n        if (step == null) {// exit flow\n            return null;\n        }\n        if (completeStepName().equalsIgnoreCase(step) && treatCompleteStepAsExit()) {\n            return null;\n        }\n        return createTemplateFilePath(getTemplateBasePath(), step);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub classes can override this method to customize how to translate a step to a target template file path or redirect target URL.", "call_func_name": ["com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.completeStepName", "java.lang.String.equalsIgnoreCase", "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.treatCompleteStepAsExit", "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.getTemplateBasePath", "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.createTemplateFilePath"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.completeStepName": "@see ClassicalFormFlowConstant#STEP_COMPLETE"}, {"com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.treatCompleteStepAsExit": "Sub classes should decide whether they want to show a complete page or simply exit current flow. <p> The default is false, which means the complete page will be shown always."}, {"com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.getTemplateBasePath": "Sub class can override this method to return the base path of target template files. By default, it retrieves the value from pathvar scope of context by key  {@link #VAR_TEMPLATE_BASE_PATH}."}, {"com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.createTemplateFilePath": "Sub class can override this method to customize how to create target template file path by given base path and step."}]}, {"index": "54", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.getTemplateBasePath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default String getTemplateBasePath() {\n        return Context.getCurrentThreadContext().getData(WebApplicationContext.SCOPE_PATHVAR, VAR_TEMPLATE_BASE_PATH);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub class can override this method to return the base path of target template files. By default, it retrieves the value from pathvar scope of context by key  {@link #VAR_TEMPLATE_BASE_PATH}.", "call_func_name": ["com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.Context.getData"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.createTemplateFilePath", "methodParameterType": "String#String#", "methodParameterName": "templateBasePath#step#", "methodBody": "default String createTemplateFilePath(String templateBasePath, String step) {\n        return templateBasePath + step + \".html\";\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub class can override this method to customize how to create target template file path by given base path and step.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.doUpdateOnValidationSuccess", "methodParameterType": "FormProcessData#", "methodParameterName": "processData#", "methodBody": "@Override\n    default boolean doUpdateOnValidationSuccess(FormProcessData processData) {\n        return confirmStepName().equalsIgnoreCase(processData.getStepCurrent()) &&\n                completeStepName().equalsIgnoreCase(processData.getStepSuccess());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Whether we should call  {@link #updateForm(Object)} when the {@link #processValidation(Object)} returns SUCCESS.", "call_func_name": ["com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.confirmStepName", "com.astamuse.asta4d.web.form.flow.base.FormProcessData.getStepCurrent", "java.lang.String.equalsIgnoreCase", "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.completeStepName", "com.astamuse.asta4d.web.form.flow.base.FormProcessData.getStepSuccess"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.confirmStepName": "@see ClassicalFormFlowConstant#STEP_CONFIRM"}, {"com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.completeStepName": "@see ClassicalFormFlowConstant#STEP_COMPLETE"}]}, {"index": "57", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.retrieveFormInstance", "methodParameterType": "FormFlowTraceData#String#", "methodParameterName": "traceData#currentStep#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    @Override\n    default T retrieveFormInstance(FormFlowTraceData traceData, String currentStep) {\n        // for confirm and complete step, the form saved at last step would be used.\n        if (confirmStepName().equalsIgnoreCase(currentStep) || completeStepName().equalsIgnoreCase(currentStep)) {\n            return (T) traceData.getStepFormMap().get(currentStep);\n        } else {\n            return UpdatableFormFlowHandlerTrait.super.retrieveFormInstance(traceData, currentStep);\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block(Block(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "This method defines the default policy of how to retrieve the form instance for current step. For confirm/complete step, we will always retrieve the form instance from the traceMap which have stored the form instance for current step at last step (when {@link #passDataToSnippet(String,String,Map)} was invoked), for other steps, the parent's implementation will be invoked.<p> From parent: <p> {@inheritDoc}", "call_func_name": ["com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.confirmStepName", "java.lang.String.equalsIgnoreCase", "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.completeStepName", "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceData.getStepFormMap", "java.util.Map.get", "com.astamuse.asta4d.web.form.flow.classical.UpdatableFormFlowHandlerTrait.retrieveFormInstance"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.Object"], ["com.astamuse.asta4d.web.form.flow.base.FormFlowTraceData", "java.lang.String"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.confirmStepName": "@see ClassicalFormFlowConstant#STEP_CONFIRM"}, {"com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.completeStepName": "@see ClassicalFormFlowConstant#STEP_COMPLETE"}]}, {"index": "58", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.passDataToSnippetByFlash", "methodParameterType": "String#String#FormFlowTraceData#", "methodParameterName": "currentStep#renderTargetStep#traceData#", "methodBody": "@Override\n    default boolean passDataToSnippetByFlash(String currentStep, String renderTargetStep, FormFlowTraceData traceData) {\n        return completeStepName().equals(renderTargetStep) && treatCompleteStepAsExit();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "When the form flow finished, if the complete page rendering is skipped( {@link #treatCompleteStepAsExit()} returns true), we have topass data to snippet via flash scope since we have to exit the current flow and the current request will be redirect by a 302 response. <p> From parent: <p> {@inheritDoc}", "call_func_name": ["com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.completeStepName", "java.lang.String.equals", "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.treatCompleteStepAsExit"], "call_func_parameter": [[""], ["java.lang.Object"], [""]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.completeStepName": "@see ClassicalFormFlowConstant#STEP_COMPLETE"}, {"com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowHandlerTrait.treatCompleteStepAsExit": "Sub classes should decide whether they want to show a complete page or simply exit current flow. <p> The default is false, which means the complete page will be shown always."}]}, {"index": "59", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/UpdatableFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.UpdatableFormFlowHandlerTrait.processForm", "methodParameterType": "FormProcessData#T#", "methodParameterName": "processData#form#", "methodBody": "@Override\n    default CommonFormResult processForm(FormProcessData processData, T form) {\n        CommonFormResult result = processValidation(processData, form);\n        if (result == CommonFormResult.SUCCESS && doUpdateOnValidationSuccess(processData)) {\n            try {\n                updateForm(form);\n                return CommonFormResult.SUCCESS;\n            } catch (Exception ex) {\n                LoggerFactory.getLogger(this.getClass()).error(\"error occured on step:\" + processData.getStepCurrent(), ex);\n                return CommonFormResult.FAILED;\n            }\n        } else {\n            return result;\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#CatchClause#TryStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)CatchClause)TryStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "This method will call  {@link #updateForm(Object)} when the validation is success and the{@link #doUpdateOnValidationSuccess(FormProcessData)} returns true.<p> From parent: <p> {@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/UpdatableFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.UpdatableFormFlowHandlerTrait.doUpdateOnValidationSuccess", "methodParameterType": "FormProcessData#", "methodParameterName": "processData#", "methodBody": "default boolean doUpdateOnValidationSuccess(FormProcessData processData) {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Whether we should call  {@link #updateForm(Object)} when the {@link #processValidation(Object)} returns SUCCESS. The default is true.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "61", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/UpdatableFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.UpdatableFormFlowHandlerTrait.updateForm", "methodParameterType": "T#", "methodParameterName": "form#", "methodBody": "public void updateForm(T form);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sub classes must override this method to implement update logic.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "62", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/classical/ClassicalMultiStepFormFlowSnippetTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.classical.ClassicalMultiStepFormFlowSnippetTrait.renderForEdit", "methodParameterType": "String#Object#String#", "methodParameterName": "step#form#fieldName#", "methodBody": "@Override\n    default boolean renderForEdit(String step, Object form, String fieldName) {\n        if (StringUtils.isEmpty(step)) {\n            return true;\n        } else {\n            return !ClassicalMultiStepFormFlowTraitHelper.NonEditSteps.contains(step.toLowerCase());\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(ReturnStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "We will treat confirm and complete step as non edit step by default. <p> From parent: <p> {@inheritDoc}", "call_func_name": ["org.apache.commons.lang3.StringUtils.isEmpty", "java.lang.String.toLowerCase", "java.util.Set.contains"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/StepAwaredValidatableForm.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.StepAwaredValidatableForm.getValidationTarget", "methodParameterType": "String#", "methodParameterName": "step#", "methodBody": "default Object getValidationTarget(String step) {\n        return StepAwaredValidationFormHelper.getValidationTargetByAnnotation(this, step);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The default implementation of this method is to retrieve the field annotated by  {@link StepAwaredValidationTarget}.", "call_func_name": ["com.astamuse.asta4d.web.form.flow.base.StepAwaredValidationFormHelper.getValidationTargetByAnnotation"], "call_func_parameter": [["java.lang.Object", "java.lang.String"]], "passed_comments": "/"}, {"index": "64", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/FormFlowTraceDataAccessor.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceDataAccessor.storeTraceData", "methodParameterType": "String#String#String#FormFlowTraceData#", "methodParameterName": "currentStep#renderTargetStep#traceId#traceData#", "methodBody": "default String storeTraceData(String currentStep, String renderTargetStep, String traceId, FormFlowTraceData traceData) {\n        String storeId = StringUtils.isEmpty(traceId) ? SecureIdGenerator.createEncryptedURLSafeId() : traceId;\n        WebApplicationConfiguration.getWebApplicationConfiguration().getExpirableDataManager().put(storeId, traceData,\n                traceDataExpireTimeInMilliSeconds());\n        return storeId;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<b>Note</b>: In fact, we should not save the trace map when some steps such as init step to avoid unnecessary memory usage, thus we call the  {@link #skipSaveTraceMap(String,String,Map)} to decide save or not.<p> In other words ,the sub class have the responsibility to tell us save or not by overriding the method {@link #skipSaveTraceData(String,String,FormFlowTraceData)}.", "call_func_name": ["org.apache.commons.lang3.StringUtils.isEmpty", "com.astamuse.asta4d.web.util.SecureIdGenerator.createEncryptedURLSafeId", "com.astamuse.asta4d.web.WebApplicationConfiguration.getWebApplicationConfiguration", "com.astamuse.asta4d.web.WebApplicationConfiguration.getExpirableDataManager", "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceDataAccessor.traceDataExpireTimeInMilliSeconds", "com.astamuse.asta4d.web.util.timeout.ExpirableDataManager.put"], "call_func_parameter": [["java.lang.CharSequence"], [""], [""], [""], [""], ["java.lang.String", "java.lang.Object", "long"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.base.FormFlowTraceDataAccessor.traceDataExpireTimeInMilliSeconds": "Sub classes can override this method to customize how long the form flow trace data will keep alive. <p> The default value is 30 minutes."}]}, {"index": "65", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/FormFlowTraceDataAccessor.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceDataAccessor.skipStoreTraceData", "methodParameterType": "String#String#FormFlowTraceData#", "methodParameterName": "currentStep#renderTargetStep#traceData#", "methodBody": "default boolean skipStoreTraceData(String currentStep, String renderTargetStep, FormFlowTraceData traceData) {\n        if (FormFlowConstants.FORM_STEP_BEFORE_FIRST.equals(currentStep)) {\n            return true;\n        } else {\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Since we are lacking of necessary step information to judge if we should save or not, we only do the basic judgment for the init step. The sub class have the responsibility to handle other cases.", "call_func_name": ["java.lang.String.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/FormFlowTraceDataAccessor.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceDataAccessor.retrieveTraceData", "methodParameterType": "String#", "methodParameterName": "traceId#", "methodBody": "default FormFlowTraceData retrieveTraceData(String traceId) {\n        return WebApplicationConfiguration.getWebApplicationConfiguration().getExpirableDataManager().get(traceId,\n                removeTraceDataWhenRetrieving());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "retrieve the stored trace data.", "call_func_name": ["com.astamuse.asta4d.web.WebApplicationConfiguration.getWebApplicationConfiguration", "com.astamuse.asta4d.web.WebApplicationConfiguration.getExpirableDataManager", "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceDataAccessor.removeTraceDataWhenRetrieving", "com.astamuse.asta4d.web.util.timeout.ExpirableDataManager.get"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "boolean"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.base.FormFlowTraceDataAccessor.removeTraceDataWhenRetrieving": "@return"}]}, {"index": "67", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/FormFlowTraceDataAccessor.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceDataAccessor.removeTraceDataWhenRetrieving", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default boolean removeTraceDataWhenRetrieving() {\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/FormFlowTraceDataAccessor.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceDataAccessor.clearStoredTraceData", "methodParameterType": "String#", "methodParameterName": "traceId#", "methodBody": "default void clearStoredTraceData(String traceId) {\n        if (StringUtils.isNotEmpty(traceId)) {\n            WebApplicationConfiguration.getWebApplicationConfiguration().getExpirableDataManager().get(traceId, true);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "clear the stored trace map.", "call_func_name": ["org.apache.commons.lang3.StringUtils.isNotEmpty", "com.astamuse.asta4d.web.WebApplicationConfiguration.getWebApplicationConfiguration", "com.astamuse.asta4d.web.WebApplicationConfiguration.getExpirableDataManager", "com.astamuse.asta4d.web.util.timeout.ExpirableDataManager.get"], "call_func_parameter": [["java.lang.CharSequence"], [""], [""], ["java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/FormFlowTraceDataAccessor.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceDataAccessor.traceDataExpireTimeInMilliSeconds", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default long traceDataExpireTimeInMilliSeconds() {\n        // 30 minutes\n        return 30 * 60 * 1000L;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub classes can override this method to customize how long the form flow trace data will keep alive. <p> The default value is 30 minutes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/ValidationProcessor.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.processValidation", "methodParameterType": "FormProcessData#Object#", "methodParameterName": "processData#form#", "methodBody": "default CommonFormResult processValidation(FormProcessData processData, Object form) {\n        Object validationTarget = getValidationTarget(processData, form);\n        List<FormValidationMessage> validationMesssages = validate(validationTarget);\n        validationMesssages = postValidate(validationTarget, validationMesssages);\n        if (validationMesssages.isEmpty()) {\n            return CommonFormResult.SUCCESS;\n        } else {\n            for (FormValidationMessage msg : validationMesssages) {\n                outputValidationMessage(msg);\n            }\n            return CommonFormResult.FAILED;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sub classes can override this method to customize how to handle the validation result", "call_func_name": ["com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.getValidationTarget", "com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.validate", "com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.postValidate", "java.util.List.isEmpty", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.outputValidationMessage"], "call_func_parameter": [["com.astamuse.asta4d.web.form.flow.base.FormProcessData", "java.lang.Object"], ["java.lang.Object"], ["java.lang.Object", "java.util.List"], [""], [""], [""], [""], ["com.astamuse.asta4d.web.form.validation.FormValidationMessage"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.validate": "Sub classes can override this method to supply customized validation mechanism."}, {"com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.outputValidationMessage": "Sub classes can override this method to customize how to output validation messages"}]}, {"index": "71", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/ValidationProcessor.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.outputValidationMessage", "methodParameterType": "FormValidationMessage#", "methodParameterName": "msg#", "methodBody": "default void outputValidationMessage(FormValidationMessage msg) {\n        DefaultMessageRenderingHelper.getConfiguredInstance().err(\"#\" + msg.getFieldName() + \"-err-msg\", msg.getMessage());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sub classes can override this method to customize how to output validation messages", "call_func_name": ["com.astamuse.asta4d.web.util.message.DefaultMessageRenderingHelper.getConfiguredInstance", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.astamuse.asta4d.web.form.validation.FormValidationMessage.getFieldName", "java.lang.StringBuilder.toString", "com.astamuse.asta4d.web.form.validation.FormValidationMessage.getMessage", "com.astamuse.asta4d.web.util.message.DefaultMessageRenderingHelper.err"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/ValidationProcessor.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.validate", "methodParameterType": "Object#", "methodParameterName": "form#", "methodBody": "default List<FormValidationMessage> validate(Object form) {\n        List<FormValidationMessage> validationMessages = new LinkedList<>();\n\n        Set<String> fieldNameSet = new HashSet<String>();\n\n        List<FormValidationMessage> typeMessages = getTypeUnMatchValidator().validate(form);\n        for (FormValidationMessage message : typeMessages) {\n            validationMessages.add(message);\n            fieldNameSet.add(message.getFieldName());\n        }\n\n        List<FormValidationMessage> valueMessages = getValueValidator().validate(form);\n\n        // there may be a not null/empty value validation error for the fields which has been validated as type unmatch, we simply remove\n        // them.\n\n        for (FormValidationMessage message : valueMessages) {\n            if (!fieldNameSet.contains(message.getFieldName())) {\n                validationMessages.add(message);\n            }\n        }\n\n        return validationMessages;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub classes can override this method to supply customized validation mechanism.", "call_func_name": ["java.util.LinkedList.<init>", "java.util.HashSet.<init>", "com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.getTypeUnMatchValidator", "com.astamuse.asta4d.web.form.validation.FormValidator.validate", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.List.add", "com.astamuse.asta4d.web.form.validation.FormValidationMessage.getFieldName", "java.util.Set.add", "com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.getValueValidator", "java.util.Set.contains"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"], [""], [""], [""], ["java.lang.Object"], [""], ["java.lang.Object"], [""], ["java.lang.Object"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.getTypeUnMatchValidator": "Sub classes can override this method to supply a customized type unmatch validator"}, {"com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.getValueValidator": "Sub classes can override this method to supply a customized value validator"}]}, {"index": "73", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/ValidationProcessor.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.getTypeUnMatchValidator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default FormValidator getTypeUnMatchValidator() {\n        return new TypeUnMatchValidator();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub classes can override this method to supply a customized type unmatch validator", "call_func_name": ["com.astamuse.asta4d.web.form.validation.TypeUnMatchValidator.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "74", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/ValidationProcessor.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.ValidationProcessor.getValueValidator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default FormValidator getValueValidator() {\n        return new JsrValidator();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub classes can override this method to supply a customized value validator", "call_func_name": ["com.astamuse.asta4d.web.form.validation.JsrValidator.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "75", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowSnippetTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderForEdit", "methodParameterType": "String#Object#String#", "methodParameterName": "step#form#fieldName#", "methodBody": "default boolean renderForEdit(String step, Object form, String fieldName) {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub class should tell us the current rendering mode. Since we have no any information about the concrete cases, we always return true by default.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowSnippetTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.render", "methodParameterType": "FormRenderingData#", "methodParameterName": "renderingData#", "methodBody": "default Renderer render(FormRenderingData renderingData) throws Exception {\n        Renderer renderer = preRender(renderingData);\n        renderer.add(renderTraceId(renderingData.getTraceId()));\n        Object form = retrieveRenderTargetForm(renderingData);\n        renderer.add(renderForm(renderingData.getRenderTargetStep(), form, EMPTY_INDEXES));\n        Element clientJs = retrieveClientCascadeUtilJsContent();\n        if (clientJs != null) {\n            renderer.add(\":root\", (Element elem) -> {\n                elem.appendChild(clientJs);\n            });\n        }\n        renderer.add(postRender(renderingData));\n        return renderer;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(LambdaExpression(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The entry of form rendering. Sub classes could override it in case of necessarily.", "call_func_name": ["com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.preRender", "com.astamuse.asta4d.web.form.flow.base.FormRenderingData.getTraceId", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderTraceId", "com.astamuse.asta4d.render.Renderer.add", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.retrieveRenderTargetForm", "com.astamuse.asta4d.web.form.flow.base.FormRenderingData.getRenderTargetStep", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderForm", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.retrieveClientCascadeUtilJsContent", "com.astamuse.asta4d.render.ElementSetter.set", "com.astamuse.asta4d.render.Renderer.add", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.postRender"], "call_func_parameter": [["com.astamuse.asta4d.web.form.flow.base.FormRenderingData"], [""], ["java.lang.String"], ["com.astamuse.asta4d.render.Renderer"], ["com.astamuse.asta4d.web.form.flow.base.FormRenderingData"], [""], ["java.lang.String", "java.lang.Object", "int[]"], [""], ["org.jsoup.nodes.Element"], ["java.lang.String", "com.astamuse.asta4d.render.ElementSetter"], ["com.astamuse.asta4d.web.form.flow.base.FormRenderingData"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderTraceId": "We only render the form trace map when it exists"}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderForm": "PriorRenderMethod the whole given form instance. All the  {@link FormFieldPrepareRenderer}s would be invoked here too."}, {"com.astamuse.asta4d.render.ElementSetter.set": "reset the passed element"}, {"com.astamuse.asta4d.render.Renderer.add": "Create a renderer for element setting by given parameter and add it to the current renderer. See {@link #create(String,ElementSetter)}."}]}, {"index": "77", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowSnippetTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderTraceId", "methodParameterType": "String#", "methodParameterName": "traceId#", "methodBody": "default Renderer renderTraceId(String traceId) {\n        if (StringUtils.isEmpty(traceId)) {\n            return Renderer.create();\n        } else {\n            return Renderer.create(\":root\", new ElementSetter() {\n                @Override\n                public void set(Element elem) {\n                    Element hide = new Element(Tag.valueOf(\"input\"), \"\");\n                    hide.attr(\"name\", FormFlowConstants.FORM_FLOW_TRACE_ID_QUERY_PARAM);\n                    hide.attr(\"type\", \"hidden\");\n                    hide.attr(\"value\", traceId);\n                    elem.appendChild(hide);\n                }\n            });\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "We only render the form trace map when it exists", "call_func_name": ["org.apache.commons.lang3.StringUtils.isEmpty", "com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.create"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["java.lang.String", "com.astamuse.asta4d.render.ElementSetter"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "This method is a convenience to creating an instance of  {@link GoThroughRenderer}"}, {"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for element setting by given parameter. <p> The target element specified by the given selector will not be replaced and will be passed to the given  {@link ElementSetter} as aparameter."}]}, {"index": "78", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowSnippetTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderForm", "methodParameterType": "String#Object#int[]#", "methodParameterName": "renderTargetStep#form#indexes#", "methodBody": "default Renderer renderForm(String renderTargetStep, Object form, int[] indexes) throws Exception {\n        Renderer render = Renderer.create();\n        if (form == null) {\n            return render;\n        }\n\n        if (form instanceof StepRepresentableForm) {\n            String[] formRepresentingSteps = ((StepRepresentableForm) form).retrieveRepresentingSteps();\n            if (ArrayUtils.contains(formRepresentingSteps, renderTargetStep)) {\n                // it is OK\n            } else {\n                return render;\n            }\n        }\n\n        render.disableMissingSelectorWarning();\n\n        render.add(preRenderForm(renderTargetStep, form, indexes));\n\n        List<FormFieldPrepareRenderer> fieldDataPrepareRendererList = retrieveFieldPrepareRenderers(renderTargetStep, form);\n\n        for (FormFieldPrepareRenderer formFieldDataPrepareRenderer : fieldDataPrepareRendererList) {\n            BasicFormFlowTraitHelper.FieldRenderingInfo renderingInfo = BasicFormFlowTraitHelper.getRenderingInfo(this,\n                    formFieldDataPrepareRenderer.targetField(), indexes);\n            render.add(formFieldDataPrepareRenderer.preRender(renderingInfo.editSelector, renderingInfo.displaySelector));\n        }\n\n        render.add(renderValueOfFields(renderTargetStep, form, indexes));\n\n        for (FormFieldPrepareRenderer formFieldDataPrepareRenderer : fieldDataPrepareRendererList) {\n            BasicFormFlowTraitHelper.FieldRenderingInfo renderingInfo = BasicFormFlowTraitHelper.getRenderingInfo(this,\n                    formFieldDataPrepareRenderer.targetField(), indexes);\n            render.add(formFieldDataPrepareRenderer.postRender(renderingInfo.editSelector, renderingInfo.displaySelector));\n        }\n\n        render.add(postRenderForm(renderTargetStep, form, indexes));\n\n        return render.enableMissingSelectorWarning();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "PriorRenderMethod the whole given form instance. All the  {@link FormFieldPrepareRenderer}s would be invoked here too.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.web.form.flow.base.StepRepresentableForm.retrieveRepresentingSteps", "org.apache.commons.lang3.ArrayUtils.contains", "com.astamuse.asta4d.render.Renderer.disableMissingSelectorWarning", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.preRenderForm", "com.astamuse.asta4d.render.Renderer.add", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.retrieveFieldPrepareRenderers", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.astamuse.asta4d.web.form.field.FormFieldPrepareRenderer.targetField", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowTraitHelper.getRenderingInfo", "com.astamuse.asta4d.web.form.field.FormFieldPrepareRenderer.preRender", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderValueOfFields", "com.astamuse.asta4d.web.form.field.FormFieldPrepareRenderer.postRender", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.postRenderForm", "com.astamuse.asta4d.render.Renderer.enableMissingSelectorWarning"], "call_func_parameter": [[""], [""], ["java.lang.Object[]", "java.lang.Object"], [""], ["java.lang.String", "java.lang.Object", "int[]"], ["com.astamuse.asta4d.render.Renderer"], ["java.lang.String", "java.lang.Object"], [""], [""], [""], [""], ["com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait", "com.astamuse.asta4d.util.annotation.AnnotatedPropertyInfo", "int[]"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Object", "int[]"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Object", "int[]"], [""]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "This method is a convenience to creating an instance of  {@link GoThroughRenderer}"}, {"com.astamuse.asta4d.render.Renderer.disableMissingSelectorWarning": "@return a renderer reference for chain calling"}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.retrieveFieldPrepareRenderers": "Sub classes should override this method to supply field prepare renderers."}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderValueOfFields": "PriorRenderMethod the value of all the given form's fields.The rendering of cascade forms will be done here as well(recursively call the  {@link #renderForm(String,Object,int)})."}, {"com.astamuse.asta4d.render.Renderer.enableMissingSelectorWarning": "@return a renderer reference for chain calling"}]}, {"index": "79", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowSnippetTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderValueOfFields", "methodParameterType": "String#Object#int[]#", "methodParameterName": "renderTargetStep#form#indexes#", "methodBody": "default Renderer renderValueOfFields(String renderTargetStep, Object form, int[] indexes) throws Exception {\n        Renderer render = Renderer.create();\n        List<AnnotatedPropertyInfo> fieldList = BasicFormFlowTraitHelper.retrieveRenderTargetFieldList(form);\n\n        for (AnnotatedPropertyInfo field : fieldList) {\n\n            Object v = field.retrieveValue(form);\n\n            CascadeFormField cff = field.getAnnotation(CascadeFormField.class);\n            if (cff != null) {\n                String containerSelector = cff.containerSelector();\n\n                if (field.getType().isArray()) {// a cascade form for array\n                    int len = Array.getLength(v);\n                    List<Renderer> subRendererList = new ArrayList<>(len);\n                    int loopStart = 0;\n                    if (renderForEdit(renderTargetStep, form, cff.name())) {\n                        // for rendering a template DOM\n                        loopStart = -1;\n                    }\n                    Class<?> subFormType = field.getType().getComponentType();\n                    Object subForm;\n                    for (int i = loopStart; i < len; i++) {\n                        int[] newIndex = indexes.clone();\n\n                        // retrieve the form instance\n                        if (i >= 0) {\n                            newIndex = ArrayUtils.add(newIndex, i);\n                            subForm = Array.get(v, i);\n                        } else {\n                            // create a template instance\n                            subForm = createFormInstanceForCascadeFormArrayTemplate(subFormType);\n                        }\n\n                        Renderer subRenderer = Renderer.create();\n\n                        // only rewrite the refs for normal instances\n                        if (i >= 0) {\n                            subRenderer.add(rewriteCascadeFormFieldArrayRef(renderTargetStep, subForm, newIndex));\n                        }\n\n                        subRenderer.add(renderForm(renderTargetStep, subForm, newIndex));\n\n                        // hide the template DOM\n                        if (i < 0) {\n                            subRenderer.add(\":root\", hideCascadeFormTemplateDOM(subFormType));\n                        }\n\n                        subRendererList.add(subRenderer);\n                    }\n                    containerSelector = rewriteArrayIndexPlaceHolder(containerSelector, indexes);\n                    render.add(containerSelector, subRendererList);\n                } else {// a simple cascade form\n\n                    if (StringUtils.isNotEmpty(containerSelector)) {\n                        render.add(containerSelector, renderForm(renderTargetStep, v, indexes));\n                    } else {\n                        render.add(renderForm(renderTargetStep, v, indexes));\n                    }\n                }\n                continue;\n            }\n\n            if (v == null) {\n                @SuppressWarnings(\"rawtypes\")\n                ContextDataHolder valueHolder;\n\n                if (field.getField() != null) {\n                    valueHolder = InjectTrace.getInstanceInjectionTraceInfo(form, field.getField());\n                } else {\n                    valueHolder = InjectTrace.getInstanceInjectionTraceInfo(form, field.getSetter());\n                }\n\n                if (valueHolder != null) {\n                    v = convertRawInjectionTraceDataToRenderingData(field.getName(), field.getType(), valueHolder.getFoundOriginalData());\n                }\n            }\n\n            BasicFormFlowTraitHelper.FieldRenderingInfo renderingInfo = BasicFormFlowTraitHelper.getRenderingInfo(this, field, indexes);\n\n            // render.addDebugger(\"whole form before: \" + field.getName());\n\n            if (renderForEdit(renderTargetStep, form, field.getName())) {\n                render.add(renderingInfo.valueRenderer.renderForEdit(renderingInfo.editSelector, v));\n            } else {\n                render.add(renderingInfo.valueRenderer.renderForDisplay(renderingInfo.editSelector, renderingInfo.displaySelector, v));\n            }\n        }\n        return render;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#ContinueStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "PriorRenderMethod the value of all the given form's fields.The rendering of cascade forms will be done here as well(recursively call the  {@link #renderForm(String,Object,int)}).", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowTraitHelper.retrieveRenderTargetFieldList", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.astamuse.asta4d.util.annotation.AnnotatedPropertyInfo.retrieveValue", "com.astamuse.asta4d.util.annotation.AnnotatedPropertyInfo.getAnnotation", "com.astamuse.asta4d.web.form.annotation.CascadeFormField.containerSelector", "com.astamuse.asta4d.util.annotation.AnnotatedPropertyInfo.getType", "java.lang.Class.isArray", "java.lang.reflect.Array.getLength", "java.util.ArrayList.<init>", "com.astamuse.asta4d.web.form.annotation.CascadeFormField.name", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderForEdit", "java.lang.Class.getComponentType", "int[].clone", "org.apache.commons.lang3.ArrayUtils.add", "java.lang.reflect.Array.get", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.createFormInstanceForCascadeFormArrayTemplate", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.rewriteCascadeFormFieldArrayRef", "com.astamuse.asta4d.render.Renderer.add", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderForm", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.hideCascadeFormTemplateDOM", "com.astamuse.asta4d.render.Renderer.add", "java.util.List.add", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.rewriteArrayIndexPlaceHolder", "com.astamuse.asta4d.render.Renderer.add", "org.apache.commons.lang3.StringUtils.isNotEmpty", "com.astamuse.asta4d.util.annotation.AnnotatedPropertyInfo.getField", "com.astamuse.asta4d.data.InjectTrace.getInstanceInjectionTraceInfo", "com.astamuse.asta4d.util.annotation.AnnotatedPropertyInfo.getSetter", "com.astamuse.asta4d.data.InjectTrace.getInstanceInjectionTraceInfo", "com.astamuse.asta4d.util.annotation.AnnotatedPropertyInfo.getName", "com.astamuse.asta4d.data.ContextDataHolder.getFoundOriginalData", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.convertRawInjectionTraceDataToRenderingData", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowTraitHelper.getRenderingInfo", "com.astamuse.asta4d.web.form.field.FormFieldValueRenderer.renderForEdit", "com.astamuse.asta4d.web.form.field.FormFieldValueRenderer.renderForDisplay"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""], [""], ["java.lang.Object"], ["java.lang.Class"], [""], [""], [""], ["java.lang.Object"], ["int"], [""], ["java.lang.String", "java.lang.Object", "java.lang.String"], [""], [""], ["int[]", "int"], ["java.lang.Object", "int"], ["java.lang.Class"], ["java.lang.String", "java.lang.Object", "int[]"], ["com.astamuse.asta4d.render.Renderer"], ["java.lang.String", "java.lang.Object", "int[]"], ["java.lang.Class"], ["java.lang.String", "com.astamuse.asta4d.render.Renderer"], ["java.lang.Object"], ["java.lang.String", "int[]"], ["java.lang.String", "java.lang.Iterable"], ["java.lang.CharSequence"], [""], ["java.lang.Object", "java.lang.reflect.Field"], [""], ["java.lang.Object", "java.lang.reflect.Method"], [""], [""], ["java.lang.String", "java.lang.Class", "java.lang.Object"], ["com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait", "com.astamuse.asta4d.util.annotation.AnnotatedPropertyInfo", "int[]"], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String", "java.lang.Object"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "This method is a convenience to creating an instance of  {@link GoThroughRenderer}"}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderForEdit": "Sub class should tell us the current rendering mode. Since we have no any information about the concrete cases, we always return true by default."}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.rewriteCascadeFormFieldArrayRef": "Sub classes could override this method to customize how to rewrite the array index for cascade array forms."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.renderForm": "PriorRenderMethod the whole given form instance. All the  {@link FormFieldPrepareRenderer}s would be invoked here too."}, {"com.astamuse.asta4d.render.Renderer.add": "Create a renderer for predefined  {@link SpecialRenderer}s."}, {"com.astamuse.asta4d.render.Renderer.add": "Create a renderer for recursive renderer rendering by given parameter and add it to the current renderer. See {@link #create(String,Renderer)}."}, {"com.astamuse.asta4d.render.Renderer.add": "Create a renderer for list rendering by given parameter and add it to the current renderer. See  {@link #create(String,Iterable)}."}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.convertRawInjectionTraceDataToRenderingData": "Sub classes could override this method to customize how to handle the injection trace data for type unmatch errors."}]}, {"index": "80", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowSnippetTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.rewriteCascadeFormFieldArrayRef", "methodParameterType": "String#Object#int[]#", "methodParameterName": "renderTargetStep#form#indexes#", "methodBody": "default Renderer rewriteCascadeFormFieldArrayRef(final String renderTargetStep, final Object form, final int[] indexes) {\n\n        final String[] targetAttrs = rewriteCascadeFormFieldArrayRefTargetAttrs();\n        String[] attrSelectors = new String[targetAttrs.length];\n        for (int i = 0; i < attrSelectors.length; i++) {\n            attrSelectors[i] = SelectorUtil.attr(targetAttrs[i]);\n        }\n\n        return Renderer.create(StringUtils.join(attrSelectors, \",\"), new ElementSetter() {\n            @Override\n            public void set(Element elem) {\n                String v;\n                for (String attr : targetAttrs) {\n                    v = elem.attr(attr);\n                    if (StringUtils.isNotEmpty(v)) {\n                        elem.attr(attr, rewriteArrayIndexPlaceHolder(v, indexes));\n                    }\n                }\n            }\n        });\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub classes could override this method to customize how to rewrite the array index for cascade array forms.", "call_func_name": ["com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.rewriteCascadeFormFieldArrayRefTargetAttrs", "com.astamuse.asta4d.util.SelectorUtil.attr", "org.apache.commons.lang3.StringUtils.join", "com.astamuse.asta4d.render.Renderer.create"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object[]", "java.lang.String"], ["java.lang.String", "com.astamuse.asta4d.render.ElementSetter"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.rewriteCascadeFormFieldArrayRefTargetAttrs": "The attributes returned by this method will be rewritten for array index. <p> The default is {\"id\", \"name\", \"cascade-ref\", \"cascade-ref-target\", \"cascade-ref-info-1\", ..., \"cascade-ref-info-9\"}."}, {"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for element setting by given parameter. <p> The target element specified by the given selector will not be replaced and will be passed to the given  {@link ElementSetter} as aparameter."}]}, {"index": "81", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowSnippetTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.rewriteCascadeFormFieldArrayRefTargetAttrs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default String[] rewriteCascadeFormFieldArrayRefTargetAttrs() {\n        return BasicFormFlowTraitHelper.DefaultCascadeFormFieldArrayRefTargetAttrs;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The attributes returned by this method will be rewritten for array index. <p> The default is {\"id\", \"name\", \"cascade-ref\", \"cascade-ref-target\", \"cascade-ref-info-1\", ..., \"cascade-ref-info-9\"}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowSnippetTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.retrieveFieldPrepareRenderers", "methodParameterType": "String#Object#", "methodParameterName": "renderTargetStep#form#", "methodBody": "default List<FormFieldPrepareRenderer> retrieveFieldPrepareRenderers(String renderTargetStep, Object form) {\n        return new LinkedList<>();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub classes should override this method to supply field prepare renderers.", "call_func_name": ["java.util.LinkedList.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowSnippetTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowSnippetTrait.convertRawInjectionTraceDataToRenderingData", "methodParameterType": "String#Class<?>#Object#", "methodParameterName": "fieldName#fieldDataType#rawTraceData#", "methodBody": "default Object convertRawInjectionTraceDataToRenderingData(String fieldName, Class<?> fieldDataType, Object rawTraceData) {\n        if (fieldDataType.isArray() && rawTraceData.getClass().isArray()) {\n            return rawTraceData;\n        } else if (rawTraceData.getClass().isArray()) {// but field data type is\n                                                       // not array\n            if (Array.getLength(rawTraceData) > 0) {\n                return Array.get(rawTraceData, 0);\n            } else {\n                return null;\n            }\n        } else {\n            return rawTraceData;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Sub classes could override this method to customize how to handle the injection trace data for type unmatch errors.", "call_func_name": ["java.lang.Class.isArray", "java.lang.Object.getClass", "java.lang.reflect.Array.getLength", "java.lang.reflect.Array.get"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["java.lang.Object", "int"]], "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.firstStepName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String firstStepName();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Sub classes must tell us the name of first step", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.createMoveTargetForStep", "methodParameterType": "String#", "methodParameterName": "step#", "methodBody": "public String createMoveTargetForStep(String step);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "translate a step to a target which may be a template file path usually, but a redirect target URL could be possible", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.getFormCls", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class<T> getFormCls();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Tells the form type of current flow.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "87", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.getFormProcessDataCls", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default Class<? extends FormProcessData> getFormProcessDataCls() {\n        return SimpleFormProcessData.class;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#TypeLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tells the concrete type of  {@link FormProcessData}, default is  {@link SimpleFormProcessData}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.createInitForm", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default T createInitForm() throws Exception {\n        return (T) InjectUtil.retrieveContextDataSetInstance(getFormCls(), FORM_PRE_DEFINED, \"\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub classes could override this method to create the initial form data(eg. query from db)", "call_func_name": ["com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.getFormCls", "com.astamuse.asta4d.data.InjectUtil.retrieveContextDataSetInstance"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.getFormCls": "Tells the form type of current flow."}]}, {"index": "89", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.saveExtraDataToContext", "methodParameterType": "D#", "methodParameterName": "actionInfo#", "methodBody": "default <D> void saveExtraDataToContext(D actionInfo) {\n        Context.getCurrentThreadContext().setData(FORM_EXTRA_DATA, actionInfo);\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Convenience for saving some extra data in context in case of being necessary", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.getExtraDataFromContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default <D> D getExtraDataFromContext() {\n        return Context.getCurrentThreadContext().getData(FORM_EXTRA_DATA);\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenience for retrieving some extra data in context in case of being necessary", "call_func_name": ["com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.Context.getData"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "91", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.handle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@RequestHandler\n    default String handle() throws Exception {\n        FormProcessData processData = (FormProcessData) InjectUtil.retrieveContextDataSetInstance(getFormProcessDataCls(),\n                \"not-exist-formProcessData\", \"\");\n        String targetStep = process(processData);\n        return createMoveTargetForStep(targetStep);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#StringLiteral#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The default implementation as request handler which retrieve the process data and return converted the process result as target template file path.", "call_func_name": ["com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.getFormProcessDataCls", "com.astamuse.asta4d.data.InjectUtil.retrieveContextDataSetInstance", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.process", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.createMoveTargetForStep"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.String", "java.lang.String"], ["com.astamuse.asta4d.web.form.flow.base.FormProcessData"], ["java.lang.String"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.getFormProcessDataCls": "Tells the concrete type of  {@link FormProcessData}, default is  {@link SimpleFormProcessData}."}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.process": "This method implement the basic mechanism which performs following things: <ol> <li>restore the trace data map which contains all the data in each step <li>retrieve instance of target form data which type is specified by  {@link #getFormCls()}<li>if the current step is before first, set the render target step by  {@link #firstStepName()}<li>if the back step is not empty, then set the back step name to render target step <li>else call  {@link #processForm(FormProcessData,Object)} method to process the retrieved form data, currently in the processmethod, only  {@link #validateForm(FormProcessData,Object)} is invoked to perform validation.<li>call  {@link #rewriteTraceDataBeforeGoSnippet(String,String,FormFlowTraceData)} to rewrite trace data<li>if  {@link #skipStoreTraceData(String,String,FormFlowTraceData)} returns true, call {@link #clearStoredTraceData(String)} toclear stored trace data, or call  {@link #storeTraceData(String,String,String,FormFlowTraceData)} to store the trace data for nextstep process <li>call  {@link #passDataToSnippet(String,String,Map)} to store all the retrieved and processed data for page rendering<li>return the render target step name </ol> Sub classes could override this method to translate the returned target step to the actual render target template file path."}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.createMoveTargetForStep": "translate a step to a target which may be a template file path usually, but a redirect target URL could be possible"}]}, {"index": "92", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.process", "methodParameterType": "FormProcessData#", "methodParameterName": "processData#", "methodBody": "default String process(FormProcessData processData) throws Exception {\n\n        String traceId = processData.getFlowTraceId();\n\n        // clear trace data when exit\n        if (processData.getStepExit() != null) {\n            clearStoredTraceData(traceId);\n            return null;\n        }\n\n        String currentStep = processData.getStepCurrent();\n\n        FormFlowTraceData traceData;\n        if (StringUtils.isEmpty(traceId)) {\n            traceData = createEmptyTraceData();\n        } else {\n            traceData = retrieveTraceData(traceId);\n            if (traceData == null) {\n                if (exitWhenTraceDataMissing()) {\n                    return null;\n                } else {\n                    traceId = \"\";\n                    traceData = createEmptyTraceData();\n                    currentStep = null;\n                }\n            }\n        }\n\n        // the first time access without existing input data or saved tracemap could not be retrieved(usually due to timeout)\n        if (currentStep == null) {\n            currentStep = FormFlowConstants.FORM_STEP_BEFORE_FIRST;\n            // save init form as predefined form\n            Context.getCurrentThreadContext().setData(FORM_PRE_DEFINED, createInitForm());\n        }\n\n        T form = retrieveFormInstance(traceData, currentStep);\n        traceData.getStepFormMap().put(currentStep, form);\n\n        String renderTargetStep = null;\n        CommonFormResult formResult = null;\n\n        if (FormFlowConstants.FORM_STEP_BEFORE_FIRST.equals(currentStep)) {\n            renderTargetStep = firstStepName();\n        } else if (processData.getStepBack() != null) {\n            renderTargetStep = processData.getStepBack();\n        } else {\n            // since the init step will not enter this branch, so the sub classes which override the process method could retrieve\n            // current step without any concern about null pointer exception.\n            formResult = processForm(processData, form);\n            if (formResult == CommonFormResult.SUCCESS) {\n                renderTargetStep = processData.getStepSuccess();\n            } else {\n                renderTargetStep = processData.getStepFailed();\n            }\n        }\n\n        rewriteTraceDataBeforeGoSnippet(currentStep, renderTargetStep, traceData);\n\n        if (skipStoreTraceData(currentStep, renderTargetStep, traceData)) {\n            clearStoredTraceData(traceId);\n            traceId = \"\";\n        } else {\n            traceId = storeTraceData(currentStep, renderTargetStep, traceId, traceData);\n        }\n        passDataToSnippet(currentStep, renderTargetStep, traceId, traceData);\n\n        return renderTargetStep;\n\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method implement the basic mechanism which performs following things: <ol> <li>restore the trace data map which contains all the data in each step <li>retrieve instance of target form data which type is specified by  {@link #getFormCls()}<li>if the current step is before first, set the render target step by  {@link #firstStepName()}<li>if the back step is not empty, then set the back step name to render target step <li>else call  {@link #processForm(FormProcessData,Object)} method to process the retrieved form data, currently in the processmethod, only  {@link #validateForm(FormProcessData,Object)} is invoked to perform validation.<li>call  {@link #rewriteTraceDataBeforeGoSnippet(String,String,FormFlowTraceData)} to rewrite trace data<li>if  {@link #skipStoreTraceData(String,String,FormFlowTraceData)} returns true, call {@link #clearStoredTraceData(String)} toclear stored trace data, or call  {@link #storeTraceData(String,String,String,FormFlowTraceData)} to store the trace data for nextstep process <li>call  {@link #passDataToSnippet(String,String,Map)} to store all the retrieved and processed data for page rendering<li>return the render target step name </ol> Sub classes could override this method to translate the returned target step to the actual render target template file path.", "call_func_name": ["com.astamuse.asta4d.web.form.flow.base.FormProcessData.getFlowTraceId", "com.astamuse.asta4d.web.form.flow.base.FormProcessData.getStepExit", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.clearStoredTraceData", "com.astamuse.asta4d.web.form.flow.base.FormProcessData.getStepCurrent", "org.apache.commons.lang3.StringUtils.isEmpty", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.createEmptyTraceData", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.retrieveTraceData", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.exitWhenTraceDataMissing", "com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.createInitForm", "com.astamuse.asta4d.Context.setData", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.retrieveFormInstance", "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceData.getStepFormMap", "java.util.Map.put", "java.lang.String.equals", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.firstStepName", "com.astamuse.asta4d.web.form.flow.base.FormProcessData.getStepBack", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.processForm", "com.astamuse.asta4d.web.form.flow.base.FormProcessData.getStepSuccess", "com.astamuse.asta4d.web.form.flow.base.FormProcessData.getStepFailed", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.rewriteTraceDataBeforeGoSnippet", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.skipStoreTraceData", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.storeTraceData", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.passDataToSnippet"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.CharSequence"], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.Object"], ["com.astamuse.asta4d.web.form.flow.base.FormFlowTraceData", "java.lang.String"], [""], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], [""], [""], ["com.astamuse.asta4d.web.form.flow.base.FormProcessData", "java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.String", "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceData"], ["java.lang.String", "java.lang.String", "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceData"], ["java.lang.String", "java.lang.String", "java.lang.String", "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceData"], ["java.lang.String", "java.lang.String", "java.lang.String", "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceData"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.exitWhenTraceDataMissing": "Whether the form flow should be exit when the target trace data is not found. The default is true."}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.createInitForm": "Sub classes could override this method to create the initial form data(eg. query from db)"}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.retrieveFormInstance": "Sub classes can override this method to customize how to retrieve the form instance by step information. By default, a form instance will be retrieved from context by calling  {@link #generateFormInstanceFromContext(String)}."}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.firstStepName": "Sub classes must tell us the name of first step"}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.rewriteTraceDataBeforeGoSnippet": "Always override render target step form data by current step form data"}, {"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.passDataToSnippet": "Sub classes can override this method to customize how to pass data to snippet. <p> This method will retrieve the form of render target from trace map and if it does not exists, the form of current step will be used. By default, the render target form is not set so the current step form will be used always. The sub classes could override this method to store the render target form to trace map before calling super."}]}, {"index": "93", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.exitWhenTraceDataMissing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default boolean exitWhenTraceDataMissing() {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Whether the form flow should be exit when the target trace data is not found. The default is true.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.processForm", "methodParameterType": "FormProcessData#T#", "methodParameterName": "processData#form#", "methodBody": "default CommonFormResult processForm(FormProcessData processData, T form) {\n        return processValidation(processData, form);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The default process will only call the  {@link #validateForm(Object)} and sub classes can override this method to add extra processlogics such as updating form when validation succeeds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "95", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.retrieveFormInstance", "methodParameterType": "FormFlowTraceData#String#", "methodParameterName": "traceData#currentStep#", "methodBody": "default T retrieveFormInstance(FormFlowTraceData traceData, String currentStep) {\n        // The subclass may override this method to retrieving form instance by various ways but we will always generate an instance from\n        // the context since we have no idea about the concrete logic of sub classes.\n        return generateFormInstanceFromContext(currentStep);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub classes can override this method to customize how to retrieve the form instance by step information. By default, a form instance will be retrieved from context by calling  {@link #generateFormInstanceFromContext(String)}.", "call_func_name": ["com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.generateFormInstanceFromContext"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.generateFormInstanceFromContext": "Sub classes can override this method to do some interception around form instance generation, especially some post processes. <p> <b>NOTE:</b> DO NOT replace this method completely at sub class, if you want to do some customized form retrieving, override the method  {@link #retrieveFormInstance(Map,String)} instead."}]}, {"index": "96", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.generateFormInstanceFromContext", "methodParameterType": "String#", "methodParameterName": "currentStep#", "methodBody": "default T generateFormInstanceFromContext(String currentStep) {\n        try {\n            final T form = (T) InjectUtil.retrieveContextDataSetInstance(getFormCls(), FORM_PRE_DEFINED, \"\");\n            Context currentContext = Context.getCurrentThreadContext();\n\n            return assignArrayValueFromContext(getFormCls(), form, currentContext, EMPTY_INDEXES);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Sub classes can override this method to do some interception around form instance generation, especially some post processes. <p> <b>NOTE:</b> DO NOT replace this method completely at sub class, if you want to do some customized form retrieving, override the method  {@link #retrieveFormInstance(Map,String)} instead.", "call_func_name": ["com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.getFormCls", "com.astamuse.asta4d.data.InjectUtil.retrieveContextDataSetInstance", "com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.assignArrayValueFromContext", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.Class", "java.lang.String", "java.lang.String"], [""], ["java.lang.Class", "java.lang.Object", "com.astamuse.asta4d.Context", "int[]"], ["java.lang.Throwable"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.getFormCls": "Tells the form type of current flow."}]}, {"index": "97", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.assignArrayValueFromContext", "methodParameterType": "Class#T#Context#int[]#", "methodParameterName": "formCls#form#currentContext#indexes#", "methodBody": "default T assignArrayValueFromContext(Class formCls, T form, Context currentContext, int[] indexes) throws Exception {\n        List<AnnotatedPropertyInfo> list = AnnotatedPropertyUtil.retrieveProperties(formCls);\n        for (final AnnotatedPropertyInfo field : list) {\n            CascadeFormField cff = field.getAnnotation(CascadeFormField.class);\n            if (cff != null) {\n                if (field.getType().isArray()) {// a cascade form for array\n                    if (field.retrieveValue(form) != null) {\n                        continue;\n                    }\n                    if (StringUtils.isEmpty(cff.arrayLengthField())) {\n                        continue;\n                    }\n\n                    List<AnnotatedPropertyInfo> arrayLengthFieldList = AnnotatedPropertyUtil.retrievePropertyByName(formCls,\n                            cff.arrayLengthField());\n                    if (CollectionUtils.isEmpty(arrayLengthFieldList)) {\n                        throw new NullPointerException(\"specified array length field [\" + cff.arrayLengthField() + \"] was not found\");\n                    }\n                    // we only need one\n                    AnnotatedPropertyInfo arrayLengthField = arrayLengthFieldList.get(0);\n\n                    Integer len = (Integer) arrayLengthField.retrieveValue(form);\n                    if (len == null) {\n                        // throw new NullPointerException(\"specified array length field [\" + cff.arrayLengthField() + \"] is null\");\n                        len = 0;\n                    }\n\n                    final Object[] array = (Object[]) Array.newInstance(field.getType().getComponentType(), len);\n                    for (int i = 0; i < len; i++) {\n                        final int seq = i;\n                        final int[] newIndex = ArrayUtils.add(indexes, seq);\n                        Context.with(new DelatedContext(currentContext) {\n                            protected String convertKey(String scope, String key) {\n                                if (scope.equals(WebApplicationContext.SCOPE_QUERYPARAM)) {\n                                    return rewriteArrayIndexPlaceHolder(key, newIndex);\n                                } else {\n                                    return key;\n                                }\n                            }\n                        }, new Runnable() {\n                            @Override\n                            public void run() {\n                                try {\n                                    Object subform = field.getType().getComponentType().newInstance();\n                                    InjectUtil.injectToInstance(subform);\n                                    Array.set(array, seq, subform);\n                                } catch (Exception e) {\n                                    throw new RuntimeException(e);\n                                }\n                            }\n                        });// end runnable and context.with\n\n                        assignArrayValueFromContext(field.getType().getComponentType(), (T) array[seq], currentContext, newIndex);\n                    } // end for loop\n\n                    field.assignValue(form, array);\n                } else {\n                    // a cascade form for not array\n                    assignArrayValueFromContext(field.getType(), (T) field.retrieveValue(form), currentContext, indexes);\n                }\n            }\n        }\n        return form;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#Modifier#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Assign array value to cascade forms of array type from context by recursively self call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.rewriteTraceDataBeforeGoSnippet", "methodParameterType": "String#String#FormFlowTraceData#", "methodParameterName": "currentStep#renderTargetStep#traceData#", "methodBody": "default void rewriteTraceDataBeforeGoSnippet(String currentStep, String renderTargetStep, FormFlowTraceData traceData) {\n        Map<String, Object> formMap = traceData.getStepFormMap();\n        formMap.put(renderTargetStep, formMap.get(currentStep));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Always override render target step form data by current step form data", "call_func_name": ["com.astamuse.asta4d.web.form.flow.base.FormFlowTraceData.getStepFormMap", "java.util.Map.get", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.passDataToSnippet", "methodParameterType": "String#String#String#FormFlowTraceData#", "methodParameterName": "currentStep#renderTargetStep#traceId#traceData#", "methodBody": "default void passDataToSnippet(String currentStep, String renderTargetStep, String traceId, FormFlowTraceData traceData) {\n        WebApplicationContext context = WebApplicationContext.getCurrentThreadWebApplicationContext();\n\n        boolean byFlash = passDataToSnippetByFlash(currentStep, renderTargetStep, traceData);\n\n        passData(context, byFlash, FormFlowConstants.FORM_FLOW_TRACE_ID, traceId);\n        passData(context, byFlash, FormFlowConstants.FORM_FLOW_TRACE_DATA, traceData);\n        passData(context, byFlash, FormFlowConstants.FORM_STEP_RENDER_TARGET, renderTargetStep);\n\n        if (byFlash) {\n\n            RedirectUtil.registerRedirectInterceptor(this.getClass().getName() + \"#passDataToSnippet\",\n                    new InjectionTraceDataRedirectInterceptor());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sub classes can override this method to customize how to pass data to snippet. <p> This method will retrieve the form of render target from trace map and if it does not exists, the form of current step will be used. By default, the render target form is not set so the current step form will be used always. The sub classes could override this method to store the render target form to trace map before calling super.", "call_func_name": ["com.astamuse.asta4d.web.WebApplicationContext.getCurrentThreadWebApplicationContext", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.passDataToSnippetByFlash", "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.passData", "java.lang.StringBuilder.<init>", "java.lang.Object.getClass", "java.lang.Class.getName", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.astamuse.asta4d.web.form.flow.base.InjectionTraceDataRedirectInterceptor.<init>", "com.astamuse.asta4d.web.dispatch.RedirectUtil.registerRedirectInterceptor"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "com.astamuse.asta4d.web.form.flow.base.FormFlowTraceData"], ["com.astamuse.asta4d.web.WebApplicationContext", "boolean", "java.lang.String", "java.lang.Object"], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "com.astamuse.asta4d.web.dispatch.RedirectInterceptor"]], "passed_comments": [{"com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.passDataToSnippetByFlash": "Sub classes should tell us whether we should pass data to snippet via flash scope. The default is false."}, {"com.astamuse.asta4d.web.dispatch.RedirectUtil.registerRedirectInterceptor": "<p> register a redirect interceptor to current context with duplicated id check, if there has been an interceptor registered by same id, the later interceptor will be rejected. <p> <b>NOTE:</b>There is no guaranty about the execution order of registered interceptors."}]}, {"index": "100", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/base/BasicFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.base.BasicFormFlowHandlerTrait.passDataToSnippetByFlash", "methodParameterType": "String#String#FormFlowTraceData#", "methodParameterName": "currentStep#renderTargetStep#traceData#", "methodBody": "default boolean passDataToSnippetByFlash(String currentStep, String renderTargetStep, FormFlowTraceData traceData) {\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub classes should tell us whether we should pass data to snippet via flash scope. The default is false.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/ext/ExcludingFieldRetrievableFormValidationProcessor.java", "methodName": "com.astamuse.asta4d.web.form.flow.ext.ExcludingFieldRetrievableFormValidationProcessor.filterExcludedFieldsMessages", "methodParameterType": "Object#List<FormValidationMessage>#", "methodParameterName": "form#msgList#", "methodBody": "default List<FormValidationMessage> filterExcludedFieldsMessages(Object form, List<FormValidationMessage> msgList) {\n        if (form instanceof ExcludingFieldRetrievableForm) {\n            ExcludingFieldRetrievableForm vfe = (ExcludingFieldRetrievableForm) form;\n            String[] fields = vfe.getExcludeFields();\n            Set<String> set = new HashSet<>();\n            for (String f : fields) {\n                set.add(f);\n            }\n            return msgList.stream().filter(fvm -> !set.contains(fvm.getFieldName())).collect(Collectors.toList());\n        } else {\n            return msgList;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "include/exclude corresponding field messages according to the  {@link SimpleFormFieldIncludeDescription}/ {@link ExcludingFieldRetrievableForm}", "call_func_name": ["com.astamuse.asta4d.web.form.flow.ext.ExcludingFieldRetrievableForm.getExcludeFields", "java.util.HashSet.<init>", "java.util.Set.add", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], ["java.util.Set"], ["java.util.function.Predicate"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/ext/MultiInputStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.ext.MultiInputStepFormFlowHandlerTrait.mergeInputStepsToConfirmStep", "methodParameterType": "T#FormFlowTraceData#", "methodParameterName": "confirmStepForm#traceData#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    default void mergeInputStepsToConfirmStep(T confirmStepForm, FormFlowTraceData traceData) {\n        Map<String, Object> formMap = traceData.getStepFormMap();\n        String[] inputSteps = getInputSteps();\n        T mergeForm;\n        String step;\n        for (int i = 0; i < inputSteps.length; i++) {\n            step = inputSteps[i];\n            mergeForm = (T) formMap.get(step);\n            confirmStepForm.mergeInputDataForConfirm(step, mergeForm);\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "get the form instance which combined the input data of all the steps. Default is combine all the data of each steps to the first input step instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "103", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/flow/ext/MultiInputStepFormFlowHandlerTrait.java", "methodName": "com.astamuse.asta4d.web.form.flow.ext.MultiInputStepFormFlowHandlerTrait.getConfirmStepFormStub", "methodParameterType": "FormFlowTraceData#", "methodParameterName": "traceData#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    default T getConfirmStepFormStub(FormFlowTraceData traceData) {\n        // clone or not, we don't matter\n        Map<String, Object> formMap = traceData.getStepFormMap();\n        return (T) formMap.get(FormFlowConstants.FORM_STEP_BEFORE_FIRST);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "get the", "call_func_name": ["com.astamuse.asta4d.web.form.flow.base.FormFlowTraceData.getStepFormMap", "java.util.Map.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos33/asta4d/asta4d-web/src/main/java/com/astamuse/asta4d/web/form/CascadeArrayFunctions.java", "methodName": "com.astamuse.asta4d.web.form.CascadeArrayFunctions.rewriteArrayIndexPlaceHolder", "methodParameterType": "String#int[]#", "methodParameterName": "s#indexes#", "methodBody": "default String rewriteArrayIndexPlaceHolder(String s, int[] indexes) {\n        String ret = s;\n        for (int i = indexes.length - 1; i >= 0; i--) {\n            ret = CascadeArrayFunctionsHelper.PlaceHolderSearchPattern[i].matcher(ret).replaceAll(\"$1\\\\\" + indexes[i] + \"$3\");\n        }\n        return ret;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#ArrayAccess#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sub classes can override this method to supply a customized array index placeholder mechanism.", "call_func_name": ["java.util.regex.Pattern.matcher", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.regex.Matcher.replaceAll"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["java.lang.String"], ["int"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "105", "file": "/root/repos/repos33/asta4d/asta4d-archetype-prototype/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjTypeUnMatchValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjTypeUnMatchValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "106", "file": "/root/repos/repos33/asta4d/asta4d-archetype-prototype/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjValueValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjValueValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos33/asta4d/asta4d-archetype-prototype/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjCommonValidatoinMessageLogics.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjCommonValidatoinMessageLogics.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    public String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        // treat the annotated message as key\n        String msg = messageHelper.getMessageWithDefault(annotatedMsg, annotatedMsg);\n        if (addFieldLablePrefixToMessage) {\n            return String.format(\"%s: %s\", fieldLabel, msg);\n        } else {\n            return msg;\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "we share the annotated message logic here", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "108", "file": "/root/repos/repos33/asta4d/asta4d-archetype-prototype/src/main/java/com/astamuse/asta4d/sample/snippet/form/SingleStepFormSnippet.java", "methodName": "com.astamuse.asta4d.sample.snippet.form.SingleStepFormSnippet.retrieveFieldPrepareRenderers", "methodParameterType": "String#Object#", "methodParameterName": "renderTargetStep#form#", "methodBody": "@Override\n    public List<FormFieldPrepareRenderer> retrieveFieldPrepareRenderers(String renderTargetStep, Object form) {\n        List<FormFieldPrepareRenderer> list = new LinkedList<>();\n\n        list.add(new SelectPrepareRenderer(PersonForm.class, \"bloodtype\").setOptionData(BloodType.asOptionValueMap));\n\n        list.add(new RadioPrepareRenderer(PersonForm.class, \"sex\").setOptionData(SEX.asOptionValueMap));\n\n        list.add(new CheckboxPrepareRenderer(PersonForm.class, \"language\").setOptionData(Language.asOptionValueMap));\n\n        return list;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "override this method to supply the option data for select, radio and checkbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "109", "file": "/root/repos/repos33/asta4d/asta4d-archetype-prototype/target/generated-sources/archetype/src/main/resources/archetype-resources/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjTypeUnMatchValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjTypeUnMatchValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos33/asta4d/asta4d-archetype-prototype/target/generated-sources/archetype/src/main/resources/archetype-resources/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjValueValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjValueValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos33/asta4d/asta4d-archetype-prototype/target/generated-sources/archetype/src/main/resources/archetype-resources/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjCommonValidatoinMessageLogics.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjCommonValidatoinMessageLogics.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    public String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        // treat the annotated message as key\n        String msg = messageHelper.getMessageWithDefault(annotatedMsg, annotatedMsg);\n        if (addFieldLablePrefixToMessage) {\n            return String.format(\"%s: %s\", fieldLabel, msg);\n        } else {\n            return msg;\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "we share the annotated message logic here", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos33/asta4d/asta4d-archetype-prototype/target/generated-sources/archetype/src/main/resources/archetype-resources/src/main/java/com/astamuse/asta4d/sample/snippet/form/SingleStepFormSnippet.java", "methodName": "com.astamuse.asta4d.sample.snippet.form.SingleStepFormSnippet.retrieveFieldPrepareRenderers", "methodParameterType": "String#Object#", "methodParameterName": "renderTargetStep#form#", "methodBody": "@Override\n    public List<FormFieldPrepareRenderer> retrieveFieldPrepareRenderers(String renderTargetStep, Object form) {\n        List<FormFieldPrepareRenderer> list = new LinkedList<>();\n\n        list.add(new SelectPrepareRenderer(PersonForm.class, \"bloodtype\").setOptionData(BloodType.asOptionValueMap));\n\n        list.add(new RadioPrepareRenderer(PersonForm.class, \"sex\").setOptionData(SEX.asOptionValueMap));\n\n        list.add(new CheckboxPrepareRenderer(PersonForm.class, \"language\").setOptionData(Language.asOptionValueMap));\n\n        return list;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "override this method to supply the option data for select, radio and checkbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos33/asta4d/asta4d-archetype-prototype/target/generated-sources/archetype/target/classes/archetype-resources/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjTypeUnMatchValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjTypeUnMatchValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos33/asta4d/asta4d-archetype-prototype/target/generated-sources/archetype/target/classes/archetype-resources/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjValueValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjValueValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos33/asta4d/asta4d-archetype-prototype/target/generated-sources/archetype/target/classes/archetype-resources/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjCommonValidatoinMessageLogics.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjCommonValidatoinMessageLogics.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    public String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        // treat the annotated message as key\n        String msg = messageHelper.getMessageWithDefault(annotatedMsg, annotatedMsg);\n        if (addFieldLablePrefixToMessage) {\n            return String.format(\"%s: %s\", fieldLabel, msg);\n        } else {\n            return msg;\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "we share the annotated message logic here", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos33/asta4d/asta4d-archetype-prototype/target/generated-sources/archetype/target/classes/archetype-resources/src/main/java/com/astamuse/asta4d/sample/snippet/form/SingleStepFormSnippet.java", "methodName": "com.astamuse.asta4d.sample.snippet.form.SingleStepFormSnippet.retrieveFieldPrepareRenderers", "methodParameterType": "String#Object#", "methodParameterName": "renderTargetStep#form#", "methodBody": "@Override\n    public List<FormFieldPrepareRenderer> retrieveFieldPrepareRenderers(String renderTargetStep, Object form) {\n        List<FormFieldPrepareRenderer> list = new LinkedList<>();\n\n        list.add(new SelectPrepareRenderer(PersonForm.class, \"bloodtype\").setOptionData(BloodType.asOptionValueMap));\n\n        list.add(new RadioPrepareRenderer(PersonForm.class, \"sex\").setOptionData(SEX.asOptionValueMap));\n\n        list.add(new CheckboxPrepareRenderer(PersonForm.class, \"language\").setOptionData(Language.asOptionValueMap));\n\n        return list;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "override this method to supply the option data for select, radio and checkbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/jsoup/org/jsoup/parser/Asta4DTagSupportHtmlTreeBuilder.java", "methodName": "org.jsoup.parser.Asta4DTagSupportHtmlTreeBuilder.generateImpliedEndTags", "methodParameterType": "String#", "methodParameterName": "excludeTag#", "methodBody": "void generateImpliedEndTags(String excludeTag) {\n        while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n                StringUtil.in(currentElement().nodeName(), TagSearchEndTags))\n            pop();\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(WhileStatement(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)WhileStatement)Block)MethodDeclaration", "methodDoc": "11.2.5.2 Closing elements that have implied end tags <p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements.", "call_func_name": ["org.jsoup.parser.Asta4DTagSupportHtmlTreeBuilder.generateImpliedEndTags"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.jsoup.parser.Asta4DTagSupportHtmlTreeBuilder.generateImpliedEndTags": "11.2.5.2 Closing elements that have implied end tags <p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements."}]}, {"index": "118", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/ElementSetter.java", "methodName": "com.astamuse.asta4d.render.ElementSetter.set", "methodParameterType": "Element#", "methodParameterName": "elem#", "methodBody": "public void set(Element elem);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "reset the passed element", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/TextSetter.java", "methodName": "com.astamuse.asta4d.render.TextSetter.TextSetter", "methodParameterType": "Object#", "methodParameterName": "content#", "methodBody": "public TextSetter(Object content) {\n        this.originContent = content;\n        this.renderText = content2Str(content);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/ChildReplacer.java", "methodName": "com.astamuse.asta4d.render.ChildReplacer.ChildReplacer", "methodParameterType": "Element#", "methodParameterName": "newChild#", "methodBody": "public ChildReplacer(Element newChild) {\n        this.newChild = newChild;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/RenderUtil.java", "methodName": "com.astamuse.asta4d.render.RenderUtil.applySnippets", "methodParameterType": "Document#", "methodParameterName": "doc#", "methodBody": "public final static void applySnippets(Document doc) throws SnippetNotResovlableException, SnippetInvokeException, TemplateException,\n            TemplateNotFoundException {\n        if (doc == null) {\n            return;\n        }\n\n        applyClearAction(doc, false);\n\n        // retrieve ready snippets\n        String selector = SelectorUtil.attr(ExtNodeConstants.SNIPPET_NODE_TAG_SELECTOR, ExtNodeConstants.SNIPPET_NODE_ATTR_STATUS,\n                ExtNodeConstants.SNIPPET_NODE_ATTR_STATUS_READY);\n        List<Element> snippetList = new ArrayList<>(doc.select(selector));\n        int readySnippetCount = snippetList.size();\n        int blockedSnippetCount = 0;\n        for (int i = readySnippetCount - 1; i >= 0; i--) {\n            // if parent snippet has not been executed, the current snippet will\n            // not be executed too.\n            if (isBlockedByParentSnippet(doc, snippetList.get(i))) {\n                snippetList.remove(i);\n                blockedSnippetCount++;\n            }\n        }\n        readySnippetCount = readySnippetCount - blockedSnippetCount;\n\n        String renderDeclaration;\n        Renderer renderer;\n        Context context = Context.getCurrentThreadContext();\n        Configuration conf = Configuration.getConfiguration();\n        final SnippetInvoker invoker = conf.getSnippetInvoker();\n\n        String refId;\n        String currentTemplatePath;\n        Element renderTarget;\n        for (Element element : snippetList) {\n            if (!conf.isSkipSnippetExecution()) {\n                // for a faked snippet node which is created by template\n                // analyzing process, the render target element should be its\n                // child.\n                if (element.attr(ExtNodeConstants.SNIPPET_NODE_ATTR_TYPE).equals(ExtNodeConstants.SNIPPET_NODE_ATTR_TYPE_FAKE)) {\n                    renderTarget = element.children().first();\n                    // the hosting element of this faked snippet has been removed by outer a snippet\n                    if (renderTarget == null) {\n                        element.attr(ExtNodeConstants.SNIPPET_NODE_ATTR_STATUS, ExtNodeConstants.SNIPPET_NODE_ATTR_STATUS_FINISHED);\n                        continue;\n                    }\n                } else {\n                    renderTarget = element;\n                }\n\n                // we have to reset the ref of current snippet at every time to make sure the ref is always unique(duplicated snippet ref\n                // could be created by list rendering)\n                TemplateUtil.resetSnippetRefs(element);\n\n                context.setCurrentRenderingElement(renderTarget);\n                renderDeclaration = element.attr(ExtNodeConstants.SNIPPET_NODE_ATTR_RENDER);\n\n                refId = element.attr(ExtNodeConstants.ATTR_SNIPPET_REF);\n                currentTemplatePath = element.attr(ExtNodeConstants.ATTR_TEMPLATE_PATH);\n\n                context.setCurrentRenderingElement(renderTarget);\n                context.setData(TRACE_VAR_TEMPLATE_PATH, currentTemplatePath);\n\n                try {\n                    if (element.hasAttr(ExtNodeConstants.SNIPPET_NODE_ATTR_PARALLEL)) {\n                        ConcurrentRenderHelper crHelper = ConcurrentRenderHelper.getInstance(context, doc);\n                        final Context newContext = context.clone();\n                        final String declaration = renderDeclaration;\n                        crHelper.submitWithContext(newContext, declaration, refId, new Callable<Renderer>() {\n                            @Override\n                            public Renderer call() throws Exception {\n                                return invoker.invoke(declaration);\n                            }\n                        });\n                        element.attr(ExtNodeConstants.SNIPPET_NODE_ATTR_STATUS, ExtNodeConstants.SNIPPET_NODE_ATTR_STATUS_WAITING);\n                    } else {\n                        renderer = invoker.invoke(renderDeclaration);\n                        applySnippetResultToElement(doc, refId, element, renderTarget, renderer);\n                    }\n                } catch (SnippetNotResovlableException | SnippetInvokeException e) {\n                    throw e;\n                } catch (Exception e) {\n                    SnippetInvokeException se = new SnippetInvokeException(\"Error occured when executing rendering on [\" +\n                            renderDeclaration + \"]:\" + e.getMessage(), e);\n                    throw se;\n                }\n\n                context.setData(TRACE_VAR_TEMPLATE_PATH, null);\n                context.setCurrentRenderingElement(null);\n            } else {// if skip snippet\n                element.attr(ExtNodeConstants.SNIPPET_NODE_ATTR_STATUS, ExtNodeConstants.SNIPPET_NODE_ATTR_STATUS_FINISHED);\n            }\n        }\n\n        // load embed nodes which blocking parents has finished\n        List<Element> embedNodeList = doc.select(ExtNodeConstants.EMBED_NODE_TAG_SELECTOR);\n        int embedNodeListCount = embedNodeList.size();\n        Iterator<Element> embedNodeIterator = embedNodeList.iterator();\n        Element embed;\n        Element embedContent;\n        while (embedNodeIterator.hasNext()) {\n            embed = embedNodeIterator.next();\n            if (isBlockedByParentSnippet(doc, embed)) {\n                embedNodeListCount--;\n                continue;\n            }\n            embedContent = TemplateUtil.getEmbedNodeContent(embed);\n            TemplateUtil.mergeBlock(doc, embedContent);\n            embed.before(embedContent);\n            embed.remove();\n        }\n\n        if ((readySnippetCount + embedNodeListCount) > 0) {\n            TemplateUtil.regulateElement(null, doc);\n            applySnippets(doc);\n        } else {\n            ConcurrentRenderHelper crHelper = ConcurrentRenderHelper.getInstance(context, doc);\n            String delcaration = null;\n            if (crHelper.hasUnCompletedTask()) {\n                delcaration = null;\n                try {\n                    FutureRendererHolder holder = crHelper.take();\n                    delcaration = holder.getRenderDeclaration();\n                    String ref = holder.getSnippetRefId();\n                    String reSelector = SelectorUtil.attr(ExtNodeConstants.SNIPPET_NODE_TAG_SELECTOR, ExtNodeConstants.ATTR_SNIPPET_REF,\n                            ref);\n                    Element element = doc.select(reSelector).get(0);// must have\n                    Element target;\n                    if (element.attr(ExtNodeConstants.SNIPPET_NODE_ATTR_TYPE).equals(ExtNodeConstants.SNIPPET_NODE_ATTR_TYPE_FAKE)) {\n                        target = element.children().first();\n                    } else {\n                        target = element;\n                    }\n                    applySnippetResultToElement(doc, ref, element, target, holder.getRenderer());\n                    applySnippets(doc);\n                } catch (InterruptedException | ExecutionException e) {\n                    throw new SnippetInvokeException(\"Concurrent snippet invocation failed\" +\n                            (delcaration == null ? \"\" : \" on [\" + delcaration + \"]\"), e);\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#PostfixExpression#ExpressionStatement#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#NullLiteral#InfixExpression#StringLiteral#StringLiteral#SimpleName#StringLiteral#InfixExpression#ConditionalExpression#ParenthesizedExpression#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement)Block)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ConditionalExpression)ParenthesizedExpression)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Find out all the snippet in the passed Document and execute them. The Containing embed tag of the passed Document will be exactly mixed in here too. <br> Recursively contained snippets will be executed from outside to inside, thus the inner snippets will not be executed until all of their outer snippets are finished. Also, the dynamically created snippets and embed tags will comply with this rule too.", "call_func_name": ["com.astamuse.asta4d.render.RenderUtil.applyClearAction", "com.astamuse.asta4d.util.SelectorUtil.attr", "org.jsoup.nodes.Document.select", "java.util.ArrayList.<init>", "java.util.List.size", "java.util.List.get", "com.astamuse.asta4d.render.RenderUtil.isBlockedByParentSnippet", "java.util.List.remove", "com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.Configuration.getConfiguration", "com.astamuse.asta4d.Configuration.getSnippetInvoker", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.astamuse.asta4d.Configuration.isSkipSnippetExecution", "org.jsoup.nodes.Element.attr", "java.lang.String.equals", "org.jsoup.nodes.Element.children", "org.jsoup.select.Elements.first", "org.jsoup.nodes.Element.attr", "com.astamuse.asta4d.template.TemplateUtil.resetSnippetRefs", "com.astamuse.asta4d.Context.setCurrentRenderingElement", "com.astamuse.asta4d.Context.setData", "org.jsoup.nodes.Element.hasAttr", "com.astamuse.asta4d.render.concurrent.ConcurrentRenderHelper.getInstance", "com.astamuse.asta4d.Context.clone", "com.astamuse.asta4d.render.concurrent.ConcurrentRenderHelper.submitWithContext", "com.astamuse.asta4d.snippet.SnippetInvoker.invoke", "com.astamuse.asta4d.render.RenderUtil.applySnippetResultToElement", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Exception.getMessage", "java.lang.StringBuilder.toString", "com.astamuse.asta4d.snippet.SnippetInvokeException.<init>", "com.astamuse.asta4d.template.TemplateUtil.getEmbedNodeContent", "com.astamuse.asta4d.template.TemplateUtil.mergeBlock", "org.jsoup.nodes.Element.before", "org.jsoup.nodes.Element.remove", "com.astamuse.asta4d.template.TemplateUtil.regulateElement", "com.astamuse.asta4d.render.RenderUtil.applySnippets", "com.astamuse.asta4d.render.concurrent.ConcurrentRenderHelper.hasUnCompletedTask", "com.astamuse.asta4d.render.concurrent.ConcurrentRenderHelper.take", "com.astamuse.asta4d.render.concurrent.FutureRendererHolder.getRenderDeclaration", "com.astamuse.asta4d.render.concurrent.FutureRendererHolder.getSnippetRefId", "org.jsoup.select.Elements.get", "com.astamuse.asta4d.render.concurrent.FutureRendererHolder.getRenderer"], "call_func_parameter": [["org.jsoup.nodes.Element", "boolean"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.util.Collection"], [""], ["int"], ["org.jsoup.nodes.Document", "org.jsoup.nodes.Element"], ["int"], [""], [""], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.String"], ["org.jsoup.nodes.Element"], ["org.jsoup.nodes.Element"], ["java.lang.String", "java.lang.Object"], ["java.lang.String"], ["com.astamuse.asta4d.Context", "org.jsoup.nodes.Document"], [""], ["com.astamuse.asta4d.Context", "java.lang.String", "java.lang.String", "java.util.concurrent.Callable"], ["java.lang.String"], ["org.jsoup.nodes.Document", "java.lang.String", "org.jsoup.nodes.Element", "org.jsoup.nodes.Element", "com.astamuse.asta4d.render.Renderer"], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Throwable"], ["org.jsoup.nodes.Element"], ["org.jsoup.nodes.Document", "org.jsoup.nodes.Element"], ["org.jsoup.nodes.Node"], [""], ["java.lang.String", "org.jsoup.nodes.Document"], ["org.jsoup.nodes.Document"], [""], [""], [""], [""], ["int"], [""]], "passed_comments": [{"com.astamuse.asta4d.render.RenderUtil.applyClearAction": "Clear the redundant elements which are usually created by snippet/renderer applying.If the forFinalClean is true, all the finished snippet tags will be removed too."}, {"com.astamuse.asta4d.render.RenderUtil.applySnippets": "Find out all the snippet in the passed Document and execute them. The Containing embed tag of the passed Document will be exactly mixed in here too. <br> Recursively contained snippets will be executed from outside to inside, thus the inner snippets will not be executed until all of their outer snippets are finished. Also, the dynamically created snippets and embed tags will comply with this rule too."}]}, {"index": "122", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/RenderUtil.java", "methodName": "com.astamuse.asta4d.render.RenderUtil.apply", "methodParameterType": "Element#Renderer#", "methodParameterName": "target#renderer#", "methodBody": "public final static void apply(Element target, Renderer renderer) {\n        List<Renderer> rendererList = renderer.asUnmodifiableList();\n        int count = rendererList.size();\n        if (count == 0) {\n            return;\n        }\n        applyClearAction(target, false);\n\n        RenderAction renderAction = new RenderAction();\n\n        apply(target, rendererList, renderAction, 0, count);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Apply given renderer to the given element.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.asUnmodifiableList", "java.util.List.size", "com.astamuse.asta4d.render.RenderUtil.applyClearAction", "com.astamuse.asta4d.render.RenderAction.<init>", "com.astamuse.asta4d.render.RenderUtil.apply"], "call_func_parameter": [[""], [""], ["org.jsoup.nodes.Element", "boolean"], [""], ["org.jsoup.nodes.Element", "java.util.List", "com.astamuse.asta4d.render.RenderAction", "int", "int"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.asUnmodifiableList": "Get list of all the renderers hold by the current renderer"}, {"com.astamuse.asta4d.render.RenderUtil.applyClearAction": "Clear the redundant elements which are usually created by snippet/renderer applying.If the forFinalClean is true, all the finished snippet tags will be removed too."}]}, {"index": "123", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/RenderUtil.java", "methodName": "com.astamuse.asta4d.render.RenderUtil.applyClearAction", "methodParameterType": "Element#boolean#", "methodParameterName": "target#forFinalClean#", "methodBody": "public final static void applyClearAction(Element target, boolean forFinalClean) {\n        String fakeGroup = SelectorUtil.attr(ExtNodeConstants.GROUP_NODE_TAG_SELECTOR, ExtNodeConstants.GROUP_NODE_ATTR_TYPE,\n                ExtNodeConstants.GROUP_NODE_ATTR_TYPE_FAKE);\n        ElementUtil.removeNodesBySelector(target, fakeGroup, true);\n\n        String clearGroup = SelectorUtil.attr(ExtNodeConstants.GROUP_NODE_TAG_SELECTOR, ExtNodeConstants.ATTR_CLEAR, null);\n        ElementUtil.removeNodesBySelector(target, clearGroup, false);\n\n        ElementUtil.removeNodesBySelector(target, SelectorUtil.attr(ExtNodeConstants.ATTR_CLEAR_WITH_NS), false);\n\n        if (forFinalClean) {\n            String removeSnippetSelector = SelectorUtil.attr(ExtNodeConstants.SNIPPET_NODE_TAG_SELECTOR,\n                    ExtNodeConstants.SNIPPET_NODE_ATTR_STATUS, ExtNodeConstants.SNIPPET_NODE_ATTR_STATUS_FINISHED);\n            // TODO check if there are unfinished snippet left.\n            ElementUtil.removeNodesBySelector(target, removeSnippetSelector, true);\n            ElementUtil.removeNodesBySelector(target, ExtNodeConstants.BLOCK_NODE_TAG_SELECTOR, true);\n            ElementUtil.removeNodesBySelector(target, ExtNodeConstants.GROUP_NODE_TAG_SELECTOR, true);\n        }\n\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Clear the redundant elements which are usually created by snippet/renderer applying.If the forFinalClean is true, all the finished snippet tags will be removed too.", "call_func_name": ["com.astamuse.asta4d.util.SelectorUtil.attr", "com.astamuse.asta4d.util.ElementUtil.removeNodesBySelector", "com.astamuse.asta4d.util.SelectorUtil.attr"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"], ["org.jsoup.nodes.Element", "java.lang.String", "boolean"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.Renderer", "methodParameterType": "String#Transformer<?>#", "methodParameterName": "selector#transformer#", "methodBody": "public Renderer(String selector, Transformer<?> transformer) {\n        List<Transformer<?>> list = new ArrayList<>();\n        list.add(transformer);\n        init(selector, list);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a Renderer by given css selector and  {@link Transformer}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.Renderer", "methodParameterType": "String#List<Transformer<?>>#", "methodParameterName": "selector#transformerList#", "methodBody": "public Renderer(String selector, List<Transformer<?>> transformerList) {\n        init(selector, transformerList);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a Renderer by given css selector and List of  {@link Transformer}. By given a list, the target element will be duplicated to the same count of Transformer list size.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.asUnmodifiableList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Renderer> asUnmodifiableList() {\n        return Collections.unmodifiableList(new ArrayList<>(this.chain));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ThisExpression#SimpleName#FieldAccess#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get list of all the renderers hold by the current renderer", "call_func_name": ["java.util.ArrayList.<init>", "java.util.Collections.unmodifiableList"], "call_func_parameter": [["java.util.Collection"], ["java.util.List"]], "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "Renderer#", "methodParameterName": "renderer#", "methodBody": "public Renderer add(Renderer renderer) {\n        this.chain.addAll(renderer.chain);\n        for (Renderer r : renderer.chain) {\n            r.chain = this.chain;\n        }\n        return renderer;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ThisExpression#SimpleName#FieldAccess#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "add a renderer to the current renderer as a list", "call_func_name": ["java.util.List.addAll", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next"], "call_func_parameter": [["java.util.Collection"], [""], [""], [""]], "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#Long#", "methodParameterName": "selector#value#", "methodBody": "public Renderer add(String selector, Long value) {\n        return add(create(selector, value));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "See  {@link #add(String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.Long"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "See  {@link #create(String,String)}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "129", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#Integer#", "methodParameterName": "selector#value#", "methodBody": "public Renderer add(String selector, Integer value) {\n        return add(create(selector, value));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "See  {@link #add(String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.Integer"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "See  {@link #create(String,String)}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "130", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#Boolean#", "methodParameterName": "selector#value#", "methodBody": "public Renderer add(String selector, Boolean value) {\n        return add(create(selector, value));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "See  {@link #add(String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.Boolean"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "See  {@link #create(String,String)}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "131", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#String#", "methodParameterName": "selector#value#", "methodBody": "public Renderer add(String selector, String value) {\n        return add(create(selector, value));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for text rendering by given parameter and add it to the current renderer. See  {@link #create(String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for text by given parameter. <p> All child nodes of the target element specified by selector will be emptied and the given String value will be rendered as a single text node of the target element."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "132", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#Object#", "methodParameterName": "selector#value#", "methodBody": "public Renderer add(String selector, Object value) {\n        return add(create(selector, value));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for given value and add it to the current renderer. See  {@link #create(String,Object)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for given parameter. <p> A special typed renderer will be created by the type of the given value. If there is no coordinate renderer for the type of given value, the value#toString() will be used to retrieve a text for rendering."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "133", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#SpecialRenderer#", "methodParameterName": "selector#specialRenderer#", "methodBody": "public Renderer add(String selector, SpecialRenderer specialRenderer) {\n        return add(create(selector, specialRenderer));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for predefined  {@link SpecialRenderer}s.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "com.astamuse.asta4d.render.Renderer"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for predefined  {@link SpecialRenderer}s."}, {"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for recursive renderer rendering by given parameter. <p> The given renderer will be applied to element specified by the given selector."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "134", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#String#Long#", "methodParameterName": "selector#attr#value#", "methodBody": "public Renderer add(String selector, String attr, Long value) {\n        return add(create(selector, attr, value));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "See  {@link #add(String,String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.Long"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "See  {@link #create(String,String,String)}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "135", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#String#Integer#", "methodParameterName": "selector#attr#value#", "methodBody": "public Renderer add(String selector, String attr, Integer value) {\n        return add(create(selector, attr, value));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "See  {@link #add(String,String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.Integer"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "See  {@link #create(String,String,String)}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "136", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#String#Boolean#", "methodParameterName": "selector#attr#value#", "methodBody": "public Renderer add(String selector, String attr, Boolean value) {\n        return add(create(selector, attr, value));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "See  {@link #add(String,String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.Boolean"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "See  {@link #create(String,String,String)}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "137", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#String#String#", "methodParameterName": "selector#attr#value#", "methodBody": "public Renderer add(String selector, String attr, String value) {\n        return add(create(selector, attr, value));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for attribute setting by given parameter and add it to the current renderer. See {@link #create(String,String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for attribute setting by given parameter. <p> An additional character of \"+\" or \"-\" can be used as a prefix of attribute name. See detail at  {@link AttributeSetter}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "138", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#String#Object#", "methodParameterName": "selector#attr#value#", "methodBody": "public Renderer add(String selector, String attr, Object value) {\n        return add(create(selector, attr, value));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for attribute setting by given parameter and add it to the current renderer. See {@link #create(String,String,Object)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.Object"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for attribute setting by given parameter. <p> An additional character of \"+\" or \"-\" can be used as a prefix of attribute name. There is also a special logic for an instance with arbitrary type. See detail at  {@link AttributeSetter}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "139", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#Element#", "methodParameterName": "selector#elem#", "methodBody": "public Renderer add(String selector, Element elem) {\n        return add(create(selector, elem));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for element rendering by given parameter and add it to the current renderer. See  {@link #create(String,Element)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "org.jsoup.nodes.Element"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for element rendering by given parameter. <p> The target element specified by the selector will be completely replaced by the given element."}, {"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for element setting by given parameter. <p> The target element specified by the given selector will not be replaced and will be passed to the given  {@link ElementSetter} as aparameter."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "140", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#Component#", "methodParameterName": "selector#component#", "methodBody": "public Renderer add(String selector, Component component) {\n        return add(create(selector, component));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for  {@link Component} rendering by given parameter and add it to the current renderer. See{@link #create(String,Component)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "com.astamuse.asta4d.Component"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for  {@link Component} rendering by given parameter.<p> The target element specified by the selector will be completely replaced by the result of given  {@link Component#toElement()}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "141", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#ElementSetter#", "methodParameterName": "selector#setter#", "methodBody": "public Renderer add(String selector, ElementSetter setter) {\n        return add(create(selector, setter));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for element setting by given parameter and add it to the current renderer. See {@link #create(String,ElementSetter)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "com.astamuse.asta4d.render.ElementSetter"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for element setting by given parameter. <p> The target element specified by the given selector will not be replaced and will be passed to the given  {@link ElementSetter} as aparameter."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "142", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#Renderable#", "methodParameterName": "selector#renderable#", "methodBody": "public Renderer add(String selector, Renderable renderable) {\n        return add(create(selector, renderable));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for delayed rendering callback. See  {@link #create(String,Renderable)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "com.astamuse.asta4d.render.Renderable"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for delayed rendering callback <p> The target element specified by the given selector will be renderer by the returned value of  {@link Renderable#render()} which willnot be invoked until the target element is actually requiring the rendering action."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "143", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#Renderer#", "methodParameterName": "selector#renderer#", "methodBody": "public Renderer add(String selector, Renderer renderer) {\n        return add(create(selector, renderer));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for recursive renderer rendering by given parameter and add it to the current renderer. See {@link #create(String,Renderer)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "144", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#Stream<?>#", "methodParameterName": "selector#stream#", "methodBody": "public Renderer add(String selector, Stream<?> stream) {\n        return add(create(selector, stream));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for list rendering by given  {@link Stream} and add it to the current renderer. See {@link #create(String,Stream)}. <p> <b>Note:Parallel stream is not supported due to the potential thread dead lock(https://bugs.openjdk.java.net/browse/JDK-8042758) which is commented as not a bug by Oracle. For parallel rendering ,use  {@link RowConvertorBuilder#parallel(Function)}/ {@link RowConvertorBuilder#parallel(RowConvertor)} instead. </b>", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.util.stream.Stream"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for list rendering by given parameter with given  {@link Stream}. See  {@link #create(String,List)}. <p> <b>Note:Parallel stream is not supported due to the potential thread dead lock(https://bugs.openjdk.java.net/browse/JDK-8042758) which is commented as not a bug by Oracle. For parallel rendering ,use  {@link RowConvertorBuilder#parallel(Function)}/ {@link RowConvertorBuilder#parallel(RowConvertor)} instead. </b>"}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "145", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#Iterable<?>#", "methodParameterName": "selector#list#", "methodBody": "public Renderer add(String selector, Iterable<?> list) {\n        return add(create(selector, list));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for list rendering by given parameter and add it to the current renderer. See  {@link #create(String,Iterable)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.Iterable"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for list rendering by given parameter. <p> The target Element specified by the given selector will be duplicated times as the count of the given list and the contents of the list will be applied to the target Element too."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "146", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#Iterable<S>#RowConvertor<S,T>#", "methodParameterName": "selector#list#convertor#", "methodBody": "public <S, T> Renderer add(String selector, Iterable<S> list, RowConvertor<S, T> convertor) {\n        return add(create(selector, list, convertor));\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for list rendering by given parameter with given  {@link RowConvertor} and add it to the current renderer. See{@link #create(String,Iterable,RowConvertor)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.Iterable", "com.astamuse.asta4d.util.collection.RowConvertor"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for list rendering by given parameter with given  {@link RowConvertor}. See  {@link #create(String,List)}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "147", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.add", "methodParameterType": "String#Iterable<S>#Function<S,T>#", "methodParameterName": "selector#list#mapper#", "methodBody": "public <S, T> Renderer add(String selector, Iterable<S> list, Function<S, T> mapper) {\n        return add(create(selector, list, mapper));\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for list rendering by given parameter with given  {@link RowConvertor} and add it to the current renderer. See{@link #create(String,Iterable,Function)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["java.lang.String", "java.lang.Iterable", "java.util.function.Function"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for list rendering by given parameter with given mapper. See  {@link #create(String,List)}."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "148", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.addDebugger", "methodParameterType": "Logger#String#String#", "methodParameterName": "logger#logMessage#selector#", "methodBody": "public Renderer addDebugger(Logger logger, String logMessage, String selector) {\n        return logger.isDebugEnabled() ? add(create(selector, new DebugRenderer(logger, logMessage))) : this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#MethodInvocation#ThisExpression#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)MethodInvocation(ThisExpression)ThisExpression)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "add a  {@link DebugRenderer} to the current Renderer and when this renderer is applied, the target element specified by the givenselector will be output by given logger.", "call_func_name": ["org.slf4j.Logger.isDebugEnabled", "com.astamuse.asta4d.render.DebugRenderer.<init>", "com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [[""], ["org.slf4j.Logger", "java.lang.String"], ["java.lang.String", "com.astamuse.asta4d.render.Renderer"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for predefined  {@link SpecialRenderer}s."}, {"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for recursive renderer rendering by given parameter. <p> The given renderer will be applied to element specified by the given selector."}, {"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "149", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.addDebugger", "methodParameterType": "Logger#String#", "methodParameterName": "logger#logMessage#", "methodBody": "public Renderer addDebugger(Logger logger, String logMessage) {\n        return logger.isDebugEnabled() ? add(new DebugRenderer(logger, logMessage)) : this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ThisExpression#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation(ThisExpression)ThisExpression)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "add a  {@link DebugRenderer} to the current Renderer and when this renderer is applied, the current rendering element (commonly theentry element of the current rendering method, see  {@link Context#setCurrentRenderingElement(Element)}) will be output by given logger.", "call_func_name": ["org.slf4j.Logger.isDebugEnabled", "com.astamuse.asta4d.render.DebugRenderer.<init>", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [[""], ["org.slf4j.Logger", "java.lang.String"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "150", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.addDebugger", "methodParameterType": "String#String#", "methodParameterName": "logMessage#selector#", "methodBody": "public Renderer addDebugger(String logMessage, String selector) {\n        return addDebugger(DebugRenderer.DefaultLogger, logMessage, selector);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "add a  {@link DebugRenderer} to the current Renderer and when this renderer is applied, the target element specified by the givenselector will be output by default inner logger.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.addDebugger"], "call_func_parameter": [["org.slf4j.Logger", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.addDebugger": "add a  {@link DebugRenderer} to the current Renderer and when this renderer is applied, the target element specified by the givenselector will be output by given logger."}]}, {"index": "151", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.addDebugger", "methodParameterType": "String#", "methodParameterName": "logMessage#", "methodBody": "public Renderer addDebugger(String logMessage) {\n        return addDebugger(DebugRenderer.DefaultLogger, logMessage);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "add a  {@link DebugRenderer} to the current Renderer and when this renderer is applied, the current rendering element (commonly theentry element of the current rendering method, see  {@link Context#setCurrentRenderingElement(Element)}) will be output by default inner logger.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.addDebugger"], "call_func_parameter": [["org.slf4j.Logger", "java.lang.String"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.addDebugger": "add a  {@link DebugRenderer} to the current Renderer and when this renderer is applied, the current rendering element (commonly theentry element of the current rendering method, see  {@link Context#setCurrentRenderingElement(Element)}) will be output by given logger."}]}, {"index": "152", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#Long#", "methodParameterName": "selector#value#", "methodBody": "public final static Renderer create(String selector, Long value) {\n        if (value == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            return create(selector, new TextSetter(value));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "See  {@link #create(String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "com.astamuse.asta4d.render.TextSetter.<init>", "com.astamuse.asta4d.render.Renderer.create"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], ["java.lang.Object"], ["java.lang.String", "com.astamuse.asta4d.render.ElementSetter"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for element setting by given parameter. <p> The target element specified by the given selector will not be replaced and will be passed to the given  {@link ElementSetter} as aparameter."}]}, {"index": "153", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#Integer#", "methodParameterName": "selector#value#", "methodBody": "public final static Renderer create(String selector, Integer value) {\n        if (value == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            return create(selector, new TextSetter(value));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "See  {@link #create(String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "com.astamuse.asta4d.render.TextSetter.<init>", "com.astamuse.asta4d.render.Renderer.create"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], ["java.lang.Object"], ["java.lang.String", "com.astamuse.asta4d.render.ElementSetter"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for element setting by given parameter. <p> The target element specified by the given selector will not be replaced and will be passed to the given  {@link ElementSetter} as aparameter."}]}, {"index": "154", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#Boolean#", "methodParameterName": "selector#value#", "methodBody": "public final static Renderer create(String selector, Boolean value) {\n        if (value == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            return create(selector, new TextSetter(value));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "See  {@link #create(String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "com.astamuse.asta4d.render.TextSetter.<init>", "com.astamuse.asta4d.render.Renderer.create"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], ["java.lang.Object"], ["java.lang.String", "com.astamuse.asta4d.render.ElementSetter"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for element setting by given parameter. <p> The target element specified by the given selector will not be replaced and will be passed to the given  {@link ElementSetter} as aparameter."}]}, {"index": "155", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#String#", "methodParameterName": "selector#value#", "methodBody": "public final static Renderer create(String selector, String value) {\n        if (value == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            return create(selector, new TextSetter(value));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for text by given parameter. <p> All child nodes of the target element specified by selector will be emptied and the given String value will be rendered as a single text node of the target element.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "com.astamuse.asta4d.render.TextSetter.<init>", "com.astamuse.asta4d.render.Renderer.create"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], ["java.lang.Object"], ["java.lang.String", "com.astamuse.asta4d.render.ElementSetter"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for element setting by given parameter. <p> The target element specified by the given selector will not be replaced and will be passed to the given  {@link ElementSetter} as aparameter."}]}, {"index": "156", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#Object#", "methodParameterName": "selector#value#", "methodBody": "public final static Renderer create(String selector, Object value) {\n        if (value == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            return new Renderer(selector, TransformerFactory.generateTransformer(value));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for given parameter. <p> A special typed renderer will be created by the type of the given value. If there is no coordinate renderer for the type of given value, the value#toString() will be used to retrieve a text for rendering.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "com.astamuse.asta4d.render.transformer.TransformerFactory.generateTransformer"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#SpecialRenderer#", "methodParameterName": "selector#specialRenderer#", "methodBody": "public final static Renderer create(String selector, SpecialRenderer specialRenderer) {\n        if (specialRenderer == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            return new Renderer(selector, specialRenderer.getTransformer());\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for predefined  {@link SpecialRenderer}s.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "com.astamuse.asta4d.render.transformer.RendererTransformer.<init>"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#String#Long#", "methodParameterName": "selector#attr#value#", "methodBody": "public final static Renderer create(String selector, String attr, Long value) {\n        if (value == null) {\n            return create(selector, attr, (String) null);\n        } else {\n            return create(selector, attr, String.valueOf(value));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#NullLiteral#CastExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)CastExpression)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "See  {@link #create(String,String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "java.lang.String.valueOf"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for attribute setting by given parameter. <p> An additional character of \"+\" or \"-\" can be used as a prefix of attribute name. See detail at  {@link AttributeSetter}."}]}, {"index": "159", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#String#Integer#", "methodParameterName": "selector#attr#value#", "methodBody": "public final static Renderer create(String selector, String attr, Integer value) {\n        if (value == null) {\n            return create(selector, attr, (String) null);\n        } else {\n            return create(selector, attr, String.valueOf(value));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#NullLiteral#CastExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)CastExpression)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "See  {@link #create(String,String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "java.lang.String.valueOf"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for attribute setting by given parameter. <p> An additional character of \"+\" or \"-\" can be used as a prefix of attribute name. See detail at  {@link AttributeSetter}."}]}, {"index": "160", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#String#Boolean#", "methodParameterName": "selector#attr#value#", "methodBody": "public final static Renderer create(String selector, String attr, Boolean value) {\n        if (value == null) {\n            return create(selector, attr, (String) null);\n        } else {\n            return create(selector, attr, String.valueOf(value));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#NullLiteral#CastExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)CastExpression)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "See  {@link #create(String,String,String)}.", "call_func_name": ["com.astamuse.asta4d.render.Renderer.create", "java.lang.String.valueOf"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for attribute setting by given parameter. <p> An additional character of \"+\" or \"-\" can be used as a prefix of attribute name. See detail at  {@link AttributeSetter}."}]}, {"index": "161", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#String#String#", "methodParameterName": "selector#attr#value#", "methodBody": "public final static Renderer create(String selector, String attr, String value) {\n        return create(selector, new AttributeSetter(attr, value));\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for attribute setting by given parameter. <p> An additional character of \"+\" or \"-\" can be used as a prefix of attribute name. See detail at  {@link AttributeSetter}.", "call_func_name": ["com.astamuse.asta4d.render.AttributeSetter.<init>", "com.astamuse.asta4d.render.Renderer.create"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "com.astamuse.asta4d.render.ElementSetter"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for element setting by given parameter. <p> The target element specified by the given selector will not be replaced and will be passed to the given  {@link ElementSetter} as aparameter."}]}, {"index": "162", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#String#Object#", "methodParameterName": "selector#attr#value#", "methodBody": "public final static Renderer create(String selector, String attr, Object value) {\n        return create(selector, new AttributeSetter(attr, value));\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for attribute setting by given parameter. <p> An additional character of \"+\" or \"-\" can be used as a prefix of attribute name. There is also a special logic for an instance with arbitrary type. See detail at  {@link AttributeSetter}.", "call_func_name": ["com.astamuse.asta4d.render.AttributeSetter.<init>", "com.astamuse.asta4d.render.Renderer.create"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["java.lang.String", "com.astamuse.asta4d.render.ElementSetter"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for element setting by given parameter. <p> The target element specified by the given selector will not be replaced and will be passed to the given  {@link ElementSetter} as aparameter."}]}, {"index": "163", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#Element#", "methodParameterName": "selector#elem#", "methodBody": "public final static Renderer create(String selector, Element elem) {\n        if (elem == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            return new Renderer(selector, new ElementTransformer(elem));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for element rendering by given parameter. <p> The target element specified by the selector will be completely replaced by the given element.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "com.astamuse.asta4d.render.transformer.ElementTransformer.<init>"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], ["org.jsoup.nodes.Element"]], "passed_comments": "/"}, {"index": "164", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#Component#", "methodParameterName": "selector#component#", "methodBody": "public final static Renderer create(String selector, Component component) {\n        if (component == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            return new Renderer(selector, new ElementTransformer(component.toElement()));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for  {@link Component} rendering by given parameter.<p> The target element specified by the selector will be completely replaced by the result of given  {@link Component#toElement()}.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "com.astamuse.asta4d.Component.toElement", "com.astamuse.asta4d.render.transformer.ElementTransformer.<init>"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], [""], ["org.jsoup.nodes.Element"]], "passed_comments": "/"}, {"index": "165", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#ElementSetter#", "methodParameterName": "selector#setter#", "methodBody": "public final static Renderer create(String selector, ElementSetter setter) {\n        if (setter == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            return new Renderer(selector, new ElementSetterTransformer(setter));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for element setting by given parameter. <p> The target element specified by the given selector will not be replaced and will be passed to the given  {@link ElementSetter} as aparameter.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "com.astamuse.asta4d.render.transformer.ElementSetterTransformer.<init>"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], ["com.astamuse.asta4d.render.ElementSetter"]], "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#Renderable#", "methodParameterName": "selector#renderable#", "methodBody": "public final static Renderer create(String selector, Renderable renderable) {\n        if (renderable == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            return new Renderer(selector, new RenderableTransformer(renderable));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for delayed rendering callback <p> The target element specified by the given selector will be renderer by the returned value of  {@link Renderable#render()} which willnot be invoked until the target element is actually requiring the rendering action.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "com.astamuse.asta4d.render.transformer.RenderableTransformer.<init>"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], ["com.astamuse.asta4d.render.Renderable"]], "passed_comments": "/"}, {"index": "167", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#Renderer#", "methodParameterName": "selector#renderer#", "methodBody": "public final static Renderer create(String selector, Renderer renderer) {\n        if (renderer == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            return new Renderer(selector, new RendererTransformer(renderer));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for recursive renderer rendering by given parameter. <p> The given renderer will be applied to element specified by the given selector.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "168", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final static Renderer create() {\n        return new GoThroughRenderer();\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method is a convenience to creating an instance of  {@link GoThroughRenderer}", "call_func_name": ["com.astamuse.asta4d.render.GoThroughRenderer.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "169", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#Stream<?>#", "methodParameterName": "selector#stream#", "methodBody": "public final static Renderer create(String selector, Stream<?> stream) {\n        if (stream == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            if (stream.isParallel()) {\n                String msg = \"Parallel stream is not supported due to the potential thread dead lock\" +\n                        \"(https://bugs.openjdk.java.net/browse/JDK-8042758) which is commented as not a bug by Oracle. For parallel \" +\n                        \"rendering ,use RowConvertorBuilder#parallel(Function)/RowConvertorBuilder#parallel(RowConvertor) instead.\";\n                throw new IllegalArgumentException(msg);\n            } else {\n                List<Transformer<?>> list = stream.map(obj -> {\n                    return TransformerFactory.generateTransformer(obj);\n                }).collect(Collectors.toList());\n\n                return new Renderer(selector, list);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for list rendering by given parameter with given  {@link Stream}. See  {@link #create(String,List)}. <p> <b>Note:Parallel stream is not supported due to the potential thread dead lock(https://bugs.openjdk.java.net/browse/JDK-8042758) which is commented as not a bug by Oracle. For parallel rendering ,use  {@link RowConvertorBuilder#parallel(Function)}/ {@link RowConvertorBuilder#parallel(RowConvertor)} instead. </b>", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "java.util.stream.Stream.isParallel", "java.lang.IllegalArgumentException.<init>", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "com.astamuse.asta4d.render.Renderer.<init>"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], [""], ["java.lang.String"], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"], ["java.lang.String", "java.util.List"]], "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#Iterable<?>#", "methodParameterName": "selector#list#", "methodBody": "public final static Renderer create(String selector, Iterable<?> list) {\n        if (list == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            List<Transformer<?>> transformerList = new LinkedList<>();\n            for (Object obj : list) {\n                transformerList.add(TransformerFactory.generateTransformer(obj));\n            }\n            return new Renderer(selector, transformerList);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for list rendering by given parameter. <p> The target Element specified by the given selector will be duplicated times as the count of the given list and the contents of the list will be applied to the target Element too.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "java.util.LinkedList.<init>", "java.lang.Iterable.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.astamuse.asta4d.render.transformer.TransformerFactory.generateTransformer", "java.util.List.add", "com.astamuse.asta4d.render.Renderer.<init>"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.String", "java.util.List"]], "passed_comments": "/"}, {"index": "171", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#Iterable<S>#RowConvertor<S,T>#", "methodParameterName": "selector#list#convertor#", "methodBody": "public final static <S, T> Renderer create(String selector, Iterable<S> list, RowConvertor<S, T> convertor) {\n        if (list == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            if (convertor.isParallel() && !Configuration.getConfiguration().isBlockParallelListRendering()) {\n                return create(selector, ListConvertUtil.transformToFuture(list, convertor));\n            } else {\n                return create(selector, ListConvertUtil.transform(list, convertor));\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for list rendering by given parameter with given  {@link RowConvertor}. See  {@link #create(String,List)}.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "com.astamuse.asta4d.util.collection.RowConvertor.isParallel", "com.astamuse.asta4d.Configuration.getConfiguration", "com.astamuse.asta4d.Configuration.isBlockParallelListRendering", "com.astamuse.asta4d.util.collection.ListConvertUtil.transformToFuture", "com.astamuse.asta4d.render.Renderer.create", "com.astamuse.asta4d.util.collection.ListConvertUtil.transform"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], [""], [""], [""], ["java.lang.Iterable", "com.astamuse.asta4d.util.collection.RowConvertor"], ["java.lang.String", "java.lang.Iterable"], ["java.lang.Iterable", "com.astamuse.asta4d.util.collection.RowConvertor"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for list rendering by given parameter. <p> The target Element specified by the given selector will be duplicated times as the count of the given list and the contents of the list will be applied to the target Element too."}]}, {"index": "172", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.create", "methodParameterType": "String#Iterable<S>#Function<S,T>#", "methodParameterName": "selector#list#mapper#", "methodBody": "public final static <S, T> Renderer create(String selector, Iterable<S> list, Function<S, T> mapper) {\n        if (list == null) {\n            return new Renderer(selector, new ElementRemover());\n        } else {\n            return create(selector, list, RowConvertorBuilder.map(mapper));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a renderer for list rendering by given parameter with given mapper. See  {@link #create(String,List)}.", "call_func_name": ["com.astamuse.asta4d.render.ElementRemover.<init>", "com.astamuse.asta4d.render.Renderer.<init>", "com.astamuse.asta4d.util.collection.RowConvertorBuilder.map", "com.astamuse.asta4d.render.Renderer.create"], "call_func_parameter": [[""], ["java.lang.String", "com.astamuse.asta4d.render.transformer.Transformer"], ["java.util.function.Function"], ["java.lang.String", "java.lang.Iterable", "com.astamuse.asta4d.util.collection.RowConvertor"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.create": "Create a renderer for list rendering by given parameter with given  {@link RowConvertor}. See  {@link #create(String,List)}."}]}, {"index": "173", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.disableMissingSelectorWarning", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Renderer disableMissingSelectorWarning() {\n        return this.add(new RenderActionRenderer(RenderActionStyle.DISABLE_MISSING_SELECTOR_WARNING));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return a renderer reference for chain calling", "call_func_name": ["com.astamuse.asta4d.render.RenderActionRenderer.<init>", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["com.astamuse.asta4d.render.RenderActionStyle"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "174", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/Renderer.java", "methodName": "com.astamuse.asta4d.render.Renderer.enableMissingSelectorWarning", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Renderer enableMissingSelectorWarning() {\n        return this.add(new RenderActionRenderer(RenderActionStyle.ENABLE_MISSING_SELECTOR_WARNING));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return a renderer reference for chain calling", "call_func_name": ["com.astamuse.asta4d.render.RenderActionRenderer.<init>", "com.astamuse.asta4d.render.Renderer.add"], "call_func_parameter": [["com.astamuse.asta4d.render.RenderActionStyle"], ["com.astamuse.asta4d.render.Renderer"]], "passed_comments": [{"com.astamuse.asta4d.render.Renderer.add": "add a renderer to the current renderer as a list"}]}, {"index": "175", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/render/AttributeSetter.java", "methodName": "com.astamuse.asta4d.render.AttributeSetter.AttributeSetter", "methodParameterType": "String#Object#", "methodParameterName": "attr#value#", "methodBody": "public AttributeSetter(String attr, Object value) {\n        super();\n\n        this.originalAttrName = attr;\n        this.originalValue = value;\n\n        if (attr.equalsIgnoreCase(\"+class\")) {\n            this.actionType = ActionType.ADDCLASS;\n            this.attrName = \"class\";\n        } else if (attr.equalsIgnoreCase(\"-class\")) {\n            this.actionType = ActionType.REMOVECLASS;\n            this.attrName = \"class\";\n        } else if (attr.equalsIgnoreCase(\"class\")) {\n            if (value == null) {\n                this.actionType = ActionType.REMOVE;\n                this.attrName = \"class\";\n            } else {\n                this.actionType = ActionType.SET;\n                this.attrName = \"class\";\n            }\n        } else {\n            if (attr.startsWith(\"-\")) {\n                this.actionType = ActionType.REMOVE;\n                this.attrName = attr.substring(1);\n            } else {\n                if (attr.startsWith(\"+\")) {\n                    this.attrName = attr.substring(1);\n                } else {\n                    this.attrName = attr;\n                }\n                if (value == null) {\n                    this.actionType = ActionType.REMOVE;\n                } else if (value == Clear) {\n                    this.actionType = ActionType.REMOVE;\n                } else {\n                    this.actionType = ActionType.SET;\n                }\n            }\n        }\n\n        this.attrValue = value == null ? \"null\" : value;\n        if (actionType == ActionType.ADDCLASS || actionType == ActionType.REMOVECLASS) {\n            if (!(attrValue instanceof String)) {\n                throw new IllegalArgumentException(\"Only String type is allowed in class setting but found unexpected value type : \" +\n                        attrValue.getClass().getName());\n            }\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Block#IfStatement#Block#IfStatement#IfStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NullLiteral#InfixExpression#StringLiteral#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)Block)IfStatement)Block)IfStatement)IfStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(IfStatement(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "176", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/template/Template.java", "methodName": "com.astamuse.asta4d.template.Template.Template", "methodParameterType": "String#Document#", "methodParameterName": "path#doc#", "methodBody": "public Template(String path, Document doc) throws TemplateException, TemplateNotFoundException {\n        this.path = path;\n        this.doc = doc;\n        initDocument();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param path the actual template path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "177", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/template/AbstractTemplateResolver.java", "methodName": "com.astamuse.asta4d.template.AbstractTemplateResolver.findTemplate", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public Template findTemplate(String path) throws TemplateException, TemplateNotFoundException {\n        try {\n\n            MemorySafeResourceCache<String, Template> templateCache = retrieveTemplateCache();\n\n            Locale locale = LocalizeUtil.defaultWhenNull(null);\n            String cacheKey = LocalizeUtil.createLocalizedKey(path, locale);\n\n            ResouceHolder<Template> resource = templateCache.get(cacheKey);\n\n            if (resource != null) {\n                if (resource.exists()) {\n                    return resource.get();\n                } else {\n                    throw new TemplateNotFoundException(path);\n                }\n            }\n            logger.info(\"Initializing template \" + path);\n            TemplateInfo info = searchResource(\"/\", LocalizeUtil.getCandidatePaths(path, locale));\n            if (info == null) {\n                templateCache.put(cacheKey, null);\n                throw new TemplateNotFoundException(path);\n            }\n            InputStream input = info.getInput();\n            if (input == null) {\n                templateCache.put(cacheKey, null);\n                throw new TemplateNotFoundException(path);\n            }\n\n            try {\n                Template t = createTemplate(info);\n                templateCache.put(cacheKey, t);\n                return t;\n            } finally {\n                // we have to close the input stream to avoid file lock\n                try {\n                    input.close();\n                } catch (Exception ex) {\n                    logger.error(\"Error occured when close input stream of \" + info.getActualPath(), ex);\n                }\n            }\n\n        } catch (TemplateNotFoundException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new TemplateException(path + \" resolve error\", e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@param path", "call_func_name": ["com.astamuse.asta4d.template.AbstractTemplateResolver.retrieveTemplateCache", "com.astamuse.asta4d.util.i18n.LocalizeUtil.defaultWhenNull", "com.astamuse.asta4d.util.i18n.LocalizeUtil.createLocalizedKey", "com.astamuse.asta4d.util.MemorySafeResourceCache.get", "com.astamuse.asta4d.template.TemplateNotFoundException.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.info", "com.astamuse.asta4d.util.i18n.LocalizeUtil.getCandidatePaths", "com.astamuse.asta4d.template.AbstractTemplateResolver.searchResource", "com.astamuse.asta4d.util.MemorySafeResourceCache.put", "java.io.InputStream.close", "org.slf4j.Logger.error", "com.astamuse.asta4d.template.TemplateException.<init>"], "call_func_parameter": [[""], ["java.util.Locale"], ["java.lang.String", "java.util.Locale"], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.util.Locale"], ["java.lang.String", "java.lang.String[]"], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "178", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/template/TemplateResolver.java", "methodName": "com.astamuse.asta4d.template.TemplateResolver.findTemplate", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public Template findTemplate(String path) throws TemplateException, TemplateNotFoundException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "@param path", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "179", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/template/TemplateUtil.java", "methodName": "com.astamuse.asta4d.template.TemplateUtil.loadStaticEmebed", "methodParameterType": "Document#", "methodParameterName": "doc#", "methodBody": "@SuppressWarnings(\"unused\")\n    @Deprecated\n    private final static void loadStaticEmebed(Document doc) throws TemplateException, TemplateNotFoundException {\n\n        String selector = SelectorUtil.attr(SelectorUtil.tag(ExtNodeConstants.EMBED_NODE_TAG_SELECTOR),\n                ExtNodeConstants.EMBED_NODE_ATTR_STATIC, null);\n\n        int embedNodeListCount;\n        do {\n            List<Element> embedNodeList = doc.select(selector);\n            embedNodeListCount = embedNodeList.size();\n            Iterator<Element> embedNodeIterator = embedNodeList.iterator();\n            Element embed;\n            Element embedContent;\n            while (embedNodeIterator.hasNext()) {\n                embed = embedNodeIterator.next();\n                embedContent = getEmbedNodeContent(embed);\n                mergeBlock(doc, embedContent);\n                embed.before(embedContent);\n                embed.remove();\n            }\n        } while (embedNodeListCount > 0);\n\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#SimpleName#NumberLiteral#InfixExpression#DoStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)DoStatement)Block)MethodDeclaration", "methodDoc": "Disabled static embed at 2014.09.26. Developers would like to use different snippets to render a same static embed file as following: <pre> &lt;afd:snippet render=\"SomeSnippet\"&gt; &lt;afd:embed target=\"/someEmbed.html\" static/&gt; &lt;/afd:snippet&gt; </pre> Which confuses rendering logic and makes bad source smell, thus we decide to disable this feature.", "call_func_name": ["com.astamuse.asta4d.util.SelectorUtil.tag", "com.astamuse.asta4d.util.SelectorUtil.attr", "org.jsoup.nodes.Document.select", "java.util.List.size", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.astamuse.asta4d.template.TemplateUtil.getEmbedNodeContent", "com.astamuse.asta4d.template.TemplateUtil.mergeBlock", "org.jsoup.nodes.Element.before", "org.jsoup.nodes.Element.remove"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String"], [""], [""], [""], [""], ["org.jsoup.nodes.Element"], ["org.jsoup.nodes.Document", "org.jsoup.nodes.Element"], ["org.jsoup.nodes.Node"], [""]], "passed_comments": "/"}, {"index": "180", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/annotation/ConvertableAnnotationRetriever.java", "methodName": "com.astamuse.asta4d.util.annotation.ConvertableAnnotationRetriever.retrieveAnnotationHierarchyList", "methodParameterType": "Class<? extends Annotation>#Annotation#", "methodParameterName": "targetAnnotation#annotations#", "methodBody": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public static final List<Annotation> retrieveAnnotationHierarchyList(Class<? extends Annotation> targetAnnotation,\n            Annotation... annotations) {\n\n        try {\n            String targetName = targetAnnotation.getName();\n            ConvertableAnnotation ca;\n            List<Annotation> list = new LinkedList<>();\n            for (Annotation annotation : annotations) {\n                list.clear();\n                while (true) {\n                    list.add(annotation);\n                    if (annotation.annotationType().getName().equals(targetName)) {\n                        // found\n                        break;\n                    }\n                    ca = annotation.annotationType().getAnnotation(ConvertableAnnotation.class);\n                    if (ca == null) {\n                        // not found\n                        list.clear();\n                        break;\n                    } else {\n                        AnnotationConvertor ac = ca.value().newInstance();\n                        annotation = ac.convert(annotation);\n                    }\n                }// end of while\n                if (!list.isEmpty()) {\n                    break;\n                }\n            }\n            Collections.reverse(list);\n            return list;\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BreakStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(WhileStatement(BooleanLiteral)BooleanLiteral(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(BreakStatement)BreakStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)WhileStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@param targetAnnotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "181", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/IdGenerator.java", "methodName": "com.astamuse.asta4d.util.IdGenerator.createId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final static String createId() {\n        IdHolder idHolder = idHolderCache.get();\n        return b64Encoder.encodeToString(idHolder.newId());\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "a unique id with thread id embedded and a process unique(random) number, as string.", "call_func_name": ["java.lang.ThreadLocal.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "182", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/IdGenerator.java", "methodName": "com.astamuse.asta4d.util.IdGenerator.createIdBytes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final static byte[] createIdBytes() {\n        IdHolder idHolder = idHolderCache.get();\n        return idHolder.newId();\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "a unique id with thread id embedded and a process unique(random) number, as byte array", "call_func_name": ["java.lang.ThreadLocal.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "183", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/ElementUtil.java", "methodName": "com.astamuse.asta4d.util.ElementUtil.parseAsSingle", "methodParameterType": "String#", "methodParameterName": "html#", "methodBody": "public final static Element parseAsSingle(String html) {\n        Element body = Jsoup.parseBodyFragment(html).body();\n        List<Node> children = body.childNodes();\n        return wrapElementsToSingleNode(children);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "parse given html source to a single Element <p> <b>ATTENTION</b>: this method will cause a potential XSS problem, so be sure that you have escaped the passed html string if necessary.", "call_func_name": ["org.jsoup.Jsoup.parseBodyFragment", "org.jsoup.nodes.Document.body", "org.jsoup.nodes.Element.childNodes", "com.astamuse.asta4d.util.ElementUtil.wrapElementsToSingleNode"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.util.List"]], "passed_comments": "/"}, {"index": "184", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/MemorySafeResourceCache.java", "methodName": "com.astamuse.asta4d.util.MemorySafeResourceCache.put", "methodParameterType": "K#V#", "methodParameterName": "key#resource#", "methodBody": "public void put(K key, V resource) {\n        if (key == null) {\n            throw new NullPointerException();\n        }\n        if (resource == null) {\n            getNotExistingResourceMap().put(key, notExistingHolder);\n        } else {\n            existingResourceMap.put(key, new ResouceHolder<>(resource));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@param key throw NullPointerException when key is null", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/I18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.I18nMessageHelper.getMessage", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public abstract String getMessage(String key);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "retrieve message by given key", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/I18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.I18nMessageHelper.getMessage", "methodParameterType": "Locale#String#", "methodParameterName": "locale#key#", "methodBody": "public abstract String getMessage(Locale locale, String key);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "retrieve message by given locale and key", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/I18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.I18nMessageHelper.getMessageWithDefault", "methodParameterType": "String#Object#", "methodParameterName": "key#defaultPattern#", "methodBody": "public abstract String getMessageWithDefault(String key, Object defaultPattern);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "retrieve message by given key", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/I18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.I18nMessageHelper.getMessageWithDefault", "methodParameterType": "Locale#String#Object#", "methodParameterName": "locale#key#defaultPattern#", "methodBody": "public abstract String getMessageWithDefault(Locale locale, String key, Object defaultPattern);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "retrieve message by given locale and key", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "189", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/MappedParamI18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.MappedParamI18nMessageHelper.getMessage", "methodParameterType": "String#Map<String,Object>#", "methodParameterName": "key#paramMap#", "methodBody": "public String getMessage(String key, Map<String, Object> paramMap) {\n        return getMessageInternal(null, key, null, paramMap);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#SimpleName#NullLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve message by given key and format it by given parameter map.", "call_func_name": ["com.astamuse.asta4d.util.i18n.MappedParamI18nMessageHelper.getMessageInternal"], "call_func_parameter": [["java.util.Locale", "java.lang.String", "java.lang.Object", "java.util.Map"]], "passed_comments": "/"}, {"index": "190", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/MappedParamI18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.MappedParamI18nMessageHelper.getMessage", "methodParameterType": "String#Pair#", "methodParameterName": "key#params#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    public String getMessage(String key, Pair... params) {\n        return getMessageInternal(null, key, null, pairToMap(params));\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve message by given key and format it by given parameter pairs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/MappedParamI18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.MappedParamI18nMessageHelper.getMessage", "methodParameterType": "Locale#String#Map<String,Object>#", "methodParameterName": "locale#key#paramMap#", "methodBody": "public String getMessage(Locale locale, String key, Map<String, Object> paramMap) {\n        return getMessageInternal(locale, key, null, paramMap);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve message by given locale and key and format it by given parameter map.", "call_func_name": ["com.astamuse.asta4d.util.i18n.MappedParamI18nMessageHelper.getMessageInternal"], "call_func_parameter": [["java.util.Locale", "java.lang.String", "java.lang.Object", "java.util.Map"]], "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/MappedParamI18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.MappedParamI18nMessageHelper.getMessage", "methodParameterType": "Locale#String#Pair#", "methodParameterName": "locale#key#params#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    public String getMessage(Locale locale, String key, Pair... params) {\n        return getMessageInternal(locale, key, null, pairToMap(params));\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve message by given locale and key and format it by given parameter pairs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/MappedParamI18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.MappedParamI18nMessageHelper.getMessageWithDefault", "methodParameterType": "String#Object#Map<String,Object>#", "methodParameterName": "key#defaultPattern#paramMap#", "methodBody": "public String getMessageWithDefault(String key, Object defaultPattern, Map<String, Object> paramMap) {\n        return getMessageInternal(null, key, defaultPattern, paramMap);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve message by given key and format it by given parameter map. If message is not found, defaultPattern#toString will be used to generate a default message pattern to be formatted.", "call_func_name": ["com.astamuse.asta4d.util.i18n.MappedParamI18nMessageHelper.getMessageInternal"], "call_func_parameter": [["java.util.Locale", "java.lang.String", "java.lang.Object", "java.util.Map"]], "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/MappedParamI18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.MappedParamI18nMessageHelper.getMessageWithDefault", "methodParameterType": "String#Object#Pair#", "methodParameterName": "key#defaultPattern#params#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    public String getMessageWithDefault(String key, Object defaultPattern, Pair... params) {\n        return getMessageInternal(null, key, defaultPattern, pairToMap(params));\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve message by given key and format it by given parameter pairs. If message is not found, defaultPattern#toString will be used to generate a default message pattern to be formatted.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/MappedParamI18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.MappedParamI18nMessageHelper.getMessageWithDefault", "methodParameterType": "Locale#String#Object#Map<String,Object>#", "methodParameterName": "locale#key#defaultPattern#paramMap#", "methodBody": "public String getMessageWithDefault(Locale locale, String key, Object defaultPattern, Map<String, Object> paramMap) {\n        return getMessageInternal(locale, key, defaultPattern, paramMap);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve message by given locale and key and format it by given parameter map. If message is not found, defaultPattern#toString will be used to generate a default message pattern to be formatted.", "call_func_name": ["com.astamuse.asta4d.util.i18n.MappedParamI18nMessageHelper.getMessageInternal"], "call_func_parameter": [["java.util.Locale", "java.lang.String", "java.lang.Object", "java.util.Map"]], "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/MappedParamI18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.MappedParamI18nMessageHelper.getMessageWithDefault", "methodParameterType": "Locale#String#Object#Pair#", "methodParameterName": "locale#key#defaultPattern#params#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    public String getMessageWithDefault(Locale locale, String key, Object defaultPattern, Pair... params) {\n        return getMessageInternal(locale, key, defaultPattern, pairToMap(params));\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve message by given locale and key and format it by given parameter pairs. If message is not found, defaultPattern#toString will be used to generate a default message pattern to be formatted.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/I18nMessageHelperTypeAssistant.java", "methodName": "com.astamuse.asta4d.util.i18n.I18nMessageHelperTypeAssistant.reCreateInternalInstance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n    public static void reCreateInternalInstance() {\n        if (System.getProperty(\"I18nMessageHelperTypeAssistant.Test\") != null) {\n            _instance = new I18nMessageHelperTypeAssistant();\n        } else {\n            throw new UnsupportedOperationException(\"reCreateInternalInstance() is used for test purpose. DO NOT USE IT!!!\");\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "DO NOT USE IT!!! IT IS FOR TEST PURPOSE!!!", "call_func_name": ["java.lang.System.getProperty", "com.astamuse.asta4d.util.i18n.I18nMessageHelperTypeAssistant.<init>", "java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/OrderedParamI18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.OrderedParamI18nMessageHelper.getMessage", "methodParameterType": "String#Object#", "methodParameterName": "key#params#", "methodBody": "public String getMessage(String key, Object... params) {\n        return getMessageInternal(null, key, null, params);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#SimpleName#NullLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve message by given key and format it by given parameter array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/OrderedParamI18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.OrderedParamI18nMessageHelper.getMessage", "methodParameterType": "Locale#String#Object#", "methodParameterName": "locale#key#params#", "methodBody": "public String getMessage(Locale locale, String key, Object... params) {\n        return getMessageInternal(locale, key, null, params);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve message by given locale and key and format it by given parameter array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/OrderedParamI18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.OrderedParamI18nMessageHelper.getMessageWithDefault", "methodParameterType": "String#Object#Object#", "methodParameterName": "key#defaultPattern#params#", "methodBody": "public String getMessageWithDefault(String key, Object defaultPattern, Object... params) {\n        return getMessageInternal(null, key, defaultPattern, params);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve message by given key and format it by given parameter array.If message is not found, defaultPattern#toString will be used to generate a default message pattern to be formatted.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "201", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/OrderedParamI18nMessageHelper.java", "methodName": "com.astamuse.asta4d.util.i18n.OrderedParamI18nMessageHelper.getMessageWithDefault", "methodParameterType": "Locale#String#Object#Object#", "methodParameterName": "locale#key#defaultPattern#params#", "methodBody": "public String getMessageWithDefault(Locale locale, String key, Object defaultPattern, Object... params) {\n        return getMessageInternal(locale, key, defaultPattern, params);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve message by given locale and key and format it by given parameter array.If message is not found, defaultPattern#toString will be used to generate a default message pattern to be formatted.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "202", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/pattern/MessagePatternRetriever.java", "methodName": "com.astamuse.asta4d.util.i18n.pattern.MessagePatternRetriever.retrieve", "methodParameterType": "Locale#String#", "methodParameterName": "locale#key#", "methodBody": "public String retrieve(Locale locale, String key);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param locale", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "203", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/util/i18n/pattern/JDKResourceBundleMessagePatternRetriever.java", "methodName": "com.astamuse.asta4d.util.i18n.pattern.JDKResourceBundleMessagePatternRetriever.retrieveResourceFromBundle", "methodParameterType": "ResourceBundle#String#", "methodParameterName": "bundle#key#", "methodBody": "protected String retrieveResourceFromBundle(ResourceBundle bundle, String key) throws MissingResourceException {\n        String res = null;\n        try {\n            return bundle.getString(key);\n        } catch (MissingResourceException e) {\n            // check if there is a splitted message\n            try {\n                res = bundle.getString(key + \"#1\");\n            } catch (MissingResourceException ex) {\n                // we throw the original exception\n                throw e;\n            }\n\n            StringBuilder sb = new StringBuilder(res.length() * 3);\n            sb.append(res);\n            try {\n                for (int row = 2;/* loop for ever */; row++) {\n                    sb.append(bundle.getString(key + \"#\" + row));\n                }\n            } catch (MissingResourceException ex) {\n                return sb.toString();\n            }\n\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#CatchClause#TryStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)CatchClause)TryStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "In this method, we allow row splitted message. For a given key, if there is no corresponding message, we will try to search keys as \"key#1\", \"key#2\"... then combine them as a single message.", "call_func_name": ["java.util.ResourceBundle.getString", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.length", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["int"], ["int"]], "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/Page.java", "methodName": "com.astamuse.asta4d.Page.outputBodyOnly", "methodParameterType": "OutputStream#", "methodParameterName": "out#", "methodBody": "@Deprecated\n    public void outputBodyOnly(OutputStream out) throws Exception {\n        out.write(renderedDocument.body().html().getBytes(StandardCharsets.UTF_8));\n\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "This method is for back forward compatibility in framework internal implementation, client developers should never use it.", "call_func_name": ["org.jsoup.nodes.Document.body", "org.jsoup.nodes.Element.html", "java.lang.String.getBytes", "java.io.OutputStream.write"], "call_func_parameter": [[""], [""], ["java.nio.charset.Charset"], ["byte[]"]], "passed_comments": "/"}, {"index": "205", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/data/ContextDataFinder.java", "methodName": "com.astamuse.asta4d.data.ContextDataFinder.findDataInContext", "methodParameterType": "Context#String#String#Class<?>#", "methodParameterName": "context#scope#name#type#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    public ContextDataHolder findDataInContext(Context context, String scope, String name, Class<?> type) throws DataOperationException;", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "find data from given context by certain logic", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "206", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/data/convertor/DataValueConvertor.java", "methodName": "com.astamuse.asta4d.data.convertor.DataValueConvertor.convert", "methodParameterType": "S#", "methodParameterName": "obj#", "methodBody": "public T convert(S obj) throws UnsupportedValueException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "convert a data from the original type to a certain type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "207", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/data/ContextBindData.java", "methodName": "com.astamuse.asta4d.data.ContextBindData.ContextBindData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ContextBindData() {\n        this(false);\n    }", "AST": "Javadoc#Modifier#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "The default constructor is for convenience of lazy load data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "208", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/data/ContextBindData.java", "methodName": "com.astamuse.asta4d.data.ContextBindData.ContextBindData", "methodParameterType": "boolean#", "methodParameterName": "contextSynchronizable#", "methodBody": "public ContextBindData(boolean contextSynchronizable) {\n        this.contextSynchronizable = contextSynchronizable;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "If contextSynchronizable is set to false, no synchronization operations will be performed and it is just a convenience for lazy load data. Otherwise, if contextSynchronizable is set to true, a Context based lock will be performed and the data will be load only once in the current context environment.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "209", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/data/InjectUtil.java", "methodName": "com.astamuse.asta4d.data.InjectUtil.injectToInstance", "methodParameterType": "Object#", "methodParameterName": "instance#", "methodBody": "public final static void injectToInstance(Object instance) throws DataOperationException {\n\n        InstanceWireTarget target = getInstanceTarget(instance);\n\n        for (FieldInfo fi : target.setFieldList) {\n            try {\n                ContextDataHolder valueHolder = null;\n                if (fi.isContextDataHolder) {\n                    valueHolder = (ContextDataHolder) FieldUtils.readField(fi.field, instance);\n                }\n                if (valueHolder == null) {\n                    valueHolder = fi.createDataHolderInstance();\n                }\n                Class searchType = valueHolder.getTypeCls();\n                if (searchType == null) {\n                    throw new DataOperationException(\n                            fi.field.getName() +\n                                    \" should be initialized at first or we can not retrieve the type you want since it is a type of CotnextDataHolder. \" +\n                                    \"You can also define an extended class to return the type class, in this case, you do not need to initialized it by your self\");\n                }\n                ContextDataHolder foundData = findValueForTarget(fi, searchType);\n\n                handleTypeUnMatch(instance, fi, foundData);\n\n                if (fi.isContextDataHolder) {\n                    transferDataHolder(foundData, valueHolder);\n                    FieldUtils.writeField(fi.field, instance, valueHolder, true);\n                } else {\n                    FieldUtils.writeField(fi.field, instance, foundData.getValue(), true);\n                }\n            } catch (IllegalAccessException | IllegalArgumentException | InstantiationException e) {\n                throw new DataOperationException(\"Exception when inject value to \" + fi.field.toString(), e);\n            }\n\n        }\n\n        for (MethodInfo mi : target.setMethodList) {\n            try {\n                ContextDataHolder valueHolder = mi.createDataHolderInstance();\n                Class searchType = valueHolder.getTypeCls();\n                if (searchType == null) {\n                    throw new DataOperationException(mi.method.getName() + \" cannot initialize an instance of \" +\n                            valueHolder.getClass().getName() + \". You should define an extended class to return the type class\");\n                }\n                ContextDataHolder foundData = findValueForTarget(mi, searchType);\n                handleTypeUnMatch(instance, mi, foundData);\n                if (mi.isContextDataHolder) {\n                    transferDataHolder(foundData, valueHolder);\n                    mi.method.invoke(instance, valueHolder);\n                } else {\n                    mi.method.invoke(instance, foundData.getValue());\n                }\n            } catch (IllegalAccessException | IllegalArgumentException | InstantiationException | InvocationTargetException e) {\n                throw new DataOperationException(\"Exception when inject value to \" + mi.method.toString(), e);\n            }\n        }\n\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#StringLiteral#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Set the value of all the fields marked by  {@link ContextData} of the given instance.", "call_func_name": ["com.astamuse.asta4d.data.InjectUtil.getInstanceTarget", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.commons.lang3.reflect.FieldUtils.readField", "com.astamuse.asta4d.data.ContextDataHolder.getTypeCls", "java.lang.StringBuilder.<init>", "java.lang.reflect.Field.getName", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.astamuse.asta4d.data.DataOperationException.<init>", "com.astamuse.asta4d.data.InjectUtil.transferDataHolder", "org.apache.commons.lang3.reflect.FieldUtils.writeField", "com.astamuse.asta4d.data.ContextDataHolder.getValue", "java.lang.reflect.Field.toString", "com.astamuse.asta4d.data.DataOperationException.<init>", "java.lang.reflect.Method.getName", "java.lang.Object.getClass", "java.lang.Class.getName", "java.lang.reflect.Method.invoke", "java.lang.reflect.Method.toString"], "call_func_parameter": [["java.lang.Object"], [""], [""], [""], ["java.lang.reflect.Field", "java.lang.Object"], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["com.astamuse.asta4d.data.ContextDataHolder", "com.astamuse.asta4d.data.ContextDataHolder"], ["java.lang.reflect.Field", "java.lang.Object", "java.lang.Object", "boolean"], [""], [""], ["java.lang.String", "java.lang.Throwable"], [""], [""], [""], ["java.lang.Object", "java.lang.Object[]"], [""]], "passed_comments": "/"}, {"index": "210", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/data/InjectUtil.java", "methodName": "com.astamuse.asta4d.data.InjectUtil.setContextDataFromInstance", "methodParameterType": "Object#", "methodParameterName": "instance#", "methodBody": "@Deprecated\n    public final static void setContextDataFromInstance(Object instance) throws DataOperationException {\n        try {\n            Context context = Context.getCurrentThreadContext();\n            InstanceWireTarget target = getInstanceTarget(instance);\n            Object value;\n            for (FieldInfo fi : target.getFieldList) {\n                value = FieldUtils.readField(fi.field, instance, true);\n                context.setData(fi.scope, fi.name, value);\n            }\n\n            for (MethodInfo mi : target.getMethodList) {\n                value = mi.method.invoke(instance);\n                context.setData(mi.scope, mi.name, value);\n            }\n        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n            String msg = String.format(\"Exception when inject value from instance of [%s] to Context.\", instance.getClass().toString());\n            throw new DataOperationException(msg, e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#BooleanLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve values from fields marked as reverse injectable of given instance. There are only limited scopes can be marked as injectable. See  {@link Configuration#setReverseInjectableScopes(List)}. NOT SUPPORTED ANY MORE!!!", "call_func_name": ["com.astamuse.asta4d.Context.getCurrentThreadContext", "com.astamuse.asta4d.data.InjectUtil.getInstanceTarget", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.commons.lang3.reflect.FieldUtils.readField", "com.astamuse.asta4d.Context.setData", "java.lang.reflect.Method.invoke", "java.lang.Object.getClass", "java.lang.Class.toString", "java.lang.String.format", "com.astamuse.asta4d.data.DataOperationException.<init>"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""], [""], ["java.lang.reflect.Field", "java.lang.Object", "boolean"], ["java.lang.String", "java.lang.String", "java.lang.Object"], ["java.lang.Object", "java.lang.Object[]"], [""], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "211", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/data/InjectUtil.java", "methodName": "com.astamuse.asta4d.data.InjectUtil.getMethodInjectParams", "methodParameterType": "Method#", "methodParameterName": "method#", "methodBody": "public final static Object[] getMethodInjectParams(Method method) throws DataOperationException {\n        ContextDataFinder dataFinder = Configuration.getConfiguration().getContextDataFinder();\n        return getMethodInjectParams(method, dataFinder);\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve value from  {@link Context} for given Method by configured {@link ContextDataFinder}", "call_func_name": ["com.astamuse.asta4d.Configuration.getConfiguration", "com.astamuse.asta4d.Configuration.getContextDataFinder", "com.astamuse.asta4d.data.InjectUtil.getMethodInjectParams"], "call_func_parameter": [[""], [""], ["java.lang.reflect.Method", "com.astamuse.asta4d.data.ContextDataFinder"]], "passed_comments": [{"com.astamuse.asta4d.data.InjectUtil.getMethodInjectParams": "Retrieve value from  {@link Context} for given Method by given {@link ContextDataFinder}"}]}, {"index": "212", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/data/InjectUtil.java", "methodName": "com.astamuse.asta4d.data.InjectUtil.getMethodInjectParams", "methodParameterType": "Method#ContextDataFinder#", "methodParameterName": "method#dataFinder#", "methodBody": "public final static Object[] getMethodInjectParams(Method method, ContextDataFinder dataFinder) throws DataOperationException {\n        try {\n            List<TargetInfo> targetList = getMethodTarget(method);\n            Object[] params = new Object[targetList.size()];\n            if (params.length == 0) {\n                return params;\n            }\n\n            TargetInfo target;\n\n            ContextDataHolder valueHolder, foundData;\n\n            Class searchType;\n\n            for (int i = 0; i < params.length; i++) {\n                target = targetList.get(i);\n\n                valueHolder = target.createDataHolderInstance();\n                searchType = valueHolder.getTypeCls();\n                if (searchType == null) {\n                    throw new DataOperationException(method.getName() + \" cannot initialize an instance of \" +\n                            valueHolder.getClass().getName() + \". You should define an extended class to return the type class\");\n                }\n                foundData = findValueForTarget(target, searchType);\n                handleTypeUnMatch(method, i, target, foundData);\n\n                if (target.isContextDataHolder) {\n                    transferDataHolder(foundData, valueHolder);\n                    params[i] = valueHolder;\n                } else {\n                    params[i] = foundData.getValue();\n                }\n\n            }\n\n            return params;\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new DataOperationException(\"create instance failed.\", e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve value from  {@link Context} for given Method by given {@link ContextDataFinder}", "call_func_name": ["com.astamuse.asta4d.data.InjectUtil.getMethodTarget", "java.util.List.size", "java.util.List.get", "com.astamuse.asta4d.data.ContextDataHolder.getTypeCls", "java.lang.StringBuilder.<init>", "java.lang.reflect.Method.getName", "java.lang.StringBuilder.append", "java.lang.Object.getClass", "java.lang.Class.getName", "java.lang.StringBuilder.toString", "com.astamuse.asta4d.data.DataOperationException.<init>", "com.astamuse.asta4d.data.InjectUtil.transferDataHolder", "com.astamuse.asta4d.data.ContextDataHolder.getValue", "com.astamuse.asta4d.data.DataOperationException.<init>"], "call_func_parameter": [["java.lang.reflect.Method"], [""], ["int"], [""], [""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["com.astamuse.asta4d.data.ContextDataHolder", "com.astamuse.asta4d.data.ContextDataHolder"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "213", "file": "/root/repos/repos33/asta4d/asta4d-core/src/main/java/com/astamuse/asta4d/Context.java", "methodName": "com.astamuse.asta4d.Context.createMapForScope", "methodParameterType": "String#", "methodParameterName": "scope#", "methodBody": "protected ContextMap createMapForScope(String scope) {\n        ContextMap map = null;\n        switch (scope) {\n        case SCOPE_GLOBAL:\n            map = globalMap;\n            break;\n        case SCOPE_EXT_ATTR:\n            map = DelegatedContextMap.createBySingletonConcurrentHashMap();\n            break;\n        default:\n            map = DelegatedContextMap.createByNonThreadSafeHashMap();\n        }\n        return map;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleName#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SwitchStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)SwitchStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "sub class can override this method for custom scope map instance", "call_func_name": ["java.lang.String.hashCode", "java.lang.String.equals", "com.astamuse.asta4d.util.DelegatedContextMap.createBySingletonConcurrentHashMap", "com.astamuse.asta4d.util.DelegatedContextMap.createByNonThreadSafeHashMap"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""]], "passed_comments": "/"}, {"index": "214", "file": "/root/repos/repos33/asta4d/asta4d-archetype/src/main/resources/archetype-resources/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjTypeUnMatchValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjTypeUnMatchValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "215", "file": "/root/repos/repos33/asta4d/asta4d-archetype/src/main/resources/archetype-resources/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjValueValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjValueValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "216", "file": "/root/repos/repos33/asta4d/asta4d-archetype/src/main/resources/archetype-resources/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjCommonValidatoinMessageLogics.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjCommonValidatoinMessageLogics.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    public String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        // treat the annotated message as key\n        String msg = messageHelper.getMessageWithDefault(annotatedMsg, annotatedMsg);\n        if (addFieldLablePrefixToMessage) {\n            return String.format(\"%s: %s\", fieldLabel, msg);\n        } else {\n            return msg;\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "we share the annotated message logic here", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "217", "file": "/root/repos/repos33/asta4d/asta4d-archetype/src/main/resources/archetype-resources/src/main/java/com/astamuse/asta4d/sample/snippet/form/SingleStepFormSnippet.java", "methodName": "com.astamuse.asta4d.sample.snippet.form.SingleStepFormSnippet.retrieveFieldPrepareRenderers", "methodParameterType": "String#Object#", "methodParameterName": "renderTargetStep#form#", "methodBody": "@Override\n    public List<FormFieldPrepareRenderer> retrieveFieldPrepareRenderers(String renderTargetStep, Object form) {\n        List<FormFieldPrepareRenderer> list = new LinkedList<>();\n\n        list.add(new SelectPrepareRenderer(PersonForm.class, \"bloodtype\").setOptionData(BloodType.asOptionValueMap));\n\n        list.add(new RadioPrepareRenderer(PersonForm.class, \"sex\").setOptionData(SEX.asOptionValueMap));\n\n        list.add(new CheckboxPrepareRenderer(PersonForm.class, \"language\").setOptionData(Language.asOptionValueMap));\n\n        return list;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "override this method to supply the option data for select, radio and checkbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "218", "file": "/root/repos/repos33/asta4d/asta4d-archetype/target/classes/archetype-resources/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjTypeUnMatchValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjTypeUnMatchValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "219", "file": "/root/repos/repos33/asta4d/asta4d-archetype/target/classes/archetype-resources/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjValueValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjValueValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "220", "file": "/root/repos/repos33/asta4d/asta4d-archetype/target/classes/archetype-resources/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjCommonValidatoinMessageLogics.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjCommonValidatoinMessageLogics.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    public String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        // treat the annotated message as key\n        String msg = messageHelper.getMessageWithDefault(annotatedMsg, annotatedMsg);\n        if (addFieldLablePrefixToMessage) {\n            return String.format(\"%s: %s\", fieldLabel, msg);\n        } else {\n            return msg;\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "we share the annotated message logic here", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "221", "file": "/root/repos/repos33/asta4d/asta4d-archetype/target/classes/archetype-resources/src/main/java/com/astamuse/asta4d/sample/snippet/form/SingleStepFormSnippet.java", "methodName": "com.astamuse.asta4d.sample.snippet.form.SingleStepFormSnippet.retrieveFieldPrepareRenderers", "methodParameterType": "String#Object#", "methodParameterName": "renderTargetStep#form#", "methodBody": "@Override\n    public List<FormFieldPrepareRenderer> retrieveFieldPrepareRenderers(String renderTargetStep, Object form) {\n        List<FormFieldPrepareRenderer> list = new LinkedList<>();\n\n        list.add(new SelectPrepareRenderer(PersonForm.class, \"bloodtype\").setOptionData(BloodType.asOptionValueMap));\n\n        list.add(new RadioPrepareRenderer(PersonForm.class, \"sex\").setOptionData(SEX.asOptionValueMap));\n\n        list.add(new CheckboxPrepareRenderer(PersonForm.class, \"language\").setOptionData(Language.asOptionValueMap));\n\n        return list;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "override this method to supply the option data for select, radio and checkbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "222", "file": "/root/repos/repos33/asta4d/asta4d-sample/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjTypeUnMatchValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjTypeUnMatchValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "223", "file": "/root/repos/repos33/asta4d/asta4d-sample/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjValueValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjValueValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "224", "file": "/root/repos/repos33/asta4d/asta4d-sample/src/main/java/com/astamuse/asta4d/sample/handler/form/common/SamplePrjCommonValidatoinMessageLogics.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjCommonValidatoinMessageLogics.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    public String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        // treat the annotated message as key\n        String msg = messageHelper.getMessageWithDefault(annotatedMsg, annotatedMsg);\n        if (addFieldLablePrefixToMessage) {\n            return String.format(\"%s: %s\", fieldLabel, msg);\n        } else {\n            return msg;\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "we share the annotated message logic here", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "225", "file": "/root/repos/repos33/asta4d/asta4d-sample/src/main/java/com/astamuse/asta4d/sample/snippet/form/SingleStepFormSnippet.java", "methodName": "com.astamuse.asta4d.sample.snippet.form.SingleStepFormSnippet.retrieveFieldPrepareRenderers", "methodParameterType": "String#Object#", "methodParameterName": "renderTargetStep#form#", "methodBody": "@Override\n    public List<FormFieldPrepareRenderer> retrieveFieldPrepareRenderers(String renderTargetStep, Object form) {\n        List<FormFieldPrepareRenderer> list = new LinkedList<>();\n\n        list.add(new SelectPrepareRenderer(PersonForm.class, \"bloodtype\").setOptionData(BloodType.asOptionValueMap));\n\n        list.add(new RadioPrepareRenderer(PersonForm.class, \"sex\").setOptionData(SEX.asOptionValueMap));\n\n        list.add(new CheckboxPrepareRenderer(PersonForm.class, \"language\").setOptionData(Language.asOptionValueMap));\n\n        return list;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "override this method to supply the option data for select, radio and checkbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "226", "file": "/root/repos/repos33/asta4d/asta4d-sample/target/asta4d-sample-1.2.1-SNAPSHOT/WEB-INF/src/com/astamuse/asta4d/sample/handler/form/common/SamplePrjTypeUnMatchValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjTypeUnMatchValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "227", "file": "/root/repos/repos33/asta4d/asta4d-sample/target/asta4d-sample-1.2.1-SNAPSHOT/WEB-INF/src/com/astamuse/asta4d/sample/handler/form/common/SamplePrjValueValidator.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjValueValidator.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        return messageLogics.createAnnotatedMessage(formCls, fieldName, fieldLabel, annotatedMsg);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "we override this method to treat the annotated message as a key, and note that the annotated message will be used in priority if there is one specified by form field annotation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "228", "file": "/root/repos/repos33/asta4d/asta4d-sample/target/asta4d-sample-1.2.1-SNAPSHOT/WEB-INF/src/com/astamuse/asta4d/sample/handler/form/common/SamplePrjCommonValidatoinMessageLogics.java", "methodName": "com.astamuse.asta4d.sample.handler.form.common.SamplePrjCommonValidatoinMessageLogics.createAnnotatedMessage", "methodParameterType": "Class#String#String#String#", "methodParameterName": "formCls#fieldName#fieldLabel#annotatedMsg#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    public String createAnnotatedMessage(Class formCls, String fieldName, String fieldLabel, String annotatedMsg) {\n        // treat the annotated message as key\n        String msg = messageHelper.getMessageWithDefault(annotatedMsg, annotatedMsg);\n        if (addFieldLablePrefixToMessage) {\n            return String.format(\"%s: %s\", fieldLabel, msg);\n        } else {\n            return msg;\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "we share the annotated message logic here", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "229", "file": "/root/repos/repos33/asta4d/asta4d-sample/target/asta4d-sample-1.2.1-SNAPSHOT/WEB-INF/src/com/astamuse/asta4d/sample/snippet/form/SingleStepFormSnippet.java", "methodName": "com.astamuse.asta4d.sample.snippet.form.SingleStepFormSnippet.retrieveFieldPrepareRenderers", "methodParameterType": "String#Object#", "methodParameterName": "renderTargetStep#form#", "methodBody": "@Override\n    public List<FormFieldPrepareRenderer> retrieveFieldPrepareRenderers(String renderTargetStep, Object form) {\n        List<FormFieldPrepareRenderer> list = new LinkedList<>();\n\n        list.add(new SelectPrepareRenderer(PersonForm.class, \"bloodtype\").setOptionData(BloodType.asOptionValueMap));\n\n        list.add(new RadioPrepareRenderer(PersonForm.class, \"sex\").setOptionData(SEX.asOptionValueMap));\n\n        list.add(new CheckboxPrepareRenderer(PersonForm.class, \"language\").setOptionData(Language.asOptionValueMap));\n\n        return list;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#TypeLiteral#StringLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "override this method to supply the option data for select, radio and checkbox.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}]