[{"index": "0", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/metadata/HasPortBindings.java", "methodName": "org.arquillian.cube.spi.metadata.HasPortBindings.isBound", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isBound();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns true if the container has been bound. Prior to being bound, the container's IP address may not be valid and port information will be specific to what is configured for the container (e.g. EXPOSEd ports). After the container is bound, the ports list may change (e.g. if the container was started with -p &lt;port&gt;:&lt;not-exposed-port&gt;).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/metadata/HasPortBindings.java", "methodName": "org.arquillian.cube.spi.metadata.HasPortBindings.getContainerIP", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getContainerIP();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the container's IP address, may be null if the container has notbeen bound to an IP.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/metadata/HasPortBindings.java", "methodName": "org.arquillian.cube.spi.metadata.HasPortBindings.getInternalIP", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getInternalIP();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the container's internal IP address, may be null if the container has notbeen bound to an IP. The internal ip is as seen by the Host or other containers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/metadata/HasPortBindings.java", "methodName": "org.arquillian.cube.spi.metadata.HasPortBindings.getContainerPorts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Set<Integer> getContainerPorts();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return list of configured container ports.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/metadata/HasPortBindings.java", "methodName": "org.arquillian.cube.spi.metadata.HasPortBindings.getBoundPorts", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Set<Integer> getBoundPorts();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return list of all container ports (configured and dynamically bound(e.g. -p &lt;port&gt;:&lt;not-exposed-port&gt;)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/metadata/HasPortBindings.java", "methodName": "org.arquillian.cube.spi.metadata.HasPortBindings.getMappedAddress", "methodParameterType": "int#", "methodParameterName": "targetPort#", "methodBody": "PortAddress getMappedAddress(int targetPort);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param targetPort the target port", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/metadata/HasPortBindings.java", "methodName": "org.arquillian.cube.spi.metadata.HasPortBindings.getPortForwardBindAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "InetAddress getPortForwardBindAddress();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the mapped address in the arquillian.xml,defined by theportForwardBindAddress property. If null, returns the default - 127.0.0.1.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "7", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/Cube.java", "methodName": "org.arquillian.cube.spi.Cube.isRunningOnRemote", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isRunningOnRemote();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Check the state of the Cube controller container on the remote server. This should check the remote state of the Cube regardless of the current Cube.State.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/Cube.java", "methodName": "org.arquillian.cube.spi.Cube.bindings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Binding bindings();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return actual binding of running container", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "9", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/Cube.java", "methodName": "org.arquillian.cube.spi.Cube.configuredBindings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Binding configuredBindings();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return binding as configured by meta-data, e.g. EXPOSE or pod.json", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/Binding.java", "methodName": "org.arquillian.cube.spi.Binding.addPortBinding", "methodParameterType": "Integer#Integer#", "methodParameterName": "exposedPort#bindingPort#", "methodBody": "public Binding addPortBinding(Integer exposedPort, Integer bindingPort) {\n        this.bindings.add(new PortBinding(exposedPort, bindingPort));\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param exposedPort the port exposed by the container (e.g. EXPOSE or Pod.Spec.Container[].Ports[])", "call_func_name": ["java.util.Set.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/AutoStartOrder.java", "methodName": "org.arquillian.cube.spi.AutoStartOrder.getAutoStartOrder", "methodParameterType": "T#", "methodParameterName": "config#", "methodBody": "List<String[]> getAutoStartOrder(T config);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns a list of Ids of Cubes to start. All the elements of the array are going to be started in parallel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos41/arquillian-cube/spi/src/main/java/org/arquillian/cube/spi/AutoStartOrder.java", "methodName": "org.arquillian.cube.spi.AutoStartOrder.getAutoStopOrder", "methodParameterType": "T#", "methodParameterName": "config#", "methodBody": "List<String[]> getAutoStopOrder(T config);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns a list of Ids of Cubes to stop. All the elements of the array are going to be stopped in parallel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "13", "file": "/root/repos/repos41/arquillian-cube/requirement-spi/src/main/java/org/arquillian/cube/spi/requirement/Constraint.java", "methodName": "org.arquillian.cube.spi.requirement.Constraint.check", "methodParameterType": "T#", "methodParameterName": "context#", "methodBody": "void check(T context) throws UnsatisfiedRequirementException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Check if the specified requirement is met in a given context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos41/arquillian-cube/api/src/main/java/org/arquillian/cube/ContainerObjectFactory.java", "methodName": "org.arquillian.cube.ContainerObjectFactory.createContainerObject", "methodParameterType": "Class<T>#", "methodParameterName": "containerObjectClass#", "methodBody": "<T> T createContainerObject(Class<T> containerObjectClass);", "AST": "Javadoc#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates an instance of the container object. It also creates and starts a cube defined by the container object class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos41/arquillian-cube/api/src/main/java/org/arquillian/cube/ContainerObjectFactory.java", "methodName": "org.arquillian.cube.ContainerObjectFactory.createContainerObject", "methodParameterType": "Class<T>#ContainerObjectConfiguration#", "methodParameterName": "containerObjectClass#configuration#", "methodBody": "<T> T createContainerObject(Class<T> containerObjectClass, ContainerObjectConfiguration configuration);", "AST": "Javadoc#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates an instance of the container object. It also creates and starts a cube defined by the container object class. Some configuration can be overridden by passing an additional ContainerObjectConfiguration instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos41/arquillian-cube/api/src/main/java/org/arquillian/cube/ContainerObjectFactory.java", "methodName": "org.arquillian.cube.ContainerObjectFactory.createContainerObject", "methodParameterType": "Class<T>#ContainerObjectConfiguration#Object#", "methodParameterName": "containerObjectClass#configuration#containerObjectContainer#", "methodBody": "<T> T createContainerObject(Class<T> containerObjectClass, ContainerObjectConfiguration configuration,\n        Object containerObjectContainer);", "AST": "Javadoc#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates an instance of the container object. It also creates and starts a cube defined by the container object class. Some configuration can be overridden by passing an additional ContainerObjectConfiguration instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos41/arquillian-cube/fabric8-maven-plugin-build/src/main/java/org/fabric8/maven/plugin/build/Fabric8MavenPluginResourceGeneratorBuilder.java", "methodName": "org.fabric8.maven.plugin.build.Fabric8MavenPluginResourceGeneratorBuilder.withDebugOutput", "methodParameterType": "boolean#", "methodParameterName": "debug#", "methodBody": "private Fabric8MavenPluginResourceGeneratorBuilder withDebugOutput(boolean debug) {\n        this.mvnDebugOutput = debug;\n        quiet(!debug);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#PrefixExpression#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enables mvn debug output (-X) flag. Implies build logging output.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "18", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Strings.java", "methodName": "org.arquillian.cube.impl.util.Strings.join", "methodParameterType": "Collection<?>#String#", "methodParameterName": "collection#separator#", "methodBody": "public static String join(final Collection<?> collection, final String separator) {\n        StringBuffer buffer = new StringBuffer();\n        boolean first = true;\n        Iterator<?> iter = collection.iterator();\n        while (iter.hasNext()) {\n            Object next = iter.next();\n            if (first) {\n                first = false;\n            } else {\n                buffer.append(separator);\n            }\n            buffer.append(next);\n        }\n        return buffer.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "joins a collection of objects together as a String using a separator", "call_func_name": ["java.lang.StringBuffer.<init>", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuffer.append", "java.lang.StringBuffer.append", "java.lang.StringBuffer.toString"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Strings.java", "methodName": "org.arquillian.cube.impl.util.Strings.splitAsList", "methodParameterType": "String#String#", "methodParameterName": "text#delimiter#", "methodBody": "public static List<String> splitAsList(String text, String delimiter) {\n        List<String> answer = new ArrayList<String>();\n        if (text != null && text.length() > 0) {\n            answer.addAll(Arrays.asList(text.split(delimiter)));\n        }\n        return answer;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "splits a string into a list of strings, ignoring the empty string", "call_func_name": ["java.util.ArrayList.<init>", "java.lang.String.length", "java.lang.String.split", "java.util.Arrays.asList", "java.util.List.addAll"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.Object[]"], ["java.util.Collection"]], "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Strings.java", "methodName": "org.arquillian.cube.impl.util.Strings.splitAndTrimAsList", "methodParameterType": "String#String#", "methodParameterName": "text#sep#", "methodBody": "public static List<String> splitAndTrimAsList(String text, String sep) {\n        ArrayList<String> answer = new ArrayList<>();\n        if (text != null && text.length() > 0) {\n            for (String v : text.split(sep)) {\n                String trim = v.trim();\n                if (trim.length() > 0) {\n                    answer.add(trim);\n                }\n            }\n        }\n        return answer;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "splits a string into a list of strings.  Trims the results and ignores empty strings", "call_func_name": ["java.util.ArrayList.<init>", "java.lang.String.length", "java.lang.String.split", "java.lang.String.trim", "java.util.ArrayList.add"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/ReflectionUtil.java", "methodName": "org.arquillian.cube.impl.util.ReflectionUtil.ReflectionUtil", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private ReflectionUtil() {\n        throw new UnsupportedOperationException(\"No instantiation\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "No instantiation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/ReflectionUtil.java", "methodName": "org.arquillian.cube.impl.util.ReflectionUtil.getThreadContextClassLoader", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ClassLoader getThreadContextClassLoader() {\n        return AccessController.doPrivileged(GetTcclAction.INSTANCE);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Obtains the Thread Context ClassLoader", "call_func_name": ["java.security.AccessController.doPrivileged"], "call_func_parameter": [["java.security.PrivilegedAction"]], "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/ReflectionUtil.java", "methodName": "org.arquillian.cube.impl.util.ReflectionUtil.getConstructor", "methodParameterType": "Class<?>#Class<?>#", "methodParameterName": "clazz#argumentTypes#", "methodBody": "public static Constructor<?> getConstructor(final Class<?> clazz,\n        final Class<?>... argumentTypes) throws NoSuchMethodException {\n        try {\n            return AccessController\n                .doPrivileged(new PrivilegedExceptionAction<Constructor<?>>() {\n                    public Constructor<?> run()\n                        throws NoSuchMethodException {\n                        return clazz.getConstructor(argumentTypes);\n                    }\n                });\n        }\n        // Unwrap\n        catch (final PrivilegedActionException pae) {\n            final Throwable t = pae.getCause();\n            // Rethrow\n            if (t instanceof NoSuchMethodException) {\n                throw (NoSuchMethodException) t;\n            } else {\n                // No other checked Exception thrown by Class.getConstructor\n                try {\n                    throw (RuntimeException) t;\n                }\n                // Just in case we've really messed up\n                catch (final ClassCastException cce) {\n                    throw new RuntimeException(\n                        \"Obtained unchecked Exception; this code should never be reached\",\n                        t);\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ThrowStatement#Block#SimpleName#SimpleType#SimpleName#CastExpression#ThrowStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ThrowStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ThrowStatement)Block(Block(TryStatement(Block(ThrowStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ThrowStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Obtains the Constructor specified from the given Class and argument types", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/ReflectionUtil.java", "methodName": "org.arquillian.cube.impl.util.ReflectionUtil.newInstance", "methodParameterType": "String#Class<?>[]#Object[]#Class<T>#", "methodParameterName": "className#argumentTypes#arguments#expectedType#", "methodBody": "public static <T> T newInstance(final String className,\n        final Class<?>[] argumentTypes, final Object[] arguments,\n        final Class<T> expectedType) {\n        if (className == null) {\n            throw new IllegalArgumentException(\"ClassName must be specified\");\n        }\n        if (argumentTypes == null) {\n            throw new IllegalArgumentException(\n                \"ArgumentTypes must be specified. Use empty array if no arguments\");\n        }\n        if (arguments == null) {\n            throw new IllegalArgumentException(\n                \"Arguments must be specified. Use empty array if no arguments\");\n        }\n        final Object obj;\n        try {\n            final ClassLoader tccl = getThreadContextClassLoader();\n            final Class<?> implClass = Class.forName(className, false, tccl);\n            Constructor<?> constructor = getConstructor(implClass,\n                argumentTypes);\n            obj = constructor.newInstance(arguments);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Could not create new instance of \"\n                + className + \", missing package from classpath?\", e);\n        }\n\n        // Cast\n        try {\n            return expectedType.cast(obj);\n        } catch (final ClassCastException cce) {\n            // Reconstruct so we get some useful information\n            throw new ClassCastException(\"Incorrect expected type, \"\n                + expectedType.getName() + \", defined for \"\n                + obj.getClass().getName());\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create a new instance by finding a constructor that matches the argumentTypes signature using the arguments for instantiation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Which.java", "methodName": "org.arquillian.cube.impl.util.Which.classFileUrl", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public static URL classFileUrl(Class<?> clazz) throws IOException {\n        ClassLoader cl = clazz.getClassLoader();\n        if (cl == null) {\n            cl = ClassLoader.getSystemClassLoader();\n        }\n        URL res = cl.getResource(clazz.getName().replace('.', '/') + \".class\");\n        if (res == null) {\n            throw new IllegalArgumentException(\"Unable to locate class file for \" + clazz);\n        }\n        return res;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the URL of the class file where the given class has been loaded from.", "call_func_name": ["java.lang.Class.getClassLoader", "java.lang.ClassLoader.getSystemClassLoader", "java.lang.StringBuilder.<init>", "java.lang.Class.getName", "java.lang.String.replace", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.ClassLoader.getResource", "java.lang.StringBuilder.append", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], [""], [""], [""], ["char", "char"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Which.java", "methodName": "org.arquillian.cube.impl.util.Which.jarURL", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "@Deprecated\n    public static URL jarURL(Class<?> clazz) throws IOException {\n        return classFileUrl(clazz);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated Use {@link #classFileUrl(Class)}", "call_func_name": ["org.arquillian.cube.impl.util.Which.classFileUrl"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": [{"org.arquillian.cube.impl.util.Which.classFileUrl": "Returns the URL of the class file where the given class has been loaded from."}]}, {"index": "27", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Which.java", "methodName": "org.arquillian.cube.impl.util.Which.jarFile", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public static File jarFile(Class<?> clazz) throws IOException {\n        return jarFile(classFileUrl(clazz), clazz.getName().replace('.', '/') + \".class\");\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Locates the jar file that contains the given class. <p> <p> Note that jar files are not always loaded from  {@link File}, so for diagnostics purposes  {@link #jarURL(Class)} is preferrable.", "call_func_name": ["org.arquillian.cube.impl.util.Which.classFileUrl", "java.lang.StringBuilder.<init>", "java.lang.Class.getName", "java.lang.String.replace", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.arquillian.cube.impl.util.Which.jarFile"], "call_func_parameter": [["java.lang.Class"], [""], [""], ["char", "char"], ["java.lang.String"], [""], ["java.net.URL", "java.lang.String"]], "passed_comments": [{"org.arquillian.cube.impl.util.Which.classFileUrl": "Returns the URL of the class file where the given class has been loaded from."}, {"org.arquillian.cube.impl.util.Which.jarFile": "Locates the jar file that contains the given resource"}]}, {"index": "28", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Which.java", "methodName": "org.arquillian.cube.impl.util.Which.jarFile", "methodParameterType": "URL#String#", "methodParameterName": "res#qualifiedName#", "methodBody": "/*package*/\n    static File jarFile(URL res, String qualifiedName) throws IOException {\n        String resURL = res.toExternalForm();\n        String originalURL = resURL;\n        if (resURL.startsWith(\"jar:file:\") || resURL.startsWith(\"wsjar:file:\")) {\n            return fromJarUrlToFile(resURL);\n        }\n\n        if (resURL.startsWith(\"code-source:/\")) {\n            // OC4J apparently uses this. See http://www.nabble.com/Hudson-on-OC4J-tt16702113.html\n            resURL = resURL.substring(\"code-source:/\".length(),\n                resURL.lastIndexOf('!')); // cut off jar: and the file name portion\n            return new File(decode(new URL(\"file:/\" + resURL).getPath()));\n        }\n\n        if (resURL.startsWith(\"zip:\")) {\n            // weblogic uses this. See http://www.nabble.com/patch-to-get-Hudson-working-on-weblogic-td23997258.html\n            // also see http://www.nabble.com/Re%3A-Hudson-on-Weblogic-10.3-td25038378.html#a25043415\n            resURL = resURL.substring(\"zip:\".length(), resURL.lastIndexOf('!')); // cut off zip: and the file name portion\n            return new File(decode(new URL(\"file:\" + resURL).getPath()));\n        }\n\n        if (resURL.startsWith(\"file:\")) {\n            // unpackaged classes\n            int n = qualifiedName.split(\"/\").length; // how many slashes do wo need to cut?\n            for (; n > 0; n--) {\n                int idx = Math.max(resURL.lastIndexOf('/'), resURL.lastIndexOf('\\\\'));\n                if (idx < 0) throw new IllegalArgumentException(originalURL + \" - \" + resURL);\n                resURL = resURL.substring(0, idx);\n            }\n\n            // won't work if res URL contains ' '\n            // return new File(new URI(null,new URL(res).toExternalForm(),null));\n            // won't work if res URL contains '%20'\n            // return new File(new URL(res).toURI());\n\n            return new File(decode(new URL(resURL).getPath()));\n        }\n\n        if (resURL.startsWith(\"vfszip:\")) {\n            // JBoss5\n            InputStream is = res.openStream();\n            try {\n                Object delegate = is;\n                while (delegate.getClass().getEnclosingClass() != ZipFile.class) {\n                    Field f = delegate.getClass().getDeclaredField(\"delegate\");\n                    f.setAccessible(true);\n                    delegate = f.get(delegate);\n                    //JENKINS-5922 - workaround for CertificateReaderInputStream; JBoss 5.0.0, EAP 5.0 and EAP 5.1\n                    if (delegate.getClass().getName().equals(\"java.util.jar.JarVerifier$VerifierStream\")) {\n                        f = delegate.getClass().getDeclaredField(\"is\");\n                        f.setAccessible(true);\n                        delegate = f.get(delegate);\n                    }\n                }\n                Field f = delegate.getClass().getDeclaredField(\"this$0\");\n                f.setAccessible(true);\n                ZipFile zipFile = (ZipFile) f.get(delegate);\n                return new File(zipFile.getName());\n            } catch (NoSuchFieldException e) {\n                // something must have changed in JBoss5. fall through\n                LOGGER.log(Level.FINE, \"Failed to resolve vfszip into a jar location\", e);\n            } catch (IllegalAccessException e) {\n                // something must have changed in JBoss5. fall through\n                LOGGER.log(Level.FINE, \"Failed to resolve vfszip into a jar location\", e);\n            } finally {\n                is.close();\n            }\n        }\n\n        if (resURL.startsWith(\"vfs:\")) {\n            // JBoss6\n            String dotdot = \"\";\n            for (int i = qualifiedName.split(\"/\").length; i > 1; i--)\n                dotdot += \"../\";\n\n            try {\n                URL jar = new URL(res, dotdot);\n                String path = jar.getPath();\n                if (path.endsWith(\"/\")) path = path.substring(0, path.length() - 1);\n                // obtain the file name portion\n                String fileName = path.substring(path.lastIndexOf('/') + 1);\n\n                Object vfs = new URL(jar, \"..\").getContent(); // a VirtualFile object pointing to the parent of the jar\n                File dir = (File) vfs.getClass().getMethod(\"getPhysicalFile\").invoke(vfs);\n\n                File jarFile = new File(dir, fileName);\n                if (jarFile.exists()) return jarFile;\n            } catch (Exception e) {\n                LOGGER.log(Level.FINE, \"Failed to resolve vfs file into a location\", e);\n            }\n        }\n\n        URLConnection con = res.openConnection();\n        if (con instanceof JarURLConnection) {\n            JarURLConnection jcon = (JarURLConnection) con;\n            JarFile jarFile = jcon.getJarFile();\n            if (jarFile != null) {\n                String n = jarFile.getName();\n                if (n.length() > 0) {// JDK6u10 needs this\n                    return new File(n);\n                } else {\n                    // JDK6u10 apparently starts hiding the real jar file name,\n                    // so this just keeps getting tricker and trickier...\n                    try {\n                        Field f = ZipFile.class.getDeclaredField(\"name\");\n                        f.setAccessible(true);\n                        return new File((String) f.get(jarFile));\n                    } catch (NoSuchFieldException e) {\n                        LOGGER.log(Level.INFO, \"Failed to obtain the local cache file name of \" + resURL, e);\n                    } catch (IllegalAccessException e) {\n                        LOGGER.log(Level.INFO, \"Failed to obtain the local cache file name of \" + resURL, e);\n                    }\n                }\n            }\n        }\n\n        throw new IllegalArgumentException(originalURL + \" - \" + resURL);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#ForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)WhileStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)ForStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Locates the jar file that contains the given resource", "call_func_name": ["java.net.URL.toExternalForm", "java.lang.String.startsWith", "org.arquillian.cube.impl.util.Which.fromJarUrlToFile", "java.lang.String.length", "java.lang.String.lastIndexOf", "java.lang.String.substring", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.net.URL.<init>", "java.net.URL.getPath", "org.arquillian.cube.impl.util.Which.decode", "java.io.File.<init>", "java.lang.String.split", "java.lang.Math.max", "java.lang.IllegalArgumentException.<init>", "java.net.URL.openStream", "java.lang.Object.getClass", "java.lang.Class.getEnclosingClass", "java.lang.Class.getDeclaredField", "java.lang.reflect.Field.setAccessible", "java.lang.reflect.Field.get", "java.lang.Class.getName", "java.lang.String.equals", "java.util.zip.ZipFile.getName", "java.io.InputStream.close", "java.util.logging.Logger.log", "java.net.URL.<init>", "java.lang.String.endsWith", "java.lang.String.substring", "java.net.URL.getContent", "java.lang.Class.getMethod", "java.lang.reflect.Method.invoke", "java.io.File.<init>", "java.io.File.exists", "java.net.URL.openConnection", "java.net.JarURLConnection.getJarFile", "java.util.jar.JarFile.getName"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""], ["int"], ["int", "int"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["int", "int"], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["boolean"], ["java.lang.Object"], [""], ["java.lang.Object"], [""], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"], ["java.net.URL", "java.lang.String"], ["java.lang.String"], ["int"], [""], ["java.lang.String", "java.lang.Class[]"], ["java.lang.Object", "java.lang.Object[]"], ["java.io.File", "java.lang.String"], [""], [""], [""], [""]], "passed_comments": [{"org.arquillian.cube.impl.util.Which.decode": "Decode '%HH'."}]}, {"index": "29", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Which.java", "methodName": "org.arquillian.cube.impl.util.Which.decode", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "private static String decode(String s) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        for (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n            if (ch == '%') {\n                baos.write(hexToInt(s.charAt(i + 1)) * 16 + hexToInt(s.charAt(i + 2)));\n                i += 2;\n                continue;\n            }\n            baos.write(ch);\n        }\n        try {\n            return new String(baos.toByteArray(), \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            throw new Error(e); // impossible\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#StringLiteral#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Decode '%HH'.", "call_func_name": ["java.io.ByteArrayOutputStream.<init>", "java.lang.String.length", "java.lang.String.charAt", "org.arquillian.cube.impl.util.Which.hexToInt", "java.io.ByteArrayOutputStream.write", "java.io.ByteArrayOutputStream.toByteArray", "java.lang.String.<init>", "java.lang.Error.<init>"], "call_func_parameter": [[""], [""], ["int"], ["int"], ["int"], [""], ["byte[]", "java.lang.String"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/ContainerUtil.java", "methodName": "org.arquillian.cube.impl.util.ContainerUtil.getCubeIDForContainer", "methodParameterType": "Container#", "methodParameterName": "container#", "methodBody": "public static String getCubeIDForContainer(Container container) {\n        final String cubeID;\n        final Map<String, String> containerProperties = container.getContainerConfiguration().getContainerProperties();\n        if (containerProperties == null) {\n            // test cases may not mock entire hierarchy\n            cubeID = null;\n        } else {\n            cubeID = containerProperties.get(\"cubeId\");\n        }\n        return cubeID == null ? container.getName() : cubeID;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the cube ID for the container. By default, this is the container name, but can be overridden by the user in the container properties, e.g. <code>&lt;cubeId&gt;pod-name&lt;/cubeId&gt;</code>.", "call_func_name": ["org.jboss.arquillian.container.spi.Container.getContainerConfiguration", "org.jboss.arquillian.config.descriptor.api.ContainerDef.getContainerProperties", "java.util.Map.get", "org.jboss.arquillian.container.spi.Container.getName"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.Timespan", "methodParameterType": "long#", "methodParameterName": "durationInMilliseconds#", "methodBody": "public Timespan(long durationInMilliseconds) {\n        this(durationInMilliseconds, TimeUnit.MILLISECOND);\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "32", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.Timespan", "methodParameterType": "long#TimeUnit#", "methodParameterName": "duration#timeUnit#", "methodBody": "public Timespan(long duration, TimeUnit timeUnit) {\n        _duration = duration;\n        _timeUnit = timeUnit;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.getTimeUnit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TimeUnit getTimeUnit() {\n        return _timeUnit;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the time unit of this timespan", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.getDuration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getDuration() {\n        return _duration;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the duration of this timespan", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.add", "methodParameterType": "Timespan#", "methodParameterName": "other#", "methodBody": "public Timespan add(Timespan other) {\n        if (getTimeUnit() == other.getTimeUnit()) {\n            return new Timespan(getDuration() + other.getDuration(), getTimeUnit());\n        }\n\n        return new Timespan(getDurationInMilliseconds() + other.getDurationInMilliseconds(),\n            TimeUnit.MILLISECOND);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Adds another timespan to this timespan and return a brand new one. Note that the unit is preserved if <code>other</code> has the same unit as 'this'.", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.getTimeUnit", "org.arquillian.cube.impl.util.Timespan.getDuration", "org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds"], "call_func_parameter": [[""], [""], [""]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getTimeUnit": "@return the time unit of this timespan"}, {"org.arquillian.cube.impl.util.Timespan.getDuration": "@return the duration of this timespan"}, {"org.arquillian.cube.impl.util.Timespan.getDuration": "@param timeUnit the unit of time you want this timespan ass"}, {"org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds": "@return the duration of this timespan in milliseconds"}]}, {"index": "36", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.substractWithZeroFloor", "methodParameterType": "Timespan#", "methodParameterName": "other#", "methodBody": "public Timespan substractWithZeroFloor(Timespan other) {\n        if (getTimeUnit() == other.getTimeUnit()) {\n            long delta = Math.max(0, getDuration() - other.getDuration());\n            return new Timespan(delta, getTimeUnit());\n        }\n\n        long delta = Math.max(0, getDurationInMilliseconds() - other.getDurationInMilliseconds());\n\n        return new Timespan(delta, TimeUnit.MILLISECOND);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates and returns a new timespan whose duration is  {@code this}timespan's duration minus the  {@code other} timespan's duration.<p> The time unit is preserved if  {@code other} has the same unitas  {@code this}. <p> Negative timespans are not supported, so if the  {@code other}timespan duration is greater than  {@code this} timespan duration,a timespan of zero is returned (i.e., a negative timespan is never returned).", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.getTimeUnit", "org.arquillian.cube.impl.util.Timespan.getDuration", "java.lang.Math.max", "org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds"], "call_func_parameter": [[""], [""], ["long", "long"], [""]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getTimeUnit": "@return the time unit of this timespan"}, {"org.arquillian.cube.impl.util.Timespan.getDuration": "@return the duration of this timespan"}, {"org.arquillian.cube.impl.util.Timespan.getDuration": "@param timeUnit the unit of time you want this timespan ass"}, {"org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds": "@return the duration of this timespan in milliseconds"}]}, {"index": "37", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getDurationInMilliseconds() {\n        // 100% equivalent to getDuration(TimeUnit.MILLISECOND) but faster!\n        return getDuration() * getTimeUnit().getMillisecondsCount();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the duration of this timespan in milliseconds", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.getDuration", "org.arquillian.cube.impl.util.Timespan.getTimeUnit"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getDuration": "@return the duration of this timespan"}, {"org.arquillian.cube.impl.util.Timespan.getDuration": "@param timeUnit the unit of time you want this timespan ass"}, {"org.arquillian.cube.impl.util.Timespan.getTimeUnit": "@return the time unit of this timespan"}]}, {"index": "38", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.getDuration", "methodParameterType": "TimeUnit#", "methodParameterName": "timeUnit#", "methodBody": "public long getDuration(TimeUnit timeUnit) {\n        return truncate(timeUnit).getDuration();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param timeUnit the unit of time you want this timespan ass", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.getDurationInSeconds", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getDurationInSeconds() {\n        return getDuration(TimeUnit.SECOND);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the duration of this timespan expressed in seconds. If milliseconds are present,they will be truncated!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.getDurationInMinutes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getDurationInMinutes() {\n        return getDuration(TimeUnit.MINUTE);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the duration of this timespan expressed in minutes. If s/ms are present,they will be truncated!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.getDurationInHours", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getDurationInHours() {\n        return getDuration(TimeUnit.HOUR);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the duration of this timespan expressed in hours. If m/s/ms are present,they will be truncated!", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.toMillisecondsTimespan", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Timespan toMillisecondsTimespan() {\n        if (getTimeUnit() == TimeUnit.MILLISECOND) {\n            return this;\n        }\n\n        return new Timespan(getDurationInMilliseconds(), TimeUnit.MILLISECOND);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return a (potentially new) version of this timestamp where the unit is{@link TimeUnit#MILLISECOND}.", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.getTimeUnit", "org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getTimeUnit": "@return the time unit of this timespan"}, {"org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds": "@return the duration of this timespan in milliseconds"}]}, {"index": "43", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.truncate", "methodParameterType": "TimeUnit#", "methodParameterName": "timeUnit#", "methodBody": "public Timespan truncate(TimeUnit timeUnit) {\n        if (getTimeUnit() == timeUnit) {\n            return this;\n        }\n\n        return truncateDurationToUnit(getDurationInMilliseconds(), timeUnit);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#InfixExpression#ThisExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Truncates this timespan to the given time unit. Example: if this is 1h20m5s then <code>truncate(TimeUnit.HOUR)</code> will return 1h, <code>truncate(TimeUnit.MINUTE)</code> will return 1h20m and <code>truncate(TimeUnit.SECOND)</code> will return 1h20m5s", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "44", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.getCanonicalTimespans", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EnumMap<TimeUnit, Timespan> getCanonicalTimespans() {\n        return getAsTimespans(CANONICAL_TIME_UNITS);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "There are many ways to represent the same timespan: 3h, 180m... this call return the unique way to express it such that ms is &lt; 1000, s is &lt; 60, m is &lt; 60, h is &lt; 24, d is &lt; 7.", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.getAsTimespans"], "call_func_parameter": [["java.util.EnumSet"]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getAsTimespans": "Decomposes this timespan as a map for each unit provided. Example: if this timespan represents 63s and you provide m/s/ms then you will get 3 timespans in the map: one of 1mn, one for 3s and one for 0ms."}]}, {"index": "45", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.getCanonicalString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCanonicalString() {\n        return getAsString(CANONICAL_TIME_UNITS);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return a string representing this timespan (ex: 3h2m23s). Note that if a duration is missing,it is not part of the string (the string would be 3h23s and not 3h0m23s).", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.getAsString"], "call_func_parameter": [["java.util.EnumSet"]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getAsString": "Returns a string representing this timespan expressed with the units provided."}]}, {"index": "46", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.getAsTimespans", "methodParameterType": "EnumSet<TimeUnit>#", "methodParameterName": "timeUnits#", "methodBody": "public EnumMap<TimeUnit, Timespan> getAsTimespans(EnumSet<TimeUnit> timeUnits) {\n        EnumMap<TimeUnit, Timespan> res = new EnumMap<TimeUnit, Timespan>(TimeUnit.class);\n\n        long durationInMillis = getDurationInMilliseconds();\n\n        for (TimeUnit timeUnit : TIME_UNIT_ORDER) {\n            if (timeUnits.contains(timeUnit)) {\n                Timespan timespan = truncateDurationToUnit(durationInMillis, timeUnit);\n                res.put(timeUnit, timespan);\n                durationInMillis -= timespan.getDurationInMilliseconds();\n            }\n        }\n\n        return res;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#TypeLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decomposes this timespan as a map for each unit provided. Example: if this timespan represents 63s and you provide m/s/ms then you will get 3 timespans in the map: one of 1mn, one for 3s and one for 0ms.", "call_func_name": ["java.util.EnumMap.<init>", "org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds", "java.util.EnumSet.contains", "java.util.EnumMap.put"], "call_func_parameter": [["java.lang.Class"], [""], ["java.lang.Object"], ["java.lang.Enum", "java.lang.Object"]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds": "@return the duration of this timespan in milliseconds"}]}, {"index": "47", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.filter", "methodParameterType": "EnumSet<TimeUnit>#", "methodParameterName": "timeUnits#", "methodBody": "public Timespan filter(EnumSet<TimeUnit> timeUnits) {\n        Timespan res = null;\n\n        EnumMap<TimeUnit, Timespan> canonicalTimespans = getCanonicalTimespans();\n\n        for (TimeUnit timeUnit : TIME_UNIT_ORDER) {\n            if (timeUnits.contains(timeUnit)) {\n                Timespan timespan = canonicalTimespans.get(timeUnit);\n                if (timespan != null && timespan.getDuration() > 0) {\n                    if (res == null) {\n                        res = timespan;\n                    } else {\n                        res = res.add(timespan);\n                    }\n                }\n            }\n        }\n\n        // in case there is no match we return with smallest timeunit provided\n        if (res == null) {\n            res = ZERO_TIMESPANS.get(timeUnits.iterator().next());\n        }\n\n        return res;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Filters this timespan with only the unit provided. It computes the canonical representation and keeps only the units that are present in the filter. Example: if this timespan represents 3d2h25m10s and filter is d/h/m then result is 3d2h25m.", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.getCanonicalTimespans", "java.util.EnumSet.contains", "java.util.EnumMap.get", "org.arquillian.cube.impl.util.Timespan.getDuration", "org.arquillian.cube.impl.util.Timespan.add", "java.util.EnumSet.iterator", "java.util.Iterator.next"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.Object"], [""], ["org.arquillian.cube.impl.util.Timespan"], [""], [""]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getCanonicalTimespans": "There are many ways to represent the same timespan: 3h, 180m... this call return the unique way to express it such that ms is &lt; 1000, s is &lt; 60, m is &lt; 60, h is &lt; 24, d is &lt; 7."}, {"org.arquillian.cube.impl.util.Timespan.getDuration": "@return the duration of this timespan"}, {"org.arquillian.cube.impl.util.Timespan.getDuration": "@param timeUnit the unit of time you want this timespan ass"}, {"org.arquillian.cube.impl.util.Timespan.add": "Adds another timespan to this timespan and return a brand new one. Note that the unit is preserved if <code>other</code> has the same unit as 'this'."}]}, {"index": "48", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.getAsString", "methodParameterType": "EnumSet<TimeUnit>#", "methodParameterName": "timeUnits#", "methodBody": "public String getAsString(EnumSet<TimeUnit> timeUnits) {\n        StringBuilder sb = new StringBuilder();\n\n        EnumMap<TimeUnit, Timespan> canonicalTimespans = getAsTimespans(timeUnits);\n        for (TimeUnit timeUnit : TIME_UNIT_ORDER) {\n            if (canonicalTimespans.containsKey(timeUnit)) {\n                long duration = canonicalTimespans.get(timeUnit).getDuration();\n                if (duration > 0) {\n                    sb.append(duration).append(timeUnit.getDisplayChar());\n                }\n            }\n        }\n\n        if (sb.length() == 0) {\n            sb.append(0);\n            if (timeUnits.contains(getTimeUnit())) {\n                sb.append(getTimeUnit().getDisplayChar());\n            }\n        }\n\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a string representing this timespan expressed with the units provided.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.arquillian.cube.impl.util.Timespan.getAsTimespans", "java.util.EnumMap.containsKey", "java.util.EnumMap.get", "org.arquillian.cube.impl.util.Timespan.getDuration", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.length", "java.lang.StringBuilder.append", "org.arquillian.cube.impl.util.Timespan.getTimeUnit", "java.util.EnumSet.contains", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.util.EnumSet"], ["java.lang.Object"], ["java.lang.Object"], [""], ["long"], ["java.lang.String"], [""], ["int"], [""], ["java.lang.Object"], [""]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getAsTimespans": "Decomposes this timespan as a map for each unit provided. Example: if this timespan represents 63s and you provide m/s/ms then you will get 3 timespans in the map: one of 1mn, one for 3s and one for 0ms."}, {"org.arquillian.cube.impl.util.Timespan.getDuration": "@return the duration of this timespan"}, {"org.arquillian.cube.impl.util.Timespan.getDuration": "@param timeUnit the unit of time you want this timespan ass"}, {"org.arquillian.cube.impl.util.Timespan.getTimeUnit": "@return the time unit of this timespan"}]}, {"index": "49", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.equalsDurationInMilliseconds", "methodParameterType": "Timespan#", "methodParameterName": "timespan#", "methodBody": "public boolean equalsDurationInMilliseconds(Timespan timespan) {\n        // shortcut when time unit are the same\n        if (timespan.getTimeUnit() == getTimeUnit()) {\n            return timespan.getDuration() == getDuration();\n        } else {\n            return getDurationInMilliseconds() == timespan.getDurationInMilliseconds();\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "2 timespans can be different (1h and 3600s) while representing the same duration expressed in milliseconds... This method tests for this.", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.getTimeUnit", "org.arquillian.cube.impl.util.Timespan.getDuration", "org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds"], "call_func_parameter": [[""], [""], [""]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getTimeUnit": "@return the time unit of this timespan"}, {"org.arquillian.cube.impl.util.Timespan.getDuration": "@return the duration of this timespan"}, {"org.arquillian.cube.impl.util.Timespan.getDuration": "@param timeUnit the unit of time you want this timespan ass"}, {"org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds": "@return the duration of this timespan in milliseconds"}]}, {"index": "50", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.futureTimeMillis", "methodParameterType": "long#", "methodParameterName": "baseMilliseconds#", "methodBody": "public long futureTimeMillis(long baseMilliseconds) {\n        return baseMilliseconds + getDurationInMilliseconds();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param baseMilliseconds the starting point to compute the future time", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds"], "call_func_parameter": [[""]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds": "@return the duration of this timespan in milliseconds"}]}, {"index": "51", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.pastTimeMillis", "methodParameterType": "long#", "methodParameterName": "baseMillis#", "methodBody": "public long pastTimeMillis(long baseMillis) {\n        return baseMillis - getDurationInMilliseconds();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param baseMillis the starting point", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds"], "call_func_parameter": [[""]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds": "@return the duration of this timespan in milliseconds"}]}, {"index": "52", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.futureDate", "methodParameterType": "Date#", "methodParameterName": "baseDate#", "methodBody": "public Date futureDate(Date baseDate) {\n        return new Date(baseDate.getTime() + getDurationInMilliseconds());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param baseDate base date to offset from", "call_func_name": ["java.util.Date.getTime", "org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds", "java.util.Date.<init>"], "call_func_parameter": [[""], [""], ["long"]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds": "@return the duration of this timespan in milliseconds"}]}, {"index": "53", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.pastDate", "methodParameterType": "Date#", "methodParameterName": "baseDate#", "methodBody": "public Date pastDate(Date baseDate) {\n        return new Date(pastTimeMillis(baseDate.getTime()));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param baseDate base date to offset from", "call_func_name": ["java.util.Date.getTime", "org.arquillian.cube.impl.util.Timespan.pastTimeMillis", "java.util.Date.<init>"], "call_func_parameter": [[""], ["long"], ["long"]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.pastTimeMillis": "@param baseMillis the starting point"}]}, {"index": "54", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.truncateDurationToUnit", "methodParameterType": "long#TimeUnit#", "methodParameterName": "durationInMillis#timeUnit#", "methodBody": "private static Timespan truncateDurationToUnit(long durationInMillis, TimeUnit timeUnit) {\n        Timespan res;\n\n        if (durationInMillis >= timeUnit.getMillisecondsCount()) {\n            res = new Timespan(durationInMillis / timeUnit.getMillisecondsCount(),\n                timeUnit);\n        } else {\n            res = ZERO_TIMESPANS.get(timeUnit);\n        }\n\n        return res;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Expresses the provided duration in the unit provided. Note that the timespan returned represent only the truncated version of the duration: if duration is 1002ms and timeunit is seconds, then the timespan returned is 1 second... leaving behind 2ms.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String toString() {\n        return getCanonicalString();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return a string representation of the object.", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.getCanonicalString"], "call_func_parameter": [[""]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.getCanonicalString": "@return a string representing this timespan (ex: 3h2m23s). Note that if a duration is missing,it is not part of the string (the string would be 3h23s and not 3h0m23s)."}]}, {"index": "56", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.create", "methodParameterType": "Timespan#", "methodParameterName": "timespans#", "methodBody": "public static Timespan create(Timespan... timespans) {\n        if (timespans == null) {\n            return null;\n        }\n\n        if (timespans.length == 0) {\n            return ZERO_MILLISECONDS;\n        }\n\n        Timespan res = timespans[0];\n\n        for (int i = 1; i < timespans.length; i++) {\n            Timespan timespan = timespans[i];\n            res = res.add(timespan);\n        }\n\n        return res;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a timespan from a list of other timespans.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.parse", "methodParameterType": "String#", "methodParameterName": "timespan#", "methodBody": "public static Timespan parse(String timespan) {\n        return parseTimespan(timespan);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Synonym.", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.parseTimespan"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.parseTimespan": "Parses the provided string as a timespan. It should follow the pattern returned by {@link #getCanonicalString()}. Example: 10m30s"}]}, {"index": "58", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.valueOf", "methodParameterType": "String#", "methodParameterName": "timespan#", "methodBody": "public static Timespan valueOf(String timespan) {\n        return parseTimespan(timespan);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Synonym.", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.parseTimespan"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.parseTimespan": "Parses the provided string as a timespan. It should follow the pattern returned by {@link #getCanonicalString()}. Example: 10m30s"}]}, {"index": "59", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.milliseconds", "methodParameterType": "long#", "methodParameterName": "milliseconds#", "methodBody": "public static Timespan milliseconds(long milliseconds) {\n        return new Timespan(milliseconds);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenient call when providing milliseconds", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.<init>"], "call_func_parameter": [["long"]], "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.seconds", "methodParameterType": "long#", "methodParameterName": "seconds#", "methodBody": "public static Timespan seconds(long seconds) {\n        return new Timespan(seconds, TimeUnit.SECOND);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenient call when providing seconds", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "61", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.minutes", "methodParameterType": "long#", "methodParameterName": "minutes#", "methodBody": "public static Timespan minutes(long minutes) {\n        return new Timespan(minutes, TimeUnit.MINUTE);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convenient call when providing minutes", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "62", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.parseTimespan", "methodParameterType": "String#", "methodParameterName": "timespan#", "methodBody": "public static Timespan parseTimespan(String timespan) {\n        if (timespan == null) {\n            return null;\n        }\n\n        // easiest way to be compliant with docker-compose format\n        timespan = timespan.replace(\"ms\", \"\");\n\n        int len = timespan.length();\n        if (len == 0) {\n            return ZERO_MILLISECONDS;\n        }\n\n\n        int count = 0;\n        int timeUnitOrderIdx = 0;\n        int timeUnitOrderLen = TIME_UNIT_ORDER.length;\n        Timespan[] timespans = new Timespan[timeUnitOrderLen];\n\n        int startDigitsIdx = 0;\n        boolean expectingDigits = true;\n\n        for (int i = 0; i < len; i++) {\n            char c = timespan.charAt(i);\n            if (isDigit(c)) {\n                expectingDigits = false;\n                continue;\n            }\n\n            if (expectingDigits) {\n                throw new IllegalArgumentException(\"found \" + c + \" was expecting a digit\");\n            }\n\n            for (; timeUnitOrderIdx < timeUnitOrderLen; timeUnitOrderIdx++) {\n                TimeUnit timeUnit = TIME_UNIT_ORDER[timeUnitOrderIdx];\n                String displayChar = timeUnit.getDisplayChar();\n                if (displayChar.length() == 0) {\n                    throw new IllegalArgumentException(\"found nothing was expecting: \" + c);\n                }\n                if (c == displayChar.charAt(0)) {\n                    try {\n                        long duration = Long.parseLong(timespan.substring(startDigitsIdx, i));\n                        timespans[timeUnitOrderIdx++] = new Timespan(duration, timeUnit);\n                        startDigitsIdx = i + 1;\n                        expectingDigits = true;\n                        count++;\n                        break;\n                    } catch (NumberFormatException e) {\n                        throw new IllegalArgumentException(e);\n                    }\n                }\n            }\n        }\n\n        if (startDigitsIdx < len) {\n            try {\n                long duration = Long.parseLong(timespan.substring(startDigitsIdx, len));\n                timespans[timeUnitOrderLen - 1] = new Timespan(duration, TimeUnit.MILLISECOND);\n                count++;\n            } catch (NumberFormatException e) {\n                throw new IllegalArgumentException(e);\n            }\n        }\n\n        Timespan[] ts = new Timespan[count];\n        for (int i = 0, idx = 0; i < timespans.length; i++) {\n            Timespan t = timespans[i];\n            if (t != null) {\n                ts[idx++] = t;\n            }\n        }\n        return create(ts);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#BreakStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#ForStatement#Block#ForStatement#SimpleName#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ForStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression(Block(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(BreakStatement)BreakStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)ForStatement)Block)ForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses the provided string as a timespan. It should follow the pattern returned by {@link #getCanonicalString()}. Example: 10m30s", "call_func_name": ["java.lang.String.replace", "java.lang.String.length", "java.lang.String.charAt", "org.arquillian.cube.impl.util.Timespan.isDigit", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "java.lang.String.substring", "java.lang.Long.parseLong", "java.lang.IllegalArgumentException.<init>", "org.arquillian.cube.impl.util.Timespan.create"], "call_func_parameter": [["java.lang.CharSequence", "java.lang.CharSequence"], [""], ["int"], ["char"], [""], ["java.lang.String"], ["char"], [""], ["java.lang.String"], ["int", "int"], ["java.lang.String"], ["java.lang.Throwable"], ["org.arquillian.cube.impl.util.Timespan[]"]], "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/Timespan.java", "methodName": "org.arquillian.cube.impl.util.Timespan.toMilliseconds", "methodParameterType": "String#", "methodParameterName": "timespan#", "methodBody": "public static long toMilliseconds(String timespan) {\n        return parseTimespan(timespan).getDurationInMilliseconds();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Shortcut for creating a timespan and then retrieving the value in milliseconds.", "call_func_name": ["org.arquillian.cube.impl.util.Timespan.parseTimespan", "org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds"], "call_func_parameter": [["java.lang.String"], [""]], "passed_comments": [{"org.arquillian.cube.impl.util.Timespan.parseTimespan": "Parses the provided string as a timespan. It should follow the pattern returned by {@link #getCanonicalString()}. Example: 10m30s"}, {"org.arquillian.cube.impl.util.Timespan.getDurationInMilliseconds": "@return the duration of this timespan in milliseconds"}]}, {"index": "64", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/IOUtil.java", "methodName": "org.arquillian.cube.impl.util.IOUtil.unzip", "methodParameterType": "InputStream#File#", "methodParameterName": "in#toDir#", "methodBody": "public static void unzip(InputStream in, File toDir) throws IOException {\n        ZipInputStream zis = new ZipInputStream(new BufferedInputStream(in));\n        try {\n            ZipEntry entry = zis.getNextEntry();\n            while (entry != null) {\n                if (!entry.isDirectory()) {\n                    String entryName = entry.getName();\n                    File toFile = new File(toDir, entryName);\n                    toFile.getParentFile().mkdirs();\n                    OutputStream os = new FileOutputStream(toFile);\n                    try {\n                        try {\n                            copy(zis, os);\n                        } finally {\n                            zis.closeEntry();\n                        }\n                    } finally {\n                        close(os, true);\n                    }\n                }\n                entry = zis.getNextEntry();\n            }\n        } finally {\n            close(zis, true);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#Block#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Unzips the given input stream of a ZIP to the given directory", "call_func_name": ["java.io.BufferedInputStream.<init>", "java.util.zip.ZipInputStream.<init>", "java.util.zip.ZipInputStream.getNextEntry", "java.util.zip.ZipEntry.isDirectory", "java.util.zip.ZipEntry.getName", "java.io.File.<init>", "java.io.File.getParentFile", "java.io.File.mkdirs", "java.io.FileOutputStream.<init>", "org.arquillian.cube.impl.util.IOUtil.copy", "java.util.zip.ZipInputStream.closeEntry", "org.arquillian.cube.impl.util.IOUtil.close"], "call_func_parameter": [["java.io.InputStream"], ["java.io.InputStream"], [""], [""], [""], ["java.io.File", "java.lang.String"], [""], [""], ["java.io.File"], ["java.io.InputStream", "java.io.OutputStream"], [""], ["java.io.Closeable", "boolean"]], "passed_comments": "/"}, {"index": "65", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/ConfigUtil.java", "methodName": "org.arquillian.cube.impl.util.ConfigUtil.getStringProperty", "methodParameterType": "String#Map<String,String>#String#", "methodParameterName": "name#map#defaultValue#", "methodBody": "public static String getStringProperty(String name, Map<String, String> map, String defaultValue) {\n        if (map.containsKey(name) && Strings.isNotNullOrEmpty(map.get(name))) {\n            defaultValue = map.get(name);\n        }\n        return getPropertyOrEnvironmentVariable(name, defaultValue);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets a property from system, environment or an external map. The lookup order is system > env > map > defaultValue.", "call_func_name": ["java.util.Map.containsKey", "java.util.Map.get", "org.arquillian.cube.impl.util.Strings.isNotNullOrEmpty", "org.arquillian.cube.impl.util.SystemEnvironmentVariables.getPropertyOrEnvironmentVariable"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/util/ConfigUtil.java", "methodName": "org.arquillian.cube.impl.util.ConfigUtil.getStringProperty", "methodParameterType": "String#String#Map<String,String>#String#", "methodParameterName": "name#alternativeName#map#defaultValue#", "methodBody": "public static String getStringProperty(String name, String alternativeName, Map<String, String> map,\n        String defaultValue) {\n        return getStringProperty(name, map, getStringProperty(alternativeName, map, defaultValue));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets a property from system, environment or an external map. This method supports also passing an alternative name. The reason for supporting multiple names, is to support multiple keys for the same property (e.g. adding a new and deprecating the old). The lookup order is system[name] > env[name] > map[name] > system[alternativeName] > env[alternativeName] > map[alternativeName] > defaultValue.", "call_func_name": ["org.arquillian.cube.impl.util.ConfigUtil.getStringProperty"], "call_func_parameter": [["java.lang.String", "java.util.Map", "java.lang.String"]], "passed_comments": [{"org.arquillian.cube.impl.util.ConfigUtil.getStringProperty": "Gets a property from system, environment or an external map. The lookup order is system > env > map > defaultValue."}]}, {"index": "67", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/client/container/remote/command/AbstractCommand.java", "methodName": "org.arquillian.cube.impl.client.container.remote.command.AbstractCommand.getThrowable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public Throwable getThrowable() {\n        return throwable;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the throwable", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos41/arquillian-cube/core/src/main/java/org/arquillian/cube/impl/shrinkwrap/asset/CacheUrlAsset.java", "methodName": "org.arquillian.cube.impl.shrinkwrap.asset.CacheUrlAsset.CacheUrlAsset", "methodParameterType": "URL#", "methodParameterName": "url#", "methodBody": "public CacheUrlAsset(URL url) {\n        super(url);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create a new resource with a <code>URL</code> source with default time to live.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.waitForReadyPods", "methodParameterType": "String#int#", "methodParameterName": "prefix#replicas#", "methodBody": "void waitForReadyPods(String prefix, int replicas) throws Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Wait for ready pods.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.replacePods", "methodParameterType": "String#int#int#", "methodParameterName": "prefix#size#replicas#", "methodBody": "void replacePods(String prefix, int size, int replicas) throws Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Replace #size of pods via delete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "71", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.scaleDeployment", "methodParameterType": "String#int#", "methodParameterName": "prefix#replicas#", "methodBody": "void scaleDeployment(String prefix, int replicas) throws Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Scale deployment to replicas.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.getLog", "methodParameterType": "String#", "methodParameterName": "podName#", "methodBody": "String getLog(String podName) throws Exception;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Get the logs for a given pod.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.streamLog", "methodParameterType": "String#", "methodParameterName": "podName#", "methodBody": "InputStream streamLog(String podName) throws Exception;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Stream pod log into output stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "74", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.getLog", "methodParameterType": "String#Map<String,String>#", "methodParameterName": "prefix#labels#", "methodBody": "String getLog(String prefix, Map<String, String> labels) throws Exception;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Get the logs for a given pod. Combines both arguments to find a matching pod.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "75", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.getReadyPods", "methodParameterType": "String#", "methodParameterName": "prefix#", "methodBody": "Set<String> getReadyPods(String prefix) throws Exception;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Get ready pods.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.getPods", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<String> getPods() throws Exception;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Get all pods.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.getPods", "methodParameterType": "String#", "methodParameterName": "prefix#", "methodBody": "List<String> getPods(String prefix) throws Exception;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Get all pods.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.deletePod", "methodParameterType": "String#long#", "methodParameterName": "podName#gracePeriodSeconds#", "methodBody": "void deletePod(String podName, long gracePeriodSeconds) throws Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Delete pod by name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.triggerDeploymentConfigUpdate", "methodParameterType": "String#boolean#", "methodParameterName": "prefix#wait#", "methodBody": "void triggerDeploymentConfigUpdate(String prefix, boolean wait) throws Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Trigger deployment config update. A dummy variable is inserted into deployment config in order to trigger the redeployment.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "80", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.triggerDeploymentConfigUpdate", "methodParameterType": "String#boolean#Map<String,String>#", "methodParameterName": "prefix#wait#variables#", "methodBody": "void triggerDeploymentConfigUpdate(String prefix, boolean wait, Map<String, String> variables) throws Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Trigger deployment config update", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/OpenShiftHandle.java", "methodName": "org.arquillian.cube.openshift.api.OpenShiftHandle.jolokia", "methodParameterType": "Class<T>#String#Object#", "methodParameterName": "expectedReturnType#podName#input#", "methodBody": "<T> T jolokia(Class<T> expectedReturnType, String podName, Object input) throws Exception;", "AST": "Javadoc#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Input is on purpose plain Object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/Tools.java", "methodName": "org.arquillian.cube.openshift.api.Tools.loadProperties", "methodParameterType": "Class<?>#String#", "methodParameterName": "clazz#fileName#", "methodBody": "public static Properties loadProperties(Class<?> clazz, String fileName) throws IOException {\n        Properties properties = new Properties();\n        try (InputStream is = clazz.getClassLoader().getResourceAsStream(fileName)) {\n            properties.load(is);\n        }\n        return properties;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Load properties.", "call_func_name": ["java.util.Properties.<init>", "java.lang.Class.getClassLoader", "java.lang.ClassLoader.getResourceAsStream", "java.util.Properties.load", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.io.InputStream"], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos41/arquillian-cube/openshift/api/src/main/java/org/arquillian/cube/openshift/api/Tools.java", "methodName": "org.arquillian.cube.openshift.api.Tools.trustAllCertificates", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static SSLContext trustAllCertificates() throws Exception {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {\n            public X509Certificate[] getAcceptedIssuers() {\n                return null;\n            }\n\n            public void checkClientTrusted(X509Certificate[] certs, String authType) {\n            }\n\n            public void checkServerTrusted(X509Certificate[] certs, String authType) {\n            }\n        }};\n        // Install the all-trusting trust manager\n        final SSLContext sc = SSLContext.getInstance(\"SSL\");\n        sc.init(null, trustAllCerts, new java.security.SecureRandom());\n\n        HttpsURLConnection.setDefaultSSLSocketFactory(createSSLSocketFactory(sc));\n        // Create all-trusting host name verifier\n        HostnameVerifier allHostsValid = new HostnameVerifier() {\n            public boolean verify(String hostname, SSLSession session) {\n                return true;\n            }\n        };\n\n        // Install the all-trusting host verifier\n        HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);\n\n        return sc;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#ArrayInitializer#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)ArrayInitializer)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Trust all certs.", "call_func_name": ["javax.net.ssl.SSLContext.getInstance", "java.security.SecureRandom.<init>", "javax.net.ssl.SSLContext.init", "org.arquillian.cube.openshift.api.Tools.createSSLSocketFactory", "javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory", "javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier"], "call_func_parameter": [["java.lang.String"], [""], ["javax.net.ssl.KeyManager[]", "javax.net.ssl.TrustManager[]", "java.security.SecureRandom"], ["javax.net.ssl.SSLContext"], ["javax.net.ssl.SSLSocketFactory"], ["javax.net.ssl.HostnameVerifier"]], "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift-restassured/src/main/java/org/arquillian/cube/openshift/restassured/RestAssuredCustomizer.java", "methodName": "org.arquillian.cube.openshift.restassured.RestAssuredCustomizer.resetRestAssuredConfiguration", "methodParameterType": "ManagerStopping#", "methodParameterName": "event#", "methodBody": "public void resetRestAssuredConfiguration(@Observes ManagerStopping event) {\n        RestAssured.reset();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Resets RestAssured configuration values to default.", "call_func_name": ["io.restassured.RestAssured.reset"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/fabric8/model/F8DeploymentConfig.java", "methodName": "org.arquillian.cube.openshift.impl.fabric8.model.F8DeploymentConfig.F8DeploymentConfig", "methodParameterType": "io.fabric8.openshift.api.model.v4_0.DeploymentConfig#", "methodParameterName": "delegate#", "methodBody": "public F8DeploymentConfig(final io.fabric8.openshift.api.model.v4_0.DeploymentConfig delegate) {\n        this.delegate = delegate;\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new F8DeploymentConfig.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/CEEnvironmentProcessor.java", "methodName": "org.arquillian.cube.openshift.impl.CEEnvironmentProcessor.createEnvironment", "methodParameterType": "BeforeClass#OpenShiftAdapter#CubeOpenShiftConfiguration#", "methodParameterName": "event#client#cubeOpenShiftConfiguration#", "methodBody": "public void createEnvironment(@Observes(precedence = 10) BeforeClass event, OpenShiftAdapter client,\n        CubeOpenShiftConfiguration cubeOpenShiftConfiguration) {\n        final TestClass testClass = event.getTestClass();\n        log.info(String.format(\"Creating environment for %s\", testClass.getName()));\n        OpenShiftResourceFactory.createResources(testClass.getName(), client, testClass.getJavaClass(),\n            cubeOpenShiftConfiguration.getProperties());\n        classTemplateProcessor = new ClassTemplateProcessor(client, cubeOpenShiftConfiguration, testClass);\n        final List<? extends OpenShiftResource> templateResources = classTemplateProcessor.processTemplateResources();\n        templateDetailsProducer.set(() -> templateResources);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#MemberValuePair#NormalAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MemberValuePair)NormalAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(SimpleName)SimpleName)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create the environment as specified by @Template or arq.extension.ce-cube.openshift.template.", "call_func_name": ["org.jboss.arquillian.test.spi.event.suite.BeforeClass.getTestClass", "org.jboss.arquillian.test.spi.TestClass.getName", "java.lang.String.format", "java.util.logging.Logger.info", "org.jboss.arquillian.test.spi.TestClass.getJavaClass", "org.arquillian.cube.openshift.impl.client.CubeOpenShiftConfiguration.getProperties", "org.arquillian.cube.openshift.impl.resources.OpenShiftResourceFactory.createResources", "org.arquillian.cube.openshift.impl.resources.ClassTemplateProcessor.<init>", "org.arquillian.cube.openshift.impl.resources.TemplateProcessor.processTemplateResources", "org.jboss.arquillian.core.api.InstanceProducer.set"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"], [""], [""], ["java.lang.String", "org.arquillian.cube.openshift.impl.adapter.OpenShiftAdapter", "java.lang.Class", "java.util.Properties"], ["org.arquillian.cube.openshift.impl.adapter.OpenShiftAdapter", "org.arquillian.cube.openshift.impl.client.CubeOpenShiftConfiguration", "org.jboss.arquillian.test.spi.TestClass"], [""], ["java.lang.Object"]], "passed_comments": [{"org.arquillian.cube.openshift.impl.resources.TemplateProcessor.processTemplateResources": "Instantiates the templates specified by @Template within @Templates"}]}, {"index": "87", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/CEEnvironmentProcessor.java", "methodName": "org.arquillian.cube.openshift.impl.CEEnvironmentProcessor.deleteEnvironment", "methodParameterType": "AfterClass#OpenShiftAdapter#CubeOpenShiftConfiguration#", "methodParameterName": "event#client#configuration#", "methodBody": "public void deleteEnvironment(@Observes(precedence = -10) AfterClass event, OpenShiftAdapter client,\n        CubeOpenShiftConfiguration configuration) throws Exception {\n        OpenShiftResourceFactory.deleteEnvironment(event.getTestClass(), client, configuration, classTemplateProcessor.getTemplates());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#PrefixExpression#MemberValuePair#NormalAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)MemberValuePair)NormalAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Tear down the environment. <p> In the future, this might be handled by stopping application Cube objects, e.g. StopCube(application), DestroyCube(application).", "call_func_name": ["org.jboss.arquillian.test.spi.event.suite.AfterClass.getTestClass", "org.arquillian.cube.openshift.impl.resources.TemplateProcessor.getTemplates", "org.arquillian.cube.openshift.impl.resources.OpenShiftResourceFactory.deleteEnvironment"], "call_func_parameter": [[""], [""], ["org.jboss.arquillian.test.spi.TestClass", "org.arquillian.cube.openshift.impl.adapter.OpenShiftAdapter", "org.arquillian.cube.openshift.impl.client.CubeOpenShiftConfiguration", "java.util.List"]], "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/ResourceUtil.java", "methodName": "org.arquillian.cube.openshift.impl.client.ResourceUtil.awaitRoute", "methodParameterType": "URL#int#TimeUnit#int#int#", "methodParameterName": "routeUrl#timeout#timeoutUnit#repetitions#statusCodes#", "methodBody": "public static void awaitRoute(URL routeUrl, int timeout, TimeUnit timeoutUnit, int repetitions, int... statusCodes) {\n        AtomicInteger successfulAwaitsInARow = new AtomicInteger(0);\n        await().atMost(timeout, timeoutUnit).until(() -> {\n            if (tryConnect(routeUrl, statusCodes)) {\n                successfulAwaitsInARow.incrementAndGet();\n            } else {\n                successfulAwaitsInARow.set(0);\n            }\n            return successfulAwaitsInARow.get() >= repetitions;\n        });\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Waits for the timeout duration until the url responds with correct status code", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "89", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistantTemplate.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistantTemplate.parameter", "methodParameterType": "String#String#", "methodParameterName": "name#value#", "methodBody": "public OpenShiftAssistantTemplate parameter(String name, String value) {\n        parameterValues.put(name, value);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Stores template parameters for OpenShiftAssistantTemplate.", "call_func_name": ["java.util.HashMap.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistantTemplate.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistantTemplate.deploy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void deploy() throws IOException {\n        KubernetesList list = processTemplate(templateURL, parameterValues);\n        createResources(list);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Deploys application reading resources from specified TemplateURL.", "call_func_name": ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistantTemplate.processTemplate", "org.arquillian.cube.openshift.impl.client.OpenShiftAssistantTemplate.createResources"], "call_func_parameter": [["java.net.URL", "java.util.HashMap"], ["io.fabric8.kubernetes.api.model.v4_0.KubernetesList"]], "passed_comments": "/"}, {"index": "91", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.deployApplication", "methodParameterType": "String#", "methodParameterName": "applicationName#", "methodBody": "@Override\n    public void deployApplication(String applicationName) throws IOException {\n\n        final Optional<URL> defaultFileOptional = this.openShiftAssistantDefaultResourcesLocator.locate();\n\n        if (defaultFileOptional.isPresent()) {\n            deployApplication(applicationName, defaultFileOptional.get());\n        } else {\n            log.warning(\"No default Kubernetes or OpenShift resources found at default locations.\");\n        }\n\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Deploys application finding resources in default location in classpath. That is: openshift.(y[a]ml|json), kubernetes.(y[a]ml|json), META-INF/fabric8/openshift.(y[a]ml|json), META-INF/fabric8/kubernetes.(y[a]ml|json) In this method yo specify the application name.", "call_func_name": ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistantDefaultResourcesLocator.locate", "java.util.Optional.isPresent", "java.util.Optional.get", "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.deployApplication", "java.util.logging.Logger.warning"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.net.URL[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "92", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.deploy", "methodParameterType": "InputStream#", "methodParameterName": "inputStream#", "methodBody": "@Override\n    public void deploy(InputStream inputStream) throws IOException {\n        final List<? extends HasMetadata> entities = deploy(\"application\", inputStream);\n\n        if (this.applicationName == null) {\n\n            Optional<String> deploymentConfig = entities.stream()\n                .filter(hm -> hm instanceof DeploymentConfig)\n                .map(hm -> (DeploymentConfig) hm)\n                .map(dc -> dc.getMetadata().getName()).findFirst();\n\n            deploymentConfig.ifPresent(name -> this.applicationName = name);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleType#InstanceofExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#CastExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Deploys application reading resources from specified InputStream.", "call_func_name": ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.deploy", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Stream.findFirst", "java.util.function.Consumer.accept", "java.util.Optional.ifPresent"], "call_func_parameter": [["java.lang.String", "java.io.InputStream"], [""], [""], ["java.util.function.Predicate"], [""], ["java.util.function.Function"], [""], ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistant"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "93", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.getRoute", "methodParameterType": "String#", "methodParameterName": "routeName#", "methodBody": "public Optional<URL> getRoute(String routeName) {\n        Route route = getClient().routes()\n            .inNamespace(namespace).withName(routeName).get();\n\n        return route != null ? Optional.ofNullable(createUrlFromRoute(route)) : Optional.empty();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the URL of the route with given name.", "call_func_name": ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.getClient", "io.fabric8.openshift.clnt.v4_0.OpenShiftClient.routes", "io.fabric8.kubernetes.clnt.v4_0.dsl.MixedOperation.inNamespace", "io.fabric8.kubernetes.clnt.v4_0.dsl.NonNamespaceOperation.list", "io.fabric8.openshift.api.model.v4_0.RouteList.getItems", "java.util.List.stream", "java.util.stream.Stream.findFirst", "java.util.function.Function.apply", "java.util.Optional.map"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], [""], [""], [""], ["java.util.function.Function"]], "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.getRoute", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<URL> getRoute() {\n        Optional<Route> optionalRoute = getClient().routes().inNamespace(namespace)\n            .list().getItems()\n            .stream()\n            .findFirst();\n\n        return optionalRoute\n            .map(OpenShiftRouteLocator::createUrlFromRoute);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the URL of the first route.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "95", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.awaitUrl", "methodParameterType": "URL#int#", "methodParameterName": "routeUrl#statusCodes#", "methodBody": "public void awaitUrl(URL routeUrl, int... statusCodes) {\n        awaitRoute(routeUrl, statusCodes);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Waits until the url responds with correct status code", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "96", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.scale", "methodParameterType": "int#", "methodParameterName": "replicas#", "methodBody": "@Override\n    public void scale(final int replicas) {\n        scale(this.applicationName, replicas);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Scaling the last deployed application to given replicas", "call_func_name": ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.scale"], "call_func_parameter": [["java.lang.String", "int"]], "passed_comments": [{"org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.scale": "Scaling the application to given replicas"}]}, {"index": "97", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.scale", "methodParameterType": "String#int#", "methodParameterName": "applicationName#replicas#", "methodBody": "@Override\n    public void scale(final String applicationName, final int replicas) {\n        final DeploymentConfig deploymentConfig = getClient()\n            .deploymentConfigs()\n            .inNamespace(this.namespace)\n            .withName(applicationName)\n            .scale(replicas);\n        final int availableReplicas = deploymentConfig.getStatus().getAvailableReplicas();\n        log.info(String.format(\"Scaling replicas from %d to %d for application %s.\", availableReplicas, replicas, applicationName));\n        awaitApplicationReadinessOrFail(applicationName);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Scaling the application to given replicas", "call_func_name": ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.getClient", "io.fabric8.openshift.clnt.v4_0.OpenShiftClient.deploymentConfigs", "io.fabric8.kubernetes.clnt.v4_0.dsl.MixedOperation.inNamespace", "io.fabric8.kubernetes.clnt.v4_0.dsl.NonNamespaceOperation.withName", "io.fabric8.openshift.clnt.v4_0.dsl.DeployableScalableResource.scale", "io.fabric8.openshift.api.model.v4_0.DeploymentConfig.getStatus", "io.fabric8.openshift.api.model.v4_0.DeploymentConfigStatus.getAvailableReplicas", "java.lang.Integer.intValue", "java.lang.Integer.valueOf", "java.lang.String.format", "java.util.logging.Logger.info", "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.awaitApplicationReadinessOrFail"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.String"], ["int"], [""], [""], [""], ["int"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.awaitApplicationReadinessOrFail": "Awaits at most 5 minutes until all pods of the application are running."}]}, {"index": "98", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.awaitApplicationReadinessOrFail", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void awaitApplicationReadinessOrFail() {\n        awaitApplicationReadinessOrFail(this.applicationName);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Awaits at most 5 minutes until all pods of the last deployed application are running.", "call_func_name": ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.awaitApplicationReadinessOrFail"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.awaitApplicationReadinessOrFail": "Awaits at most 5 minutes until all pods of the application are running."}]}, {"index": "99", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.awaitApplicationReadinessOrFail", "methodParameterType": "String#", "methodParameterName": "applicationName#", "methodBody": "@Override\n    public void awaitApplicationReadinessOrFail(final String applicationName) {\n        await().atMost(5, TimeUnit.MINUTES).until(() -> {\n                return getClient()\n                    .deploymentConfigs()\n                    .inNamespace(this.namespace)\n                    .withName(applicationName).isReady();\n            }\n        );\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Awaits at most 5 minutes until all pods of the application are running.", "call_func_name": ["org.awaitility.Awaitility.await", "org.awaitility.core.ConditionFactory.atMost", "java.util.concurrent.Callable.call", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["long", "java.util.concurrent.TimeUnit"], ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistant", "java.lang.String"], ["java.util.concurrent.Callable"]], "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.deploymentConfig", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DeploymentConfig deploymentConfig() {\n        return getClient()\n            .deploymentConfigs()\n            .inNamespace(this.namespace)\n            .withName(this.applicationName)\n            .get();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Method that returns the current deployment configuration object", "call_func_name": ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.getClient", "io.fabric8.openshift.clnt.v4_0.OpenShiftClient.deploymentConfigs", "io.fabric8.kubernetes.clnt.v4_0.dsl.MixedOperation.inNamespace", "io.fabric8.kubernetes.clnt.v4_0.dsl.NonNamespaceOperation.withName", "io.fabric8.openshift.clnt.v4_0.dsl.DeployableScalableResource.get"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.usingTemplate", "methodParameterType": "URL#", "methodParameterName": "templateURL#", "methodBody": "public OpenShiftAssistantTemplate usingTemplate(URL templateURL) {\n        return new OpenShiftAssistantTemplate(templateURL, getClient());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets template URL used for deploying application.", "call_func_name": ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.getClient", "org.arquillian.cube.openshift.impl.client.OpenShiftAssistantTemplate.<init>"], "call_func_parameter": [[""], ["java.net.URL", "io.fabric8.openshift.clnt.v4_0.OpenShiftClient"]], "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.usingTemplate", "methodParameterType": "String#", "methodParameterName": "templateURL#", "methodBody": "public OpenShiftAssistantTemplate usingTemplate(String templateURL) throws MalformedURLException {\n        return new OpenShiftAssistantTemplate(new URL(templateURL), getClient());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets template URL string used for deploying application.", "call_func_name": ["java.net.URL.<init>", "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.getClient", "org.arquillian.cube.openshift.impl.client.OpenShiftAssistantTemplate.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.net.URL", "io.fabric8.openshift.clnt.v4_0.OpenShiftClient"]], "passed_comments": "/"}, {"index": "103", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.listProjects", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Project> listProjects() {\n        return getClient().projects().list().getItems();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the list of all the OpenShift Projects.", "call_func_name": ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.getClient", "io.fabric8.openshift.clnt.v4_0.OpenShiftClient.projects", "io.fabric8.kubernetes.clnt.v4_0.dsl.NonNamespaceOperation.list", "io.fabric8.openshift.api.model.v4_0.ProjectList.getItems"], "call_func_parameter": [[""], [""], [""], [""]], "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.getCurrentProjectName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCurrentProjectName() {\n        return getClient().getNamespace();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the current OpenShift project used for deploying application.", "call_func_name": ["org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.getClient", "io.fabric8.openshift.clnt.v4_0.OpenShiftClient.getNamespace"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "105", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.projectExists", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public boolean projectExists(String name) throws IllegalArgumentException {\n        if (name == null || name.isEmpty()) {\n            throw new IllegalArgumentException(\"Project name cannot be empty\");\n        }\n        return listProjects().stream()\n            .map(p -> p.getMetadata().getName())\n            .anyMatch(Predicate.isEqual(name));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the given project exists or not.", "call_func_name": ["java.lang.String.isEmpty", "java.lang.IllegalArgumentException.<init>", "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.listProjects", "java.util.List.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.function.Predicate.isEqual", "java.util.stream.Stream.anyMatch"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], ["java.util.function.Function"], ["java.lang.Object"], ["java.util.function.Predicate"]], "passed_comments": [{"org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.listProjects": "Gets the list of all the OpenShift Projects."}]}, {"index": "106", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/client/OpenShiftAssistant.java", "methodName": "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.findProject", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public Optional<Project> findProject(String name) throws IllegalArgumentException {\n        if (name == null || name.isEmpty()) {\n            throw new IllegalArgumentException(\"Project name cannot be empty\");\n        }\n        return getProject(name);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Finds for the given project.", "call_func_name": ["java.lang.String.isEmpty", "java.lang.IllegalArgumentException.<init>", "org.arquillian.cube.openshift.impl.client.OpenShiftAssistant.getProject"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/resources/OpenShiftResourceFactory.java", "methodName": "org.arquillian.cube.openshift.impl.resources.OpenShiftResourceFactory.createImageStreamRequest", "methodParameterType": "String#String#String#boolean#", "methodParameterName": "name#version#image#insecure#", "methodBody": "private static String createImageStreamRequest(String name, String version, String image, boolean insecure) {\n        JSONObject imageStream = new JSONObject();\n        JSONObject metadata = new JSONObject();\n        JSONObject annotations = new JSONObject();\n\n        metadata.put(\"name\", name);\n        annotations.put(\"openshift.io/image.insecureRepository\", insecure);\n        metadata.put(\"annotations\", annotations);\n\n        // Definition of the image\n        JSONObject from = new JSONObject();\n        from.put(\"kind\", \"DockerImage\");\n        from.put(\"name\", image);\n\n        JSONObject importPolicy = new JSONObject();\n        importPolicy.put(\"insecure\", insecure);\n\n        JSONObject tag = new JSONObject();\n        tag.put(\"name\", version);\n        tag.put(\"from\", from);\n        tag.put(\"importPolicy\", importPolicy);\n\n        JSONObject tagAnnotations = new JSONObject();\n        tagAnnotations.put(\"version\", version);\n        tag.put(\"annotations\", tagAnnotations);\n\n        JSONArray tags = new JSONArray();\n        tags.add(tag);\n\n        // Add image definition to image stream\n        JSONObject spec = new JSONObject();\n        spec.put(\"tags\", tags);\n\n        imageStream.put(\"kind\", \"ImageStream\");\n        imageStream.put(\"apiVersion\", \"v1\");\n        imageStream.put(\"metadata\", metadata);\n        imageStream.put(\"spec\", spec);\n\n        return imageStream.toJSONString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates image stream request and returns it in JSON formatted string.", "call_func_name": ["org.json.simple.JSONObject.<init>", "org.json.simple.JSONObject.put", "java.lang.Boolean.valueOf", "org.json.simple.JSONArray.<init>", "org.json.simple.JSONArray.add", "org.json.simple.JSONObject.toJSONString"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"], ["boolean"], [""], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "108", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/resources/OpenShiftResourceFactory.java", "methodName": "org.arquillian.cube.openshift.impl.resources.OpenShiftResourceFactory.getTemplates", "methodParameterType": "T#", "methodParameterName": "objectType#", "methodBody": "static <T> List<Template> getTemplates(T objectType) {\n        try {\n            List<Template> templates = new ArrayList<>();\n            TEMP_FINDER.findAnnotations(templates, objectType);\n            return templates;\n        } catch (Exception e) {\n            throw new IllegalStateException(e);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Aggregates a list of templates specified by @Template", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "109", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/resources/OpenShiftResourceFactory.java", "methodName": "org.arquillian.cube.openshift.impl.resources.OpenShiftResourceFactory.syncInstantiation", "methodParameterType": "T#", "methodParameterName": "objectType#", "methodBody": "static <T> boolean syncInstantiation(T objectType) {\n        List<Template> templates = new ArrayList<>();\n        Templates tr = TEMP_FINDER.findAnnotations(templates, objectType);\n        if (tr == null) {\n            /* Default to synchronous instantiation */\n            return true;\n        } else {\n            return tr.syncInstantiation();\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Returns true if templates are to be instantiated synchronously and false if asynchronously.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/resources/TemplateProcessor.java", "methodName": "org.arquillian.cube.openshift.impl.resources.TemplateProcessor.processTemplateResources", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<? super OpenShiftResource> processTemplateResources() {\n        List<? extends OpenShiftResource> resources;\n        final List<? super OpenShiftResource> processedResources = new ArrayList<>();\n        templates = OpenShiftResourceFactory.getTemplates(getType());\n        boolean sync_instantiation = OpenShiftResourceFactory.syncInstantiation(getType());\n\n        /* Instantiate templates */\n        for (Template template : templates) {\n            resources = processTemplate(template);\n            if (resources != null) {\n                if (sync_instantiation) {\n                /* synchronous template instantiation */\n                    processedResources.addAll(resources);\n                } else {\n                /* asynchronous template instantiation */\n                    try {\n                        delay(openShiftAdapter, resources);\n                    } catch (Throwable t) {\n                        throw new IllegalArgumentException(asynchronousDelayErrorMessage(), t);\n                    }\n                }\n            }\n        }\n\n        return processedResources;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Instantiates the templates specified by @Template within @Templates", "call_func_name": ["java.util.ArrayList.<init>", "org.arquillian.cube.openshift.impl.resources.TemplateProcessor.getType", "org.arquillian.cube.openshift.impl.resources.OpenShiftResourceFactory.getTemplates", "org.arquillian.cube.openshift.impl.resources.OpenShiftResourceFactory.syncInstantiation", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.arquillian.cube.openshift.impl.resources.TemplateProcessor.processTemplate", "java.util.List.addAll", "org.arquillian.cube.openshift.impl.resources.TemplateProcessor.delay", "org.arquillian.cube.openshift.impl.resources.TemplateProcessor.asynchronousDelayErrorMessage", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["java.lang.Object"], [""], [""], [""], ["org.arquillian.cube.openshift.api.Template"], ["java.util.Collection"], ["org.arquillian.cube.openshift.impl.adapter.OpenShiftAdapter", "java.util.List"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/utils/URLChecker.java", "methodName": "org.arquillian.cube.openshift.impl.utils.URLChecker.check", "methodParameterType": "URL#", "methodParameterName": "url#", "methodBody": "boolean check(URL url);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Check url. If we return true, the delay will be stopped, else it will be continued.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/utils/DockerFileTemplateHandler.java", "methodName": "org.arquillian.cube.openshift.impl.utils.DockerFileTemplateHandler.apply", "methodParameterType": "OutputStream#", "methodParameterName": "outputStream#", "methodBody": "void apply(OutputStream outputStream) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Apply any custom cmd, envs, etc to DockerFile template outputStream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/utils/Checker.java", "methodName": "org.arquillian.cube.openshift.impl.utils.Checker.check", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean check();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Check delay. <p/> If we return true, the delay will be stopped, else it will be continued.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/ext/TemplateContainerStarter.java", "methodName": "org.arquillian.cube.openshift.impl.ext.TemplateContainerStarter.waitForDeployments", "methodParameterType": "AfterStart#OpenShiftAdapter#CEEnvironmentProcessor.TemplateDetails#TestClass#CubeOpenShiftConfiguration#OpenShiftClient#", "methodParameterName": "event#client#details#testClass#configuration#openshiftClient#", "methodBody": "public void waitForDeployments(@Observes(precedence = -100) AfterStart event, OpenShiftAdapter client,\n        CEEnvironmentProcessor.TemplateDetails details, TestClass testClass, CubeOpenShiftConfiguration configuration, OpenShiftClient openshiftClient)\n        throws Exception {\n        if (testClass == null) {\n            // nothing to do, since we're not in ClassScoped context\n            return;\n        }\n        if (details == null) {\n            log.warning(String.format(\"No environment for %s\", testClass.getName()));\n            return;\n        }\n        log.info(String.format(\"Waiting for environment for %s\", testClass.getName()));\n        try {\n            delay(client, details.getResources());\n        } catch (Throwable t) {\n            throw new IllegalArgumentException(\"Error waiting for template resources to deploy: \" + testClass.getName(), t);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#PrefixExpression#MemberValuePair#NormalAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)MemberValuePair)NormalAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Wait for the template resources to come up after the test container has been started. This allows the test container and the template resources to come up in parallel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/adapter/OpenShiftAdapter.java", "methodName": "org.arquillian.cube.openshift.impl.adapter.OpenShiftAdapter.checkProject", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean checkProject();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return true if the project was created; false if the project already exists", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos41/arquillian-cube/openshift/openshift/src/main/java/org/arquillian/cube/openshift/impl/adapter/OpenShiftAdapter.java", "methodName": "org.arquillian.cube.openshift.impl.adapter.OpenShiftAdapter.delay", "methodParameterType": "Map<String,String>#int#Operator#", "methodParameterName": "labels#replicas#op#", "methodBody": "void delay(Map<String, String> labels, int replicas, Operator op) throws Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "@param op compare current number of pods vs. replicas", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos41/arquillian-cube/docker/drone/src/main/java/org/arquillian/cube/docker/drone/util/VolumeCreator.java", "methodName": "org.arquillian.cube.docker.drone.util.VolumeCreator.createTemporaryVolume", "methodParameterType": "String#", "methodParameterName": "password#", "methodBody": "public static final Path createTemporaryVolume(String password) {\n        final File tmpFile = new File(\"target/vnc/.tmp\" + System.currentTimeMillis());\n\n        if (!tmpFile.mkdirs()) {\n            throw new IllegalArgumentException(\"Temporary Folder for storing recordings could not be created.\");\n        }\n\n        Runtime.getRuntime().addShutdownHook(new Thread() {\n            @Override\n            public void run() {\n                FileUtils.deleteQuietly(tmpFile);\n            }\n        });\n\n        final Path temp = tmpFile.toPath();\n        Path passwordFile = temp.resolve(\"password\");\n\n        try {\n            Files.write(passwordFile, password.getBytes());\n        } catch (IOException e) {\n            throw new IllegalArgumentException(e);\n        }\n\n        return temp;\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new temporary folder with password file for VNC server. The folder is relative to the root of the project target/vnc folder.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.System.currentTimeMillis", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.io.File.<init>", "java.io.File.mkdirs", "java.lang.IllegalArgumentException.<init>", "java.lang.Runtime.getRuntime", "java.lang.Runtime.addShutdownHook", "java.io.File.toPath", "java.nio.file.Path.resolve", "java.lang.String.getBytes", "java.nio.file.Files.write", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["long"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Thread"], [""], ["java.lang.String"], [""], ["java.nio.file.Path", "byte[]", "java.nio.file.OpenOption[]"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos41/arquillian-cube/docker/drone/src/main/java/org/arquillian/cube/docker/drone/util/SeleniumVersionExtractor.java", "methodName": "org.arquillian.cube.docker.drone.util.SeleniumVersionExtractor.fromClassPath", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static String fromClassPath() {\n        Set<String> versions = new HashSet<>();\n        try {\n            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n            Enumeration<URL> manifests = classLoader.getResources(\"META-INF/MANIFEST.MF\");\n\n            while (manifests.hasMoreElements()) {\n                URL manifestURL = manifests.nextElement();\n                try (InputStream is = manifestURL.openStream()) {\n                    Manifest manifest = new Manifest();\n                    manifest.read(is);\n\n                    Attributes buildInfo = manifest.getAttributes(\"Build-Info\");\n                    if (buildInfo != null) {\n                        if (buildInfo.getValue(\"Selenium-Version\") != null) {\n                            versions.add(buildInfo.getValue(\"Selenium-Version\"));\n                        } else {\n                            // might be in build-info part\n                            if (manifest.getEntries() != null) {\n                                if (manifest.getEntries().containsKey(\"Build-Info\")) {\n                                    final Attributes attributes = manifest.getEntries().get(\"Build-Info\");\n\n                                    if (attributes.getValue(\"Selenium-Version\") != null) {\n                                        versions.add(attributes.getValue(\"Selenium-Version\"));\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING,\n                \"Exception {0} occurred while resolving selenium version and latest image is going to be used.\",\n                e.getMessage());\n            return SELENIUM_VERSION;\n        }\n\n        if (versions.isEmpty()) {\n            logger.log(Level.INFO, \"No version of Selenium found in classpath. Using latest image.\");\n            return SELENIUM_VERSION;\n        }\n\n        String foundVersion = versions.iterator().next();\n        if (versions.size() > 1) {\n            logger.log(Level.WARNING, \"Multiple versions of Selenium found in classpath. Using the first one found {0}.\",\n                foundVersion);\n        }\n\n        return foundVersion;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#TryStatement#Block#WhileStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)TryStatement)Block)WhileStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)CatchClause)TryStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns current selenium version from JAR set in classpath.", "call_func_name": ["java.util.HashSet.<init>", "java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.lang.ClassLoader.getResources", "java.util.Enumeration.hasMoreElements", "java.util.Enumeration.nextElement", "java.net.URL.openStream", "java.util.jar.Manifest.<init>", "java.util.jar.Manifest.read", "java.util.jar.Manifest.getAttributes", "java.util.jar.Attributes.getValue", "java.util.Set.add", "java.util.jar.Manifest.getEntries", "java.util.Map.containsKey", "java.util.Map.get", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "java.lang.Exception.getMessage", "java.util.logging.Logger.log", "java.util.Set.isEmpty", "java.util.logging.Logger.log", "java.util.Set.iterator", "java.util.Iterator.next", "java.util.Set.size"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], [""], [""], [""], ["java.io.InputStream"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.Throwable"], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Object"], [""], ["java.util.logging.Level", "java.lang.String"], [""], [""], [""]], "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos41/arquillian-cube/docker/drone/src/main/java/org/arquillian/cube/docker/drone/util/IpAddressValidator.java", "methodName": "org.arquillian.cube.docker.drone.util.IpAddressValidator.validate", "methodParameterType": "String#", "methodParameterName": "ip#", "methodBody": "public static boolean validate(final String ip) {\n        Matcher matcher = pattern.matcher(ip);\n        return matcher.matches();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Validate ipv4 address with regular expression", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches"], "call_func_parameter": [["java.lang.CharSequence"], [""]], "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/Top.java", "methodName": "org.arquillian.cube.docker.impl.util.Top.isSpinning", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isSpinning() {\n        return dockerEnvPath.exists() && dockerInitPath.exists() && dockerSocketFile.exists();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if current code is being executed inside Docker or not.", "call_func_name": ["java.io.File.exists"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/DockerMachine.java", "methodName": "org.arquillian.cube.docker.impl.util.DockerMachine.startDockerMachine", "methodParameterType": "String#String#", "methodParameterName": "cliPathExec#machineName#", "methodBody": "public void startDockerMachine(String cliPathExec, String machineName) {\n        commandLineExecutor.execCommand(createDockerMachineCommand(cliPathExec), \"start\", machineName);\n        this.manuallyStarted = true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Starts given docker machine.", "call_func_name": ["org.arquillian.cube.docker.impl.util.DockerMachine.createDockerMachineCommand", "org.arquillian.cube.docker.impl.util.CommandLineExecutor.execCommand"], "call_func_parameter": [["java.lang.String"], ["java.lang.String[]"]], "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/DockerMachine.java", "methodName": "org.arquillian.cube.docker.impl.util.DockerMachine.startDockerMachine", "methodParameterType": "String#", "methodParameterName": "machineName#", "methodBody": "public void startDockerMachine(String machineName) {\n        startDockerMachine(null, machineName);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Starts given docker machine.", "call_func_name": ["org.arquillian.cube.docker.impl.util.DockerMachine.startDockerMachine"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.arquillian.cube.docker.impl.util.DockerMachine.startDockerMachine": "Starts given docker machine."}]}, {"index": "123", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/DockerMachine.java", "methodName": "org.arquillian.cube.docker.impl.util.DockerMachine.isDockerMachineInstalled", "methodParameterType": "String#", "methodParameterName": "cliPathExec#", "methodBody": "public boolean isDockerMachineInstalled(String cliPathExec) {\n        try {\n            commandLineExecutor.execCommand(createDockerMachineCommand(cliPathExec));\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Checks if Docker Machine is installed by running docker-machine and inspect the result.", "call_func_name": ["org.arquillian.cube.docker.impl.util.DockerMachine.isDockerMachineInstalled"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.arquillian.cube.docker.impl.util.DockerMachine.isDockerMachineInstalled": "Checks if Docker Machine is installed by running docker-machine and inspect the result."}]}, {"index": "124", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/DockerMachine.java", "methodName": "org.arquillian.cube.docker.impl.util.DockerMachine.isDockerMachineInstalled", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDockerMachineInstalled() {\n        return isDockerMachineInstalled(null);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if Docker Machine is installed by running docker-machine and inspect the result.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/DockerMachine.java", "methodName": "org.arquillian.cube.docker.impl.util.DockerMachine.list", "methodParameterType": "String#", "methodParameterName": "cliPathExec#", "methodBody": "public Set<Machine> list(String cliPathExec) {\n\n        Set<Machine> machines = new HashSet<>();\n        List<String> output = commandLineExecutor.execCommandAsArray(createDockerMachineCommand(cliPathExec), \"ls\");\n\n        Map<String, Index> headerIndex = calculateStartingFieldsIndex(output.get(0));\n        for (String fields : output.subList(1, output.size())) {\n            machines.add(parse(headerIndex, fields));\n        }\n\n        return machines;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Executes docker-machine ls command", "call_func_name": ["org.arquillian.cube.docker.impl.util.DockerMachine.list"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.arquillian.cube.docker.impl.util.DockerMachine.list": "Executes docker-machine ls command"}]}, {"index": "126", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/DockerMachine.java", "methodName": "org.arquillian.cube.docker.impl.util.DockerMachine.list", "methodParameterType": "String#String#String#", "methodParameterName": "cliPathExec#field#value#", "methodBody": "public Set<Machine> list(String cliPathExec, String field, String value) {\n        final Set<Machine> machines = new HashSet<>();\n        List<String> output =\n            commandLineExecutor.execCommandAsArray(createDockerMachineCommand(cliPathExec), \"ls\", \"--filter\",\n                field + \"=\" + value);\n        output = findHeader(output);\n\n        if (!output.isEmpty()) {\n            final Map<String, Index> headerIndex = calculateStartingFieldsIndex(output.get(0));\n            for (String fields : output.subList(1, output.size())) {\n                machines.add(parse(headerIndex, fields));\n            }\n        }\n\n        return machines;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(StringLiteral)StringLiteral(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Executes docker-machine ls --filter field=value command", "call_func_name": ["java.util.HashSet.<init>", "org.arquillian.cube.docker.impl.util.DockerMachine.createDockerMachineCommand", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.arquillian.cube.docker.impl.util.CommandLineExecutor.execCommandAsArray", "org.arquillian.cube.docker.impl.util.DockerMachine.findHeader", "java.util.List.isEmpty", "java.util.List.get", "org.arquillian.cube.docker.impl.util.DockerMachine.calculateStartingFieldsIndex", "java.util.List.size", "java.util.List.subList", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.arquillian.cube.docker.impl.util.DockerMachine.parse", "java.util.Set.add"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String[]"], ["java.util.List"], [""], ["int"], ["java.lang.String"], [""], ["int", "int"], [""], [""], [""], ["java.util.Map", "java.lang.String"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/DockerMachine.java", "methodName": "org.arquillian.cube.docker.impl.util.DockerMachine.list", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<Machine> list() {\n        return this.list(null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Executes docker-machine ls command", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/DockerMachine.java", "methodName": "org.arquillian.cube.docker.impl.util.DockerMachine.list", "methodParameterType": "String#String#", "methodParameterName": "field#value#", "methodBody": "public Set<Machine> list(String field, String value) {\n        return this.list(null, field, value);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Executes docker-machine ls --filter field=value command", "call_func_name": ["org.arquillian.cube.docker.impl.util.DockerMachine.list"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"org.arquillian.cube.docker.impl.util.DockerMachine.list": "Executes docker-machine ls --filter field=value command"}]}, {"index": "129", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/SinglePortBindResolver.java", "methodName": "org.arquillian.cube.docker.impl.util.SinglePortBindResolver.resolveBindPort", "methodParameterType": "CubeDockerConfiguration#int#String#", "methodParameterName": "cubeDockerConfiguration#exposedPort#excludedContainers#", "methodBody": "public static int resolveBindPort(CubeDockerConfiguration cubeDockerConfiguration, int exposedPort,\n        String... excludedContainers) {\n        final PortBindInfo portBinding = resolvePortBindPort(cubeDockerConfiguration, exposedPort, excludedContainers);\n\n        if (portBinding == null) {\n            return exposedPort;\n        }\n\n        return portBinding.getBindPort();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Method that tries to resolve a bind port for a given exposed port.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/SinglePortBindResolver.java", "methodName": "org.arquillian.cube.docker.impl.util.SinglePortBindResolver.resolvePortBindPort", "methodParameterType": "CubeDockerConfiguration#int#String#", "methodParameterName": "cubeDockerConfiguration#exposedPort#excludedContainers#", "methodBody": "public static PortBindInfo resolvePortBindPort(CubeDockerConfiguration cubeDockerConfiguration, int exposedPort,\n        String... excludedContainers) {\n\n        final DockerCompositions dockerContainersContent = cubeDockerConfiguration.getDockerContainersContent();\n        final Set<Map.Entry<String, CubeContainer>> containers = dockerContainersContent.getContainers().entrySet();\n\n        // user specified an exposed port\n        PortBindInfo portBindInfo = null;\n        for (Map.Entry<String, CubeContainer> cubeContainerEntry : containers) {\n\n            // need to skip vnc and selenium container\n            if (shouldBeIgnored(cubeContainerEntry.getKey(), excludedContainers)) {\n                continue;\n            }\n\n            final CubeContainer cubeContainer = cubeContainerEntry.getValue();\n            final Collection<PortBinding> portBindings = cubeContainer.getPortBindings();\n            if (portBindings != null) {\n                for (PortBinding portBinding : portBindings) {\n                    if (portBinding.getExposedPort().getExposed() == exposedPort) {\n                        if (noPreviousBindPortFound(portBindInfo)) {\n                            int bindPort = portBinding.getBound();\n                            portBindInfo = new PortBindInfo(\n                                portBinding.getExposedPort().getExposed(),\n                                bindPort, cubeContainerEntry.getKey());\n                        } else {\n                            throw new IllegalArgumentException(\n                                String.format(\"More than one docker container with port binding having exposed port %s.\",\n                                    exposedPort));\n                        }\n                    }\n                }\n            }\n\n            if (noPreviousBindPortFound(portBindInfo)) {\n                return null;\n            }\n        }\n        return portBindInfo;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Method that tries to resolve a bind port for a given exposed port.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/SinglePortBindResolver.java", "methodName": "org.arquillian.cube.docker.impl.util.SinglePortBindResolver.resolveBindPort", "methodParameterType": "CubeDockerConfiguration#String#", "methodParameterName": "cubeDockerConfiguration#excludedContainers#", "methodBody": "public static int resolveBindPort(CubeDockerConfiguration cubeDockerConfiguration, String... excludedContainers) {\n        final PortBindInfo portBinding = resolvePortBindPort(cubeDockerConfiguration, excludedContainers);\n\n        if (portBinding == null) {\n            throw new IllegalArgumentException(\"There isn't any bind port.\");\n        }\n        return portBinding.getBindPort();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Method that tries to resolve a bind port by searching if there is only one binding port across all running containers", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/util/SinglePortBindResolver.java", "methodName": "org.arquillian.cube.docker.impl.util.SinglePortBindResolver.resolvePortBindPort", "methodParameterType": "CubeDockerConfiguration#String#", "methodParameterName": "cubeDockerConfiguration#excludedContainers#", "methodBody": "public static PortBindInfo resolvePortBindPort(CubeDockerConfiguration cubeDockerConfiguration,\n        String... excludedContainers) {\n\n        final DockerCompositions dockerContainersContent = cubeDockerConfiguration.getDockerContainersContent();\n        final Set<Map.Entry<String, CubeContainer>> containers = dockerContainersContent.getContainers().entrySet();\n\n        //if no port, we check if there is only one cube with one bind port and if not, return default one\n\n        PortBindInfo portBindInfo = null;\n        for (Map.Entry<String, CubeContainer> cubeContainerEntry : containers) {\n\n            // need to skip excluded containers\n            if (shouldBeIgnored(cubeContainerEntry.getKey(), excludedContainers)) {\n                continue;\n            }\n\n            final CubeContainer cubeContainer = cubeContainerEntry.getValue();\n            if (hasMoreThanOneBindPort(cubeContainer)) {\n                throw new IllegalArgumentException(\"No port was specified and a container has more than one bind port.\");\n            }\n\n            if (hasOnlyOneBindPort(cubeContainer)) {\n                if (noPreviousBindPortFound(portBindInfo)) {\n                    final PortBinding portBinding = cubeContainer.getPortBindings()\n                        .iterator().next();\n                    int bindPort = portBinding.getBound();\n                    int exposedPort = portBinding.getExposedPort().getExposed();\n                    portBindInfo = new PortBindInfo(exposedPort, bindPort, cubeContainerEntry.getKey());\n                } else {\n                    throw new IllegalArgumentException(\n                        \"No port was specified and in all containers there are more than one bind port.\");\n                }\n            }\n        }\n\n        if (noPreviousBindPortFound(portBindInfo)) {\n            throw new IllegalArgumentException(\"There isn't any bind port.\");\n        }\n\n        return portBindInfo;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Method that tries to resolve a bind port by searching if there is only one binding port across all running containers", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/DockerContainerDefinitionParser.java", "methodName": "org.arquillian.cube.docker.impl.client.DockerContainerDefinitionParser.checkSrcTestAndMainResources", "methodParameterType": "String#String#", "methodParameterName": "filename#outerDirectory#", "methodBody": "static URI checkSrcTestAndMainResources(String filename, String outerDirectory) {\n        final Path testPath = Paths.get(\"src\", \"test\", outerDirectory, filename);\n        final Path testDefinitionPath = resolveDockerDefinition(testPath);\n        if (testDefinitionPath != null) {\n            return testDefinitionPath.toUri();\n        } else {\n            final Path mainPath = Paths.get(\"src\", \"main\", outerDirectory, filename);\n            final Path mainDefinitionPath = resolveDockerDefinition(mainPath);\n            if (mainDefinitionPath != null) {\n                return mainDefinitionPath.toUri();\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if given file is at src/{test, main}/outerDirectory/filename exists or not.", "call_func_name": ["java.nio.file.Paths.get", "org.arquillian.cube.docker.impl.client.DockerContainerDefinitionParser.resolveDockerDefinition", "java.nio.file.Path.toUri"], "call_func_parameter": [["java.lang.String", "java.lang.String[]"], ["java.nio.file.Path"], [""]], "passed_comments": [{"org.arquillian.cube.docker.impl.client.DockerContainerDefinitionParser.resolveDockerDefinition": "Resolves current full path with .yml and .yaml extensions"}]}, {"index": "134", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/DockerContainerDefinitionParser.java", "methodName": "org.arquillian.cube.docker.impl.client.DockerContainerDefinitionParser.resolveDockerDefinition", "methodParameterType": "Path#", "methodParameterName": "fullpath#", "methodBody": "private static Path resolveDockerDefinition(Path fullpath) {\n        final Path ymlPath = fullpath.resolveSibling(fullpath.getFileName() + \".yml\");\n        if (Files.exists(ymlPath)) {\n            return ymlPath;\n        } else {\n            final Path yamlPath = fullpath.resolveSibling(fullpath.getFileName() + \".yaml\");\n            if (Files.exists(yamlPath)) {\n                return yamlPath;\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves current full path with .yml and .yaml extensions", "call_func_name": ["java.lang.StringBuilder.<init>", "java.nio.file.Path.getFileName", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.nio.file.Path.resolveSibling", "java.nio.file.Files.exists"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], ["java.nio.file.Path", "java.nio.file.LinkOption[]"]], "passed_comments": "/"}, {"index": "135", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/CubeDockerConfigurationResolver.java", "methodName": "org.arquillian.cube.docker.impl.client.CubeDockerConfigurationResolver.resolve", "methodParameterType": "Map<String,String>#", "methodParameterName": "config#", "methodBody": "public Map<String, String> resolve(Map<String, String> config) {\n        config = resolveSystemEnvironmentVariables(config);\n        config = resolveSystemDefaultSetup(config);\n        config = resolveDockerInsideDocker(config);\n        config = resolveDownloadDockerMachine(config);\n        config = resolveAutoStartDockerMachine(config);\n        config = resolveDefaultDockerMachine(config);\n        config = resolveServerUriByOperativeSystem(config);\n        config = resolveServerIp(config);\n        config = resolveTlsVerification(config);\n        return config;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves the configuration.", "call_func_name": ["org.arquillian.cube.docker.impl.client.CubeDockerConfigurationResolver.resolveSystemEnvironmentVariables", "org.arquillian.cube.docker.impl.client.CubeDockerConfigurationResolver.resolveSystemDefaultSetup", "org.arquillian.cube.docker.impl.client.CubeDockerConfigurationResolver.resolveDockerInsideDocker", "org.arquillian.cube.docker.impl.client.CubeDockerConfigurationResolver.resolveDownloadDockerMachine", "org.arquillian.cube.docker.impl.client.CubeDockerConfigurationResolver.resolveAutoStartDockerMachine", "org.arquillian.cube.docker.impl.client.CubeDockerConfigurationResolver.resolveDefaultDockerMachine", "org.arquillian.cube.docker.impl.client.CubeDockerConfigurationResolver.resolveServerUriByOperativeSystem", "org.arquillian.cube.docker.impl.client.CubeDockerConfigurationResolver.resolveServerIp", "org.arquillian.cube.docker.impl.client.CubeDockerConfigurationResolver.resolveTlsVerification"], "call_func_parameter": [["java.util.Map"], ["java.util.Map"], ["java.util.Map"], ["java.util.Map"], ["java.util.Map"], ["java.util.Map"], ["java.util.Map"], ["java.util.Map"], ["java.util.Map"]], "passed_comments": "/"}, {"index": "136", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/config/DockerCompositions.java", "methodName": "org.arquillian.cube.docker.impl.client.config.DockerCompositions.overrideCubeProperties", "methodParameterType": "DockerCompositions#", "methodParameterName": "overrideDockerCompositions#", "methodBody": "public void overrideCubeProperties(DockerCompositions overrideDockerCompositions) {\n        final Set<String> containerIds = overrideDockerCompositions.getContainerIds();\n        for (String containerId : containerIds) {\n\n            // main definition of containers contains a container that must be overrode\n            if (containers.containsKey(containerId)) {\n                final CubeContainer cubeContainer = containers.get(containerId);\n                final CubeContainer overrideCubeContainer = overrideDockerCompositions.get(containerId);\n\n                cubeContainer.setRemoveVolumes(overrideCubeContainer.getRemoveVolumes());\n                \n                cubeContainer.setAlwaysPull(overrideCubeContainer.getAlwaysPull());\n\n                if (overrideCubeContainer.hasAwait()) {\n                    cubeContainer.setAwait(overrideCubeContainer.getAwait());\n                }\n\n                if (overrideCubeContainer.hasAfterStart()) {\n                    cubeContainer.setAfterStart(overrideCubeContainer.getAfterStart());\n                }\n\n                if (overrideCubeContainer.hasBeforeStop()) {\n                    cubeContainer.setBeforeStop(overrideCubeContainer.getBeforeStop());\n                }\n\n                if (overrideCubeContainer.hasAfterStop()) {\n                    cubeContainer.setAfterStop(overrideCubeContainer.getAfterStop());\n                }\n\n                if (overrideCubeContainer.isManual()) {\n                    cubeContainer.setManual(overrideCubeContainer.isManual());\n                }\n\n                if (overrideCubeContainer.isKillContainer()) {\n                    cubeContainer.setKillContainer(overrideCubeContainer.isKillContainer());\n                }\n            } else {\n                logger.warning(String.format(\"Overriding Container %s are not defined in main definition of containers.\",\n                    containerId));\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "This method only overrides properties that are specific from Cube like await strategy or before stop events.", "call_func_name": ["org.arquillian.cube.docker.impl.client.config.DockerCompositions.getContainerIds", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Map.containsKey", "java.util.Map.get", "org.arquillian.cube.docker.impl.client.config.DockerCompositions.get", "org.arquillian.cube.docker.impl.client.config.CubeContainer.getRemoveVolumes", "org.arquillian.cube.docker.impl.client.config.CubeContainer.setRemoveVolumes", "org.arquillian.cube.docker.impl.client.config.CubeContainer.getAlwaysPull", "org.arquillian.cube.docker.impl.client.config.CubeContainer.setAlwaysPull", "org.arquillian.cube.docker.impl.client.config.CubeContainer.hasAwait", "org.arquillian.cube.docker.impl.client.config.CubeContainer.getAwait", "org.arquillian.cube.docker.impl.client.config.CubeContainer.setAwait", "org.arquillian.cube.docker.impl.client.config.CubeContainer.hasAfterStart", "org.arquillian.cube.docker.impl.client.config.CubeContainer.getAfterStart", "org.arquillian.cube.docker.impl.client.config.CubeContainer.setAfterStart", "org.arquillian.cube.docker.impl.client.config.CubeContainer.hasBeforeStop", "org.arquillian.cube.docker.impl.client.config.CubeContainer.getBeforeStop", "org.arquillian.cube.docker.impl.client.config.CubeContainer.setBeforeStop", "org.arquillian.cube.docker.impl.client.config.CubeContainer.hasAfterStop", "org.arquillian.cube.docker.impl.client.config.CubeContainer.getAfterStop", "org.arquillian.cube.docker.impl.client.config.CubeContainer.setAfterStop", "org.arquillian.cube.docker.impl.client.config.CubeContainer.isManual", "org.arquillian.cube.docker.impl.client.config.CubeContainer.setManual", "org.arquillian.cube.docker.impl.client.config.CubeContainer.isKillContainer", "org.arquillian.cube.docker.impl.client.config.CubeContainer.setKillContainer", "java.lang.String.format", "java.util.logging.Logger.warning"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.Boolean"], [""], ["java.lang.Boolean"], [""], [""], ["org.arquillian.cube.docker.impl.client.config.Await"], [""], [""], ["java.util.Collection"], [""], [""], ["java.util.Collection"], [""], [""], ["java.util.Collection"], [""], ["boolean"], [""], ["boolean"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/containerobject/DockerContainerObjectBuilder.java", "methodName": "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.withContainerObjectContainer", "methodParameterType": "Object#", "methodParameterName": "containerObjectContainer#", "methodBody": "public DockerContainerObjectBuilder<T> withContainerObjectContainer(Object containerObjectContainer) {\n        this.containerObjectContainer = containerObjectContainer;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specifies an optional object that has a strong reference to the object being created. If set, a reference to it is stored as part of the metadata of the container object. This object is expected to control the lifecycle of the container object", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "138", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/containerobject/DockerContainerObjectBuilder.java", "methodName": "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.withContainerObjectClass", "methodParameterType": "Class<T>#", "methodParameterName": "containerObjectClass#", "methodBody": "public DockerContainerObjectBuilder<T> withContainerObjectClass(Class<T> containerObjectClass) {\n        if (containerObjectClass == null) {\n            throw new IllegalArgumentException(\"container object class cannot be null\");\n        }\n        this.containerObjectClass = containerObjectClass;\n\n        //First we check if this ContainerObject is defining a @CubeDockerFile in static method\n        final List<Method> methodsWithCubeDockerFile =\n            ReflectionUtil.getMethodsWithAnnotation(containerObjectClass, CubeDockerFile.class);\n\n        if (methodsWithCubeDockerFile.size() > 1) {\n            throw new IllegalArgumentException(\n                String.format(\n                    \"More than one %s annotation found and only one was expected. Methods where annotation was found are: %s\",\n                    CubeDockerFile.class.getSimpleName(), methodsWithCubeDockerFile));\n        }\n\n        classHasMethodWithCubeDockerFile = !methodsWithCubeDockerFile.isEmpty();\n        classDefinesCubeDockerFile = containerObjectClass.isAnnotationPresent(CubeDockerFile.class);\n        classDefinesImage = containerObjectClass.isAnnotationPresent(Image.class);\n\n        if (classHasMethodWithCubeDockerFile) {\n            methodWithCubeDockerFile = methodsWithCubeDockerFile.get(0);\n            boolean isMethodStatic = Modifier.isStatic(methodWithCubeDockerFile.getModifiers());\n            boolean methodHasNoArguments = methodWithCubeDockerFile.getParameterCount() == 0;\n            boolean methodReturnsAnArchive = Archive.class.isAssignableFrom(methodWithCubeDockerFile.getReturnType());\n            if (!isMethodStatic || !methodHasNoArguments || !methodReturnsAnArchive) {\n                throw new IllegalArgumentException(\n                    String.format(\"Method %s annotated with %s is expected to be static, no args and return %s.\",\n                        methodWithCubeDockerFile, CubeDockerFile.class.getSimpleName(), Archive.class.getSimpleName()));\n            }\n        }\n\n        // User has defined @CubeDockerfile on the class and a method\n        if (classHasMethodWithCubeDockerFile && classDefinesCubeDockerFile) {\n            throw new IllegalArgumentException(\n                String.format(\n                    \"More than one %s annotation found and only one was expected. Both class and method %s has the annotation.\",\n                    CubeDockerFile.class.getSimpleName(), methodWithCubeDockerFile));\n        }\n\n        // User has defined @CubeDockerfile and @Image\n        if ((classHasMethodWithCubeDockerFile || classDefinesCubeDockerFile) && classDefinesImage) {\n            throw new IllegalArgumentException(\n                String.format(\"Container Object %s has defined %s annotation and %s annotation together.\",\n                    containerObjectClass.getSimpleName(), Image.class.getSimpleName(),\n                    CubeDockerFile.class.getSimpleName()));\n        }\n\n        // User has not defined either @CubeDockerfile or @Image\n        if (!classDefinesCubeDockerFile && !classDefinesImage && !classHasMethodWithCubeDockerFile) {\n            throw new IllegalArgumentException(\n                String.format(\"Container Object %s is not annotated with either %s or %s annotations.\",\n                    containerObjectClass.getName(), CubeDockerFile.class.getSimpleName(), Image.class.getSimpleName()));\n        }\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#PrefixExpression#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#PrefixExpression#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specifies the container object class to be instantiated", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "org.arquillian.cube.impl.util.ReflectionUtil.getMethodsWithAnnotation", "java.util.List.size", "java.lang.Class.getSimpleName", "java.lang.String.format", "java.util.List.isEmpty", "java.lang.Class.isAnnotationPresent", "java.util.List.get", "java.lang.reflect.Method.getModifiers", "java.lang.reflect.Modifier.isStatic", "java.lang.reflect.Method.getParameterCount", "java.lang.reflect.Method.getReturnType", "java.lang.Class.isAssignableFrom", "java.lang.Class.getName"], "call_func_parameter": [["java.lang.String"], ["java.lang.Class", "java.lang.Class"], [""], [""], ["java.lang.String", "java.lang.Object[]"], [""], ["java.lang.Class"], ["int"], [""], ["int"], [""], [""], ["java.lang.Class"], [""]], "passed_comments": "/"}, {"index": "139", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/containerobject/DockerContainerObjectBuilder.java", "methodName": "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.withContainerObjectConfiguration", "methodParameterType": "ContainerObjectConfiguration#", "methodParameterName": "configuration#", "methodBody": "public DockerContainerObjectBuilder<T> withContainerObjectConfiguration(ContainerObjectConfiguration configuration) {\n        if (configuration == null) {\n            throw new IllegalArgumentException(\"configuration cannot be null\");\n        }\n        if (configuration != null && !(configuration instanceof CubeContainerObjectConfiguration)) {\n            throw new IllegalArgumentException(\n                String.format(\"container object configuration received of type %s, but only %s is supported\",\n                    configuration.getClass().getSimpleName(), CubeContainerObjectConfiguration.class.getSimpleName()));\n        }\n        this.providedConfiguration =\n            configuration != null ? ((CubeContainerObjectConfiguration) configuration).getCubeContainerConfiguration()\n                : null;\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specifies a configuration (can be partial) to be used to override the default configuration set using annotations on the container object. The received configuration will be merged with the configuration extracted from the container object, and the resulting configuration will be used to build the docker container. <p> Currently only supports instances of  {@link CubeContainerObjectConfiguration}", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.lang.Object.getClass", "java.lang.Class.getSimpleName", "java.lang.String.format", "org.arquillian.cube.docker.impl.client.containerobject.CubeContainerObjectConfiguration.getCubeContainerConfiguration"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object[]"], [""]], "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/containerobject/DockerContainerObjectBuilder.java", "methodName": "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.withEnrichers", "methodParameterType": "Collection<TestEnricher>#", "methodParameterName": "enrichers#", "methodBody": "public DockerContainerObjectBuilder<T> withEnrichers(Collection<TestEnricher> enrichers) {\n        if (enrichers == null) {\n            throw new IllegalArgumentException(\"enrichers cannot be null\");\n        }\n        this.enrichers = enrichers;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specifies the list of enrichers that will be used to enrich the container object.", "call_func_name": ["java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/containerobject/DockerContainerObjectBuilder.java", "methodName": "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.onCubeCreated", "methodParameterType": "Consumer<DockerCube>#", "methodParameterName": "cubeCreatedCallback#", "methodBody": "public DockerContainerObjectBuilder<T> onCubeCreated(Consumer<DockerCube> cubeCreatedCallback) {\n        this.cubeCreatedCallback = cubeCreatedCallback;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specifies a consumer that will be executed after the cube object is created and after cube is created or started by the cube controller. Callers must use this callback to register anything necesary for the controller to work and also if they want to keep an instance of the created cube.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "142", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/containerobject/DockerContainerObjectBuilder.java", "methodName": "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.build", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public T build() throws IllegalAccessException, IOException, InvocationTargetException {\n        generatedConfigutation = new CubeContainer();\n\n        findContainerName();\n        // if needed, prepare prepare resources required to build a docker image\n        prepareImageBuild();\n        // instantiate container object\n        instantiateContainerObject();\n        // enrich container object (without cube instance)\n        enrichContainerObjectBeforeCube();\n        // extract configuration from container object class\n        extractConfigurationFromContainerObject();\n        // merge received configuration with extracted configuration\n        mergeContainerObjectConfiguration();\n        // create/start/register associated cube\n        initializeCube();\n        // enrich container object (with cube instance)\n        enrichContainerObjectWithCube();\n        // return created container object\n        return containerObjectInstance;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Triggers the building process, builds, creates and starts the docker container associated with the requested container object, creates the container object and returns it", "call_func_name": ["org.arquillian.cube.docker.impl.client.config.CubeContainer.<init>", "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.findContainerName", "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.prepareImageBuild", "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.instantiateContainerObject", "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.enrichContainerObjectBeforeCube", "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.extractConfigurationFromContainerObject", "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.mergeContainerObjectConfiguration", "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.initializeCube", "org.arquillian.cube.docker.impl.client.containerobject.DockerContainerObjectBuilder.enrichContainerObjectWithCube"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "143", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/containerobject/dsl/AwaitBuilder.java", "methodName": "org.arquillian.cube.docker.impl.client.containerobject.dsl.AwaitBuilder.httpAwait", "methodParameterType": "URL#String#", "methodParameterName": "serviceUrl#messageContent#", "methodBody": "public static HttpAwaitBuilder httpAwait(URL serviceUrl, String messageContent) {\n        return new HttpAwaitBuilder(serviceUrl, messageContent);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param serviceUrl You can use dockerHost reserved keyword, which is replaced at runtime for real docker host ip.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "144", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/containerobject/dsl/Container.java", "methodName": "org.arquillian.cube.docker.impl.client.containerobject.dsl.Container.getIpAddress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getIpAddress() {\n        return hostIpContextInstance.get().getHost();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the ip where this container can be reachable from outside docker host.", "call_func_name": ["org.jboss.arquillian.core.api.Instance.get", "org.arquillian.cube.HostIpContext.getHost"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/containerobject/dsl/Container.java", "methodName": "org.arquillian.cube.docker.impl.client.containerobject.dsl.Container.getBindPort", "methodParameterType": "int#", "methodParameterName": "exposedPort#", "methodBody": "public int getBindPort(int exposedPort) {\n        return getBindingPort(this.containerName, exposedPort);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns binding port for given exposed port.", "call_func_name": ["org.arquillian.cube.docker.impl.client.containerobject.dsl.Container.getBindingPort"], "call_func_parameter": [["java.lang.String", "int"]], "passed_comments": "/"}, {"index": "146", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/containerobject/dsl/Container.java", "methodName": "org.arquillian.cube.docker.impl.client.containerobject.dsl.Container.exec", "methodParameterType": "String#", "methodParameterName": "commands#", "methodBody": "public CubeOutput exec(String...commands) {\n        return this.dockerClientExecutorInstance.get().execStart(this.containerName, commands);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Executes given command inside this container.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "147", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/client/containerobject/dsl/Container.java", "methodName": "org.arquillian.cube.docker.impl.client.containerobject.dsl.Container.getLog", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getLog() {\n        return this.dockerClientExecutorInstance.get().containerLog(this.containerName);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets current logs of this container.", "call_func_name": ["org.jboss.arquillian.core.api.Instance.get", "org.arquillian.cube.docker.impl.docker.DockerClientExecutor.containerLog"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "148", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/requirement/DockerRequirement.java", "methodName": "org.arquillian.cube.docker.impl.requirement.DockerRequirement.isDockerRunning", "methodParameterType": "String#", "methodParameterName": "serverUrl#", "methodBody": "private static boolean isDockerRunning(String serverUrl) {\n        return getDockerVersion(serverUrl) != null;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param serverUrl The url to check if docker is running on.", "call_func_name": ["org.arquillian.cube.docker.impl.requirement.DockerRequirement.getDockerVersion"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.arquillian.cube.docker.impl.requirement.DockerRequirement.getDockerVersion": "Returns the docker version."}]}, {"index": "149", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/requirement/DockerRequirement.java", "methodName": "org.arquillian.cube.docker.impl.requirement.DockerRequirement.getDockerVersion", "methodParameterType": "String#", "methodParameterName": "serverUrl#", "methodBody": "private static Version getDockerVersion(String serverUrl) {\n        try {\n            DockerClient client = DockerClientBuilder.getInstance(serverUrl).build();\n            return client.versionCmd().exec();\n        } catch (Exception e) {\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns the docker version.", "call_func_name": ["com.github.dockerjava.core.DockerClientBuilder.getInstance", "com.github.dockerjava.core.DockerClientBuilder.build", "com.github.dockerjava.api.DockerClient.versionCmd", "com.github.dockerjava.api.command.VersionCmd.exec"], "call_func_parameter": [["java.lang.String"], [""], [""], [""]], "passed_comments": "/"}, {"index": "150", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/docker/compose/DockerComposeEnvironmentVarResolver.java", "methodName": "org.arquillian.cube.docker.impl.docker.compose.DockerComposeEnvironmentVarResolver.replaceParameters", "methodParameterType": "InputStream#", "methodParameterName": "stream#", "methodBody": "public static String replaceParameters(final InputStream stream) {\n        String content = IOUtil.asStringPreservingNewLines(stream);\n        return resolvePlaceholders(content);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Method that takes an inputstream, read it preserving the end lines, and subtitute using commons-lang-3 calls the variables, first searching as system properties vars and then in environment var list. In case of missing the property is replaced by white space.", "call_func_name": ["org.arquillian.cube.impl.util.IOUtil.asStringPreservingNewLines", "org.arquillian.cube.docker.impl.docker.compose.DockerComposeEnvironmentVarResolver.resolvePlaceholders"], "call_func_parameter": [["java.io.InputStream"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/docker/DockerClientExecutor.java", "methodName": "org.arquillian.cube.docker.impl.docker.DockerClientExecutor.execStartVerbose", "methodParameterType": "String#String#", "methodParameterName": "containerId#commands#", "methodBody": "public ExecInspection execStartVerbose(String containerId, String... commands) {\n        this.readWriteLock.readLock().lock();\n        try {\n            String id = execCreate(containerId, commands);\n            CubeOutput output = execStartOutput(id);\n\n            return new ExecInspection(output, inspectExec(id));\n        } finally {\n            this.readWriteLock.readLock().unlock();\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "EXecutes command to given container returning the inspection object as well. This method does 3 calls to dockerhost. Create, Start and Inspect.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "152", "file": "/root/repos/repos41/arquillian-cube/docker/docker/src/main/java/org/arquillian/cube/docker/impl/docker/DockerClientExecutor.java", "methodName": "org.arquillian.cube.docker.impl.docker.DockerClientExecutor.getDockerUri", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public URI getDockerUri() {\n        return dockerUri;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the URI of the docker host", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "153", "file": "/root/repos/repos41/arquillian-cube/docker/restassured/src/main/java/org/arquillian/cube/docker/restassured/RestAssuredCustomizer.java", "methodName": "org.arquillian.cube.docker.restassured.RestAssuredCustomizer.configure", "methodParameterType": "RestAssuredConfiguration#", "methodParameterName": "restAssuredConfiguration#", "methodBody": "public void configure(@Observes RestAssuredConfiguration restAssuredConfiguration) {\n\n        CubeDockerConfiguration cubeDockerConfiguration = cubeDockerConfigurationInstance.get();\n        final RequestSpecBuilder requestSpecBuilder = new RequestSpecBuilder();\n\n        configureRequestSpecBuilder(restAssuredConfiguration, cubeDockerConfiguration, requestSpecBuilder);\n\n        requestSpecBuilderInstanceProducer.set(requestSpecBuilder);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Method executed before starting a test. It is important to do it in this event because in case of incontainer tests or containerless, this is when the mapped container is started and you might need to inspect the automatic port binding. <p> Precedence is set to -100 to execute this after all sarting events.", "call_func_name": ["org.jboss.arquillian.core.api.Instance.get", "io.restassured.builder.RequestSpecBuilder.<init>", "org.arquillian.cube.docker.restassured.RestAssuredCustomizer.configureRequestSpecBuilder", "org.jboss.arquillian.core.api.InstanceProducer.set"], "call_func_parameter": [[""], [""], ["org.arquillian.cube.docker.restassured.RestAssuredConfiguration", "org.arquillian.cube.docker.impl.client.CubeDockerConfiguration", "io.restassured.builder.RequestSpecBuilder"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "154", "file": "/root/repos/repos41/arquillian-cube/docker/restassured/src/main/java/org/arquillian/cube/docker/restassured/RestAssuredCustomizer.java", "methodName": "org.arquillian.cube.docker.restassured.RestAssuredCustomizer.resetRestAssuredConfiguration", "methodParameterType": "ManagerStopping#", "methodParameterName": "event#", "methodBody": "public void resetRestAssuredConfiguration(@Observes ManagerStopping event) {\n        RestAssured.reset();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Resets RestAssured configuration values to default.", "call_func_name": ["io.restassured.RestAssured.reset"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "155", "file": "/root/repos/repos41/arquillian-cube/docker/reporter/src/main/java/org/arquillian/cube/docker/impl/client/reporter/TakeDockerEnvironment.java", "methodName": "org.arquillian.cube.docker.impl.client.reporter.TakeDockerEnvironment.captureStats", "methodParameterType": "DockerClientExecutor#CubeRegistry#String#Boolean#", "methodParameterName": "executor#cubeRegistry#when#decimal#", "methodBody": "public void captureStats(DockerClientExecutor executor, CubeRegistry cubeRegistry, String when, Boolean decimal) throws IOException {\n        /**if (executor != null) {\n            List<Cube<?>> containers = cubeRegistry.getCubes();\n            for (Cube<?> container : containers) {\n                String name = container.getId();\n                Statistics statistics = executor.statsContainer(name);\n                if (\"before\".equals(when)) {\n                    this.statsBeforeMethod = updateStats(statistics);\n                } else {\n                    this.statsAfterMethod = updateStats(statistics);\n                    createEntryAndFire(name, decimal);\n                }\n            }\n        }**/\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "private TableRowEntry addRowsForNetwork(Map<String, Long> before, Map<String, Long> after, Boolean decimal, String adapter) { TableRowEntry tableRowEntry = new TableRowEntry(); tableRowEntry.addCell(new TableCellEntry(adapter)); addCells(tableRowEntry, before.get(\"rx_bytes\"), after.get(\"rx_bytes\"), decimal); addCells(tableRowEntry, before.get(\"tx_bytes\"), after.get(\"tx_bytes\"), decimal); return tableRowEntry; }", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos41/arquillian-cube/kubernetes/istio/istio/src/main/java/org/arquillian/cube/istio/impl/IstioAssistant.java", "methodName": "org.arquillian.cube.istio.impl.IstioAssistant.deployIstioResourcesFromClasspathPattern", "methodParameterType": "String#", "methodParameterName": "pattern#", "methodBody": "public List<IstioResource> deployIstioResourcesFromClasspathPattern(String pattern) {\n\n        final List<IstioResource> istioResources = new ArrayList<>();\n        final FastClasspathScanner fastClasspathScanner = new FastClasspathScanner();\n\n        fastClasspathScanner.matchFilenamePattern(pattern, (FileMatchProcessor) (relativePath, inputStream, lengthBytes) -> {\n            istioResources.addAll(deployIstioResources(inputStream));\n            inputStream.close();\n        }).scan();\n\n        return istioResources;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#CastExpression#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)CastExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deploys application reading resources from classpath, matching the given regular expression. For example istio/.", "call_func_name": ["java.util.ArrayList.<init>", "io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.<init>", "io.github.lukehutch.fastclasspathscanner.matchprocessor.FileMatchProcessor.processMatch", "io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.matchFilenamePattern", "io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan"], "call_func_parameter": [[""], ["java.lang.String[]"], ["org.arquillian.cube.istio.impl.IstioAssistant", "java.util.List"], ["java.lang.String", "io.github.lukehutch.fastclasspathscanner.matchprocessor.FileMatchProcessor"], [""]], "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos41/arquillian-cube/kubernetes/istio/istio/src/main/java/org/arquillian/cube/istio/impl/IstioAssistant.java", "methodName": "org.arquillian.cube.istio.impl.IstioAssistant.deployIstioResources", "methodParameterType": "Path#", "methodParameterName": "directory#", "methodBody": "public List<IstioResource> deployIstioResources(final Path directory) throws IOException {\n\n        final List<IstioResource> istioResources = new ArrayList<>();\n\n        if (Files.isDirectory(directory)) {\n            Files.list(directory)\n                .filter(ResourceFilter::filterKubernetesResource)\n                .map(p -> {\n                    try {\n                        return Files.newInputStream(p);\n                    } catch (IOException e) {\n                        throw new IllegalArgumentException(e);\n                    }\n                })\n                .forEach(is -> {\n                    try {\n                        istioResources.addAll(deployIstioResources(is));\n                        is.close();\n                    } catch (IOException e) {\n                        throw new IllegalArgumentException(e);\n                    }\n                });\n        } else {\n            throw new IllegalArgumentException(String.format(\"%s should be a directory\", directory));\n        }\n\n        return istioResources;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deploys all y(a)ml and json files located at given directory.", "call_func_name": ["java.util.ArrayList.<init>", "java.nio.file.Files.isDirectory", "java.nio.file.Files.list", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.function.Consumer.accept", "java.util.stream.Stream.forEach", "java.lang.String.format", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], ["java.nio.file.Path", "java.nio.file.LinkOption[]"], ["java.nio.file.Path"], [""], ["java.util.function.Predicate"], [""], ["java.util.function.Function"], ["org.arquillian.cube.istio.impl.IstioAssistant", "java.util.List"], ["java.util.function.Consumer"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos41/arquillian-cube/kubernetes/istio/istio/src/main/java/org/arquillian/cube/istio/impl/IstioAssistant.java", "methodName": "org.arquillian.cube.istio.impl.IstioAssistant.deployIstioResources", "methodParameterType": "String#", "methodParameterName": "content#", "methodBody": "public List<IstioResource> deployIstioResources(String content) {\n        return istioClient.registerCustomResources(content);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deploy Istio definition provided as string", "call_func_name": ["me.snowdrop.istio.client.IstioClient.registerCustomResources"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/ResourceInstaller.java", "methodName": "org.arquillian.cube.kubernetes.api.ResourceInstaller.install", "methodParameterType": "URL#", "methodParameterName": "url#", "methodBody": "List<HasMetadata> install(URL url);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Installs the resources found in the specified URL.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/ResourceInstaller.java", "methodName": "org.arquillian.cube.kubernetes.api.ResourceInstaller.uninstall", "methodParameterType": "URL#", "methodParameterName": "url#", "methodBody": "Map<HasMetadata, Boolean> uninstall(URL url);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Uninstalls the resources found in the specified URL.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/ResourceInstaller.java", "methodName": "org.arquillian.cube.kubernetes.api.ResourceInstaller.uninstall", "methodParameterType": "List<HasMetadata>#", "methodParameterName": "list#", "methodBody": "Map<HasMetadata, Boolean> uninstall(List<HasMetadata> list);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Uninstalls the resources found in the specified list.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/NamespaceService.java", "methodName": "org.arquillian.cube.kubernetes.api.NamespaceService.create", "methodParameterType": "String#", "methodParameterName": "namespace#", "methodBody": "Namespace create(String namespace);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a  {@link Namespace} with the specified name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "163", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/NamespaceService.java", "methodName": "org.arquillian.cube.kubernetes.api.NamespaceService.create", "methodParameterType": "String#Map<String,String>#", "methodParameterName": "namespace#annotations#", "methodBody": "Namespace create(String namespace, Map<String, String> annotations);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a  {@link Namespace} with the specified name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "164", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/NamespaceService.java", "methodName": "org.arquillian.cube.kubernetes.api.NamespaceService.annotate", "methodParameterType": "String#Map<String,String>#", "methodParameterName": "namespace#annotations#", "methodBody": "Namespace annotate(String namespace, Map<String, String> annotations);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Adds the specified annotations to the  {@link Namespace}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "165", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/NamespaceService.java", "methodName": "org.arquillian.cube.kubernetes.api.NamespaceService.delete", "methodParameterType": "String#", "methodParameterName": "namespace#", "methodBody": "Boolean delete(String namespace);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Deletes the specified  {@link Namespace}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/NamespaceService.java", "methodName": "org.arquillian.cube.kubernetes.api.NamespaceService.exists", "methodParameterType": "String#", "methodParameterName": "namespace#", "methodBody": "Boolean exists(String namespace);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Checks if  {@link Namespace} can exists.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "167", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/NamespaceService.java", "methodName": "org.arquillian.cube.kubernetes.api.NamespaceService.clean", "methodParameterType": "String#", "methodParameterName": "namespace#", "methodBody": "@Deprecated // The method is redundant (since its called always before destroy).\n    void clean(String namespace);", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Clears all resources from the specified  {@link Namespace}/", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "168", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/NamespaceService.java", "methodName": "org.arquillian.cube.kubernetes.api.NamespaceService.destroy", "methodParameterType": "String#", "methodParameterName": "namespace#", "methodBody": "void destroy(String namespace);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Destroy the  {@link Namespace}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "169", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/KubernetesResourceLocator.java", "methodName": "org.arquillian.cube.kubernetes.api.KubernetesResourceLocator.locate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "URL locate();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Locates the main kubernetes resource.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/KubernetesResourceLocator.java", "methodName": "org.arquillian.cube.kubernetes.api.KubernetesResourceLocator.locateFromTargetDir", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "URL locateFromTargetDir();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Locates the kubernetes resource from target which is generated by embedded build of fabric8 maven plugin during test execution.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "171", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/KubernetesResourceLocator.java", "methodName": "org.arquillian.cube.kubernetes.api.KubernetesResourceLocator.locateAdditionalResources", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<URL> locateAdditionalResources();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Locate additional resources (such as ImageStreams) that should be created in the test namespace.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "172", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/DependencyResolver.java", "methodName": "org.arquillian.cube.kubernetes.api.DependencyResolver.resolve", "methodParameterType": "Session#", "methodParameterName": "session#", "methodBody": "List<URL> resolve(Session session) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Resolves dependencies to additional kubernetes resources.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "173", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/api/SessionListener.java", "methodName": "org.arquillian.cube.kubernetes.api.SessionListener.onClose", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void onClose();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Called when session is closed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "174", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/enricher/KuberntesServiceUrlResourceProvider.java", "methodName": "org.arquillian.cube.kubernetes.impl.enricher.KuberntesServiceUrlResourceProvider.isPortForwardingEnabled", "methodParameterType": "Annotation#", "methodParameterName": "qualifiers#", "methodBody": "private static boolean isPortForwardingEnabled(Annotation... qualifiers) {\n        for (Annotation q : qualifiers) {\n            if (q instanceof PortForward) {\n                return true;\n            }\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param qualifiers The qualifiers", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "175", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/enricher/KuberntesServiceUrlResourceProvider.java", "methodName": "org.arquillian.cube.kubernetes.impl.enricher.KuberntesServiceUrlResourceProvider.isUseDnsEnabled", "methodParameterType": "Annotation#", "methodParameterName": "qualifiers#", "methodBody": "private static boolean isUseDnsEnabled(Annotation... qualifiers) {\n        for (Annotation q : qualifiers) {\n            if (q instanceof UseDns) {\n                return true;\n            }\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param qualifiers The qualifiers", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "176", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/enricher/KuberntesServiceUrlResourceProvider.java", "methodName": "org.arquillian.cube.kubernetes.impl.enricher.KuberntesServiceUrlResourceProvider.findQualifiedServicePort", "methodParameterType": "Service#Annotation#", "methodParameterName": "service#qualifiers#", "methodBody": "private static ServicePort findQualifiedServicePort(Service service, Annotation... qualifiers) {\n        Port port = null;\n        for (Annotation q : qualifiers) {\n            if (q instanceof Port) {\n                port = (Port) q;\n            }\n        }\n        if (service.getSpec() != null && service.getSpec().getPorts() != null) {\n            for (ServicePort servicePort : service.getSpec().getPorts()) {\n                //if no port name is specified we will use the first.\n                if (port == null) {\n                    return servicePort;\n                }\n\n                if (servicePort.getName() != null && servicePort.getName().equals(port.name())) {\n                    return servicePort;\n                }\n            }\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link ServicePort} of the {@link Service} that matches the qualifiers", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "177", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/enricher/KuberntesServiceUrlResourceProvider.java", "methodName": "org.arquillian.cube.kubernetes.impl.enricher.KuberntesServiceUrlResourceProvider.getPort", "methodParameterType": "Service#Annotation#", "methodParameterName": "service#qualifiers#", "methodBody": "private static int getPort(Service service, Annotation... qualifiers) {\n        for (Annotation q : qualifiers) {\n            if (q instanceof Port) {\n                Port port = (Port) q;\n                if (port.value() > 0) {\n                    return port.value();\n                }\n            }\n        }\n\n        ServicePort servicePort = findQualifiedServicePort(service, qualifiers);\n        if (servicePort != null) {\n            return servicePort.getPort();\n        }\n        return 0;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find the the qualified container port of the target service Uses java annotations first or returns the container port.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "178", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/enricher/KuberntesServiceUrlResourceProvider.java", "methodName": "org.arquillian.cube.kubernetes.impl.enricher.KuberntesServiceUrlResourceProvider.getContainerPort", "methodParameterType": "Service#Annotation#", "methodParameterName": "service#qualifiers#", "methodBody": "private static int getContainerPort(Service service, Annotation... qualifiers) {\n        for (Annotation q : qualifiers) {\n            if (q instanceof Port) {\n                Port port = (Port) q;\n                if (port.value() > 0) {\n                    return port.value();\n                }\n            }\n        }\n\n        ServicePort servicePort = findQualifiedServicePort(service, qualifiers);\n        if (servicePort != null) {\n            return servicePort.getTargetPort().getIntVal();\n        }\n        return 0;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find the the qualfied container port of the target service Uses java annotations first or returns the container port.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "179", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/enricher/KuberntesServiceUrlResourceProvider.java", "methodName": "org.arquillian.cube.kubernetes.impl.enricher.KuberntesServiceUrlResourceProvider.getScheme", "methodParameterType": "Service#Annotation#", "methodParameterName": "service#qualifiers#", "methodBody": "private static String getScheme(Service service, Annotation... qualifiers) {\n        for (Annotation q : qualifiers) {\n            if (q instanceof Scheme) {\n                return ((Scheme) q).value();\n            }\n        }\n\n        if (service.getMetadata() != null && service.getMetadata().getAnnotations() != null) {\n            String s = service.getMetadata().getAnnotations().get(SERVICE_SCHEME);\n            if (s != null && s.isEmpty()) {\n                return s;\n            }\n        }\n\n        return DEFAULT_SCHEME;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find the scheme to use to connect to the service. Uses java annotations first and if not found, uses kubernetes annotations on the service object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "180", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/enricher/KuberntesServiceUrlResourceProvider.java", "methodName": "org.arquillian.cube.kubernetes.impl.enricher.KuberntesServiceUrlResourceProvider.getPath", "methodParameterType": "Service#Annotation#", "methodParameterName": "service#qualifiers#", "methodBody": "private static String getPath(Service service, Annotation... qualifiers) {\n        for (Annotation q : qualifiers) {\n            if (q instanceof Scheme) {\n                return ((Scheme) q).value();\n            }\n        }\n\n        if (service.getMetadata() != null && service.getMetadata().getAnnotations() != null) {\n            String s = service.getMetadata().getAnnotations().get(SERVICE_SCHEME);\n            if (s != null && s.isEmpty()) {\n                return s;\n            }\n        }\n        return DEFAULT_PATH;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find the path to use . Uses java annotations first and if not found, uses kubernetes annotations on the service object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "181", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/enricher/KuberntesServiceUrlResourceProvider.java", "methodName": "org.arquillian.cube.kubernetes.impl.enricher.KuberntesServiceUrlResourceProvider.getRandomPod", "methodParameterType": "KubernetesClient#String#String#", "methodParameterName": "client#name#namespace#", "methodBody": "private static Pod getRandomPod(KubernetesClient client, String name, String namespace) {\n        Endpoints endpoints = client.endpoints().inNamespace(namespace).withName(name).get();\n        List<String> pods = new ArrayList<>();\n        if (endpoints != null) {\n            for (EndpointSubset subset : endpoints.getSubsets()) {\n                for (EndpointAddress address : subset.getAddresses()) {\n                    if (address.getTargetRef() != null && POD.equals(address.getTargetRef().getKind())) {\n                        String pod = address.getTargetRef().getName();\n                        if (pod != null && !pod.isEmpty()) {\n                            pods.add(pod);\n                        }\n                    }\n                }\n            }\n        }\n        if (pods.isEmpty()) {\n            return null;\n        } else {\n            String chosen = pods.get(RANDOM.nextInt(pods.size()));\n            return client.pods().inNamespace(namespace).withName(chosen).get();\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement)Block)EnhancedForStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Get a random pod that provides the specified service in the specified namespace.", "call_func_name": ["io.fabric8.kubernetes.clnt.v4_0.KubernetesClient.endpoints", "io.fabric8.kubernetes.clnt.v4_0.dsl.MixedOperation.inNamespace", "io.fabric8.kubernetes.clnt.v4_0.dsl.NonNamespaceOperation.withName", "io.fabric8.kubernetes.clnt.v4_0.dsl.Resource.get", "java.util.ArrayList.<init>", "io.fabric8.kubernetes.api.model.v4_0.Endpoints.getSubsets", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "io.fabric8.kubernetes.api.model.v4_0.EndpointSubset.getAddresses", "io.fabric8.kubernetes.api.model.v4_0.EndpointAddress.getTargetRef", "io.fabric8.kubernetes.api.model.v4_0.ObjectReference.getKind", "java.lang.String.equals", "io.fabric8.kubernetes.api.model.v4_0.ObjectReference.getName", "java.lang.String.isEmpty", "java.util.List.add", "java.util.List.isEmpty", "java.util.List.size", "java.util.Random.nextInt", "java.util.List.get", "io.fabric8.kubernetes.clnt.v4_0.KubernetesClient.pods", "io.fabric8.kubernetes.clnt.v4_0.dsl.PodResource.get"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object"], [""], [""], ["int"], ["int"], [""], [""]], "passed_comments": "/"}, {"index": "182", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/enricher/KuberntesServiceUrlResourceProvider.java", "methodName": "org.arquillian.cube.kubernetes.impl.enricher.KuberntesServiceUrlResourceProvider.findRandomFreeLocalPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private static final int findRandomFreeLocalPort() {\n        try (ServerSocket socket = new ServerSocket(0)) {\n            return socket.getLocalPort();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "@return A random free local port.", "call_func_name": ["java.net.ServerSocket.<init>", "java.net.ServerSocket.getLocalPort", "java.net.ServerSocket.close", "java.lang.Throwable.addSuppressed", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["int"], [""], [""], ["java.lang.Throwable"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "183", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/enricher/AbstractKubernetesResourceProvider.java", "methodName": "org.arquillian.cube.kubernetes.impl.enricher.AbstractKubernetesResourceProvider.loadClass", "methodParameterType": "String#", "methodParameterName": "className#", "methodBody": "protected Class loadClass(String className) {\n        try {\n            return getClass().getClassLoader().loadClass(className);\n        } catch (Exception e) {\n            //ignore and fallback to TCCL\n        }\n\n        try {\n            if (Thread.currentThread().getContextClassLoader() != null)\n            return Thread.currentThread().getContextClassLoader().loadClass(className);\n        } catch (Exception e) {\n            //ignore and fallback to TCCL\n        }\n        throw new IllegalStateException(\"Failed to load class: [\"+className+\"].\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement(TryStatement(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Try to load a class using the current classloader (the one that loaded this class) or the thread context class loader.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getClassLoader", "java.lang.ClassLoader.loadClass", "java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "184", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/enricher/AbstractKubernetesResourceProvider.java", "methodName": "org.arquillian.cube.kubernetes.impl.enricher.AbstractKubernetesResourceProvider.getAnnotationValue", "methodParameterType": "Annotation#", "methodParameterName": "annotation#", "methodBody": "private String getAnnotationValue(Annotation annotation) {\n        Class<? extends Annotation> type = annotation.annotationType();\n        try {\n            Method method = type.getDeclaredMethod(VALUE);\n            return String.valueOf(method.invoke(annotation, NO_ARGS));\n        } catch (NoSuchMethodException e) {\n            return null;\n        } catch (InvocationTargetException e) {\n            return null;\n        } catch (IllegalAccessException e) {\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Get the value() from the specified annotation using reflection.", "call_func_name": ["java.lang.annotation.Annotation.annotationType", "java.lang.Class.getDeclaredMethod", "java.lang.reflect.Method.invoke", "java.lang.String.valueOf"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Class[]"], ["java.lang.Object", "java.lang.Object[]"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/DefaultSession.java", "methodName": "org.arquillian.cube.kubernetes.impl.DefaultSession.getNamespace", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNamespace() {\n        return namespace;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the namespace ID for this test case session", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/portforward/PortForwardServerConnection.java", "methodName": "org.arquillian.cube.kubernetes.impl.portforward.PortForwardServerConnection.PortForwardServerConnection", "methodParameterType": "StreamConnection#ByteBufferPool#OptionMap#int#", "methodParameterName": "channel#bufferPool#undertowOptions#bufferSize#", "methodBody": "public PortForwardServerConnection(StreamConnection channel, ByteBufferPool bufferPool, OptionMap undertowOptions,\n                                       int bufferSize) {\n        super(channel, bufferPool, null, undertowOptions, bufferSize);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create a new PortForwardServerConnection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/portforward/ChannelUtils.java", "methodName": "org.arquillian.cube.kubernetes.impl.portforward.ChannelUtils.initiateTransfer", "methodParameterType": "long#I#O#ChannelListener<? super I>#ChannelListener<? super O>#ChannelExceptionHandler<? super I>#ChannelExceptionHandler<? super O>#Pool<ByteBuffer>#", "methodParameterName": "count#source#sink#sourceListener#sinkListener#readExceptionHandler#writeExceptionHandler#pool#", "methodBody": "public static <I extends StreamSourceChannel, O extends StreamSinkChannel> void initiateTransfer(long count,\n        final I source, final O sink, final ChannelListener<? super I> sourceListener,\n        final ChannelListener<? super O> sinkListener, final ChannelExceptionHandler<? super I> readExceptionHandler,\n        final ChannelExceptionHandler<? super O> writeExceptionHandler, Pool<ByteBuffer> pool) {\n        if (pool == null) {\n            throw msg.nullParameter(\"pool\");\n        }\n        final Pooled<ByteBuffer> allocated = pool.allocate();\n        boolean free = true;\n        try {\n            final ByteBuffer buffer = allocated.getResource();\n            long transferred;\n            for (; ; ) {\n                try {\n                    transferred = source.transferTo(count, buffer, sink);\n                } catch (IOException e) {\n                    ChannelListeners.invokeChannelExceptionHandler(source, readExceptionHandler, e);\n                    return;\n                }\n                if (transferred == 0 && !buffer.hasRemaining()) {\n                    break;\n                }\n                if (transferred == -1) {\n                    if (count == Long.MAX_VALUE) {\n                        Channels.setReadListener(source, sourceListener);\n                        if (sourceListener == null) {\n                            source.suspendReads();\n                        } else {\n                            source.wakeupReads();\n                        }\n\n                        Channels.setWriteListener(sink, sinkListener);\n                        if (sinkListener == null) {\n                            sink.suspendWrites();\n                        } else {\n                            sink.wakeupWrites();\n                        }\n                    } else {\n                        source.suspendReads();\n                        sink.suspendWrites();\n                        ChannelListeners.invokeChannelExceptionHandler(source, readExceptionHandler, new EOFException());\n                    }\n                    return;\n                }\n                if (count != Long.MAX_VALUE) {\n                    count -= transferred;\n                }\n                while (buffer.hasRemaining()) {\n                    final int res;\n                    try {\n                        res = sink.write(buffer);\n                    } catch (IOException e) {\n                        ChannelListeners.invokeChannelExceptionHandler(sink, writeExceptionHandler, e);\n                        return;\n                    }\n                    if (res == 0) {\n                        // write first listener\n                        final TransferListener<I, O> listener =\n                            new TransferListener<I, O>(count, allocated, source, sink, sourceListener, sinkListener,\n                                writeExceptionHandler, readExceptionHandler, 1);\n                        source.suspendReads();\n                        source.getReadSetter().set(listener);\n                        // flush the write channel\n                        sink.getWriteSetter()\n                            .set(ChannelListeners.flushingChannelListener(listener,\n                                new ChannelExceptionHandler<Channel>() {\n                                    @Override\n                                    public void handleException(Channel channel, IOException exception) {\n                                        listener.writeFailed(exception);\n                                    }\n                                }));\n                        sink.resumeWrites();\n                        free = false;\n                        return;\n                    } else if (count != Long.MAX_VALUE) {\n                        count -= res;\n                    }\n                }\n                if (count == 0) {\n                    //we are done\n                    Channels.setReadListener(source, sourceListener);\n                    if (sourceListener == null) {\n                        source.suspendReads();\n                    } else {\n                        source.wakeupReads();\n                    }\n\n                    Channels.setWriteListener(sink, sinkListener);\n                    if (sinkListener == null) {\n                        sink.suspendWrites();\n                    } else {\n                        sink.wakeupWrites();\n                    }\n                    return;\n                }\n            }\n\n            // flush the write channel\n            try {\n                // TODO: think about checking to see if a flush has already been issued sink.isReadyForFlush()\n                if (!sink.flush()) {\n                    final TransferListener<I, O> listener =\n                        new TransferListener<I, O>(count, allocated, source, sink, sourceListener, sinkListener,\n                            writeExceptionHandler, readExceptionHandler, 1);\n                    source.suspendReads();\n                    source.getReadSetter().set(listener);\n                    // flush the write channel\n                    sink.getWriteSetter()\n                        .set(ChannelListeners.flushingChannelListener(listener, new ChannelExceptionHandler<Channel>() {\n                            @Override\n                            public void handleException(Channel channel, IOException exception) {\n                                listener.writeFailed(exception);\n                            }\n                        }));\n                    sink.resumeWrites();\n                    free = false;\n                    return;\n                }\n            } catch (IOException e) {\n                ChannelListeners.invokeChannelExceptionHandler(sink, writeExceptionHandler, e);\n                return;\n            }\n\n            // read first listener\n            final TransferListener<I, O> listener =\n                new TransferListener<I, O>(count, allocated, source, sink, sourceListener, sinkListener,\n                    writeExceptionHandler, readExceptionHandler, 0);\n            sink.suspendWrites();\n            sink.getWriteSetter().set(listener);\n            source.getReadSetter().set(listener);\n            source.resumeReads();\n            free = false;\n            return;\n        } finally {\n            if (free) allocated.free();\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleName#SimpleType#TypeParameter#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#BreakStatement#Block#IfStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#Modifier#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#NumberLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Block#WhileStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ReturnStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#CatchClause#TryStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block)ForStatement(TryStatement(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block(Block(IfStatement(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "This is basically a copy of ChannelListeners.initiateTransfer(), but invokes a flush() on the sink after writing is complete. <p> Initiate a low-copy transfer between two stream channels.  The pool should be a direct buffer pool for best performance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/SessionManager.java", "methodName": "org.arquillian.cube.kubernetes.impl.SessionManager.createNamespace", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void createNamespace() {\n        Map<String, String> namespaceAnnotations = annotationProvider.create(session.getId(), Constants.RUNNING_STATUS);\n        if (namespaceService.exists(session.getNamespace())) {\n            //namespace exists\n        } else if (configuration.isNamespaceLazyCreateEnabled()) {\n            namespaceService.create(session.getNamespace(), namespaceAnnotations);\n        } else {\n            throw new IllegalStateException(\"Namespace [\" + session.getNamespace() + \"] doesn't exist and lazily creation of namespaces is disabled. \"\n            + \"Either use an existing one, or set `namespace.lazy.enabled` to true.\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a namespace if needed.", "call_func_name": ["org.arquillian.cube.kubernetes.api.Session.getId", "org.arquillian.cube.kubernetes.api.AnnotationProvider.create", "org.arquillian.cube.kubernetes.api.Session.getNamespace", "org.arquillian.cube.kubernetes.api.NamespaceService.exists", "java.lang.Boolean.booleanValue", "org.arquillian.cube.kubernetes.api.Configuration.isNamespaceLazyCreateEnabled", "org.arquillian.cube.kubernetes.api.NamespaceService.create", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.util.Map"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.arquillian.cube.kubernetes.api.NamespaceService.exists": "Checks if  {@link Namespace} can exists."}, {"org.arquillian.cube.kubernetes.api.NamespaceService.create": "Creates a  {@link Namespace} with the specified name."}]}, {"index": "189", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/SessionManager.java", "methodName": "org.arquillian.cube.kubernetes.impl.SessionManager.createScriptEnvironment", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private Map<String, String> createScriptEnvironment() {\n        Map<String, String> env = new HashMap<>();\n        env.putAll(System.getenv());\n        env.putAll(configuration.getScriptEnvironmentVariables());\n        env.put(propertyToEnvironmentVariableName(Configuration.KUBERNETES_NAMESPACE), configuration.getNamespace());\n        env.put(propertyToEnvironmentVariableName(Configuration.KUBERNETES_DOMAIN), configuration.getKubernetesDomain());\n        env.put(propertyToEnvironmentVariableName(Configuration.KUBERNETES_MASTER),\n            configuration.getMasterUrl().toString());\n        env.put(propertyToEnvironmentVariableName(Configuration.DOCKER_REGISTY), configuration.getDockerRegistry());\n        return env;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates the environment variables, that will be passed to the shell script (startup, teardown).", "call_func_name": ["java.util.HashMap.<init>", "java.lang.System.getenv", "java.util.Map.putAll", "org.arquillian.cube.kubernetes.api.Configuration.getScriptEnvironmentVariables", "org.arquillian.cube.impl.util.SystemEnvironmentVariables.propertyToEnvironmentVariableName", "org.arquillian.cube.kubernetes.api.Configuration.getNamespace", "java.util.Map.put", "org.arquillian.cube.kubernetes.api.Configuration.getKubernetesDomain", "org.arquillian.cube.kubernetes.api.Configuration.getMasterUrl", "java.net.URL.toString", "org.arquillian.cube.kubernetes.api.Configuration.getDockerRegistry"], "call_func_parameter": [[""], [""], ["java.util.Map"], [""], ["java.lang.String"], [""], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "190", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/SessionManager.java", "methodName": "org.arquillian.cube.kubernetes.impl.SessionManager.removeShutdownHook", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void removeShutdownHook() {\n        ShutdownHook hook = shutdownHookRef.get();\n        if (hook != null) {\n            Runtime.getRuntime().removeShutdownHook(hook);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Removes the  {@link ShutdownHook}.", "call_func_name": ["java.util.concurrent.atomic.AtomicReference.get", "java.lang.Runtime.getRuntime", "java.lang.Runtime.removeShutdownHook"], "call_func_parameter": [[""], [""], ["java.lang.Thread"]], "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/DefaultConfiguration.java", "methodName": "org.arquillian.cube.kubernetes.impl.DefaultConfiguration.getKubernetesConfigurationUrl", "methodParameterType": "Map<String,String>#", "methodParameterName": "map#", "methodBody": "public static URL getKubernetesConfigurationUrl(Map<String, String> map) throws MalformedURLException {\n        if (Strings.isNotNullOrEmpty(Utils.getSystemPropertyOrEnvVar(ENVIRONMENT_CONFIG_URL, \"\"))) {\n            return new URL(Utils.getSystemPropertyOrEnvVar(ENVIRONMENT_CONFIG_URL, \"\"));\n        } else if (Strings.isNotNullOrEmpty(Utils.getSystemPropertyOrEnvVar(ENVIRONMENT_CONFIG_RESOURCE_NAME, \"\"))) {\n            String resourceName = Utils.getSystemPropertyOrEnvVar(ENVIRONMENT_CONFIG_RESOURCE_NAME, \"\");\n            return findConfigResource(resourceName);\n        } else if (map.containsKey(ENVIRONMENT_CONFIG_URL)) {\n            return new URL(map.get(ENVIRONMENT_CONFIG_URL));\n        } else if (map.containsKey(ENVIRONMENT_CONFIG_RESOURCE_NAME)) {\n            String resourceName = map.get(ENVIRONMENT_CONFIG_RESOURCE_NAME);\n            return findConfigResource(resourceName);\n        } else {\n            // Let the resource locator find the resource\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Applies the kubernetes json url to the configuration.", "call_func_name": ["io.fabric8.kubernetes.clnt.v4_0.utils.Utils.getSystemPropertyOrEnvVar", "org.arquillian.cube.impl.util.Strings.isNotNullOrEmpty", "java.net.URL.<init>", "org.arquillian.cube.kubernetes.impl.DefaultConfiguration.findConfigResource", "java.util.Map.containsKey", "java.util.Map.get"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": [{"org.arquillian.cube.kubernetes.impl.DefaultConfiguration.findConfigResource": "Returns the URL of a classpath resource."}]}, {"index": "192", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/DefaultConfiguration.java", "methodName": "org.arquillian.cube.kubernetes.impl.DefaultConfiguration.findConfigResource", "methodParameterType": "String#", "methodParameterName": "resourceName#", "methodBody": "public static URL findConfigResource(String resourceName) {\n        if (Strings.isNullOrEmpty(resourceName)) {\n            return null;\n        }\n\n        final URL url = resourceName.startsWith(ROOT) ? DefaultConfiguration.class.getResource(resourceName)\n            : DefaultConfiguration.class.getResource(ROOT + resourceName);\n\n        if (url != null) {\n            return url;\n        }\n\n        // This is useful to get resource under META-INF directory\n        String[] resourceNamePrefix = new String[] {\"META-INF/fabric8/\", \"META-INF/fabric8/\"};\n\n        for (String resource : resourceNamePrefix) {\n            String fullResourceName = resource + resourceName;\n\n            URL candidate = KubernetesResourceLocator.class.getResource(fullResourceName.startsWith(ROOT) ? fullResourceName : ROOT + fullResourceName);\n            if (candidate != null) {\n                return candidate;\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#StringLiteral#StringLiteral#ArrayInitializer#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#InfixExpression#ConditionalExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ConditionalExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the URL of a classpath resource.", "call_func_name": ["org.arquillian.cube.impl.util.Strings.isNullOrEmpty", "java.lang.String.startsWith", "java.lang.Class.getResource", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/DefaultConfiguration.java", "methodName": "org.arquillian.cube.kubernetes.impl.DefaultConfiguration.asUrlOrResource", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static URL asUrlOrResource(String s) {\n        if (Strings.isNullOrEmpty(s)) {\n            return null;\n        }\n\n        try {\n            return new URL(s);\n        } catch (MalformedURLException e) {\n            //If its not a valid URL try to treat it as a local resource.\n            return findConfigResource(s);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Convert a string to a URL and fallback to classpath resource, if not convertible.", "call_func_name": ["org.arquillian.cube.impl.util.Strings.isNullOrEmpty", "java.net.URL.<init>", "org.arquillian.cube.kubernetes.impl.DefaultConfiguration.findConfigResource"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.arquillian.cube.kubernetes.impl.DefaultConfiguration.findConfigResource": "Returns the URL of a classpath resource."}]}, {"index": "194", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/visitor/DockerRegistryVisitor.java", "methodName": "org.arquillian.cube.kubernetes.impl.visitor.DockerRegistryVisitor.hasRegistry", "methodParameterType": "String#", "methodParameterName": "imageName#", "methodBody": "public static boolean hasRegistry(String imageName) {\n        if (imageName == null) {\n            throw new NullPointerException(\"Image name must not be null\");\n        }\n\n        Matcher matcher = IMAGE_PATTERN.matcher(imageName);\n        if (!matcher.matches()) {\n            throw new IllegalArgumentException(imageName + \" is not a proper image name ([registry/][repo][:port]\");\n        }\n\n        String rest = matcher.group(1);\n        String[] parts = rest.split(SPLIT_REGEX);\n        String part = parts[0];\n\n        return part.contains(DOT) || part.contains(COLN);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks to see if there's a registry name already provided in the image name <p> Code influenced from <a href=\"https://github.com/rhuss/docker-maven-plugin/blob/master/src/main/java/org/jolokia/docker/maven/util/ImageName.java\">docker-maven-plugin</a>", "call_func_name": ["java.lang.NullPointerException.<init>", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "java.util.regex.Matcher.group", "java.lang.String.split", "java.lang.String.contains"], "call_func_parameter": [["java.lang.String"], ["java.lang.CharSequence"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["int"], ["java.lang.String"], ["java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployApplication", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String deployApplication() throws IOException {\n        deployApplication((String) null);\n        return this.applicationName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NullLiteral#CastExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)CastExpression)MethodInvocation)ExpressionStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deploys application finding resources in default location in classpath. That is: kubernetes.(y[a]ml|json), META-INF/fabric8/kubernetes.(y[a]ml|json)", "call_func_name": ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployApplication"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployApplication": "Deploys application finding resources in default location in classpath. That is: kubernetes.(y[a]ml|json), META-INF/fabric8/kubernetes.(y[a]ml|json) <p> In this method you specify the application name."}]}, {"index": "196", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployApplication", "methodParameterType": "String#", "methodParameterName": "applicationName#", "methodBody": "public void deployApplication(String applicationName) throws IOException {\n\n        final Optional<URL> defaultFileOptional = this.kubernetesAssistantDefaultResourcesLocator.locate();\n\n        if (defaultFileOptional.isPresent()) {\n            deployApplication(applicationName, defaultFileOptional.get());\n        } else {\n            log.warning(\"No default Kubernetes resources found at default locations.\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Deploys application finding resources in default location in classpath. That is: kubernetes.(y[a]ml|json), META-INF/fabric8/kubernetes.(y[a]ml|json) <p> In this method you specify the application name.", "call_func_name": ["org.arquillian.cube.kubernetes.impl.KubernetesAssistantDefaultResourceLocator.locate", "java.util.Optional.isPresent", "java.util.Optional.get", "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployApplication", "java.util.logging.Logger.warning"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.net.URL[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployApplication", "methodParameterType": "String#String#", "methodParameterName": "applicationName#classpathLocations#", "methodBody": "public void deployApplication(String applicationName, String... classpathLocations) throws IOException {\n\n        final List<URL> classpathElements = Arrays.stream(classpathLocations)\n            .map(classpath -> Thread.currentThread().getContextClassLoader().getResource(classpath))\n            .collect(Collectors.toList());\n\n        deployApplication(applicationName, classpathElements.toArray(new URL[classpathElements.size()]));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Deploys application reading resources from specified classpath location", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployApplication", "methodParameterType": "URL#", "methodParameterName": "urls#", "methodBody": "public String deployApplication(URL... urls) throws IOException {\n        deployApplication(null, urls);\n        return this.applicationName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deploys application reading resources from specified URLs", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployApplication", "methodParameterType": "String#URL#", "methodParameterName": "applicationName#urls#", "methodBody": "public void deployApplication(String applicationName, URL... urls) throws IOException {\n        this.applicationName = applicationName;\n\n        for (URL url : urls) {\n            try (InputStream inputStream = url.openStream()) {\n                deploy(inputStream);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Deploys application reading resources from specified URLs", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployAll", "methodParameterType": "String#String#", "methodParameterName": "applicationName#pattern#", "methodBody": "public void deployAll(String applicationName, String pattern) {\n        this.applicationName = applicationName;\n\n        final FastClasspathScanner fastClasspathScanner = new FastClasspathScanner();\n\n        fastClasspathScanner.matchFilenamePattern(pattern, (FileMatchProcessor) (relativePath, inputStream, lengthBytes) -> {\n            deploy(inputStream);\n        }).scan();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#CastExpression#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)CastExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Deploys application reading resources from classpath, matching the given regular expression. For example kubernetes/.", "call_func_name": ["io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.<init>", "io.github.lukehutch.fastclasspathscanner.matchprocessor.FileMatchProcessor.processMatch", "io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.matchFilenamePattern", "io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan"], "call_func_parameter": [["java.lang.String[]"], ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant"], ["java.lang.String", "io.github.lukehutch.fastclasspathscanner.matchprocessor.FileMatchProcessor"], [""]], "passed_comments": "/"}, {"index": "201", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployAll", "methodParameterType": "String#", "methodParameterName": "pattern#", "methodBody": "public String deployAll(String pattern) {\n        final FastClasspathScanner fastClasspathScanner = new FastClasspathScanner();\n\n        fastClasspathScanner.matchFilenamePattern(pattern, (FileMatchProcessor) (relativePath, inputStream, lengthBytes) -> {\n            deploy(inputStream);\n            inputStream.close();\n        }).scan();\n\n        return this.applicationName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#CastExpression#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)CastExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deploys application reading resources from classpath, matching the given regular expression. For example kubernetes/.", "call_func_name": ["io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.<init>", "io.github.lukehutch.fastclasspathscanner.matchprocessor.FileMatchProcessor.processMatch", "io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.matchFilenamePattern", "io.github.lukehutch.fastclasspathscanner.FastClasspathScanner.scan"], "call_func_parameter": [["java.lang.String[]"], ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant"], ["java.lang.String", "io.github.lukehutch.fastclasspathscanner.matchprocessor.FileMatchProcessor"], [""]], "passed_comments": "/"}, {"index": "202", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployAll", "methodParameterType": "Path#", "methodParameterName": "directory#", "methodBody": "public String deployAll(Path directory) throws IOException {\n        deployAll(null, directory);\n        return this.applicationName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deploys all y(a)ml and json files located at given directory.", "call_func_name": ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployAll"], "call_func_parameter": [["java.lang.String", "java.nio.file.Path"]], "passed_comments": [{"org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployAll": "Deploys all y(a)ml and json files located at given directory."}]}, {"index": "203", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deployAll", "methodParameterType": "String#Path#", "methodParameterName": "applicationName#directory#", "methodBody": "public void deployAll(String applicationName, Path directory) throws IOException {\n        this.applicationName = applicationName;\n\n        if (Files.isDirectory(directory)) {\n            Files.list(directory)\n                .filter(ResourceFilter::filterKubernetesResource)\n                .map(p -> {\n                    try {\n                        return Files.newInputStream(p);\n                    } catch (IOException e) {\n                        throw new IllegalArgumentException(e);\n                    }\n                })\n                .forEach(is -> {\n                    try {\n                        deploy(is);\n                        is.close();\n                    } catch (IOException e) {\n                        throw new IllegalArgumentException(e);\n                    }\n                });\n        } else {\n            throw new IllegalArgumentException(String.format(\"%s should be a directory\", directory));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Deploys all y(a)ml and json files located at given directory.", "call_func_name": ["java.nio.file.Files.isDirectory", "java.nio.file.Files.list", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.function.Consumer.accept", "java.util.stream.Stream.forEach", "java.lang.String.format", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.nio.file.Path", "java.nio.file.LinkOption[]"], ["java.nio.file.Path"], [""], ["java.util.function.Predicate"], [""], ["java.util.function.Function"], ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant"], ["java.util.function.Consumer"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deploy", "methodParameterType": "InputStream#", "methodParameterName": "inputStream#", "methodBody": "public void deploy(InputStream inputStream) throws IOException {\n        final List<? extends HasMetadata> entities = deploy(\"application\", inputStream);\n\n        if (this.applicationName == null) {\n\n            Optional<String> deployment = entities.stream()\n                .filter(hm -> hm instanceof Deployment)\n                .map(hm -> (Deployment) hm)\n                .map(rc -> rc.getMetadata().getName()).findFirst();\n\n            deployment.ifPresent(name -> this.applicationName = name);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleType#InstanceofExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#CastExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Deploys application reading resources from specified InputStream", "call_func_name": ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant.deploy", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Stream.findFirst", "java.util.function.Consumer.accept", "java.util.Optional.ifPresent"], "call_func_parameter": [["java.lang.String", "java.io.InputStream"], [""], [""], ["java.util.function.Predicate"], [""], ["java.util.function.Function"], [""], ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "205", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.getServiceUrl", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public Optional<URL> getServiceUrl(String name) {\n        Service service = client.services().inNamespace(namespace).withName(name).get();\n        return service != null ? createUrlForService(service) : Optional.empty();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the URL of the service with the given name that has been created during the current session.", "call_func_name": ["io.fabric8.kubernetes.clnt.v4_0.KubernetesClient.services", "io.fabric8.kubernetes.clnt.v4_0.dsl.MixedOperation.inNamespace", "io.fabric8.kubernetes.clnt.v4_0.dsl.NonNamespaceOperation.list", "io.fabric8.kubernetes.api.model.v4_0.ServiceList.getItems", "java.util.List.stream", "java.util.stream.Stream.findFirst", "java.util.function.Function.apply", "java.util.Optional.map", "java.util.Optional.empty", "java.util.Optional.orElse"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], [""], ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant"], ["java.util.function.Function"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "206", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.getServiceUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<URL> getServiceUrl() {\n        Optional<Service> optionalService = client.services().inNamespace(namespace)\n            .list().getItems()\n            .stream()\n            .findFirst();\n\n        return optionalService\n            .map(this::createUrlForService)\n            .orElse(Optional.empty());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the URL of the first service that have been created during the current session.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "207", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.cleanup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void cleanup() {\n        List<String> keys = new ArrayList<>(created.keySet());\n        keys.sort(String::compareTo);\n        for (String key : keys) {\n            created.remove(key)\n                .stream()\n                .sorted(Comparator.comparing(HasMetadata::getKind))\n                .forEach(metadata -> {\n                    log.info(String.format(\"Deleting %s : %s\", key, metadata.getKind()));\n                    deleteWithRetries(metadata);\n                });\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Removes all resources deployed using this class.", "call_func_name": ["java.util.Map.keySet", "java.util.ArrayList.<init>", "java.util.Comparator.compare", "java.util.List.sort", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Map.remove", "java.util.List.stream", "java.util.function.Function.apply", "java.util.Comparator.comparing", "java.util.stream.Stream.sorted", "java.util.function.Consumer.accept", "java.util.stream.Stream.forEach"], "call_func_parameter": [[""], ["java.util.Collection"], [""], ["java.util.Comparator"], [""], [""], [""], ["java.lang.Object"], [""], [""], ["java.util.function.Function"], ["java.util.Comparator"], ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant", "java.lang.String"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "208", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.awaitApplicationReadinessOrFail", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void awaitApplicationReadinessOrFail() {\n        awaitApplicationReadinessOrFail(this.applicationName);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Awaits at most 5 minutes until all pods of the last deployed application are running.", "call_func_name": ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant.awaitApplicationReadinessOrFail"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.arquillian.cube.kubernetes.impl.KubernetesAssistant.awaitApplicationReadinessOrFail": "Awaits at most 5 minutes until all pods of the application are running."}]}, {"index": "209", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.awaitApplicationReadinessOrFail", "methodParameterType": "String#", "methodParameterName": "applicationName#", "methodBody": "public void awaitApplicationReadinessOrFail(final String applicationName) {\n        await().atMost(5, TimeUnit.MINUTES).until(() -> {\n                return client\n                    .replicationControllers()\n                    .inNamespace(this.namespace)\n                    .withName(applicationName).isReady();\n            }\n        );\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Awaits at most 5 minutes until all pods of the application are running.", "call_func_name": ["org.awaitility.Awaitility.await", "org.awaitility.core.ConditionFactory.atMost", "java.util.concurrent.Callable.call", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["long", "java.util.concurrent.TimeUnit"], ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant", "java.lang.String"], ["java.util.concurrent.Callable"]], "passed_comments": "/"}, {"index": "210", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.awaitPodReadinessOrFail", "methodParameterType": "Predicate<Pod>#", "methodParameterName": "filter#", "methodBody": "public void awaitPodReadinessOrFail(Predicate<Pod> filter) {\n        await().atMost(5, TimeUnit.MINUTES).until(() -> {\n                List<Pod> list = client.pods().inNamespace(namespace).list().getItems();\n                return list.stream()\n                    .filter(filter)\n                    .filter(Readiness::isPodReady)\n                    .collect(Collectors.toList()).size() >= 1;\n            }\n        );\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Awaits at most 5 minutes until all pods meets the given predicate.", "call_func_name": ["org.awaitility.Awaitility.await", "org.awaitility.core.ConditionFactory.atMost", "java.util.concurrent.Callable.call", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["long", "java.util.concurrent.TimeUnit"], ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant", "java.util.function.Predicate"], ["java.util.concurrent.Callable"]], "passed_comments": "/"}, {"index": "211", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.scale", "methodParameterType": "int#", "methodParameterName": "replicas#", "methodBody": "public void scale(final int replicas) {\n        scale(this.applicationName, replicas);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Scaling the last deployed application to given replicas", "call_func_name": ["org.arquillian.cube.kubernetes.impl.KubernetesAssistant.scale"], "call_func_parameter": [["java.lang.String", "int"]], "passed_comments": [{"org.arquillian.cube.kubernetes.impl.KubernetesAssistant.scale": "Scaling the application to given replicas"}]}, {"index": "212", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.scale", "methodParameterType": "String#int#", "methodParameterName": "applicationName#replicas#", "methodBody": "public void scale(final String applicationName, final int replicas) {\n        final ReplicationController replicationController = this.client\n            .replicationControllers()\n            .inNamespace(this.namespace)\n            .withName(applicationName)\n            .scale(replicas);\n        final int availableReplicas = replicationController.getStatus().getAvailableReplicas();\n        log.info(String.format(\"Scaling replicas from %d to %d for application %s.\", availableReplicas, replicas, applicationName));\n        awaitApplicationReadinessOrFail(applicationName);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Scaling the application to given replicas", "call_func_name": ["io.fabric8.kubernetes.clnt.v4_0.KubernetesClient.replicationControllers", "io.fabric8.kubernetes.clnt.v4_0.dsl.MixedOperation.inNamespace", "io.fabric8.kubernetes.clnt.v4_0.dsl.NonNamespaceOperation.withName", "io.fabric8.kubernetes.clnt.v4_0.dsl.RollableScalableResource.scale", "io.fabric8.kubernetes.api.model.v4_0.ReplicationController.getStatus", "io.fabric8.kubernetes.api.model.v4_0.ReplicationControllerStatus.getAvailableReplicas", "java.lang.Integer.intValue", "java.lang.Integer.valueOf", "java.lang.String.format", "java.util.logging.Logger.info", "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.awaitApplicationReadinessOrFail"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["int"], [""], [""], [""], ["int"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.arquillian.cube.kubernetes.impl.KubernetesAssistant.awaitApplicationReadinessOrFail": "Awaits at most 5 minutes until all pods of the application are running."}]}, {"index": "213", "file": "/root/repos/repos41/arquillian-cube/kubernetes/kubernetes/src/main/java/org/arquillian/cube/kubernetes/impl/KubernetesAssistant.java", "methodName": "org.arquillian.cube.kubernetes.impl.KubernetesAssistant.replicationController", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ReplicationController replicationController() {\n        return this.client\n            .replicationControllers()\n            .inNamespace(this.namespace)\n            .withName(this.applicationName)\n            .get();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Method that returns the current replication controller object", "call_func_name": ["io.fabric8.kubernetes.clnt.v4_0.KubernetesClient.replicationControllers", "io.fabric8.kubernetes.clnt.v4_0.dsl.MixedOperation.inNamespace", "io.fabric8.kubernetes.clnt.v4_0.dsl.NonNamespaceOperation.withName", "io.fabric8.kubernetes.clnt.v4_0.dsl.RollableScalableResource.get"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": "/"}]