[{"index": "0", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileInfo.java", "methodName": "com.aparapi.ProfileInfo.ProfileInfo", "methodParameterType": "String#int#long#long#long#long#", "methodParameterName": "_label#_type#_start#_end#_submit#_queued#", "methodBody": "public ProfileInfo(String _label, int _type, long _start, long _end, long _submit, long _queued) {\n      type = TYPE.values()[_type];\n      label = _label == null ? \"exec()\" : _label;\n      start = _start;\n      end = _end;\n      submit = _submit;\n      queued = _queued;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#StringLiteral#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Minimal constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/IOpenCLDeviceConfigurator.java", "methodName": "com.aparapi.device.IOpenCLDeviceConfigurator.configure", "methodParameterType": "OpenCLDevice#", "methodParameterName": "device#", "methodBody": "public void configure(OpenCLDevice device);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Called for each OpenCL device detected by Aparapi.<br/> Gives the client application an opportunity to refine the device configuration parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/Device.java", "methodName": "com.aparapi.device.Device.best", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n   public static Device best() {\n      return KernelManager.instance().bestDevice();\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated  use {@link KernelManager#bestDevice()}", "call_func_name": ["com.aparapi.internal.kernel.KernelManager.instance", "com.aparapi.internal.kernel.KernelManager.bestDevice"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/Device.java", "methodName": "com.aparapi.device.Device.bestGPU", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@SuppressWarnings(\"deprecation\")\n   @Deprecated\n   public static Device bestGPU() {\n      return firstGPU();\n   }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see com.aparapi.device", "call_func_name": ["com.aparapi.device.Device.firstGPU"], "call_func_parameter": [[""]], "passed_comments": [{"com.aparapi.device.Device.firstGPU": "@see com.aparapi.device"}]}, {"index": "4", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/Device.java", "methodName": "com.aparapi.device.Device.first", "methodParameterType": "Device.TYPE#", "methodParameterName": "_type#", "methodBody": "@Deprecated\n   public static Device first(final Device.TYPE _type) {\n      return KernelManager.DeprecatedMethods.firstDevice(_type);\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see com.aparapi.device", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/Device.java", "methodName": "com.aparapi.device.Device.firstGPU", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@SuppressWarnings(\"deprecation\")\n   @Deprecated\n   public static Device firstGPU() {\n      return KernelManager.DeprecatedMethods.firstDevice(TYPE.GPU);\n   }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see com.aparapi.device", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/Device.java", "methodName": "com.aparapi.device.Device.firstCPU", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@SuppressWarnings(\"deprecation\")\n   @Deprecated\n   public static Device firstCPU() {\n      return KernelManager.DeprecatedMethods.firstDevice(TYPE.CPU);\n   }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see com.aparapi.device", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "7", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/Device.java", "methodName": "com.aparapi.device.Device.bestACC", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n   public static Device bestACC() {\n      throw new UnsupportedOperationException();\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "@see com.aparapi.device", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/OpenCLDevice.java", "methodName": "com.aparapi.device.OpenCLDevice.setConfigurator", "methodParameterType": "IOpenCLDeviceConfigurator#", "methodParameterName": "_configurator#", "methodBody": "public static void setConfigurator(IOpenCLDeviceConfigurator _configurator) {\n\t   configurator = _configurator;\n   }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Statically assigns a new configurator for all OpenCL devices detected after the assignment.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "9", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/OpenCLDevice.java", "methodName": "com.aparapi.device.OpenCLDevice.OpenCLDevice", "methodParameterType": "OpenCLPlatform#long#TYPE#", "methodParameterName": "_platform#_deviceId#_type#", "methodBody": "public OpenCLDevice(OpenCLPlatform _platform, long _deviceId, TYPE _type) {\n      platform = _platform;\n      deviceId = _deviceId;\n      type = _type;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Minimal constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/OpenCLDevice.java", "methodName": "com.aparapi.device.OpenCLDevice.configure", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void configure() {\n\t  if (configurator != null && !underConfiguration.get() &&\n\t\t\t  underConfiguration.compareAndSet(false, true)) {\n\t\t try {\n\t\t\t  configurator.configure(this);\n\t\t } finally {\n\t\t\t underConfiguration.set(false);\n\t\t }\n\t  }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Called by the underlying Aparapi OpenCL platform, upon device detection.", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.get", "java.util.concurrent.atomic.AtomicBoolean.compareAndSet", "com.aparapi.device.IOpenCLDeviceConfigurator.configure", "java.util.concurrent.atomic.AtomicBoolean.set"], "call_func_parameter": [[""], ["boolean", "boolean"], ["com.aparapi.device.OpenCLDevice"], ["boolean"]], "passed_comments": [{"com.aparapi.device.IOpenCLDeviceConfigurator.configure": "Called for each OpenCL device detected by Aparapi.<br/> Gives the client application an opportunity to refine the device configuration parameters."}]}, {"index": "11", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/OpenCLDevice.java", "methodName": "com.aparapi.device.OpenCLDevice.setSharedMemory", "methodParameterType": "boolean#", "methodParameterName": "_sharedMemory#", "methodBody": "public void setSharedMemory(boolean _sharedMemory) {\n\t  sharedMemory = _sharedMemory;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configure if device has the memory shared with the host memory. <br/> <b>Note1: </b>For discrete GPU devices having dedicated memory,  thus not shared with host, this should be set to false. This can result in significant kernel execution speed-ups for such HW configurations. Aparapi is unable to detect this property automatically for all devices, unless the client application provides a configurator ( {@link #IOpenCLDeviceConfigurator}).  <br/>  <b>Note2: </b>By default devices are initialized has having shared memory - to maintain backwards compatibility - unless Aparapi can unequivocally identify the device.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/OpenCLDevice.java", "methodName": "com.aparapi.device.OpenCLDevice.isSharedMemory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isSharedMemory() {\n\t  return sharedMemory;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the shared memory flag", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "13", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/device/OpenCLDevice.java", "methodName": "com.aparapi.device.OpenCLDevice.listDevices", "methodParameterType": "TYPE#", "methodParameterName": "type#", "methodBody": "public static List<OpenCLDevice> listDevices(TYPE type) {\n      final OpenCLPlatform platform = new OpenCLPlatform(0, null, null, null);\n      final ArrayList<OpenCLDevice> results = new ArrayList<>();\n\n      for (final OpenCLPlatform p : platform.getOpenCLPlatforms()) {\n         for (final OpenCLDevice device : p.getOpenCLDevices()) {\n            if (type == null || device.getType() == type) {\n               results.add(device);\n            }\n         }\n      }\n\n      return results;\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#NullLiteral#NullLiteral#NullLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "List OpenCLDevices of a given TYPE, or all OpenCLDevices if type == null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/util/swing/MultiPassKernelSwingWorker.java", "methodName": "com.aparapi.util.swing.MultiPassKernelSwingWorker.cancelExecution", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void cancelExecution() {\n      kernel.cancelMultiPass();\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Utility method which just invokes  {@link Kernel#cancelMultiPass()} on the executing kernel.", "call_func_name": ["com.aparapi.Kernel.cancelMultiPass"], "call_func_parameter": [[""]], "passed_comments": [{"com.aparapi.Kernel.cancelMultiPass": "Invoking this method flags that once the current pass is complete execution should be abandoned. Due to the complexity of intercommunication between java (or C) and executing OpenCL, this is the best we can do for general cancellation of execution at present. OpenCL 2.0 should introduce pipe mechanisms which will support mid-pass cancellation easily. <p> Note that in the case of thread-pool/pure java execution we could do better already, using Thread.interrupt() (and/or other means) to abandon execution mid-pass. However at present this is not attempted."}]}, {"index": "15", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/util/swing/MultiPassKernelSwingWorker.java", "methodName": "com.aparapi.util.swing.MultiPassKernelSwingWorker.executeKernel", "methodParameterType": "Kernel#", "methodParameterName": "kernel#", "methodBody": "protected abstract void executeKernel(Kernel kernel);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "This method must invoke one of the  {@code kernel}'s execute() methods.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/util/swing/MultiPassKernelSwingWorker.java", "methodName": "com.aparapi.util.swing.MultiPassKernelSwingWorker.updatePassId", "methodParameterType": "int#", "methodParameterName": "passId#", "methodBody": "protected abstract void updatePassId(int passId);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "This method, which is always invoked on the swing event dispatch thread, should be used to update any components (such as a  {@link javax.swing.JProgressBar}) so as to reflect the progress of the multi-pass Kernel being executed.", "call_func_name": ["com.aparapi.Kernel.getCurrentPass", "com.aparapi.util.swing.MultiPassKernelSwingWorker.updatePassId"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"com.aparapi.Kernel.getCurrentPass": "@see KernelRunner#getCurrentPass()"}, {"com.aparapi.util.swing.MultiPassKernelSwingWorker.updatePassId": "This method, which is always invoked on the swing event dispatch thread, should be used to update any components (such as a  {@link javax.swing.JProgressBar}) so as to reflect the progress of the multi-pass Kernel being executed."}]}, {"index": "17", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/util/swing/MultiPassKernelSwingWorker.java", "methodName": "com.aparapi.util.swing.MultiPassKernelSwingWorker.doInBackground", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   protected final Void doInBackground() throws Exception {\n      try {\n         setUpExecution();\n         executeKernel(kernel);\n         return null;\n      }\n      finally {\n         cleanUpExecution();\n      }\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Executes the  {@link #kernel} via {@link #executeKernel(Kernel)}, whilst also managing progress updates for the kernel's passId.", "call_func_name": ["com.aparapi.util.swing.MultiPassKernelSwingWorker.doInBackground"], "call_func_parameter": [[""]], "passed_comments": [{"com.aparapi.util.swing.MultiPassKernelSwingWorker.doInBackground": "Executes the  {@link #kernel} via {@link #executeKernel(Kernel)}, whilst also managing progress updates for the kernel's passId."}]}, {"index": "18", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/util/swing/MultiPassKernelSwingWorker.java", "methodName": "com.aparapi.util.swing.MultiPassKernelSwingWorker.getPollIntervalMillis", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected int getPollIntervalMillis() {\n      return DEFAULT_POLL_INTERVAL;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The interval at which the Kernel's current passId is polled. Unless overridden, returns  {@link #DEFAULT_POLL_INTERVAL}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.Range", "methodParameterType": "Device#int#", "methodParameterName": "_device#_dims#", "methodBody": "public Range(Device _device, int _dims) {\n      device = !(_device instanceof OpenCLDevice) ? null : (OpenCLDevice) _device;\n      dims = _dims;\n\n      if (device != null) {\n         maxWorkItemSize = device.getMaxWorkItemSize();\n         maxWorkGroupSize = device.getMaxWorkGroupSize();\n      } else {\n         maxWorkGroupSize = MAX_GROUP_SIZE;\n      }\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#NullLiteral#SimpleName#SimpleType#SimpleName#CastExpression#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(NullLiteral)NullLiteral(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Minimal constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.create", "methodParameterType": "Device#int#int#", "methodParameterName": "_device#_globalWidth#_localWidth#", "methodBody": "public static Range create(Device _device, int _globalWidth, int _localWidth) {\n      final Range range = new Range(_device, 1);\n\n      range.setGlobalSize_0(_globalWidth);\n      range.setLocalSize_0(_localWidth);\n\n      range.setValid((range.getLocalSize_0() > 0) && (range.getLocalSize_0() <= range.getMaxWorkItemSize()[0])\n            && (range.getLocalSize_0() <= range.getMaxWorkGroupSize()) && ((range.getGlobalSize_0() % range.getLocalSize_0()) == 0));\n\n      return (range);\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a one dimensional range <code>0.._globalWidth</code> which is processed in groups of size _localWidth. <br/> Note that for this range to be valid : </br> <strong><code>_globalWidth > 0 && _localWidth > 0 && _localWidth < MAX_GROUP_SIZE && _globalWidth % _localWidth==0</code></strong>", "call_func_name": ["com.aparapi.Range.<init>", "com.aparapi.Range.setGlobalSize_0", "com.aparapi.Range.setLocalSize_0", "com.aparapi.Range.getLocalSize_0", "com.aparapi.Range.getMaxWorkItemSize", "com.aparapi.Range.getMaxWorkGroupSize", "com.aparapi.Range.getGlobalSize_0", "com.aparapi.Range.setValid"], "call_func_parameter": [["com.aparapi.device.Device", "int"], ["int"], ["int"], [""], [""], [""], [""], ["boolean"]], "passed_comments": [{"com.aparapi.Range.setGlobalSize_0": "@param globalSize_0 the globalSize_0 to set"}, {"com.aparapi.Range.setLocalSize_0": "@param localSize_0 the localSize_0 to set"}, {"com.aparapi.Range.getLocalSize_0": "@return the localSize_0"}, {"com.aparapi.Range.getMaxWorkItemSize": "@return the maxWorkItemSize"}, {"com.aparapi.Range.getMaxWorkGroupSize": "@return the maxWorkGroupSize"}, {"com.aparapi.Range.getGlobalSize_0": "@return the globalSize_0"}, {"com.aparapi.Range.setValid": "@param valid the valid to set"}]}, {"index": "21", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getFactors", "methodParameterType": "int#int#", "methodParameterName": "_value#_max#", "methodBody": "private static int[] getFactors(int _value, int _max) {\n      final int factors[] = new int[MAX_GROUP_SIZE];\n      int factorIdx = 0;\n\n      for (int possibleFactor = 1; possibleFactor <= _max; possibleFactor++) {\n         if ((_value % possibleFactor) == 0) {\n            factors[factorIdx++] = possibleFactor;\n         }\n      }\n\n      return (Arrays.copyOf(factors, factorIdx));\n   }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#Dimension#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(Dimension)Dimension(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine the set of factors for a given value.", "call_func_name": ["java.util.Arrays.copyOf"], "call_func_parameter": [["int[]", "int"]], "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.create", "methodParameterType": "Device#int#", "methodParameterName": "_device#_globalWidth#", "methodBody": "public static Range create(Device _device, int _globalWidth) {\n      final Range withoutLocal = create(_device, _globalWidth, 1);\n\n      if (_device == JavaDevice.THREAD_POOL) {\n         withoutLocal.setLocalSize_0(Runtime.getRuntime().availableProcessors());\n         withoutLocal.setLocalIsDerived(true);\n         return withoutLocal;\n      } else if (_device instanceof JavaDevice) {\n         withoutLocal.setLocalIsDerived(true);\n         return withoutLocal;\n      }\n\n      if (_globalWidth == 0) {\n         withoutLocal.setLocalIsDerived(true);\n         return withoutLocal;\n      }\n\n      if (withoutLocal.isValid()) {\n         withoutLocal.setLocalIsDerived(true);\n         final int[] factors = getFactors(withoutLocal.getGlobalSize_0(), withoutLocal.getMaxWorkItemSize()[0]);\n\n         withoutLocal.setLocalSize_0(factors[factors.length - 1]);\n\n         withoutLocal.setValid((withoutLocal.getLocalSize_0() > 0)\n               && (withoutLocal.getLocalSize_0() <= withoutLocal.getMaxWorkItemSize()[0])\n               && (withoutLocal.getLocalSize_0() <= withoutLocal.getMaxWorkGroupSize())\n               && ((withoutLocal.getGlobalSize_0() % withoutLocal.getLocalSize_0()) == 0));\n      }\n\n      return (withoutLocal);\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ArrayAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a one dimensional range <code>0.._globalWidth</code> with an undefined group size. <br/> Note that for this range to be valid :- </br> <strong><code>_globalWidth > 0 </code></strong> <br/> The groupsize will be chosen such that _localWidth > 0 && _localWidth < MAX_GROUP_SIZE && _globalWidth % _localWidth==0 is true We extract the factors of _globalWidth and choose the highest value.", "call_func_name": ["com.aparapi.Range.create", "java.lang.Runtime.getRuntime", "java.lang.Runtime.availableProcessors", "com.aparapi.Range.setLocalSize_0", "com.aparapi.Range.setLocalIsDerived", "com.aparapi.Range.isValid", "com.aparapi.Range.getGlobalSize_0", "com.aparapi.Range.getMaxWorkItemSize", "com.aparapi.Range.getFactors", "com.aparapi.Range.getLocalSize_0", "com.aparapi.Range.getMaxWorkGroupSize", "com.aparapi.Range.setValid"], "call_func_parameter": [["com.aparapi.device.Device", "int", "int"], [""], [""], ["int"], ["boolean"], [""], [""], [""], ["int", "int"], [""], [""], ["boolean"]], "passed_comments": [{"com.aparapi.Range.create": "Create a one dimensional range <code>0.._globalWidth</code> which is processed in groups of size _localWidth. <br/> Note that for this range to be valid : </br> <strong><code>_globalWidth > 0 && _localWidth > 0 && _localWidth < MAX_GROUP_SIZE && _globalWidth % _localWidth==0</code></strong>"}, {"com.aparapi.Range.setLocalSize_0": "@param localSize_0 the localSize_0 to set"}, {"com.aparapi.Range.setLocalIsDerived": "@param localIsDerived the localIsDerived to set"}, {"com.aparapi.Range.isValid": "@return the valid"}, {"com.aparapi.Range.getGlobalSize_0": "@return the globalSize_0"}, {"com.aparapi.Range.getMaxWorkItemSize": "@return the maxWorkItemSize"}, {"com.aparapi.Range.getFactors": "Determine the set of factors for a given value."}, {"com.aparapi.Range.getLocalSize_0": "@return the localSize_0"}, {"com.aparapi.Range.getMaxWorkGroupSize": "@return the maxWorkGroupSize"}, {"com.aparapi.Range.setValid": "@param valid the valid to set"}]}, {"index": "23", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.create2D", "methodParameterType": "Device#int#int#int#int#", "methodParameterName": "_device#_globalWidth#_globalHeight#_localWidth#_localHeight#", "methodBody": "public static Range create2D(Device _device, int _globalWidth, int _globalHeight, int _localWidth, int _localHeight) {\n      final Range range = new Range(_device, 2);\n\n      range.setGlobalSize_0(_globalWidth);\n      range.setLocalSize_0(_localWidth);\n      range.setGlobalSize_1(_globalHeight);\n      range.setLocalSize_1(_localHeight);\n\n      range.setValid((range.getLocalSize_0() > 0) && (range.getLocalSize_1() > 0)\n            && (range.getLocalSize_0() <= range.getMaxWorkItemSize()[0])\n            && (range.getLocalSize_1() <= range.getMaxWorkItemSize()[1])\n            && ((range.getLocalSize_0() * range.getLocalSize_1()) <= range.getMaxWorkGroupSize())\n            && ((range.getGlobalSize_0() % range.getLocalSize_0()) == 0)\n            && ((range.getGlobalSize_1() % range.getLocalSize_1()) == 0));\n\n      return (range);\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a two dimensional range 0.._globalWidth x 0.._globalHeight using a group which is _localWidth x _localHeight in size. <br/> Note that for this range to be valid  _globalWidth > 0 &&  _globalHeight >0 && _localWidth>0 && _localHeight>0 && _localWidth", "call_func_name": ["com.aparapi.Range.<init>", "com.aparapi.Range.setGlobalSize_0", "com.aparapi.Range.setLocalSize_0", "com.aparapi.Range.setGlobalSize_1", "com.aparapi.Range.setLocalSize_1", "com.aparapi.Range.getLocalSize_0", "com.aparapi.Range.getLocalSize_1", "com.aparapi.Range.getMaxWorkItemSize", "com.aparapi.Range.getMaxWorkGroupSize", "com.aparapi.Range.getGlobalSize_0", "com.aparapi.Range.getGlobalSize_1", "com.aparapi.Range.setValid"], "call_func_parameter": [["com.aparapi.device.Device", "int"], ["int"], ["int"], ["int"], ["int"], [""], [""], [""], [""], [""], [""], ["boolean"]], "passed_comments": [{"com.aparapi.Range.setGlobalSize_0": "@param globalSize_0 the globalSize_0 to set"}, {"com.aparapi.Range.setLocalSize_0": "@param localSize_0 the localSize_0 to set"}, {"com.aparapi.Range.setGlobalSize_1": "@param globalSize_1 the globalSize_1 to set"}, {"com.aparapi.Range.setLocalSize_1": "@param localSize_1 the localSize_1 to set"}, {"com.aparapi.Range.getLocalSize_0": "@return the localSize_0"}, {"com.aparapi.Range.getLocalSize_1": "@return the localSize_1"}, {"com.aparapi.Range.getMaxWorkItemSize": "@return the maxWorkItemSize"}, {"com.aparapi.Range.getMaxWorkGroupSize": "@return the maxWorkGroupSize"}, {"com.aparapi.Range.getGlobalSize_0": "@return the globalSize_0"}, {"com.aparapi.Range.getGlobalSize_1": "@return the globalSize_1"}, {"com.aparapi.Range.setValid": "@param valid the valid to set"}]}, {"index": "24", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.create2D", "methodParameterType": "Device#int#int#", "methodParameterName": "_device#_globalWidth#_globalHeight#", "methodBody": "public static Range create2D(Device _device, int _globalWidth, int _globalHeight) {\n      final Range withoutLocal = create2D(_device, _globalWidth, _globalHeight, 1, 1);\n\n      if (withoutLocal.isValid()) {\n         withoutLocal.setLocalIsDerived(true);\n         final int[] widthFactors = getFactors(_globalWidth, withoutLocal.getMaxWorkItemSize()[0]);\n         final int[] heightFactors = getFactors(_globalHeight, withoutLocal.getMaxWorkItemSize()[1]);\n\n         withoutLocal.setLocalSize_0(1);\n         withoutLocal.setLocalSize_1(1);\n         int max = 1;\n         int perimeter = 0;\n\n         for (final int w : widthFactors) {\n            for (final int h : heightFactors) {\n               final int size = w * h;\n               if (size > withoutLocal.getMaxWorkGroupSize()) {\n                  break;\n               }\n\n               if (size > max) {\n                  max = size;\n                  perimeter = w + h;\n                  withoutLocal.setLocalSize_0(w);\n                  withoutLocal.setLocalSize_1(h);\n               } else if (size == max) {\n                  final int localPerimeter = w + h;\n                  if (localPerimeter < perimeter) {// is this the shortest perimeter so far\n                     perimeter = localPerimeter;\n                     withoutLocal.setLocalSize_0(w);\n                     withoutLocal.setLocalSize_1(h);\n                  }\n               }\n            }\n         }\n\n         withoutLocal.setValid((withoutLocal.getLocalSize_0() > 0) && (withoutLocal.getLocalSize_1() > 0)\n               && (withoutLocal.getLocalSize_0() <= withoutLocal.getMaxWorkItemSize()[0])\n               && (withoutLocal.getLocalSize_1() <= withoutLocal.getMaxWorkItemSize()[1])\n               && ((withoutLocal.getLocalSize_0() * withoutLocal.getLocalSize_1()) <= withoutLocal.getMaxWorkGroupSize())\n               && ((withoutLocal.getGlobalSize_0() % withoutLocal.getLocalSize_0()) == 0)\n               && ((withoutLocal.getGlobalSize_1() % withoutLocal.getLocalSize_1()) == 0));\n      }\n\n      return (withoutLocal);\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#BreakStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a two dimensional range <code>0.._globalWidth", "call_func_name": ["com.aparapi.Range.create2D", "com.aparapi.Range.isValid", "com.aparapi.Range.setLocalIsDerived", "com.aparapi.Range.getMaxWorkItemSize", "com.aparapi.Range.getFactors", "com.aparapi.Range.setLocalSize_0", "com.aparapi.Range.setLocalSize_1", "com.aparapi.Range.getMaxWorkGroupSize", "com.aparapi.Range.getLocalSize_0", "com.aparapi.Range.getLocalSize_1", "com.aparapi.Range.getGlobalSize_0", "com.aparapi.Range.getGlobalSize_1", "com.aparapi.Range.setValid"], "call_func_parameter": [["com.aparapi.device.Device", "int", "int", "int", "int"], [""], ["boolean"], [""], ["int", "int"], ["int"], ["int"], [""], [""], [""], [""], [""], ["boolean"]], "passed_comments": [{"com.aparapi.Range.create2D": "Create a two dimensional range 0.._globalWidth x 0.._globalHeight using a group which is _localWidth x _localHeight in size. <br/> Note that for this range to be valid  _globalWidth > 0 &&  _globalHeight >0 && _localWidth>0 && _localHeight>0 && _localWidth"}, {"com.aparapi.Range.isValid": "@return the valid"}, {"com.aparapi.Range.setLocalIsDerived": "@param localIsDerived the localIsDerived to set"}, {"com.aparapi.Range.getMaxWorkItemSize": "@return the maxWorkItemSize"}, {"com.aparapi.Range.getFactors": "Determine the set of factors for a given value."}, {"com.aparapi.Range.setLocalSize_0": "@param localSize_0 the localSize_0 to set"}, {"com.aparapi.Range.setLocalSize_1": "@param localSize_1 the localSize_1 to set"}, {"com.aparapi.Range.getMaxWorkGroupSize": "@return the maxWorkGroupSize"}, {"com.aparapi.Range.getLocalSize_0": "@return the localSize_0"}, {"com.aparapi.Range.getLocalSize_1": "@return the localSize_1"}, {"com.aparapi.Range.getGlobalSize_0": "@return the globalSize_0"}, {"com.aparapi.Range.getGlobalSize_1": "@return the globalSize_1"}, {"com.aparapi.Range.setValid": "@param valid the valid to set"}]}, {"index": "25", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.create3D", "methodParameterType": "Device#int#int#int#int#int#int#", "methodParameterName": "_device#_globalWidth#_globalHeight#_globalDepth#_localWidth#_localHeight#_localDepth#", "methodBody": "public static Range create3D(Device _device, int _globalWidth, int _globalHeight, int _globalDepth, int _localWidth,\n         int _localHeight, int _localDepth) {\n      final Range range = new Range(_device, 3);\n\n      range.setGlobalSize_0(_globalWidth);\n      range.setLocalSize_0(_localWidth);\n      range.setGlobalSize_1(_globalHeight);\n      range.setLocalSize_1(_localHeight);\n      range.setGlobalSize_2(_globalDepth);\n      range.setLocalSize_2(_localDepth);\n      range.setValid((range.getLocalSize_0() > 0) && (range.getLocalSize_1() > 0) && (range.getLocalSize_2() > 0)\n            && ((range.getLocalSize_0() * range.getLocalSize_1() * range.getLocalSize_2()) <= range.getMaxWorkGroupSize())\n            && (range.getLocalSize_0() <= range.getMaxWorkItemSize()[0])\n            && (range.getLocalSize_1() <= range.getMaxWorkItemSize()[1])\n            && (range.getLocalSize_2() <= range.getMaxWorkItemSize()[2])\n            && ((range.getGlobalSize_0() % range.getLocalSize_0()) == 0)\n            && ((range.getGlobalSize_1() % range.getLocalSize_1()) == 0)\n            && ((range.getGlobalSize_2() % range.getLocalSize_2()) == 0));\n\n      return (range);\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a two dimensional range <code>0.._globalWidth", "call_func_name": ["com.aparapi.Range.<init>", "com.aparapi.Range.setGlobalSize_0", "com.aparapi.Range.setLocalSize_0", "com.aparapi.Range.setGlobalSize_1", "com.aparapi.Range.setLocalSize_1", "com.aparapi.Range.setGlobalSize_2", "com.aparapi.Range.setLocalSize_2", "com.aparapi.Range.getLocalSize_0", "com.aparapi.Range.getLocalSize_1", "com.aparapi.Range.getLocalSize_2", "com.aparapi.Range.getMaxWorkGroupSize", "com.aparapi.Range.getMaxWorkItemSize", "com.aparapi.Range.getGlobalSize_0", "com.aparapi.Range.getGlobalSize_1", "com.aparapi.Range.getGlobalSize_2", "com.aparapi.Range.setValid"], "call_func_parameter": [["com.aparapi.device.Device", "int"], ["int"], ["int"], ["int"], ["int"], ["int"], ["int"], [""], [""], [""], [""], [""], [""], [""], [""], ["boolean"]], "passed_comments": [{"com.aparapi.Range.setGlobalSize_0": "@param globalSize_0 the globalSize_0 to set"}, {"com.aparapi.Range.setLocalSize_0": "@param localSize_0 the localSize_0 to set"}, {"com.aparapi.Range.setGlobalSize_1": "@param globalSize_1 the globalSize_1 to set"}, {"com.aparapi.Range.setLocalSize_1": "@param localSize_1 the localSize_1 to set"}, {"com.aparapi.Range.setGlobalSize_2": "@param globalSize_2 the globalSize_2 to set"}, {"com.aparapi.Range.setLocalSize_2": "@param localSize_2 the localSize_2 to set"}, {"com.aparapi.Range.getLocalSize_0": "@return the localSize_0"}, {"com.aparapi.Range.getLocalSize_1": "@return the localSize_1"}, {"com.aparapi.Range.getLocalSize_2": "@return the localSize_2"}, {"com.aparapi.Range.getMaxWorkGroupSize": "@return the maxWorkGroupSize"}, {"com.aparapi.Range.getMaxWorkItemSize": "@return the maxWorkItemSize"}, {"com.aparapi.Range.getGlobalSize_0": "@return the globalSize_0"}, {"com.aparapi.Range.getGlobalSize_1": "@return the globalSize_1"}, {"com.aparapi.Range.getGlobalSize_2": "@return the globalSize_2"}, {"com.aparapi.Range.setValid": "@param valid the valid to set"}]}, {"index": "26", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.create3D", "methodParameterType": "Device#int#int#int#", "methodParameterName": "_device#_globalWidth#_globalHeight#_globalDepth#", "methodBody": "public static Range create3D(Device _device, int _globalWidth, int _globalHeight, int _globalDepth) {\n      final Range withoutLocal = create3D(_device, _globalWidth, _globalHeight, _globalDepth, 1, 1, 1);\n\n      if (withoutLocal.isValid()) {\n         withoutLocal.setLocalIsDerived(true);\n\n         final int[] widthFactors = getFactors(_globalWidth, withoutLocal.getMaxWorkItemSize()[0]);\n         final int[] heightFactors = getFactors(_globalHeight, withoutLocal.getMaxWorkItemSize()[1]);\n         final int[] depthFactors = getFactors(_globalDepth, withoutLocal.getMaxWorkItemSize()[2]);\n\n         withoutLocal.setLocalSize_0(1);\n         withoutLocal.setLocalSize_1(1);\n         withoutLocal.setLocalSize_2(1);\n\n         int max = 1;\n         int perimeter = 0;\n\n         for (final int w : widthFactors) {\n            for (final int h : heightFactors) {\n               for (final int d : depthFactors) {\n                  final int size = w * h * d;\n                  if (size > withoutLocal.getMaxWorkGroupSize()) {\n                     break;\n                  }\n\n                  if (size > max) {\n                     max = size;\n                     perimeter = w + h + d;\n                     withoutLocal.setLocalSize_0(w);\n                     withoutLocal.setLocalSize_1(h);\n                     withoutLocal.setLocalSize_2(d);\n                  } else if (size == max) {\n                     final int localPerimeter = w + h + d;\n                     if (localPerimeter < perimeter) { // is this the shortest perimeter so far\n                        perimeter = localPerimeter;\n                        withoutLocal.setLocalSize_0(w);\n                        withoutLocal.setLocalSize_1(w);\n                        withoutLocal.setLocalSize_2(d);\n                     }\n                  }\n               }\n            }\n         }\n\n         withoutLocal.setValid((withoutLocal.getLocalSize_0() > 0)\n               && (withoutLocal.getLocalSize_1() > 0)\n               && (withoutLocal.getLocalSize_2() > 0)\n               && ((withoutLocal.getLocalSize_0() * withoutLocal.getLocalSize_1() * withoutLocal.getLocalSize_2()) <= withoutLocal\n                     .getMaxWorkGroupSize()) && (withoutLocal.getLocalSize_0() <= withoutLocal.getMaxWorkItemSize()[0])\n               && (withoutLocal.getLocalSize_1() <= withoutLocal.getMaxWorkItemSize()[1])\n               && (withoutLocal.getLocalSize_2() <= withoutLocal.getMaxWorkItemSize()[2])\n               && ((withoutLocal.getGlobalSize_0() % withoutLocal.getLocalSize_0()) == 0)\n               && ((withoutLocal.getGlobalSize_1() % withoutLocal.getLocalSize_1()) == 0)\n               && ((withoutLocal.getGlobalSize_2() % withoutLocal.getLocalSize_2()) == 0));\n      }\n\n      return (withoutLocal);\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#BreakStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement)Block)EnhancedForStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a three dimensional range <code>0.._globalWidth", "call_func_name": ["com.aparapi.Range.create3D", "com.aparapi.Range.isValid", "com.aparapi.Range.setLocalIsDerived", "com.aparapi.Range.getMaxWorkItemSize", "com.aparapi.Range.getFactors", "com.aparapi.Range.setLocalSize_0", "com.aparapi.Range.setLocalSize_1", "com.aparapi.Range.setLocalSize_2", "com.aparapi.Range.getMaxWorkGroupSize", "com.aparapi.Range.getLocalSize_0", "com.aparapi.Range.getLocalSize_1", "com.aparapi.Range.getLocalSize_2", "com.aparapi.Range.getGlobalSize_0", "com.aparapi.Range.getGlobalSize_1", "com.aparapi.Range.getGlobalSize_2", "com.aparapi.Range.setValid"], "call_func_parameter": [["com.aparapi.device.Device", "int", "int", "int", "int", "int", "int"], [""], ["boolean"], [""], ["int", "int"], ["int"], ["int"], ["int"], [""], [""], [""], [""], [""], [""], [""], ["boolean"]], "passed_comments": [{"com.aparapi.Range.create3D": "Create a two dimensional range <code>0.._globalWidth"}, {"com.aparapi.Range.isValid": "@return the valid"}, {"com.aparapi.Range.setLocalIsDerived": "@param localIsDerived the localIsDerived to set"}, {"com.aparapi.Range.getMaxWorkItemSize": "@return the maxWorkItemSize"}, {"com.aparapi.Range.getFactors": "Determine the set of factors for a given value."}, {"com.aparapi.Range.setLocalSize_0": "@param localSize_0 the localSize_0 to set"}, {"com.aparapi.Range.setLocalSize_1": "@param localSize_1 the localSize_1 to set"}, {"com.aparapi.Range.setLocalSize_2": "@param localSize_2 the localSize_2 to set"}, {"com.aparapi.Range.getMaxWorkGroupSize": "@return the maxWorkGroupSize"}, {"com.aparapi.Range.getLocalSize_0": "@return the localSize_0"}, {"com.aparapi.Range.getLocalSize_1": "@return the localSize_1"}, {"com.aparapi.Range.getLocalSize_2": "@return the localSize_2"}, {"com.aparapi.Range.getGlobalSize_0": "@return the globalSize_0"}, {"com.aparapi.Range.getGlobalSize_1": "@return the globalSize_1"}, {"com.aparapi.Range.getGlobalSize_2": "@return the globalSize_2"}, {"com.aparapi.Range.setValid": "@param valid the valid to set"}]}, {"index": "27", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override public String toString() {\n      final StringBuilder sb = new StringBuilder();\n\n      switch (dims) {\n         case 1:\n            sb.append(\"global:\" + globalSize_0 + \" local:\" + (localIsDerived ? \"(derived)\" : \"\") + localSize_0);\n            break;\n         case 2:\n            sb.append(\"2D(global:\" + globalSize_0 + \"x\" + globalSize_1 + \" local:\" + (localIsDerived ? \"(derived)\" : \"\")\n                  + localSize_0 + \"x\" + localSize_1 + \")\");\n            break;\n         case 3:\n             sb.append(\"3D(global:\" + globalSize_0 + \"x\" + globalSize_1 + \"x\" + globalSize_2 + \" local:\"\n                  + (localIsDerived ? \"(derived)\" : \"\") + localSize_0 + \"x\" + localSize_1 + \"x\" + localSize_2 + \")\");\n            break;\n      }\n\n      return (sb.toString());\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#StringLiteral#ConditionalExpression#ParenthesizedExpression#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#BreakStatement#NumberLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#StringLiteral#ConditionalExpression#ParenthesizedExpression#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#BreakStatement#NumberLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#StringLiteral#ConditionalExpression#ParenthesizedExpression#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#BreakStatement#SwitchStatement#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(ParenthesizedExpression(ConditionalExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(ParenthesizedExpression(ConditionalExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(ParenthesizedExpression(ConditionalExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement)SwitchStatement(ReturnStatement(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Override  {@link #toString()}", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""]], "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getLocalSize", "methodParameterType": "int#", "methodParameterName": "_dim#", "methodBody": "public int getLocalSize(int _dim) {\n      return (_dim == 0 ? localSize_0 : (_dim == 1 ? localSize_1 : localSize_2));\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#ConditionalExpression#ParenthesizedExpression#ConditionalExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)ParenthesizedExpression)ConditionalExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the localSize (of the group) given the requested dimension", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getGlobalSize", "methodParameterType": "int#", "methodParameterName": "_dim#", "methodBody": "public int getGlobalSize(int _dim) {\n      return (_dim == 0 ? globalSize_0 : (_dim == 1 ? globalSize_1 : globalSize_2));\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#ConditionalExpression#ParenthesizedExpression#ConditionalExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)ParenthesizedExpression)ConditionalExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the globalSize (of the range) given the requested dimension", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getNumGroups", "methodParameterType": "int#", "methodParameterName": "_dim#", "methodBody": "public int getNumGroups(int _dim) {\n      return (_dim == 0 ? (globalSize_0 / localSize_0) : (_dim == 1 ? (globalSize_1 / localSize_1) : (globalSize_2 / localSize_2)));\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#ConditionalExpression#ParenthesizedExpression#ConditionalExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)ConditionalExpression)ParenthesizedExpression)ConditionalExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the number of groups for the given dimension.  <p> This will essentially return globalXXXX/localXXXX for the given dimension (width, height, depth)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getWorkGroupSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getWorkGroupSize() {\n      return localSize_0 * localSize_1 * localSize_2;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return The product of all valid localSize dimensions", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "32", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getGlobalSize_0", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getGlobalSize_0() {\n      return globalSize_0;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the globalSize_0", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.setGlobalSize_0", "methodParameterType": "int#", "methodParameterName": "globalSize_0#", "methodBody": "public void setGlobalSize_0(int globalSize_0) {\n      this.globalSize_0 = globalSize_0;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param globalSize_0 the globalSize_0 to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getLocalSize_0", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getLocalSize_0() {\n      return localSize_0;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the localSize_0", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.setLocalSize_0", "methodParameterType": "int#", "methodParameterName": "localSize_0#", "methodBody": "public void setLocalSize_0(int localSize_0) {\n      this.localSize_0 = localSize_0;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param localSize_0 the localSize_0 to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "36", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getGlobalSize_1", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getGlobalSize_1() {\n      return globalSize_1;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the globalSize_1", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.setGlobalSize_1", "methodParameterType": "int#", "methodParameterName": "globalSize_1#", "methodBody": "public void setGlobalSize_1(int globalSize_1) {\n      this.globalSize_1 = globalSize_1;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param globalSize_1 the globalSize_1 to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getLocalSize_1", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getLocalSize_1() {\n      return localSize_1;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the localSize_1", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.setLocalSize_1", "methodParameterType": "int#", "methodParameterName": "localSize_1#", "methodBody": "public void setLocalSize_1(int localSize_1) {\n      this.localSize_1 = localSize_1;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param localSize_1 the localSize_1 to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getGlobalSize_2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getGlobalSize_2() {\n      return globalSize_2;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the globalSize_2", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.setGlobalSize_2", "methodParameterType": "int#", "methodParameterName": "globalSize_2#", "methodBody": "public void setGlobalSize_2(int globalSize_2) {\n      this.globalSize_2 = globalSize_2;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param globalSize_2 the globalSize_2 to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getLocalSize_2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getLocalSize_2() {\n      return localSize_2;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the localSize_2", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "43", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.setLocalSize_2", "methodParameterType": "int#", "methodParameterName": "localSize_2#", "methodBody": "public void setLocalSize_2(int localSize_2) {\n      this.localSize_2 = localSize_2;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param localSize_2 the localSize_2 to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "44", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getDims", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getDims() {\n      return dims;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the number of dims for this Range.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "45", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.setDims", "methodParameterType": "int#", "methodParameterName": "dims#", "methodBody": "public void setDims(int dims) {\n      this.dims = dims;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param dims the dims to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "46", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.isValid", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isValid() {\n      return valid;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the valid", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "47", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.setValid", "methodParameterType": "boolean#", "methodParameterName": "valid#", "methodBody": "public void setValid(boolean valid) {\n      this.valid = valid;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param valid the valid to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "48", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.isLocalIsDerived", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isLocalIsDerived() {\n      return localIsDerived;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the localIsDerived", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.setLocalIsDerived", "methodParameterType": "boolean#", "methodParameterName": "localIsDerived#", "methodBody": "public void setLocalIsDerived(boolean localIsDerived) {\n      this.localIsDerived = localIsDerived;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param localIsDerived the localIsDerived to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "50", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getMaxWorkGroupSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getMaxWorkGroupSize() {\n      return maxWorkGroupSize;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the maxWorkGroupSize", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "51", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.setMaxWorkGroupSize", "methodParameterType": "int#", "methodParameterName": "maxWorkGroupSize#", "methodBody": "public void setMaxWorkGroupSize(int maxWorkGroupSize) {\n      this.maxWorkGroupSize = maxWorkGroupSize;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param maxWorkGroupSize the maxWorkGroupSize to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.getMaxWorkItemSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int[] getMaxWorkItemSize() {\n      return maxWorkItemSize;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the maxWorkItemSize", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Range.java", "methodName": "com.aparapi.Range.setMaxWorkItemSize", "methodParameterType": "int[]#", "methodParameterName": "maxWorkItemSize#", "methodBody": "public void setMaxWorkItemSize(int[] maxWorkItemSize) {\n      this.maxWorkItemSize = maxWorkItemSize;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param maxWorkItemSize the maxWorkItemSize to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/IProfileReportObserver.java", "methodName": "com.aparapi.IProfileReportObserver.receiveReport", "methodParameterType": "Class<? extends Kernel>#Device#WeakReference<ProfileReport>#", "methodParameterName": "kernelClass#device#profileInfo#", "methodBody": "public void receiveReport(final Class<? extends Kernel> kernelClass, final Device device, final WeakReference<ProfileReport> profileInfo);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "The listener method will be invoked each time a profile report becomes available for each Aparapi Kernel which has a registered observer.<br> <b>Note1: </b>A report will be generated by a thread executing a kernel. If multiple threads execute the same kernel, concurrently, this method can be called concurrently too, thus classes implementing this interface need to provide a thread safe method. <br> <b>Note2: </b>If profiling information is to be stored has a  {@link com.aparapi.ProfileReport}, it is necessary to clone  the profileInfo object with  {@link com.aparapi.ProfileReport#clone()}. A WeakReference is used to help differentiate such need, however it is guaranteed that profileInfo will not be null, during the method execution. <br>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/reader/ByteBuffer.java", "methodName": "com.aparapi.internal.reader.ByteBuffer.ByteBuffer", "methodParameterType": "InputStream#", "methodParameterName": "_inputStream#", "methodBody": "ByteBuffer(InputStream _inputStream) {\n      final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      bytes = new byte[4096];\n      int bytesRead = 0;\n\n      try {\n         while ((bytesRead = _inputStream.read(bytes)) > 0) {\n            baos.write(bytes, 0, bytesRead);\n         }\n\n         bytes = baos.toByteArray();\n      } catch (final IOException e) {\n         bytes = new byte[0];\n         // TODO Auto-generated catch block\n         e.printStackTrace();\n      }\n   }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#ArrayCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#ArrayCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Construct from an <code>InputStream</code>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/reader/ByteReader.java", "methodName": "com.aparapi.internal.reader.ByteReader.ByteReader", "methodParameterType": "ByteBuffer#", "methodParameterName": "_byteBuffer#", "methodBody": "public ByteReader(ByteBuffer _byteBuffer) {\n      byteBuffer = _byteBuffer;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct form a given ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/reader/ByteReader.java", "methodName": "com.aparapi.internal.reader.ByteReader.ByteReader", "methodParameterType": "byte[]#", "methodParameterName": "_bytes#", "methodBody": "public ByteReader(byte[] _bytes) {\n      this(new ByteBuffer(_bytes));\n   }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct form an array of bytes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/reader/ByteReader.java", "methodName": "com.aparapi.internal.reader.ByteReader.ByteReader", "methodParameterType": "InputStream#", "methodParameterName": "_inputStream#", "methodBody": "public ByteReader(InputStream _inputStream) {\n      this(new ByteBuffer(_inputStream));\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct form an input stream (say a ClassFile).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/opencl/OpenCLProgram.java", "methodName": "com.aparapi.internal.opencl.OpenCLProgram.OpenCLProgram", "methodParameterType": "OpenCLDevice#String#", "methodParameterName": "_device#_source#", "methodBody": "public OpenCLProgram(OpenCLDevice _device, String _source) {\n      programId = 0;\n      queueId = 0;\n      contextId = 0;\n      device = _device;\n      source = _source;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Minimal constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/opencl/OpenCLProgram.java", "methodName": "com.aparapi.internal.opencl.OpenCLProgram.OpenCLProgram", "methodParameterType": "long#long#long#OpenCLDevice#String#", "methodParameterName": "_programId#_queueId#_contextId#_device#_source#", "methodBody": "public OpenCLProgram(long _programId, long _queueId, long _contextId, OpenCLDevice _device, String _source) {\n      programId = _programId;\n      queueId = _queueId;\n      contextId = _contextId;\n      device = _device;\n      source = _source;\n   }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Full constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "61", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/opencl/OpenCLPlatform.java", "methodName": "com.aparapi.internal.opencl.OpenCLPlatform.OpenCLPlatform", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public OpenCLPlatform() {\n      version = \"\";\n      vendor = \"\";\n      name = \"\";\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Default constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "62", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/opencl/OpenCLPlatform.java", "methodName": "com.aparapi.internal.opencl.OpenCLPlatform.OpenCLPlatform", "methodParameterType": "long#String#String#String#", "methodParameterName": "_platformId#_version#_vendor#_name#", "methodBody": "public OpenCLPlatform(long _platformId, String _version, String _vendor, String _name) {\n      platformId = _platformId;\n      version = _version;\n      vendor = _vendor;\n      name = _name;\n   }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Full constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/opencl/OpenCLLoader.java", "methodName": "com.aparapi.internal.opencl.OpenCLLoader.getInstance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected static OpenCLLoader getInstance() {\n      return instance;\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve a singleton instance of OpenCLLoader", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "64", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/opencl/OpenCLLoader.java", "methodName": "com.aparapi.internal.opencl.OpenCLLoader.isOpenCLAvailable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static boolean isOpenCLAvailable() {\n      return openCLAvailable;\n   }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the status of whether OpenCL was successfully loaded", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "65", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/opencl/OpenCLArgDescriptor.java", "methodName": "com.aparapi.internal.opencl.OpenCLArgDescriptor.OpenCLArgDescriptor", "methodParameterType": "String#long#", "methodParameterName": "_name#_bits#", "methodBody": "public OpenCLArgDescriptor(String _name, long _bits) {\n      name = _name;\n      bits = _bits;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Full constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/opencl/OpenCLKernel.java", "methodName": "com.aparapi.internal.opencl.OpenCLKernel.OpenCLKernel", "methodParameterType": "long#OpenCLProgram#String#OpenCLArgDescriptor[]#", "methodParameterName": "kernel#programInstance#name#_args#", "methodBody": "public OpenCLKernel(long kernel, OpenCLProgram programInstance, String name, OpenCLArgDescriptor[] _args) {\n      kernelId = kernel;\n      program = programInstance;\n      kernelName = name;\n      args = _args;\n   }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "This constructor is specifically for JNI usage", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "67", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/opencl/OpenCLKernel.java", "methodName": "com.aparapi.internal.opencl.OpenCLKernel.createKernel", "methodParameterType": "OpenCLProgram#String#List<OpenCLArgDescriptor>#", "methodParameterName": "_program#_kernelName#_args#", "methodBody": "public static OpenCLKernel createKernel(OpenCLProgram _program, String _kernelName, List<OpenCLArgDescriptor> _args) {\n      final OpenCLArgDescriptor[] argArray = _args.toArray(new OpenCLArgDescriptor[0]);\n      final OpenCLKernel oclk = new OpenCLKernel().createKernelJNI(_program, _kernelName, argArray);\n      for (final OpenCLArgDescriptor arg : argArray) {\n         arg.kernel = oclk;\n      }\n      return oclk;\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method is used to create a new Kernel from JNI", "call_func_name": ["java.util.List.toArray", "com.aparapi.internal.opencl.OpenCLKernel.<init>", "com.aparapi.internal.opencl.OpenCLKernel.createKernelJNI"], "call_func_parameter": [["java.lang.Object[]"], [""], ["com.aparapi.internal.opencl.OpenCLProgram", "java.lang.String", "com.aparapi.internal.opencl.OpenCLArgDescriptor[]"]], "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/MethodModel.java", "methodName": "com.aparapi.internal.model.MethodModel.setRequiredPragmas", "methodParameterType": "Instruction#", "methodParameterName": "instruction#", "methodBody": "public void setRequiredPragmas(Instruction instruction) {\n      final boolean setDouble = instruction.getByteCode().usesDouble();\n      if (setDouble) {\n         usesDoubles = true;\n         if (logger.isLoggable(Level.FINE)) {\n            logger.fine(\"Found D on =\" + instruction + \" in \" + getName());\n         }\n      }\n\n      if ((instruction instanceof I_BASTORE) || (instruction instanceof I_CASTORE /* || instruction instanceof I_SASTORE */)) {\n         usesByteWrites = true;\n         if (usesByteWrites && logger.isLoggable(Level.FINE)) {\n            logger.fine(\"Found Byte Addressable Store on =\" + instruction + \" in \" + getName());\n         }\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Look at each instruction for use of long/double or byte writes which require pragmas to be used in the OpenCL source", "call_func_name": ["com.aparapi.internal.instruction.Instruction.getByteCode", "java.util.logging.Logger.isLoggable", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "com.aparapi.internal.model.MethodModel.getName", "java.lang.StringBuilder.toString", "java.util.logging.Logger.fine"], "call_func_parameter": [[""], ["java.util.logging.Level"], [""], ["java.lang.String"], ["java.lang.Object"], [""], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/MethodModel.java", "methodName": "com.aparapi.internal.model.MethodModel.createListOfInstructions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<Integer, Instruction> createListOfInstructions() throws ClassParseException {\n      final Map<Integer, Instruction> pcMap = new LinkedHashMap<Integer, Instruction>();\n      final byte[] code = method.getCode();\n\n      // We create a byteReader for reading the bytes from the code array\n      final ByteReader codeReader = new ByteReader(code);\n      while (codeReader.hasMore()) {\n         // Create an instruction from code reader's current position\n         final int pc = codeReader.getOffset();\n         final Instruction instruction = InstructionSet.ByteCode.create(this, codeReader);\n\n         if ((!Config.enablePUTFIELD) && (instruction instanceof I_PUTFIELD)) {\n            // Special case putfield handling to allow object setter processing\n            // and bail later if necessary\n            //throw new ClassParseException(\"We don't support putfield instructions\");\n            usesPutfield = true;\n         }\n\n         if ((!Config.enableARETURN) && (instruction instanceof I_ARETURN)) {\n            throw new ClassParseException(instruction, ClassParseException.TYPE.ARRAY_RETURN);\n         }\n\n         if ((!Config.enablePUTSTATIC) && (instruction instanceof I_PUTSTATIC)) {\n            throw new ClassParseException(instruction, ClassParseException.TYPE.PUTFIELD);\n         }\n\n         if ((!Config.enableINVOKEINTERFACE) && (instruction instanceof I_INVOKEINTERFACE)) {\n            throw new ClassParseException(instruction, ClassParseException.TYPE.INVOKEINTERFACE);\n         }\n\n         if ((!Config.enableGETSTATIC) && (instruction instanceof I_GETSTATIC)) {\n            throw new ClassParseException(instruction, ClassParseException.TYPE.GETSTATIC);\n         }\n\n         if ((!Config.enableATHROW) && (instruction instanceof I_ATHROW)) {\n            throw new ClassParseException(instruction, ClassParseException.TYPE.ATHROW);\n         }\n\n         if ((!Config.enableMONITOR) && ((instruction instanceof I_MONITORENTER) || (instruction instanceof I_MONITOREXIT))) {\n            throw new ClassParseException(instruction, ClassParseException.TYPE.SYNCHRONIZE);\n         }\n\n         if (instruction instanceof New) {\n             if ((instruction instanceof I_NEWARRAY)) {\n                 if (!Config.enableARRAY) {\n                     throw new ClassParseException(instruction, TYPE.NEWARRAY);\n                 }\n             } else if ((instruction instanceof I_MULTIANEWARRAY)) {\n                 throw new ClassParseException(instruction, ClassParseException.TYPE.NEWMULTIARRAY);\n             } else if (!Config.enableNEW) {\n                 throw new ClassParseException(instruction, ClassParseException.TYPE.NEW);\n             }\n         }\n\n         if ((!Config.enableSWITCH) && ((instruction instanceof I_LOOKUPSWITCH) || (instruction instanceof I_TABLESWITCH))) {\n            throw new ClassParseException(instruction, ClassParseException.TYPE.SWITCH);\n         }\n\n         if (!Config.enableMETHODARRAYPASSING) {\n            if (instruction instanceof MethodCall) {\n               final MethodCall methodCall = (MethodCall) instruction;\n\n               final MethodReferenceEntry methodReferenceEntry = methodCall.getConstantPoolMethodEntry();\n               if (!Kernel.isMappedMethod(methodReferenceEntry)) { // we will allow trusted methods to violate this rule\n                  for (final Arg arg : methodReferenceEntry.getArgs()) {\n                     if (arg.isArray()) {\n                        throw new ClassParseException(instruction, ClassParseException.TYPE.METHODARRAYARG);\n                     }\n                  }\n               }\n            }\n         }\n\n         setRequiredPragmas(instruction);\n\n         pcMap.put(pc, instruction);\n\n         // list maintenance, make this the pcHead if pcHead is null\n         if (pcHead == null) {\n            pcHead = instruction;\n         }\n\n         // extend the list of instructions here we make the new instruction point to previous tail\n         instruction.setPrevPC(pcTail);\n\n         // if tail exists (not the first instruction in the list) link it to the new instruction\n         if (pcTail != null) {\n            pcTail.setNextPC(instruction);\n         }\n\n         // now move the tail along\n         pcTail = instruction;\n      }\n\n      return (pcMap);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#PrefixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#PrefixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#PrefixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#PrefixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#PrefixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#PrefixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#PrefixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleName#QualifiedName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#QualifiedName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#PrefixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#PrefixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression)ParenthesizedExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression)ParenthesizedExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression)ParenthesizedExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression)ParenthesizedExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression)ParenthesizedExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression)ParenthesizedExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(IfStatement(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(Block(IfStatement(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(IfStatement(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block(IfStatement(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)IfStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a linked list of instructions (from pcHead to pcTail). Returns a map of int (pc) to Instruction which to allow us to quickly get from a bytecode offset to the appropriate instruction.  Note that not all int values from 0 to code.length values will map to a valid instruction, if pcMap.get(n) == null then this implies that 'n' is not the start of an instruction So either pcMap.get(i)== null or pcMap.get(i).getThisPC()==i", "call_func_name": ["java.util.LinkedHashMap.<init>", "com.aparapi.internal.reader.ByteReader.<init>", "com.aparapi.internal.reader.ByteReader.hasMore", "com.aparapi.internal.reader.ByteReader.getOffset", "com.aparapi.internal.model.MethodModel.setRequiredPragmas", "java.lang.Integer.valueOf", "java.util.Map.put", "com.aparapi.internal.instruction.Instruction.setPrevPC", "com.aparapi.internal.instruction.Instruction.setNextPC"], "call_func_parameter": [[""], ["byte[]"], [""], [""], ["com.aparapi.internal.instruction.Instruction"], ["int"], ["java.lang.Object", "java.lang.Object"], ["com.aparapi.internal.instruction.Instruction"], ["com.aparapi.internal.instruction.Instruction"]], "passed_comments": [{"com.aparapi.internal.model.MethodModel.setRequiredPragmas": "Look at each instruction for use of long/double or byte writes which require pragmas to be used in the OpenCL source"}]}, {"index": "70", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/MethodModel.java", "methodName": "com.aparapi.internal.model.MethodModel.buildBranchGraphs", "methodParameterType": "Map<Integer,Instruction>#", "methodParameterName": "pcMap#", "methodBody": "public void buildBranchGraphs(Map<Integer, Instruction> pcMap) {\n      for (Instruction instruction = pcHead; instruction != null; instruction = instruction.getNextPC()) {\n         if (instruction.isBranch()) {\n            final Branch branch = instruction.asBranch();\n            final Instruction targetInstruction = pcMap.get(branch.getAbsolute());\n            branch.setTarget(targetInstruction);\n         }\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Here we connect the branch nodes to the instruction that they branch to. <p> Each branch node contains a 'target' field indended to reference the node that the branch targets. Each instruction also contain four seperate lists of branch nodes that reference it. These lists hold forwardConditional, forwardUnconditional, reverseConditional and revereseUnconditional branches that reference it. <p> So assuming that we had a branch node at pc offset 100 which represented 'goto 200'.  <p> Following this call the branch node at pc offset 100 will have a 'target' field which actually references the instruction at pc offset 200, and the instruction at pc offset 200 will  have the branch node (at 100) added to it's forwardUnconditional list.", "call_func_name": ["com.aparapi.internal.instruction.Instruction.isBranch", "com.aparapi.internal.instruction.Instruction.asBranch", "java.lang.Integer.valueOf", "java.util.Map.get", "com.aparapi.internal.instruction.Instruction.getNextPC"], "call_func_parameter": [[""], [""], ["int"], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "71", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/MethodModel.java", "methodName": "com.aparapi.internal.model.MethodModel.deoptimizeReverseBranches", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void deoptimizeReverseBranches() {\n\n      for (Instruction instruction = pcHead; instruction != null; instruction = instruction.getNextPC()) {\n         if (instruction.isBranch()) {\n            final Branch branch = instruction.asBranch();\n            if (branch.isReverse()) {\n               final Instruction target = branch.getTarget();\n               final LinkedList<Branch> list = target.getReverseUnconditionalBranches();\n               if ((list != null) && (list.size() > 0) && (list.get(list.size() - 1) != branch)) {\n                  final Branch unconditional = list.get(list.size() - 1).asBranch();\n                  branch.retarget(unconditional);\n\n               }\n            }\n         }\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ForStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Javac optimizes some branches to avoid goto->goto, branch->goto etc.   This method specifically deals with reverse branches which are the result of such optimisations.  <code><pre> </pre></code>", "call_func_name": ["com.aparapi.internal.instruction.Instruction.isBranch", "com.aparapi.internal.instruction.Instruction.asBranch", "com.aparapi.internal.instruction.Instruction.getReverseUnconditionalBranches", "java.util.LinkedList.size", "java.util.LinkedList.get", "com.aparapi.internal.instruction.Instruction.getNextPC"], "call_func_parameter": [[""], [""], [""], [""], ["int"], [""]], "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/MethodModel.java", "methodName": "com.aparapi.internal.model.MethodModel.txFormDups", "methodParameterType": "ExpressionList#Instruction#", "methodParameterName": "_expressionList#_instruction#", "methodBody": "public void txFormDups(ExpressionList _expressionList, final Instruction _instruction) throws ClassParseException {\n      if (_instruction instanceof I_DUP) {\n         Instruction e = _expressionList.getTail();\n         while (!e.producesStack()) {\n            e = e.getPrevExpr();\n         }\n\n         _expressionList.add(new CloneInstruction(this, e));\n         //System.out.println(\"clone of \" + e);\n      } else if (_instruction instanceof I_DUP2) {\n         Instruction e = _expressionList.getTail();\n         while (!e.producesStack()) {\n            e = e.getPrevPC();\n         }\n\n         final Instruction clone = e;\n         e = e.getPrevExpr();\n         while (!e.producesStack()) {\n            e = e.getPrevExpr();\n         }\n\n         _expressionList.add(new CloneInstruction(this, e));\n         _expressionList.add(new CloneInstruction(this, clone));\n      } else if (_instruction instanceof I_DUP_X1) {\n\n         Instruction e = _expressionList.getTail();\n\n         while (!e.producesStack()) {\n            e = e.getPrevExpr();\n         }\n         final Instruction clone1 = new CloneInstruction(this, e);\n         e = e.getPrevExpr();\n         while (!e.producesStack()) {\n            e = e.getPrevExpr();\n         }\n\n         _expressionList.insertBetween(e.getPrevExpr(), e, clone1);\n\n      } else if (_instruction instanceof I_DUP_X2) {\n\n         // dup_x2 duplicates top operand and jams a copy in 3 down from the top\n         // ...word3, word2, word1 => ...word1, word3, word2, word1\n\n         Instruction e = _expressionList.getTail();\n\n         if (logger.isLoggable(Level.FINE)) {\n            logger.fine(\"Found DUP_X2 prev=\" + e.getPrevExpr() + \" e=\" + e + \" curr=\" + _instruction);\n         }\n\n         // Get the previous instr to write to stack \"word1\" \n         while (!e.producesStack()) {\n            if (logger.isLoggable(Level.FINE)) {\n               logger.fine(\"DUP_X2 skipping to find write: e=\" + e);\n            }\n            e = e.getPrevExpr();\n         }\n\n         // Clone it, this will replace the dup action\n         final Instruction clone1 = new CloneInstruction(this, e);\n\n         if (logger.isLoggable(Level.FINE)) {\n            logger.fine(\"DUP_X2 cloning: clone1=\" + clone1);\n         }\n\n         // Skip over 2 earlier writes to stack and capture 3rd one \n         e = e.getPrevExpr();\n\n         for (int i = 0; i < 2;) {\n            if (logger.isLoggable(Level.FINE)) {\n               logger.fine(\"DUP_X2 skipping to find insert: e=\" + e);\n            }\n            if (e.producesStack()) {\n               i++;\n            }\n            if (i < 2) {\n               e = e.getPrevExpr();\n            }\n         }\n\n         if (logger.isLoggable(Level.FINE)) {\n            logger.fine(\"DUP_X2 insert: prev=\" + e.getPrevExpr() + \" e=\" + e + \" clone=\" + clone1);\n         }\n\n         // Add our clone in between those two writes\n         _expressionList.insertBetween(e.getPrevExpr(), e, clone1);\n\n      } else if (_instruction instanceof DUP) {\n\n         throw new ClassParseException(_instruction, ClassParseException.TYPE.UNSUPPORTEDBYTECODE);\n      }\n\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(WhileStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(WhileStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(WhileStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)ForStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "DUP family of instructions break our stack unwind model (whereby we treat instructions like the oeprands they create/consume). <p> Here we replace DUP style instructions with a 'mock' instruction which 'clones' the effect of the instruction.  This would be invalid to execute but is useful  to replace the DUP with a 'pattern' which it simulates.  This allows us to later apply transforms to represent the original code.  <p> An example might be the bytecode for the following sequence. <code><pre> results[10]++;  return </pre></code> Which results in the following bytecode <code><pre> 0:   aload_0       // reference through 'this' to get  1:   getfield      // field 'results' which is an array of int 4:   bipush  10    // push the array index 6:   dup2          // dreaded dup2 we'll come back here 7:   iaload        // ignore for the moment. 8:   iconst_1 9:   iadd 10:  iastore 11:  return </pre></code> First we need to know what the stack will look like before the dup2 is encountered. Using our folding technique we represent the first two instructions inside () <pre><code> getfield (aload_0     // result in the array field reference on stack bipush  10            // the array index dup2                  // dreaded dup2 we'll come back here </code></pre> The <code>dup2</code> essentially copies the top two elements on the stack.  So we emulate this by replacing the dup2 with clones of the instructions which would reinstate the same stack state.  <p> So after the <code>dup2</code> transform we end up with:-  <pre><code> getfield (aload_0)     // result in the array field reference on stack bipush  10             // the array index {getfield (aload_0)}   // result in the array field reference on stack {bipush 10}            // the array index </code></pre> So carrying on lets look at the <code>iaload</code> which consumes two operands (the index and the array field reference) and creates one (the result of an array access) <pre><code> getfield (aload_0)     // result in the array field reference on stack bipush  10             // the array index {getfield (aload_0)}   // result in the array field reference on stack {bipush  10}           // the array index iaload  </code></pre> So we now have  <pre><code> getfield (aload_0)                        // result in the array field reference on stack bipush  10                                // the array index iaload ({getfield(aload_0), {bipush 10})  // results in the array element on the stack iconst iadd </code></pre> And if you are following along the <code>iadd</code> will fold the previous two stack entries essentially pushing the result of   <code>results[10]+1<code> on the stack. <pre><code> getfield (aload_0)                                        // result in the array field reference on stack bipush  10                                                // the array index iadd (iaload ({getfield(aload_0), {bipush 10}, iconst_1)  // push of results[10]+1  </code></pre> Then the final <code>istore</code> instruction which consumes 3 stack operands (the field array reference, the index and the value to assign). <p> Which results in  <pre><code>  istore (getfield (aload_0), bipush 10,  iadd (iaload ({getfield(aload_0), {bipush 10}, iconst_1)) // results[10] = results[10+1] </code></pre>  Where <code>results[10] = results[10+1]<code> is the long-hand form of the <code>results[10]++</code> and will be transformed by one of the 'inc' transforms to the more familiar form a little later.", "call_func_name": ["com.aparapi.internal.instruction.ExpressionList.getTail", "com.aparapi.internal.instruction.Instruction.producesStack", "com.aparapi.internal.instruction.Instruction.getPrevExpr", "com.aparapi.internal.instruction.ExpressionList.add", "com.aparapi.internal.instruction.Instruction.getPrevPC", "com.aparapi.internal.instruction.ExpressionList.insertBetween", "java.util.logging.Logger.isLoggable", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.logging.Logger.fine"], "call_func_parameter": [[""], [""], [""], ["com.aparapi.internal.instruction.Instruction"], [""], ["com.aparapi.internal.instruction.Instruction", "com.aparapi.internal.instruction.Instruction", "com.aparapi.internal.instruction.Instruction"], ["java.util.logging.Level"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": [{"com.aparapi.internal.instruction.ExpressionList.add": "Add this instruction to the end of the list."}, {"com.aparapi.internal.instruction.ExpressionList.insertBetween": "Insert the given instruction (_newone) between the existing entries (_prev and _next)."}]}, {"index": "73", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/MethodModel.java", "methodName": "com.aparapi.internal.model.MethodModel.foldExpressions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void foldExpressions() throws ClassParseException {\n\n      // we also populate a second list of expressions held between headTail.head and headTail.tail\n\n      for (Instruction instruction = pcHead; instruction != null; instruction = instruction.getNextPC()) {\n\n         // Here we are going to extract loop/if/structure from the list that we have collected so far in the roots list \n         // We are looking for a new instruction which is the target of a forward branch (this is why we collected forward branch counts) we only enter this loop\n         // however if roots list is not empty and it's tail is not a forward branch. \n\n         expressionList.foldComposite(instruction);\n\n         // If we find a DUP then we need to txform the DUP into a set of clones on the xpressionlist\n         if (instruction instanceof DUP) {\n            txFormDups(expressionList, instruction);\n         } else {\n            if (instruction.consumesStack()) {\n               // If instruction consumes n operands, then walk back until we find n roots on the xpressionlist that produce stack. \n               // we will user this cursor to track our progress\n               Instruction cursor = expressionList.getTail();\n\n               // set this flag if we pass something that does not produce stack\n               boolean foundNonStackProducer = false;\n\n               // operandStart will points to the beginning of the list of consumed operands\n               Instruction operandStart = null;\n\n               // back up from root tail past each instruction expecting to create a consumed operand for this instruction\n               for (int i = 0; i < instruction.getStackConsumeCount();) {\n                  if (!cursor.producesStack()) {\n                     foundNonStackProducer = true; // we spotted an instruction that does not consume stack. So we need to analyze this\n                  } else {\n                     i++;\n                  }\n                  operandStart = cursor;\n                  cursor = cursor.getPrevExpr();\n               }\n\n               // if we found something that did not consume stack we probably have an expression with a side effect \n\n               if (foundNonStackProducer) {\n                  // Something like\n                  //     a = b++;\n                  //     foo(i++);\n                  //     return(a++);\n                  // so we need to check for common transformations\n                  applyTransformations(expressionList, instruction, operandStart);\n               }\n\n               // cut the tail off and give it to instruction\n               final Instruction childTail = expressionList.getTail();\n               final Instruction childHead = expressionList.createList(cursor);\n\n               instruction.setChildren(childHead, childTail);\n            }\n            // add this instruction to the tail of roots\n            expressionList.add(instruction);\n         }\n      }\n   }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ForStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Try to fold the instructions into higher level structures.  At the end we have a folded instruction tree with 'roots' containing the  top level branches (stores mostly)", "call_func_name": ["com.aparapi.internal.instruction.ExpressionList.foldComposite", "com.aparapi.internal.model.MethodModel.txFormDups", "com.aparapi.internal.instruction.Instruction.consumesStack", "com.aparapi.internal.instruction.ExpressionList.getTail", "com.aparapi.internal.instruction.Instruction.getStackConsumeCount", "com.aparapi.internal.instruction.Instruction.producesStack", "com.aparapi.internal.instruction.Instruction.getPrevExpr", "com.aparapi.internal.model.MethodModel.applyTransformations", "com.aparapi.internal.instruction.ExpressionList.createList", "com.aparapi.internal.instruction.Instruction.setChildren", "com.aparapi.internal.instruction.ExpressionList.add", "com.aparapi.internal.instruction.Instruction.getNextPC"], "call_func_parameter": [["com.aparapi.internal.instruction.Instruction"], ["com.aparapi.internal.instruction.ExpressionList", "com.aparapi.internal.instruction.Instruction"], [""], [""], [""], [""], [""], ["com.aparapi.internal.instruction.ExpressionList", "com.aparapi.internal.instruction.Instruction", "com.aparapi.internal.instruction.Instruction"], ["com.aparapi.internal.instruction.Instruction"], ["com.aparapi.internal.instruction.Instruction", "com.aparapi.internal.instruction.Instruction"], ["com.aparapi.internal.instruction.Instruction"], [""]], "passed_comments": [{"com.aparapi.internal.instruction.ExpressionList.foldComposite": "Fold headTail.tail into valid composites <pre> if(??){then}... ?? ?> [THEN] ... --------> if (??){THEN}else{ELSE}... ?? ?> [THEN] >> [ELSE] ... ------------> --------> sun for (INIT,??,DELTA){BODY} ... [INIT] ?? ?> [BODY] [DELTA] << ... ------------------> <------------------- sun for (,??,DELTA){BODY} ... ?? ?> [BODY] [DELTA] << ... ------------------> <------------------- sun while (?){l} ... ?? ?> [BODY] << ... -----------> <------------ eclipse for (INIT,??,DELTA){BODY} ... [INIT] >> [BODY] [DELTA] ?? ?< ... ----------------> <----------------- eclipse for (,??,DELTA){BODY} ... >> [BODY] [DELTA] ?? ?< ... ---------------> <----------------- eclipse while (??){BODY} ... >> [BODY] ?? ?< ... --------> <---------- eclipe if (?1) { while (?2) {BODY} } else {ELSE} ... ?1 ?> >> [BODY] ?2 ?< >> [ELSE] ... ---------> <--------- ---------------------> --------> sun for (,?1,DELTA){ if (?2) { THEN break; } BODY} ... ?1 ?> ?2 ?> [THEN] >> [BODY] [DELTA] << ... -----------> ----------------------------------> ------------------> <------------------------------------ sun for (,?1,DELTA){ if (?2) { THEN continue; } BODY} ... ?1 ?> ?2 ?> THEN >> [BODY] [DELTA] << ... ---------> --------> --------------------------------> <---------------------------------- Some exceptions based on sun javac optimizations if (?1){ if (?2){THEN} }else{ ELSE } ... One might expect ?1 ?> ?2 ?> [THEN] >> [ELSE] ... -----------------> -------->! -------------> However the conditional branch to the unconditional (!) is optimized away and instead the unconditional inverted and extended ?1 ?> ?2 ?> [THEN] >> [ELSE] ... -----------------> --------"}, {"com.aparapi.internal.model.MethodModel.txFormDups": "DUP family of instructions break our stack unwind model (whereby we treat instructions like the oeprands they create/consume). <p> Here we replace DUP style instructions with a 'mock' instruction which 'clones' the effect of the instruction.  This would be invalid to execute but is useful  to replace the DUP with a 'pattern' which it simulates.  This allows us to later apply transforms to represent the original code.  <p> An example might be the bytecode for the following sequence. <code><pre> results[10]++;  return </pre></code> Which results in the following bytecode <code><pre> 0:   aload_0       // reference through 'this' to get  1:   getfield      // field 'results' which is an array of int 4:   bipush  10    // push the array index 6:   dup2          // dreaded dup2 we'll come back here 7:   iaload        // ignore for the moment. 8:   iconst_1 9:   iadd 10:  iastore 11:  return </pre></code> First we need to know what the stack will look like before the dup2 is encountered. Using our folding technique we represent the first two instructions inside () <pre><code> getfield (aload_0     // result in the array field reference on stack bipush  10            // the array index dup2                  // dreaded dup2 we'll come back here </code></pre> The <code>dup2</code> essentially copies the top two elements on the stack.  So we emulate this by replacing the dup2 with clones of the instructions which would reinstate the same stack state.  <p> So after the <code>dup2</code> transform we end up with:-  <pre><code> getfield (aload_0)     // result in the array field reference on stack bipush  10             // the array index {getfield (aload_0)}   // result in the array field reference on stack {bipush 10}            // the array index </code></pre> So carrying on lets look at the <code>iaload</code> which consumes two operands (the index and the array field reference) and creates one (the result of an array access) <pre><code> getfield (aload_0)     // result in the array field reference on stack bipush  10             // the array index {getfield (aload_0)}   // result in the array field reference on stack {bipush  10}           // the array index iaload  </code></pre> So we now have  <pre><code> getfield (aload_0)                        // result in the array field reference on stack bipush  10                                // the array index iaload ({getfield(aload_0), {bipush 10})  // results in the array element on the stack iconst iadd </code></pre> And if you are following along the <code>iadd</code> will fold the previous two stack entries essentially pushing the result of   <code>results[10]+1<code> on the stack. <pre><code> getfield (aload_0)                                        // result in the array field reference on stack bipush  10                                                // the array index iadd (iaload ({getfield(aload_0), {bipush 10}, iconst_1)  // push of results[10]+1  </code></pre> Then the final <code>istore</code> instruction which consumes 3 stack operands (the field array reference, the index and the value to assign). <p> Which results in  <pre><code>  istore (getfield (aload_0), bipush 10,  iadd (iaload ({getfield(aload_0), {bipush 10}, iconst_1)) // results[10] = results[10+1] </code></pre>  Where <code>results[10] = results[10+1]<code> is the long-hand form of the <code>results[10]++</code> and will be transformed by one of the 'inc' transforms to the more familiar form a little later."}, {"com.aparapi.internal.instruction.ExpressionList.createList": "[1] [2] [3] [4] Note that passing null here essentially deletes the existing expression list and returns the expression"}, {"com.aparapi.internal.instruction.ExpressionList.add": "Add this instruction to the end of the list."}]}, {"index": "74", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/MethodModel.java", "methodName": "com.aparapi.internal.model.MethodModel.checkForGetter", "methodParameterType": "Map<Integer,Instruction>#", "methodParameterName": "pcMap#", "methodBody": "void checkForGetter(Map<Integer, Instruction> pcMap) throws ClassParseException {\n      final String methodName = getMethod().getName();\n      String rawVarNameCandidate = null;\n      boolean mightBeGetter = true;\n\n      if (methodName.startsWith(\"get\")) {\n         rawVarNameCandidate = methodName.substring(3);\n      } else if (methodName.startsWith(\"is\")) {\n         rawVarNameCandidate = methodName.substring(2);\n      } else {\n         mightBeGetter = false;\n      }\n\n      // Getters should have 3 bcs: aload_0, getfield, ?return\n      if (mightBeGetter) {\n         boolean possiblySimpleGetImplementation = pcMap.size() == 3;\n         if ((rawVarNameCandidate != null) && (isNoCL() || possiblySimpleGetImplementation)) {\n            final String firstLetter = rawVarNameCandidate.substring(0, 1).toLowerCase();\n            final String varNameCandidateCamelCased = rawVarNameCandidate.replaceFirst(rawVarNameCandidate.substring(0, 1), firstLetter);\n            String accessedFieldName;\n\n            if (!isNoCL()) {\n\n               Instruction instruction = expressionList.getHead();\n\n               if ((instruction instanceof Return) && (expressionList.getHead() == expressionList.getTail())) {\n                  instruction = instruction.getPrevPC();\n                  if (instruction instanceof AccessInstanceField) {\n                     final FieldEntry field = ((AccessInstanceField) instruction).getConstantPoolFieldEntry();\n                     accessedFieldName = field.getNameAndTypeEntry().getNameUTF8Entry().getUTF8();\n                     if (accessedFieldName.equals(varNameCandidateCamelCased)) {\n\n                        // Verify field type matches return type\n                        final String fieldType = field.getNameAndTypeEntry().getDescriptorUTF8Entry().getUTF8();\n                        final String returnType = getMethod().getDescriptor().substring(2);\n                        //System.out.println( \"### field type = \" + fieldType );\n                        //System.out.println( \"### method args = \" + returnType );\n                        assert (fieldType.length() == 1) && (returnType.length() == 1) : \" can only use basic type getters\";\n\n                        // Allow isFoo style for boolean fields\n                        if ((methodName.startsWith(\"is\") && fieldType.equals(\"Z\")) || (methodName.startsWith(\"get\"))) {\n                           if (fieldType.equals(returnType)) {\n                              if (logger.isLoggable(Level.FINE)) {\n                                 logger.fine(\"Found \" + methodName + \" as a getter for \" + varNameCandidateCamelCased.toLowerCase());\n                              }\n\n                              methodIsGetter = true;\n                              setAccessorVariableFieldEntry(field);\n                              assert methodIsSetter == false : \" cannot be both\";\n                           } else {\n                              throw new ClassParseException(ClassParseException.TYPE.BADGETTERTYPEMISMATCH, methodName);\n\n                           }\n                        }\n                     } else {\n                        throw new ClassParseException(ClassParseException.TYPE.BADGETTERNAMEMISMATCH, methodName);\n                     }\n                  }\n               } else {\n                  throw new ClassParseException(ClassParseException.TYPE.BADGETTERNAMENOTFOUND, methodName);\n               }\n            } else {\n               FieldEntry fieldEntry = getMethod().getOwnerClassModel().getConstantPool().getFieldEntry(varNameCandidateCamelCased);\n               setAccessorVariableFieldEntry(fieldEntry);\n               if (getAccessorVariableFieldEntry() == null) {\n                  throw new ClassParseException(ClassParseException.TYPE.BADGETTERNAMEMISMATCH, methodName);\n               }\n               methodIsGetter = true;\n               if (method.getClassModel().getPrivateMemorySize(fieldEntry.getNameAndTypeEntry().getNameUTF8Entry().getUTF8()) != null)\n               {\n                  methodIsPrivateMemoryGetter = true;\n               }\n            }\n         } else {\n            throw new ClassParseException(ClassParseException.TYPE.BADGETTERNAMENOTFOUND, methodName);\n         }\n      }\n   }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#StringLiteral#AssertStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#InfixExpression#StringLiteral#AssertStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(AssertStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(StringLiteral)StringLiteral)AssertStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ParenthesizedExpression)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(AssertStatement(InfixExpression(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)InfixExpression(StringLiteral)StringLiteral)AssertStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Determine if this method is a getter and record the accessed field if so", "call_func_name": ["com.aparapi.internal.model.MethodModel.getMethod", "java.lang.String.startsWith", "java.lang.String.substring", "java.util.Map.size", "com.aparapi.internal.model.MethodModel.isNoCL", "java.lang.String.substring", "java.lang.String.toLowerCase", "java.lang.String.replaceFirst", "com.aparapi.internal.instruction.ExpressionList.getHead", "com.aparapi.internal.instruction.ExpressionList.getTail", "com.aparapi.internal.instruction.Instruction.getPrevPC", "java.lang.String.equals", "java.lang.String.length", "java.lang.AssertionError.<init>", "java.util.logging.Logger.isLoggable", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.logging.Logger.fine", "com.aparapi.internal.model.ClassModel.getConstantPool", "com.aparapi.internal.model.MethodModel.getAccessorVariableFieldEntry", "com.aparapi.internal.model.ClassModel.getPrivateMemorySize"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], [""], ["int", "int"], [""], ["java.lang.String", "java.lang.String"], [""], [""], [""], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.util.logging.Level"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"]], "passed_comments": [{"com.aparapi.internal.model.ClassModel.getPrivateMemorySize": "If a field does not satisfy the private memory conditions, null, otherwise the size of private memory required."}]}, {"index": "75", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/MethodModel.java", "methodName": "com.aparapi.internal.model.MethodModel.checkForSetter", "methodParameterType": "Map<Integer,Instruction>#", "methodParameterName": "pcMap#", "methodBody": "void checkForSetter(Map<Integer, Instruction> pcMap) throws ClassParseException {\n      final String methodName = getMethod().getName();\n      if (methodName.startsWith(\"set\")) {\n         final String rawVarNameCandidate = methodName.substring(3);\n         final String firstLetter = rawVarNameCandidate.substring(0, 1).toLowerCase();\n         final String varNameCandidateCamelCased = rawVarNameCandidate.replaceFirst(rawVarNameCandidate.substring(0, 1),\n               firstLetter);\n         String accessedFieldName = null;\n         final Instruction instruction = expressionList.getHead();\n\n         // setters should be aload_0, ?load_1, putfield, return\n         if ((instruction instanceof AssignToInstanceField) && (expressionList.getTail() instanceof Return) && (pcMap.size() == 4)) {\n            final Instruction prev = instruction.getPrevPC();\n            if (prev instanceof AccessLocalVariable) {\n               final FieldEntry field = ((AssignToInstanceField) instruction).getConstantPoolFieldEntry();\n               accessedFieldName = field.getNameAndTypeEntry().getNameUTF8Entry().getUTF8();\n               if (accessedFieldName.equals(varNameCandidateCamelCased)) {\n\n                  // Verify field type matches setter arg type\n                  final String fieldType = field.getNameAndTypeEntry().getDescriptorUTF8Entry().getUTF8();\n                  final String setterArgType = getMethod().getDescriptor().substring(1, 2);\n\n                  //System.out.println( \"### field type = \" + fieldType );\n                  //System.out.println( \"### setter type = \" + setterArgType );\n                  assert fieldType.length() == 1 : \" can only use basic type getters\";\n\n                  if (fieldType.equals(setterArgType)) {\n                     if (logger.isLoggable(Level.FINE)) {\n                        logger.fine(\"Found \" + methodName + \" as a setter for \" + varNameCandidateCamelCased.toLowerCase()\n                              + \" of type \" + fieldType);\n                     }\n\n                     methodIsSetter = true;\n                     setAccessorVariableFieldEntry(field);\n\n                     // Setters use putfield which will miss the normal store check\n                     if (fieldType.equals(\"B\") || fieldType.equals(\"Z\")) {\n                        usesByteWrites = true;\n                     }\n\n                     assert methodIsGetter == false : \" cannot be both\";\n                  } else {\n                     throw new ClassParseException(ClassParseException.TYPE.BADSETTERTYPEMISMATCH, methodName);\n                  }\n               } else {\n                  throw new ClassParseException(ClassParseException.TYPE.BADSETTERTYPEMISMATCH, methodName);\n               }\n            }\n         }\n      }\n   }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#StringLiteral#AssertStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#BooleanLiteral#InfixExpression#StringLiteral#AssertStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(ParenthesizedExpression(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(AssertStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral)AssertStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(AssertStatement(InfixExpression(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)InfixExpression(StringLiteral)StringLiteral)AssertStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Determine if this method is a setter and record the accessed field if so", "call_func_name": ["com.aparapi.internal.model.MethodModel.getMethod", "java.lang.String.startsWith", "java.lang.String.substring", "java.lang.String.substring", "java.lang.String.toLowerCase", "java.lang.String.replaceFirst", "com.aparapi.internal.instruction.ExpressionList.getHead", "com.aparapi.internal.instruction.ExpressionList.getTail", "java.util.Map.size", "com.aparapi.internal.instruction.Instruction.getPrevPC", "java.lang.String.equals", "java.lang.String.length", "java.lang.AssertionError.<init>", "java.util.logging.Logger.isLoggable", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.logging.Logger.fine"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], ["int", "int"], [""], ["java.lang.String", "java.lang.String"], [""], [""], [""], [""], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.util.logging.Level"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/ClassModel.java", "methodName": "com.aparapi.internal.model.ClassModel.ClassModel", "methodParameterType": "Class<?>#", "methodParameterName": "_class#", "methodBody": "private ClassModel(Class<?> _class) throws ClassParseException {\n       clazz = _class;\n       try {\n           parse(_class);\n       } catch (ClassNotFoundException e) {\n           e.printStackTrace();\n       }\n\n       final Class<?> mySuper = _class.getSuperclass();\n      // Find better way to do this check\n      // The java.lang.Object test is for unit test framework to succeed - should \n      // not occur in normal use\n      if ((mySuper != null) && (!mySuper.getName().equals(Kernel.class.getName()))\n            && (!mySuper.getName().equals(\"java.lang.Object\"))) {\n         superClazz = createClassModel(mySuper);\n      }\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)ParenthesizedExpression(ParenthesizedExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a ClassModel representing a given Class. The class's classfile must be available from the class's classloader via <code>getClassLoader().getResourceAsStream(name))</code>.  For dynamic languages creating classes on the fly we may need another approach.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/ClassModel.java", "methodName": "com.aparapi.internal.model.ClassModel.isSuperClass", "methodParameterType": "String#", "methodParameterName": "otherClassName#", "methodBody": "public boolean isSuperClass(String otherClassName) {\n      if (getClassWeAreModelling().getName().equals(otherClassName)) {\n         return true;\n      } else if (superClazz != null) {\n         return superClazz.isSuperClass(otherClassName);\n      } else {\n         return false;\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#BooleanLiteral#ReturnStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Determine if this is the superclass of some other named class.", "call_func_name": ["com.aparapi.internal.model.ClassModel.getClassWeAreModelling", "java.lang.Class.getName", "java.lang.String.equals", "com.aparapi.internal.model.ClassModel.isSuperClass"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"com.aparapi.internal.model.ClassModel.isSuperClass": "Determine if this is the superclass of some other named class."}]}, {"index": "78", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/ClassModel.java", "methodName": "com.aparapi.internal.model.ClassModel.isSuperClass", "methodParameterType": "Class<?>#", "methodParameterName": "other#", "methodBody": "public boolean isSuperClass(Class<?> other) {\n      Class<?> s = other.getSuperclass();\n      while (s != null) {\n         if ((getClassWeAreModelling() == s) || (getClassWeAreModelling().getName().equals(s.getName()))) {\n            return true;\n         }\n         s = s.getSuperclass();\n      }\n      return false;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ParenthesizedExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ParenthesizedExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if this is the superclass of some other class.", "call_func_name": ["java.lang.Class.getSuperclass", "com.aparapi.internal.model.ClassModel.getClassWeAreModelling", "java.lang.Class.getName", "java.lang.String.equals"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/ClassModel.java", "methodName": "com.aparapi.internal.model.ClassModel.getSuperClazz", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ClassModel getSuperClazz() {\n      return superClazz;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Getter for superClazz", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "80", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/ClassModel.java", "methodName": "com.aparapi.internal.model.ClassModel.typeName", "methodParameterType": "char#", "methodParameterName": "_typeChar#", "methodBody": "public static String typeName(char _typeChar) {\n      String returnName = null;\n      switch (_typeChar) {\n         case SIGC_VOID:\n            returnName = \"void\";\n            break;\n         case SIGC_INT:\n            returnName = \"int\";\n            break;\n         case SIGC_DOUBLE:\n            returnName = \"double\";\n            break;\n         case SIGC_FLOAT:\n            returnName = \"float\";\n            break;\n         case SIGC_SHORT:\n            returnName = \"short\";\n            break;\n         case SIGC_CHAR:\n            returnName = \"char\";\n            break;\n         case SIGC_BYTE:\n            returnName = \"byte\";\n            break;\n         case SIGC_LONG:\n            returnName = \"long\";\n            break;\n         case SIGC_BOOLEAN:\n            returnName = \"boolean\";\n            break;\n      }\n\n      return (returnName);\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SwitchCase#SimpleName#StringLiteral#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#StringLiteral#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#StringLiteral#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#StringLiteral#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#StringLiteral#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#StringLiteral#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#StringLiteral#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#StringLiteral#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#StringLiteral#Assignment#ExpressionStatement#BreakStatement#SwitchStatement#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)SwitchStatement(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convert a given JNI character type (say 'I') to its type name ('int').", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/ClassModel.java", "methodName": "com.aparapi.internal.model.ClassModel.getPrivateMemorySize", "methodParameterType": "String#", "methodParameterName": "fieldName#", "methodBody": "public Integer getPrivateMemorySize(String fieldName) throws ClassParseException {\n      if (CacheEnabler.areCachesEnabled())\n         return privateMemorySizes.computeIfAbsent(fieldName);\n      return computePrivateMemorySize(fieldName);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If a field does not satisfy the private memory conditions, null, otherwise the size of private memory required.", "call_func_name": ["com.aparapi.internal.model.CacheEnabler.areCachesEnabled", "com.aparapi.internal.model.ValueCache.computeIfAbsent", "com.aparapi.internal.model.ClassModel.computePrivateMemorySize"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/ClassModel.java", "methodName": "com.aparapi.internal.model.ClassModel.getMethod", "methodParameterType": "MethodEntry#boolean#", "methodParameterName": "_methodEntry#_isSpecial#", "methodBody": "public ClassModelMethod getMethod(MethodEntry _methodEntry, boolean _isSpecial) {\n      final String entryClassNameInDotForm = _methodEntry.getClassEntry().getNameUTF8Entry().getUTF8().replace('/', '.');\n\n      // Shortcut direct calls to supers to allow \"foo() { super.foo() }\" type stuff to work\n      if (_isSpecial && (superClazz != null) && superClazz.isSuperClass(entryClassNameInDotForm)) {\n         if (logger.isLoggable(Level.FINE)) {\n            logger.fine(\"going to look in super:\" + superClazz.getClassWeAreModelling().getName() + \" on behalf of \"\n                  + entryClassNameInDotForm);\n         }\n         return superClazz.getMethod(_methodEntry, false);\n      }\n\n      NameAndTypeEntry nameAndTypeEntry = _methodEntry.getNameAndTypeEntry();\n      ClassModelMethod methodOrNull = getMethodOrNull(nameAndTypeEntry.getNameUTF8Entry().getUTF8(), nameAndTypeEntry\n            .getDescriptorUTF8Entry().getUTF8());\n      if (methodOrNull == null)\n         return superClazz != null ? superClazz.getMethod(_methodEntry, false) : (null);\n      return methodOrNull;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#NullLiteral#ParenthesizedExpression#ConditionalExpression#ReturnStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(ParenthesizedExpression(NullLiteral)NullLiteral)ParenthesizedExpression)ConditionalExpression)ReturnStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Look up a ConstantPool MethodEntry and return the corresponding Method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/model/ClassModel.java", "methodName": "com.aparapi.internal.model.ClassModel.getMethodModel", "methodParameterType": "String#String#", "methodParameterName": "_name#_signature#", "methodBody": "public MethodModel getMethodModel(String _name, String _signature) throws AparapiException {\n      if (CacheEnabler.areCachesEnabled())\n         return methodModelCache.computeIfAbsent(MethodKey.of(_name, _signature));\n      else {\n         final ClassModelMethod method = getMethod(_name, _signature);\n         return new MethodModel(method);\n      }\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a MethodModel for a given method name and signature.", "call_func_name": ["com.aparapi.internal.model.CacheEnabler.areCachesEnabled", "com.aparapi.internal.model.MethodKey.of", "com.aparapi.internal.model.ValueCache.computeIfAbsent", "com.aparapi.internal.model.ClassModel.getMethod"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["java.lang.Object"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/instruction/BranchSet.java", "methodName": "com.aparapi.internal.instruction.BranchSet.BranchSet", "methodParameterType": "Branch#", "methodParameterName": "_branch#", "methodBody": "public BranchSet(Branch _branch) {\n      target = _branch.getTarget();\n      last = _branch;\n\n      final Set<Branch> expandedSet = new LinkedHashSet<Branch>();\n      final Instruction fallThroughRoot = last.getNextExpr();\n      fallThrough = fallThroughRoot == null ? last.getNextPC() : fallThroughRoot.getStartInstruction();\n      first = last;\n      while ((first.getPrevExpr() != null) && first.getPrevExpr().isBranch() && first.getPrevExpr().asBranch().isConditional()) {\n         final Instruction prevBranchTarget = first.getPrevExpr().asBranch().getTarget();\n         final Instruction prevBranchTargetRoot = prevBranchTarget.getRootExpr();\n         if ((prevBranchTarget == target) || (prevBranchTarget == fallThrough) || expandedSet.contains(prevBranchTargetRoot)) {\n            expandedSet.add(first);\n            first = first.getPrevExpr().asBranch();\n         } else {\n            break;\n         }\n      }\n      for (Instruction i = first; i != fallThroughRoot; i = i.getNextExpr()) {\n         set.add((ConditionalBranch) i.asBranch());\n         ((ConditionalBranch) i.asBranch()).setBranchSet(this);\n      }\n\n      //   ConditionalBranch16 branches[] = set.toArray(new ConditionalBranch16[0]);\n\n      LogicalExpressionNode end = null;\n      for (final ConditionalBranch cb : set) {\n         final SimpleLogicalExpressionNode sn = new SimpleLogicalExpressionNode(cb);\n         if (logicalExpressionNode == null) {\n            logicalExpressionNode = sn;\n         } else {\n            end.setNext(sn);\n         }\n         end = sn;\n      }\n      int count = 0;\n      while (logicalExpressionNode.next != null) {\n         if (++count > 20) {\n            throw new IllegalStateException(\"Sanity check, we seem to have >20 iterations collapsing logical expression\");\n         }\n         LogicalExpressionNode n = logicalExpressionNode;\n         LogicalExpressionNode prev = null;\n         int i = 0;\n\n         while ((n != null) && (n.getNext() != null)) {\n            if ((n.getTarget() == n.getNext().getTarget()) || (n.getTarget() == n.getNext().getFallThrough())) {\n               LogicalExpressionNode newNode = null;\n               if (n.getTarget() == n.getNext().getTarget()) {\n                  // lhs(n) and rhs(n.next) are branching to the same location so we replace (lhs ?? rhs) with (lhs || rhs)\n                  // System.out.println(\"exp[\"+i+\"] exp[\"+(i+1)+\"] replaced by (exp[\"+i+\"] || exp[\"+(i+1)+\"])\");\n                  newNode = new CompoundLogicalExpressionNode(false, n, n.getNext());\n               } else if (n.getTarget() == n.getNext().getFallThrough()) {\n                  // lhs(n) target and rhs(n.next) fallthrough are the same so we replace (lhs ?? rhs) with !(lhs && rhs)\n                  // System.out.println(\"exp[\"+i+\"] exp[\"+(i+1)+\"] replaced by (!exp[\"+i+\"] && exp[\"+(i+1)+\"])\");\n                  newNode = new CompoundLogicalExpressionNode(true, n, n.getNext());\n               }\n               if (n == logicalExpressionNode) {\n                  logicalExpressionNode = newNode;\n               }\n               if (prev != null) {\n                  prev.setNext(newNode);\n               }\n               break;\n            } else {\n               prev = n;\n               n = n.getNext();\n               i++;\n            }\n         }\n      }\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#BreakStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#EnhancedForStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleType#BooleanLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleType#BooleanLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#BreakStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#Block#WhileStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(WhileStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(BreakStatement)BreakStatement)Block)IfStatement)Block)WhileStatement(ForStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)ForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(BreakStatement)BreakStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement)Block)WhileStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "We construct a branch set with the 'last' branch.  It is assumed that all nodes prior to <code>_branch</code> are folded. This will walk backwards until it finds a non-branch or until it finds a branch that does not below to this set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/instruction/ExpressionList.java", "methodName": "com.aparapi.internal.instruction.ExpressionList.doesNotContainContinueOrBreak", "methodParameterType": "Instruction#Instruction#", "methodParameterName": "_start#_extent#", "methodBody": "public boolean doesNotContainContinueOrBreak(Instruction _start, Instruction _extent) {\n      boolean ok = true;\n      boolean breakOrContinue = false;\n      for (Instruction i = _start; i != null; i = i.getNextExpr()) {\n         if (i.isBranch()) {\n            if (i.asBranch().isForwardUnconditional() && i.asBranch().getTarget().isAfter(_extent)) {\n               breakOrContinue = true;\n            } else {\n               ok = false;\n               break;\n            }\n         }\n      }\n      if (ok) {\n         if (breakOrContinue) {\n            for (Instruction i = _start; i != null; i = i.getNextExpr()) {\n               if (i.isBranch() && i.asBranch().isForwardUnconditional() && i.asBranch().getTarget().isAfter(_extent)) {\n                  i.asBranch().setBreakOrContinue(true);\n               }\n            }\n         }\n      }\n      return (ok);\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#Block#IfStatement#Block#IfStatement#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)IfStatement)Block)ForStatement(IfStatement(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ForStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine whether the sequence of instructions from _start to _extent is free of branches which extend beyond _extent.  As a side effect, if we find a possible branch it is likely a break or continue so we mark the conditional as such.", "call_func_name": ["com.aparapi.internal.instruction.Instruction.isBranch", "com.aparapi.internal.instruction.Instruction.asBranch", "com.aparapi.internal.instruction.Instruction.isAfter", "com.aparapi.internal.instruction.Instruction.getNextExpr"], "call_func_parameter": [[""], [""], ["com.aparapi.internal.instruction.Instruction"], [""]], "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/instruction/ExpressionList.java", "methodName": "com.aparapi.internal.instruction.ExpressionList.createList", "methodParameterType": "Instruction#", "methodParameterName": "_newTail#", "methodBody": "public Instruction createList(final Instruction _newTail) {\n      Instruction childExprHead = null;\n      if (_newTail == null) {\n         childExprHead = head;\n         tail = head = null;\n      } else {\n         childExprHead = _newTail.getNextExpr();\n         tail = _newTail;\n         _newTail.setNextExpr(null);\n         if (childExprHead != null) {\n            childExprHead.setPrevExpr(null);\n         }\n\n      }\n      return (childExprHead);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#Assignment#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "[1] [2] [3] [4] Note that passing null here essentially deletes the existing expression list and returns the expression", "call_func_name": ["com.aparapi.internal.instruction.Instruction.getNextExpr", "com.aparapi.internal.instruction.Instruction.setNextExpr", "com.aparapi.internal.instruction.Instruction.setPrevExpr"], "call_func_parameter": [[""], ["com.aparapi.internal.instruction.Instruction"], ["com.aparapi.internal.instruction.Instruction"]], "passed_comments": "/"}, {"index": "87", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/instruction/ExpressionList.java", "methodName": "com.aparapi.internal.instruction.ExpressionList.add", "methodParameterType": "Instruction#", "methodParameterName": "_instruction#", "methodBody": "public Instruction add(Instruction _instruction) {\n\n      if (head == null) {\n         head = _instruction;\n      } else {\n         _instruction.setPrevExpr(tail);\n         tail.setNextExpr(_instruction);\n\n      }\n\n      tail = _instruction;\n      logger.log(Level.FINE, \"After PUSH of \" + _instruction + \" tail=\" + tail);\n      return (tail);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add this instruction to the end of the list.", "call_func_name": ["com.aparapi.internal.instruction.Instruction.setPrevExpr", "com.aparapi.internal.instruction.Instruction.setNextExpr", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.logging.Logger.log"], "call_func_parameter": [["com.aparapi.internal.instruction.Instruction"], ["com.aparapi.internal.instruction.Instruction"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.util.logging.Level", "java.lang.String"]], "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/instruction/ExpressionList.java", "methodName": "com.aparapi.internal.instruction.ExpressionList.insertBetween", "methodParameterType": "Instruction#Instruction#Instruction#", "methodParameterName": "_prev#_next#_newOne#", "methodBody": "public void insertBetween(Instruction _prev, Instruction _next, Instruction _newOne) {\n      _newOne.setNextExpr(null);\n      _newOne.setPrevExpr(null);\n      if (_prev == null) {\n         // this is the new head\n         if (_next == null) {\n            head = tail = _newOne;\n         } else {\n            _newOne.setNextExpr(head);\n            head.setPrevExpr(_newOne);\n            head = _newOne;\n         }\n      } else if (_next == null) {\n         _newOne.setPrevExpr(tail);\n         tail.setNextExpr(_newOne);\n         tail = _newOne;\n      } else {\n         _newOne.setNextExpr(_prev.getNextExpr());\n         _newOne.setPrevExpr(_next.getPrevExpr());\n         _prev.setNextExpr(_newOne);\n         _next.setPrevExpr(_newOne);\n      }\n\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#Assignment#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Insert the given instruction (_newone) between the existing entries (_prev and _next).", "call_func_name": ["com.aparapi.internal.instruction.Instruction.setNextExpr", "com.aparapi.internal.instruction.Instruction.setPrevExpr", "com.aparapi.internal.instruction.Instruction.getNextExpr", "com.aparapi.internal.instruction.Instruction.getPrevExpr"], "call_func_parameter": [["com.aparapi.internal.instruction.Instruction"], ["com.aparapi.internal.instruction.Instruction"], [""], [""]], "passed_comments": "/"}, {"index": "89", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/instruction/ExpressionList.java", "methodName": "com.aparapi.internal.instruction.ExpressionList.replaceInclusive", "methodParameterType": "Instruction#Instruction#Instruction#", "methodParameterName": "_head#_tail#_newOne#", "methodBody": "public void replaceInclusive(Instruction _head, Instruction _tail, Instruction _newOne) {\n      _newOne.setNextExpr(null);\n      _newOne.setPrevExpr(null);\n      final Instruction prevHead = _head.getPrevExpr();\n      if (_tail == null) {\n         // this is the new tail\n         _newOne.setPrevExpr(prevHead);\n         prevHead.setNextExpr(_newOne);\n         tail = _newOne;\n      } else {\n         final Instruction tailNext = _tail.getNextExpr();\n         if (prevHead == null) {\n            // this is the new head\n            if (tailNext == null) {\n               head = tail = _newOne;\n            } else {\n               _newOne.setNextExpr(head);\n               head.setPrevExpr(_newOne);\n               head = _newOne;\n            }\n         } else if (tailNext == null) {\n            _newOne.setPrevExpr(prevHead);\n            prevHead.setNextExpr(_newOne);\n            tail = _newOne;\n            _head.setPrevExpr(null);\n         } else {\n            _newOne.setNextExpr(tailNext);\n            _newOne.setPrevExpr(prevHead);\n            prevHead.setNextExpr(_newOne);\n            tailNext.setPrevExpr(_newOne);\n\n         }\n         _tail.setNextExpr(null);\n         _head.setPrevExpr(null);\n      }\n\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#Assignment#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Inclusive replace between _head and _tail with _newOne.  <pre> |      | --> |       | ---> ... ---> |       | ---> |      | | prev |     | _head |               | _tail |      | next | |      | <-- |       | <--- ... <----|       | <--- |      | </pre> To  <pre> |      | --> |         | ---> |      | | prev |     | _newOne |      | next | |      | <-- |         | <--- |      | </pre>", "call_func_name": ["com.aparapi.internal.instruction.Instruction.setNextExpr", "com.aparapi.internal.instruction.Instruction.setPrevExpr", "com.aparapi.internal.instruction.Instruction.getPrevExpr", "com.aparapi.internal.instruction.Instruction.getNextExpr"], "call_func_parameter": [["com.aparapi.internal.instruction.Instruction"], ["com.aparapi.internal.instruction.Instruction"], [""], [""]], "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/instruction/ExpressionList.java", "methodName": "com.aparapi.internal.instruction.ExpressionList.foldComposite", "methodParameterType": "Instruction#", "methodParameterName": "_instruction#", "methodBody": "public boolean foldComposite(final Instruction _instruction) throws ClassParseException {\n        boolean handled = false;\n        if (logger.isLoggable(Level.FINE)) {\n            System.out.println(\"foldComposite: curr = \" + _instruction);\n            System.out.println(dumpDiagram(_instruction));\n            // System.out.println(dumpDiagram(null, _instruction));\n        }\n        if (_instruction.isForwardBranchTarget() || ((tail != null) && tail.isBranch() && tail.asBranch().isReverseConditional())) {\n            while (_instruction.isForwardBranchTarget()\n                || ((tail != null) && tail.isBranch() && tail.asBranch().isReverseConditional())) {\n                if (logger.isLoggable(Level.FINE)) {\n                    System.out.println(dumpDiagram(_instruction));\n\n                }\n                handled = false;\n\n                if ((tail != null) && tail.isBranch() && tail.asBranch().isReverseConditional()) {\n                    /**\n                     * This looks like an eclipse style for/while loop or possibly a do{}while()\n                     * <pre>\n                     * eclipse for (INIT,??,DELTA){BODY} ...\n                     *    [INIT] >> [BODY] [DELTA] ?? ?< ...\n                     *            ---------------->\n                     *              <-----------------\n                     *\n                     * eclipse for (,??,DELTA){BODY} ...\n                     *    >> [BODY] [DELTA] ?? ?< ...\n                     *     --------------->\n                     *       <-----------------\n                     *\n                     * do {BODY} while(??)\n                     *    [BODY] ?? ?< ...\n                     *    <-----------\n                     *\n                     * eclipse while (??){BODY} ...\n                     *    >> [BODY] ?? ?< ...\n                     *     -------->\n                     *       <----------\n                     * </pre>\n                     **/\n                    final BranchSet branchSet = ((ConditionalBranch) tail.asBranch()).getOrCreateBranchSet();\n                    Instruction loopTop = branchSet.getTarget().getRootExpr();\n                    final Instruction beginingOfBranch = branchSet.getFirst();\n\n                    final Instruction startOfBeginningOfBranch = beginingOfBranch.getStartInstruction();\n                    // empty loops sometimes look like eclipse loops!\n                    if (startOfBeginningOfBranch == loopTop) {\n\n                        loopTop = loopTop.getPrevExpr();\n                        if (loopTop instanceof AssignToLocalVariable) {\n                            final LocalVariableInfo localVariableInfo = ((AssignToLocalVariable) loopTop).getLocalVariableInfo();\n                            if ((localVariableInfo.getStart() == loopTop.getNextExpr().getStartPC())\n                                && (localVariableInfo.getEnd() == _instruction.getThisPC())) {\n                                loopTop = loopTop.getPrevExpr(); // back up over the initialization\n                            }\n                        }\n                        addAsComposites(ByteCode.COMPOSITE_EMPTY_LOOP, loopTop, branchSet);\n                        handled = true;\n                    } else {\n\n                        if ((loopTop.getPrevExpr() != null) && loopTop.getPrevExpr().isBranch()\n                            && loopTop.getPrevExpr().asBranch().isForwardUnconditional()) {\n                            if (doesNotContainCompositeOrBranch(branchSet.getTarget().getRootExpr(), branchSet.getFirst().getPrevExpr())) {\n                                branchSet.unhook();\n                                loopTop.getPrevExpr().asBranch().unhook();\n                                loopTop = loopTop.getPrevExpr();\n                                // looptop == the unconditional?\n                                loopTop = loopTop.getPrevExpr();\n                                if (loopTop instanceof AssignToLocalVariable) {\n                                    final LocalVariableInfo localVariableInfo = ((AssignToLocalVariable) loopTop).getLocalVariableInfo();\n                                    if ((localVariableInfo.getStart() == loopTop.getNextExpr().getStartPC())\n                                        && (localVariableInfo.getEnd() == _instruction.getThisPC())) {\n                                        loopTop = loopTop.getPrevExpr(); // back up over the initialization\n                                    }\n                                }\n                                addAsComposites(ByteCode.COMPOSITE_FOR_ECLIPSE, loopTop, branchSet);\n                                handled = true;\n                            }\n                        }\n                        if (!handled) {\n                            // do{}while()_ do not require any previous instruction\n                            if (loopTop.getPrevExpr() == null) {\n                                throw new IllegalStateException(\"might be a dowhile with no provious expression\");\n\n                            } else if (!(loopTop.getPrevExpr().isBranch() && loopTop.getPrevExpr().asBranch().isForwardUnconditional())) {\n                                if (doesNotContainCompositeOrBranch(branchSet.getTarget().getRootExpr(), branchSet.getFirst()\n                                    .getPrevExpr())) {\n                                    loopTop = loopTop.getPrevExpr();\n                                    branchSet.unhook();\n                                    addAsComposites(ByteCode.COMPOSITE_DO_WHILE, loopTop, branchSet);\n                                    handled = true;\n                                }\n                            } else {\n                                throw new IllegalStateException(\"might be mistaken for a do while!\");\n                            }\n                        }\n                    }\n                }\n                if (!handled && _instruction.isForwardConditionalBranchTarget() && tail.isBranch()\n                    && tail.asBranch().isReverseUnconditional()) {\n\n                    /**\n                     * This is s sun style loop\n                     * <pre>\n                     * sun for (INIT,??,DELTA){BODY} ...\n                     *\n                     *    [INIT] ?? ?> [BODY] [DELTA] << ...\n                     *               ------------------>\n                     *            <-------------------\n                     *\n                     * sun for (,??,DELTA){BODY} ...\n                     *\n                     *     ?? ?> [BODY] [DELTA] << ...\n                     *         ------------------>\n                     *      <-------------------\n                     *\n                     * sun while (?){l} ...\n                     *\n                     *    ?? ?> [BODY] << ...\n                     *         ----------->\n                     *     <------------\n                     *\n                     *</pre>\n                     */\n                    final ConditionalBranch lastForwardConditional = _instruction.getForwardConditionalBranches().getLast();\n                    final BranchSet branchSet = lastForwardConditional.getOrCreateBranchSet();\n                    final Branch reverseGoto = tail.asBranch();\n                    final Instruction loopBackTarget = reverseGoto.getTarget();\n                    if (loopBackTarget.getReverseUnconditionalBranches().size() > 1) {\n                        throw new ClassParseException(ClassParseException.TYPE.CONFUSINGBRANCHESPOSSIBLYCONTINUE);\n                    }\n                    if (_instruction.isForwardUnconditionalBranchTarget()) {\n                        /**\n                         * Check if we have a break\n                         * <pre>\n                         *    ?? ?> [BODY] ?1 ?> >> [BODY] << ...\n                         *         -------------------------->\n                         *                     ---->\n                         *                        ----------->\n                         *     <----------------------------\n                         *\n                         *</pre>\n                         */\n                        final Branch lastForwardUnconditional = _instruction.getForwardUnconditionalBranches().getLast();\n                        if ((lastForwardUnconditional != null) && lastForwardUnconditional.isAfter(lastForwardConditional)) {\n                            throw new ClassParseException(ClassParseException.TYPE.CONFUSINGBRANCHESPOSSIBLYBREAK);\n                        }\n                    }\n                    if (loopBackTarget != branchSet.getFirst().getStartInstruction()) {\n                        /**\n                         * we may have a if(?1){while(?2){}}else{...} where the else goto has been optimized away.\n                         * <pre>\n                         *   One might expect\n                         *    ?1 ?> ?2 ?> [BODY] << >> [ELSE] ...\n                         *        ------------------->\n                         *              ----------->!\n                         *            <----------\n                         *                           -------->\n                         *\n                         *   However as above the conditional branch to the unconditional (!) can be optimized away and the conditional inverted and extended\n                         *    ?1 ?> ?2 ?> [BODY] << >> [ELSE] ...\n                         *        -------------------->\n                         *              -----------*--------->\n                         *            <-----------\n                         *\n                         *   However we can also now remove the forward unconditional completely as it is unreachable\n                         *    ?1 ?> ?2 ?> [BODY] << [ELSE] ...\n                         *        ----------------->\n                         *              ------------------>\n                         *            <-----------\n                         *\n                         * </pre>\n                         */\n\n                        final Instruction loopbackTargetRoot = loopBackTarget.getRootExpr();\n                        if (loopbackTargetRoot.isBranch() && loopbackTargetRoot.asBranch().isConditional()) {\n                            final ConditionalBranch topOfRealLoop = (ConditionalBranch) loopbackTargetRoot.asBranch();\n                            BranchSet extentBranchSet = topOfRealLoop.getBranchSet();\n                            if (topOfRealLoop.getBranchSet() == null) {\n                                extentBranchSet = topOfRealLoop.findEndOfConditionalBranchSet(_instruction.getNextPC())\n                                    .getOrCreateBranchSet();\n                            }\n                            // We believe that this extendBranchSet is the real top of the while.\n                            if (doesNotContainCompositeOrBranch(extentBranchSet.getLast().getNextExpr(), reverseGoto)) {\n\n                                Instruction loopTop = topOfRealLoop.getPrevExpr();\n                                if (loopTop instanceof AssignToLocalVariable) {\n                                    final LocalVariableInfo localVariableInfo = ((AssignToLocalVariable) loopTop).getLocalVariableInfo();\n                                    if ((localVariableInfo.getStart() == loopTop.getNextExpr().getStartPC())\n                                        && (localVariableInfo.getEnd() == _instruction.getThisPC())) {\n                                        loopTop = loopTop.getPrevExpr(); // back up over the initialization\n                                    }\n                                }\n                                extentBranchSet.unhook();\n\n                                addAsComposites(ByteCode.COMPOSITE_FOR_SUN, loopTop, extentBranchSet);\n                                final UnconditionalBranch fakeGoto = new FakeGoto(methodModel, extentBranchSet.getLast().getTarget());\n\n                                add(fakeGoto);\n                                extentBranchSet.getLast().getTarget().addBranchTarget(fakeGoto);\n\n                                handled = true;\n                            }\n                        }\n                    } else {\n                        /**\n                         * Just a normal sun style loop\n                         */\n                        if (doesNotContainCompositeOrBranch(branchSet.getLast().getNextExpr(), reverseGoto)) {\n                            Instruction loopTop = reverseGoto.getTarget().getRootExpr().getPrevExpr();\n\n                            if (logger.isLoggable(Level.FINEST)) {\n                                Instruction next = branchSet.getFirst().getNextExpr();\n                                System.out.println(\"### for/while candidate exprs: \" + branchSet.getFirst());\n                                while (next != null) {\n                                    System.out.println(\"### expr = \" + next);\n                                    next = next.getNextExpr();\n                                }\n                            }\n\n                            if (loopTop instanceof AssignToLocalVariable) {\n                                final LocalVariableInfo localVariableInfo = ((AssignToLocalVariable) loopTop).getLocalVariableInfo();\n                                if ((localVariableInfo != null)\n                                    && (localVariableInfo.getStart() == loopTop.getNextExpr().getStartPC())\n                                    && (localVariableInfo.getEnd() == _instruction.getThisPC())) {\n                                    loopTop = loopTop.getPrevExpr(); // back up over the initialization\n\n                                }\n                            }\n                            branchSet.unhook();\n\n                            // If there is an inner scope, it is likely that the loop counter var\n                            // is modified using an inner scope variable so use while rather than for\n                            if (reverseGoto.getPrevExpr() instanceof CompositeArbitraryScopeInstruction) {\n                                addAsComposites(ByteCode.COMPOSITE_WHILE, loopTop, branchSet);\n                            } else {\n                                addAsComposites(ByteCode.COMPOSITE_FOR_SUN, loopTop, branchSet);\n                            }\n                            handled = true;\n                        }\n\n                    }\n                }\n                if (!handled && !tail.isForwardBranch() && _instruction.isForwardConditionalBranchTarget()) {\n                    /**\n                     * This an if(exp)\n                     *<pre>             *\n                     * if(??){then}...\n                     *   ?? ?> [THEN] ...\n                     *       -------->\n                     *\n                     *</pre>\n                     */\n                    final ConditionalBranch lastForwardConditional = _instruction.getForwardConditionalBranches().getLast();\n                    final BranchSet branchSet = lastForwardConditional.getOrCreateBranchSet();\n                    if (doesNotContainContinueOrBreak(branchSet.getLast().getNextExpr(), _instruction)) {\n                        branchSet.unhook();\n                        addAsComposites(ByteCode.COMPOSITE_IF, branchSet.getFirst().getPrevExpr(), branchSet);\n                        handled = true;\n                    }\n                }\n                if (!handled && !tail.isForwardBranch() && _instruction.isForwardUnconditionalBranchTarget()) {\n\n                    final LinkedList<Branch> forwardUnconditionalBranches = _instruction.getForwardUnconditionalBranches();\n\n                    final Branch lastForwardUnconditional = forwardUnconditionalBranches.getLast();\n                    final Instruction afterGoto = lastForwardUnconditional.getNextExpr();\n                    if (afterGoto.getStartInstruction().isForwardConditionalBranchTarget()) {\n                        final LinkedList<ConditionalBranch> forwardConditionalBranches = afterGoto.getStartInstruction()\n                            .getForwardConditionalBranches();\n                        final ConditionalBranch lastForwardConditional = forwardConditionalBranches.getLast();\n                        final BranchSet branchSet = lastForwardConditional.getOrCreateBranchSet();\n\n                        if (doesNotContainCompositeOrBranch(branchSet.getLast().getNextExpr(), lastForwardUnconditional)) {\n                            if (doesNotContainContinueOrBreak(afterGoto.getNextExpr(), _instruction)) {\n                                branchSet.unhook();\n                                lastForwardUnconditional.unhook();\n                                addAsComposites(ByteCode.COMPOSITE_IF_ELSE, branchSet.getFirst().getPrevExpr(), branchSet);\n                                handled = true;\n                            }\n                        } else {\n                            //then not clean.\n                            final ExpressionList newHeadTail = new ExpressionList(methodModel, this, lastForwardUnconditional);\n                            handled = newHeadTail.foldComposite(lastForwardUnconditional.getStartInstruction());\n                            newHeadTail.unwind();\n                            // handled = foldCompositeRecurse(lastForwardUnconditional);\n                            if (!handled && (forwardUnconditionalBranches.size() > 1)) {\n                                //  BI  AI      AE      BE\n                                //  ?>  ?>  ..  >>  ..  >>   C   S\n                                //  ?---------------------->22\n                                //      ?---------->18\n                                //              +-------------->31\n                                //                      +------>31\n                                // Javac sometimes performs the above optimization.  Basically the GOTO for the inner IFELSE(AI,AE) instead of targeting the GOTO\n                                // from the outer IFELSE(B1,BE) so instead of AE->BE->... we have AE-->...\n                                //\n                                // So given more than one target we retreat up the list of unconditionals until we find a clean one treating the previously visited GOTO\n                                // as a possible end\n\n                                for (int i = forwardUnconditionalBranches.size(); i > 1; i--) {\n                                    final Branch thisGoto = forwardUnconditionalBranches.get(i - 1);\n                                    final Branch elseGoto = forwardUnconditionalBranches.get(i - 2);\n                                    final Instruction afterElseGoto = elseGoto.getNextExpr();\n                                    if (afterElseGoto.getStartInstruction().isConditionalBranchTarget()) {\n                                        final BranchSet elseBranchSet = afterElseGoto.getStartInstruction()\n                                            .getForwardConditionalBranches().getLast().getOrCreateBranchSet();\n                                        if (doesNotContainCompositeOrBranch(elseBranchSet.getLast().getNextExpr(), elseGoto)) {\n                                            if (doesNotContainCompositeOrBranch(afterElseGoto.getNextExpr(), thisGoto)) {\n                                                if (logger.isLoggable(Level.FINE)) {\n                                                    System.out.println(dumpDiagram(_instruction));\n                                                }\n                                                elseBranchSet.unhook();\n                                                elseGoto.unhook();\n                                                if (logger.isLoggable(Level.FINE)) {\n                                                    System.out.println(dumpDiagram(_instruction));\n\n                                                }\n\n                                                final CompositeInstruction composite = CompositeInstruction.create(\n                                                    ByteCode.COMPOSITE_IF_ELSE, methodModel, elseBranchSet.getFirst(), thisGoto,\n                                                    elseBranchSet);\n                                                replaceInclusive(elseBranchSet.getFirst(), thisGoto.getPrevExpr(), composite);\n\n                                                handled = true;\n\n                                                break;\n                                            }\n                                        }\n                                    }\n\n                                }\n\n                            }\n                        }\n\n                    }\n\n                }\n                if (!handled && !tail.isForwardBranch() && _instruction.isForwardConditionalBranchTarget()\n                    && _instruction.isForwardUnconditionalBranchTarget()) {\n                    // here we have multiple composites ending at the same point\n\n                    final Branch lastForwardUnconditional = _instruction.getForwardUnconditionalBranches().getLast();\n                    final ConditionalBranch lastForwardConditional = _instruction.getStartInstruction()\n                        .getForwardConditionalBranches().getLast();\n                    // we will clip the tail and see if recursing helps\n\n                    if (lastForwardConditional.getTarget().isAfter(lastForwardUnconditional)) {\n\n                        lastForwardConditional.retarget(lastForwardUnconditional);\n\n                        final ExpressionList newHeadTail = new ExpressionList(methodModel, this, lastForwardUnconditional);\n                        handled = newHeadTail.foldComposite(lastForwardUnconditional.getStartInstruction());\n                        newHeadTail.unwind();\n\n                    }\n\n                }\n                if (!handled) {\n                    break;\n                }\n            }\n\n        } else {\n\n            // might be end of arbitrary scope\n            final LocalVariableTableEntry<LocalVariableInfo> localVariableTable = methodModel.getMethod()\n                .getLocalVariableTableEntry();\n            int startPc = Short.MAX_VALUE;\n\n            for (final LocalVariableInfo localVariableInfo : localVariableTable) {\n                if (localVariableInfo.getEnd() == _instruction.getThisPC()) {\n                    logger.fine(localVariableInfo.getVariableName() + \"  scope  \" + localVariableInfo.getStart() + \" ,\"\n                        + localVariableInfo.getEnd());\n                    if (localVariableInfo.getStart() < startPc) {\n                        startPc = localVariableInfo.getStart();\n                    }\n                }\n            }\n            if (startPc < Short.MAX_VALUE) {\n                logger.fine(\"Scope block from \" + startPc + \" to  \" + (tail.getThisPC() + tail.getLength()));\n                for (Instruction i = head; i != null; i = i.getNextPC()) {\n                    if (i.getThisPC() == startPc) {\n                        final Instruction j = i.getRootExpr().getPrevExpr();\n                        final Instruction startInstruction =  j == null ? i : j;\n                        logger.fine(\"Start = \" + startInstruction);\n\n                        addAsComposites(ByteCode.COMPOSITE_ARBITRARY_SCOPE, startInstruction.getPrevExpr(), null);\n                        handled = true;\n                        break;\n                    }\n                }\n\n            }\n\n        }\n\n        if (Config.instructionListener != null) {\n            Config.instructionListener.showAndTell(\"after folding\", head, _instruction);\n        }\n        return (handled);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#ForStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#PrefixExpression#BreakStatement#Block#IfStatement#Block#WhileStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#ForStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(WhileStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block(IfStatement(PrefixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)PrefixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)ForStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement)Block)WhileStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)ForStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fold headTail.tail into valid composites <pre> if(??){then}... ?? ?> [THEN] ... --------> if (??){THEN}else{ELSE}... ?? ?> [THEN] >> [ELSE] ... ------------> --------> sun for (INIT,??,DELTA){BODY} ... [INIT] ?? ?> [BODY] [DELTA] << ... ------------------> <------------------- sun for (,??,DELTA){BODY} ... ?? ?> [BODY] [DELTA] << ... ------------------> <------------------- sun while (?){l} ... ?? ?> [BODY] << ... -----------> <------------ eclipse for (INIT,??,DELTA){BODY} ... [INIT] >> [BODY] [DELTA] ?? ?< ... ----------------> <----------------- eclipse for (,??,DELTA){BODY} ... >> [BODY] [DELTA] ?? ?< ... ---------------> <----------------- eclipse while (??){BODY} ... >> [BODY] ?? ?< ... --------> <---------- eclipe if (?1) { while (?2) {BODY} } else {ELSE} ... ?1 ?> >> [BODY] ?2 ?< >> [ELSE] ... ---------> <--------- ---------------------> --------> sun for (,?1,DELTA){ if (?2) { THEN break; } BODY} ... ?1 ?> ?2 ?> [THEN] >> [BODY] [DELTA] << ... -----------> ----------------------------------> ------------------> <------------------------------------ sun for (,?1,DELTA){ if (?2) { THEN continue; } BODY} ... ?1 ?> ?2 ?> THEN >> [BODY] [DELTA] << ... ---------> --------> --------------------------------> <---------------------------------- Some exceptions based on sun javac optimizations if (?1){ if (?2){THEN} }else{ ELSE } ... One might expect ?1 ?> ?2 ?> [THEN] >> [ELSE] ... -----------------> -------->! -------------> However the conditional branch to the unconditional (!) is optimized away and instead the unconditional inverted and extended ?1 ?> ?2 ?> [THEN] >> [ELSE] ... -----------------> --------", "call_func_name": ["java.util.logging.Logger.isLoggable", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.io.PrintStream.println", "com.aparapi.internal.instruction.ExpressionList.dumpDiagram", "com.aparapi.internal.instruction.Instruction.isForwardBranchTarget", "com.aparapi.internal.instruction.Instruction.isBranch", "com.aparapi.internal.instruction.Instruction.asBranch", "com.aparapi.internal.instruction.BranchSet.getTarget", "com.aparapi.internal.instruction.Instruction.getRootExpr", "com.aparapi.internal.instruction.BranchSet.getFirst", "com.aparapi.internal.instruction.Instruction.getStartInstruction", "com.aparapi.internal.instruction.Instruction.getPrevExpr", "com.aparapi.internal.instruction.Instruction.getNextExpr", "com.aparapi.internal.instruction.Instruction.getStartPC", "com.aparapi.internal.instruction.Instruction.getThisPC", "com.aparapi.internal.instruction.ExpressionList.doesNotContainCompositeOrBranch", "com.aparapi.internal.instruction.BranchSet.unhook", "java.lang.IllegalStateException.<init>", "com.aparapi.internal.instruction.Instruction.isForwardConditionalBranchTarget", "com.aparapi.internal.instruction.Instruction.getForwardConditionalBranches", "java.util.LinkedList.getLast", "com.aparapi.internal.instruction.Instruction.getReverseUnconditionalBranches", "java.util.LinkedList.size", "com.aparapi.internal.instruction.Instruction.isForwardUnconditionalBranchTarget", "com.aparapi.internal.instruction.Instruction.getForwardUnconditionalBranches", "com.aparapi.internal.instruction.Instruction.getNextPC", "com.aparapi.internal.instruction.BranchSet.getLast", "com.aparapi.internal.instruction.ExpressionList.add", "com.aparapi.internal.instruction.Instruction.isForwardBranch", "com.aparapi.internal.instruction.ExpressionList.doesNotContainContinueOrBreak", "com.aparapi.internal.instruction.ExpressionList.<init>", "com.aparapi.internal.instruction.ExpressionList.foldComposite", "com.aparapi.internal.instruction.ExpressionList.unwind", "java.util.LinkedList.get", "com.aparapi.internal.instruction.Instruction.isConditionalBranchTarget", "com.aparapi.internal.instruction.ExpressionList.replaceInclusive", "com.aparapi.internal.instruction.Instruction.isAfter", "com.aparapi.internal.model.MethodModel.getMethod", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.append", "java.util.logging.Logger.fine", "com.aparapi.internal.instruction.Instruction.getLength"], "call_func_parameter": [["java.util.logging.Level"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["com.aparapi.internal.instruction.Instruction"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["com.aparapi.internal.instruction.Instruction", "com.aparapi.internal.instruction.Instruction"], [""], ["java.lang.String"], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["com.aparapi.internal.instruction.Instruction"], [""], ["com.aparapi.internal.instruction.Instruction", "com.aparapi.internal.instruction.Instruction"], ["com.aparapi.internal.model.MethodModel", "com.aparapi.internal.instruction.ExpressionList", "com.aparapi.internal.instruction.Instruction"], ["com.aparapi.internal.instruction.Instruction"], [""], ["int"], [""], ["com.aparapi.internal.instruction.Instruction", "com.aparapi.internal.instruction.Instruction", "com.aparapi.internal.instruction.Instruction"], ["com.aparapi.internal.instruction.Instruction"], [""], [""], [""], ["int"], ["java.lang.String"], [""]], "passed_comments": [{"com.aparapi.internal.instruction.ExpressionList.dumpDiagram": "Aids debugging.  Creates a diagrammatic form of the roots (+ tail instruction) so that we can analyze control flow.  <pre> I I I C C I U I U[I]I |---------->1 |---->1 |------>2 |-->2 </pre>"}, {"com.aparapi.internal.instruction.ExpressionList.add": "Add this instruction to the end of the list."}, {"com.aparapi.internal.instruction.ExpressionList.doesNotContainContinueOrBreak": "Determine whether the sequence of instructions from _start to _extent is free of branches which extend beyond _extent.  As a side effect, if we find a possible branch it is likely a break or continue so we mark the conditional as such."}, {"com.aparapi.internal.instruction.ExpressionList.foldComposite": "Fold headTail.tail into valid composites <pre> if(??){then}... ?? ?> [THEN] ... --------> if (??){THEN}else{ELSE}... ?? ?> [THEN] >> [ELSE] ... ------------> --------> sun for (INIT,??,DELTA){BODY} ... [INIT] ?? ?> [BODY] [DELTA] << ... ------------------> <------------------- sun for (,??,DELTA){BODY} ... ?? ?> [BODY] [DELTA] << ... ------------------> <------------------- sun while (?){l} ... ?? ?> [BODY] << ... -----------> <------------ eclipse for (INIT,??,DELTA){BODY} ... [INIT] >> [BODY] [DELTA] ?? ?< ... ----------------> <----------------- eclipse for (,??,DELTA){BODY} ... >> [BODY] [DELTA] ?? ?< ... ---------------> <----------------- eclipse while (??){BODY} ... >> [BODY] ?? ?< ... --------> <---------- eclipe if (?1) { while (?2) {BODY} } else {ELSE} ... ?1 ?> >> [BODY] ?2 ?< >> [ELSE] ... ---------> <--------- ---------------------> --------> sun for (,?1,DELTA){ if (?2) { THEN break; } BODY} ... ?1 ?> ?2 ?> [THEN] >> [BODY] [DELTA] << ... -----------> ----------------------------------> ------------------> <------------------------------------ sun for (,?1,DELTA){ if (?2) { THEN continue; } BODY} ... ?1 ?> ?2 ?> THEN >> [BODY] [DELTA] << ... ---------> --------> --------------------------------> <---------------------------------- Some exceptions based on sun javac optimizations if (?1){ if (?2){THEN} }else{ ELSE } ... One might expect ?1 ?> ?2 ?> [THEN] >> [ELSE] ... -----------------> -------->! -------------> However the conditional branch to the unconditional (!) is optimized away and instead the unconditional inverted and extended ?1 ?> ?2 ?> [THEN] >> [ELSE] ... -----------------> --------"}, {"com.aparapi.internal.instruction.ExpressionList.replaceInclusive": "Inclusive replace between _head and _tail with _newOne.  <pre> |      | --> |       | ---> ... ---> |       | ---> |      | | prev |     | _head |               | _tail |      | next | |      | <-- |       | <--- ... <----|       | <--- |      | </pre> To  <pre> |      | --> |         | ---> |      | | prev |     | _newOne |      | next | |      | <-- |         | <--- |      | </pre>"}]}, {"index": "91", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/instruction/ExpressionList.java", "methodName": "com.aparapi.internal.instruction.ExpressionList.dumpDiagram", "methodParameterType": "Instruction#", "methodParameterName": "_instruction#", "methodBody": "public String dumpDiagram(Instruction _instruction) {\n      final StringBuilder sb = new StringBuilder();\n      final List<Instruction> list = new ArrayList<Instruction>();\n\n      for (Instruction i = head; i != null; i = i.getNextExpr()) {\n         list.add(i);\n      }\n\n      for (Instruction i = _instruction; i != null; i = i.getNextPC()) {\n         list.add(i);\n      }\n\n      final Instruction[] array = list.toArray(new Instruction[0]);\n      boolean lastWasCursor = false;\n\n      final List<Branch> branches = new ArrayList<Branch>();\n      for (final Instruction i : list) {\n         sb.append(String.format(\" %3d\", i.getStartPC()));\n      }\n\n      sb.append(\"\\n\");\n      for (final Instruction i : list) {\n         sb.append(String.format(\" %3d\", i.getThisPC()));\n      }\n\n      sb.append(\"\\n\");\n      for (final Instruction i : list) {\n\n         if (i == _instruction) {\n            sb.append(\" [\");\n            lastWasCursor = true;\n         } else {\n            if (lastWasCursor) {\n               sb.append(\"] \");\n               lastWasCursor = false;\n            } else {\n               sb.append(\"  \");\n            }\n         }\n         if (i.isBranch() && i.asBranch().isConditional()) {\n            branches.add(i.asBranch());\n\n            if (i.asBranch().isForward()) {\n               sb.append(\"?>\");\n\n            } else {\n               sb.append(\"?<\");\n            }\n         } else if (i.isBranch() && i.asBranch().isUnconditional()) {\n            branches.add(i.asBranch());\n            if (i.asBranch().isForward()) {\n               sb.append(\">>\");\n            } else {\n               sb.append(\"<<\");\n            }\n         } else if (i instanceof CompositeInstruction) {\n            sb.append(\" C\");\n         } else if (i instanceof Return) {\n\n            sb.append(\" R\");\n            // } else if (i instanceof AssignToLocalVariable) {\n            //    sb.append(\" S\");\n         } else {\n            sb.append(\"..\");\n         }\n      }\n\n      if (lastWasCursor) {\n         sb.append(\"] \");\n      } else {\n         sb.append(\"  \");\n      }\n\n      for (final Branch b : branches) {\n         sb.append(\"\\n   \");\n         if (b.isForward()) {\n            for (int i = 0; i < array.length; i++) {\n               if ((array[i].getStartPC() < b.getStartPC()) || (array[i].getThisPC() > b.getTarget().getThisPC())) {\n                  sb.append(\"    \");\n               } else {\n                  if (b.isConditional()) {\n                     sb.append(\"?-\");\n                  } else {\n                     sb.append(\"+-\");\n                  }\n                  i++;\n                  while ((i < array.length) && (array[i].getStartPC() < b.getTarget().getThisPC())) {\n                     sb.append(\"----\");\n                     i++;\n                  }\n                  sb.append(\"->\");\n                  sb.append(b.getTarget().getThisPC());\n\n               }\n            }\n         } else {\n            for (int i = 0; i < array.length; i++) {\n               if ((array[i].getStartPC() < b.getTarget().getThisPC()) || (array[i].getThisPC() > b.getThisPC())) {\n                  sb.append(\"    \");\n               } else {\n                  sb.append(\"<-\");\n                  i++;\n                  while ((i < array.length) && (array[i].getStartPC() < b.getThisPC())) {\n                     sb.append(\"----\");\n                     i++;\n                  }\n                  if (b.isConditional()) {\n                     sb.append(\"-?\");\n                  } else {\n                     sb.append(\"-+\");\n                  }\n               }\n            }\n         }\n      }\n\n      return (sb.toString());\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#Block#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#ForStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ForStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block)EnhancedForStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(WhileStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement)Block(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(WhileStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)ForStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Aids debugging.  Creates a diagrammatic form of the roots (+ tail instruction) so that we can analyze control flow.  <pre> I I I C C I U I U[I]I |---------->1 |---->1 |------>2 |-->2 </pre>", "call_func_name": ["java.lang.StringBuilder.<init>", "java.util.ArrayList.<init>", "java.util.List.add", "com.aparapi.internal.instruction.Instruction.getNextExpr", "com.aparapi.internal.instruction.Instruction.getNextPC", "java.util.List.toArray", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.aparapi.internal.instruction.Instruction.getStartPC", "java.lang.Integer.valueOf", "java.lang.String.format", "java.lang.StringBuilder.append", "com.aparapi.internal.instruction.Instruction.getThisPC", "com.aparapi.internal.instruction.Instruction.isBranch", "com.aparapi.internal.instruction.Instruction.asBranch", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object[]"], [""], [""], [""], [""], ["int"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"], [""], [""], [""], ["int"], [""]], "passed_comments": "/"}, {"index": "92", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/util/Reflection.java", "methodName": "com.aparapi.internal.util.Reflection.getSimpleName", "methodParameterType": "Class<?>#", "methodParameterName": "klass#", "methodBody": "public static String getSimpleName(Class<?> klass) {\n      String simpleName = klass.getSimpleName();\n      if (simpleName.isEmpty()) {\n         String fullName = klass.getName();\n         int index = fullName.lastIndexOf('.');\n         simpleName = (index < 0) ? fullName : fullName.substring(index + 1);\n      }\n      return simpleName;\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Avoids getting dumb empty names for anonymous inners.", "call_func_name": ["java.lang.Class.getSimpleName", "java.lang.String.isEmpty", "java.lang.Class.getName", "java.lang.String.lastIndexOf", "java.lang.String.substring"], "call_func_parameter": [[""], [""], [""], ["int"], ["int"]], "passed_comments": "/"}, {"index": "93", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/util/OpenCLUtil.java", "methodName": "com.aparapi.internal.util.OpenCLUtil.getOpenCLPlatforms", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static List<OpenCLPlatform> getOpenCLPlatforms() {\n      final OpenCLPlatform ocp = new OpenCLPlatform();\n      return ocp.getOpenCLPlatforms();\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve a list of available OpenCL Platforms", "call_func_name": ["com.aparapi.internal.opencl.OpenCLPlatform.<init>", "com.aparapi.internal.opencl.OpenCLPlatform.getOpenCLPlatforms"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/jni/KernelRunnerJNI.java", "methodName": "com.aparapi.internal.jni.KernelRunnerJNI.initJNI", "methodParameterType": "Kernel#OpenCLDevice#int#", "methodParameterName": "_kernel#_device#_flags#", "methodBody": "@DocMe protected native synchronized long initJNI(Kernel _kernel, OpenCLDevice _device, int _flags);", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "TODO: synchronized to avoid race in clGetPlatformIDs() in OpenCL lib problem should fixed in some future OpenCL version", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "95", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/jni/KernelRunnerJNI.java", "methodName": "com.aparapi.internal.jni.KernelRunnerJNI.buildProgramJNI", "methodParameterType": "long#String#String#", "methodParameterName": "_jniContextHandle#_source#_binaryKey#", "methodBody": "protected native long buildProgramJNI(long _jniContextHandle, String _source, String _binaryKey);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param _source The OpenCL source code to compile, which may be sent empty if the binary for that source code is known to be cached on the JNI sideunder the key  {@code _binaryKey}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "96", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelProfile.java", "methodName": "com.aparapi.internal.kernel.KernelProfile.getLastDeviceProfile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public KernelDeviceProfile getLastDeviceProfile() {\n      return deviceProfiles.get(currentDevice.get());\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the last device profile that was updated by the last thread that made  a profiling information update, when executing this kernel on the specified device.", "call_func_name": ["java.util.concurrent.atomic.AtomicReference.get", "java.util.concurrent.ConcurrentSkipListMap.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "97", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelProfile.java", "methodName": "com.aparapi.internal.kernel.KernelProfile.onStart", "methodParameterType": "Device#", "methodParameterName": "device#", "methodBody": "void onStart(Device device) {\n\t  KernelDeviceProfile currentDeviceProfile = deviceProfiles.get(device);\n      if (currentDeviceProfile == null) {    \t \n         currentDeviceProfile = new KernelDeviceProfile(this, kernelClass, device);\n         KernelDeviceProfile existingProfile = deviceProfiles.putIfAbsent(device, currentDeviceProfile);\n         if (existingProfile != null) {\n        \t currentDeviceProfile = existingProfile;\n         }\n      }\n      \n      currentDeviceProfile.onEvent(ProfilingEvent.START);\n      currentDevice.set(device);\n   }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Starts a profiling information gathering sequence for the current thread invoking this method regarding the specified execution device.", "call_func_name": ["java.util.concurrent.ConcurrentSkipListMap.get", "com.aparapi.internal.kernel.KernelDeviceProfile.<init>", "java.util.concurrent.ConcurrentSkipListMap.putIfAbsent", "com.aparapi.internal.kernel.KernelDeviceProfile.onEvent", "java.util.concurrent.atomic.AtomicReference.set"], "call_func_parameter": [["java.lang.Object"], ["com.aparapi.internal.kernel.KernelProfile", "java.lang.Class", "com.aparapi.device.Device"], ["java.lang.Object", "java.lang.Object"], ["com.aparapi.internal.kernel.ProfilingEvent"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelProfile.java", "methodName": "com.aparapi.internal.kernel.KernelProfile.onEvent", "methodParameterType": "Device#ProfilingEvent#", "methodParameterName": "device#event#", "methodBody": "void onEvent(Device device, ProfilingEvent event) {\n\t  if (event == null) {\n\t\t  logger.log(Level.WARNING, \"Discarding profiling event \" + event + \" for null device, for Kernel class: \" + kernelClass.getName());\n\t\t  return;\n\t  }\n\t  final KernelDeviceProfile deviceProfile = deviceProfiles.get(device);\n      switch (event) {\n         case CLASS_MODEL_BUILT: // fallthrough\n         case OPENCL_GENERATED:  // fallthrough\n         case INIT_JNI:          // fallthrough\n         case OPENCL_COMPILED:   // fallthrough\n         case PREPARE_EXECUTE:   // fallthrough\n         case EXECUTED:          // fallthrough\n         {\n            if (deviceProfile == null) {\n               logger.log(Level.SEVERE, \"Error in KernelProfile, no currentDevice (synchronization error?\");\n            }\n            deviceProfile.onEvent(event);\n            break;\n         }\n         case START:\n            throw new IllegalArgumentException(\"must use onStart(Device) to start profiling\");\n         default:\n            throw new IllegalArgumentException(\"Unhandled event \" + event);\n      }\n   }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#Block#SimpleName#SwitchCase#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Updates the profiling information for the current thread invoking this method regarding the specified execution device.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.toString", "java.util.logging.Logger.log", "java.util.concurrent.ConcurrentSkipListMap.get", "com.aparapi.internal.kernel.ProfilingEvent.ordinal", "com.aparapi.internal.kernel.KernelDeviceProfile.onEvent", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], [""], ["java.util.logging.Level", "java.lang.String"], ["java.lang.Object"], [""], ["com.aparapi.internal.kernel.ProfilingEvent"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelRunner.java", "methodName": "com.aparapi.internal.kernel.KernelRunner.KernelRunner", "methodParameterType": "Kernel#", "methodParameterName": "_kernel#", "methodBody": "public KernelRunner(Kernel _kernel) {\n      kernel = _kernel;\n\n      inBufferRemote = ByteBuffer.allocateDirect(4);\n      outBufferRemote = ByteBuffer.allocateDirect(4);\n\n      inBufferRemote.order(ByteOrder.nativeOrder());\n      outBufferRemote.order(ByteOrder.nativeOrder());\n\n      inBufferRemoteInt = inBufferRemote.asIntBuffer();\n      outBufferRemoteInt = outBufferRemote.asIntBuffer();\n\n      KernelManager.instance(); // ensures static initialization of KernelManager\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a KernelRunner for a specific Kernel instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelRunner.java", "methodName": "com.aparapi.internal.kernel.KernelRunner.cleanUpArrays", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void cleanUpArrays() {\n      if (args != null && kernel.isRunningCL()) {\n         for (KernelArg arg : args) {\n            if ((arg.getType() & KernelRunnerJNI.ARG_ARRAY) != 0) {\n               Field field = arg.getField();\n               if (field != null && field.getType().isArray() && !Modifier.isFinal(field.getModifiers())) {\n                  field.setAccessible(true);\n                  Class<?> componentType = field.getType().getComponentType();\n                  Object newValue = Array.newInstance(componentType, MINIMUM_ARRAY_SIZE);\n                  try {\n                     field.set(kernel, newValue);\n                  }\n                  catch (IllegalAccessException e) {\n                     throw new RuntimeException(e);\n                  }\n               }\n            }\n         }\n         kernel.execute(0);\n      } else if (kernel.isRunningCL()) {\n         logger.log(Level.SEVERE, \"KernelRunner#cleanUpArrays() could not execute as no args available (Kernel has not been executed?)\");\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "@see Kernel#cleanUpArrays().", "call_func_name": ["com.aparapi.Kernel.isRunningCL", "com.aparapi.internal.kernel.KernelArg.getType", "com.aparapi.internal.kernel.KernelArg.getField", "java.lang.reflect.Field.getType", "java.lang.Class.isArray", "java.lang.reflect.Field.getModifiers", "java.lang.reflect.Modifier.isFinal", "java.lang.reflect.Field.setAccessible", "java.lang.Class.getComponentType", "java.lang.reflect.Array.newInstance", "java.lang.reflect.Field.set", "java.lang.RuntimeException.<init>", "com.aparapi.Kernel.execute", "java.util.logging.Logger.log"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["int"], ["boolean"], [""], ["java.lang.Class", "int"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Throwable"], ["int"], ["java.util.logging.Level", "java.lang.String"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelArg.getType": "@return the type"}, {"com.aparapi.internal.kernel.KernelArg.getField": "@return the field"}, {"com.aparapi.Kernel.execute": "Start execution of <code>_range</code> kernels. <p> When <code>kernel.execute(_range)</code> is 1invoked, Aparapi will schedule the execution of <code>_range</code> kernels. If the execution mode is GPU then the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. <p> Since adding the new <code>Range class</code> this method offers backward compatibility and merely defers to <code> return (execute(Range.create(_range), 1));</code>."}]}, {"index": "101", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelRunner.java", "methodName": "com.aparapi.internal.kernel.KernelRunner.dispose", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public synchronized void dispose() {\n      if (kernel.isRunningCL()) {\n         disposeJNI(jniContextHandle);\n         seenBinaryKeys.clear();\n      }\n      // We are using a shared pool, so there's no need no shutdown it when kernel is disposed\n      //      threadPool.shutdownNow();\n   }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "<code>Kernel.dispose()</code> delegates to <code>KernelRunner.dispose()</code> which delegates to <code>disposeJNI()</code> to actually close JNI data structures.<br/>", "call_func_name": ["com.aparapi.Kernel.isRunningCL", "com.aparapi.internal.kernel.KernelRunner.disposeJNI", "java.util.LinkedHashSet.clear"], "call_func_parameter": [[""], ["long"], [""]], "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelRunner.java", "methodName": "com.aparapi.internal.kernel.KernelRunner.executeJava", "methodParameterType": "ExecutionSettings#Device#", "methodParameterName": "_settings#device#", "methodBody": "@SuppressWarnings(\"deprecation\")\n   protected void executeJava(ExecutionSettings _settings, Device device) {\n      if (logger.isLoggable(Level.FINE)) {\n         logger.fine(\"executeJava: range = \" + _settings.range + \", device = \" + device);\n      }\n      boolean legacySequentialMode = kernel.getExecutionMode().equals(Kernel.EXECUTION_MODE.SEQ);\n\n      passId = PASS_ID_PREPARING_EXECUTION;\n      _settings.profile.onEvent(device, ProfilingEvent.PREPARE_EXECUTE);\n\n      try {\n         if (device == JavaDevice.ALTERNATIVE_ALGORITHM) {\n            if (kernel.hasFallbackAlgorithm()) {\n               for (passId = 0; passId < _settings.passes; ++passId) {\n                  kernel.executeFallbackAlgorithm(_settings.range, passId);\n               }\n            } else {\n               boolean silently = true; // not having an alternative algorithm is the normal state, and does not need reporting\n               fallBackToNextDevice(device, _settings, (Exception) null, silently);\n            }\n         } else {\n            final int localSize0 = _settings.range.getLocalSize(0);\n            final int localSize1 = _settings.range.getLocalSize(1);\n            final int localSize2 = _settings.range.getLocalSize(2);\n            final int globalSize1 = _settings.range.getGlobalSize(1);\n            if (legacySequentialMode || device == JavaDevice.SEQUENTIAL) {\n               /**\n                * SEQ mode is useful for testing trivial logic, but kernels which use SEQ mode cannot be used if the\n                * product of localSize(0..3) is >1.  So we can use multi-dim ranges but only if the local size is 1 in all dimensions.\n                *\n                * As a result of this barrier is only ever 1 work item wide and probably should be turned into a no-op.\n                *\n                * So we need to check if the range is valid here. If not we have no choice but to punt.\n                */\n               if ((localSize0 * localSize1 * localSize2) > 1) {\n                  throw new IllegalStateException(\"Can't run range with group size >1 sequentially. Barriers would deadlock!\");\n               }\n\n               final Kernel kernelClone = kernel.clone();\n               final KernelState kernelState = kernelClone.getKernelState();\n\n               kernelState.setRange(_settings.range);\n               kernelState.setGroupId(0, 0);\n               kernelState.setGroupId(1, 0);\n               kernelState.setGroupId(2, 0);\n               kernelState.setLocalId(0, 0);\n               kernelState.setLocalId(1, 0);\n               kernelState.setLocalId(2, 0);\n               kernelState.setLocalBarrier(new FJSafeBarrier(1));\n\n               for (passId = 0; passId < _settings.passes; passId++) {\n                  if (getCancelState() == CANCEL_STATUS_TRUE) {\n                     break;\n                  }\n                  kernelState.setPassId(passId);\n\n                  if (_settings.range.getDims() == 1) {\n                     for (int id = 0; id < _settings.range.getGlobalSize(0); id++) {\n                        kernelState.setGlobalId(0, id);\n                        kernelClone.run();\n                     }\n                  }\n                  else if (_settings.range.getDims() == 2) {\n                     for (int x = 0; x < _settings.range.getGlobalSize(0); x++) {\n                        kernelState.setGlobalId(0, x);\n\n                        for (int y = 0; y < globalSize1; y++) {\n                           kernelState.setGlobalId(1, y);\n                           kernelClone.run();\n                        }\n                     }\n                  }\n                  else if (_settings.range.getDims() == 3) {\n                     for (int x = 0; x < _settings.range.getGlobalSize(0); x++) {\n                        kernelState.setGlobalId(0, x);\n\n                        for (int y = 0; y < globalSize1; y++) {\n                           kernelState.setGlobalId(1, y);\n\n                           for (int z = 0; z < _settings.range.getGlobalSize(2); z++) {\n                              kernelState.setGlobalId(2, z);\n                              kernelClone.run();\n                           }\n\n                           kernelClone.run();\n                        }\n                     }\n                  }\n               }\n               passId = PASS_ID_COMPLETED_EXECUTION;\n            }\n            else {\n               if (device != JavaDevice.THREAD_POOL && kernel.getExecutionMode() != Kernel.EXECUTION_MODE.JTP) {\n                  throw new AssertionError(\"unexpected JavaDevice or EXECUTION_MODE\");\n               }\n               final int threads = localSize0 * localSize1 * localSize2;\n               final int numGroups0 = _settings.range.getNumGroups(0);\n               final int numGroups1 = _settings.range.getNumGroups(1);\n               final int globalGroups = numGroups0 * numGroups1 * _settings.range.getNumGroups(2);\n               \n               /**\n                * This localBarrier is only ever used by the kernels.  If the kernel does not use the barrier the threads\n                * can get out of sync, we promised nothing in JTP mode.\n                *\n                * As with OpenCL all threads within a group must wait at the barrier or none.  It is a user error (possible deadlock!)\n                * if the barrier is in a conditional that is only executed by some of the threads within a group.\n                *\n                * Kernel developer must understand this.\n                *\n                * This barrier is threadCount wide.  We never hit the barrier from the dispatch thread.\n                */\n               final FJSafeBarrier localBarrier = new FJSafeBarrier(threads);\n\n               final ThreadIdSetter threadIdSetter;\n\n               if (_settings.range.getDims() == 1) {\n                  threadIdSetter = new ThreadIdSetter() {\n                     @Override\n                     public void set(KernelState kernelState, int globalGroupId, int threadId) {\n                        //                   (kernelState, globalGroupId, threadId) ->{\n                        kernelState.setLocalId(0, (threadId % localSize0));\n                        kernelState.setGlobalId(0, (threadId + (globalGroupId * threads)));\n                        kernelState.setGroupId(0, globalGroupId);\n                     }\n                  };\n               }\n               else if (_settings.range.getDims() == 2) {\n\n                  /**\n                   * Consider a 12x4 grid of 4*2 local groups\n                   * <pre>\n                   *                                             threads = 4*2 = 8\n                   *                                             localWidth=4\n                   *                                             localHeight=2\n                   *                                             globalWidth=12\n                   *                                             globalHeight=4\n                   *\n                   *    00 01 02 03 | 04 05 06 07 | 08 09 10 11\n                   *    12 13 14 15 | 16 17 18 19 | 20 21 22 23\n                   *    ------------+-------------+------------\n                   *    24 25 26 27 | 28 29 30 31 | 32 33 34 35\n                   *    36 37 38 39 | 40 41 42 43 | 44 45 46 47\n                   *\n                   *    00 01 02 03 | 00 01 02 03 | 00 01 02 03  threadIds : [0..7]*6\n                   *    04 05 06 07 | 04 05 06 07 | 04 05 06 07\n                   *    ------------+-------------+------------\n                   *    00 01 02 03 | 00 01 02 03 | 00 01 02 03\n                   *    04 05 06 07 | 04 05 06 07 | 04 05 06 07\n                   *\n                   *    00 00 00 00 | 01 01 01 01 | 02 02 02 02  groupId[0] : 0..6\n                   *    00 00 00 00 | 01 01 01 01 | 02 02 02 02\n                   *    ------------+-------------+------------\n                   *    00 00 00 00 | 01 01 01 01 | 02 02 02 02\n                   *    00 00 00 00 | 01 01 01 01 | 02 02 02 02\n                   *\n                   *    00 00 00 00 | 00 00 00 00 | 00 00 00 00  groupId[1] : 0..6\n                   *    00 00 00 00 | 00 00 00 00 | 00 00 00 00\n                   *    ------------+-------------+------------\n                   *    01 01 01 01 | 01 01 01 01 | 01 01 01 01\n                   *    01 01 01 01 | 01 01 01 01 | 01 01 01 01\n                   *\n                   *    00 01 02 03 | 08 09 10 11 | 16 17 18 19  globalThreadIds == threadId + groupId * threads;\n                   *    04 05 06 07 | 12 13 14 15 | 20 21 22 23\n                   *    ------------+-------------+------------\n                   *    24 25 26 27 | 32[33]34 35 | 40 41 42 43\n                   *    28 29 30 31 | 36 37 38 39 | 44 45 46 47\n                   *\n                   *    00 01 02 03 | 00 01 02 03 | 00 01 02 03  localX = threadId % localWidth; (for globalThreadId 33 = threadId = 01 : 01%4 =1)\n                   *    00 01 02 03 | 00 01 02 03 | 00 01 02 03\n                   *    ------------+-------------+------------\n                   *    00 01 02 03 | 00[01]02 03 | 00 01 02 03\n                   *    00 01 02 03 | 00 01 02 03 | 00 01 02 03\n                   *\n                   *    00 00 00 00 | 00 00 00 00 | 00 00 00 00  localY = threadId /localWidth  (for globalThreadId 33 = threadId = 01 : 01/4 =0)\n                   *    01 01 01 01 | 01 01 01 01 | 01 01 01 01\n                   *    ------------+-------------+------------\n                   *    00 00 00 00 | 00[00]00 00 | 00 00 00 00\n                   *    01 01 01 01 | 01 01 01 01 | 01 01 01 01\n                   *\n                   *    00 01 02 03 | 04 05 06 07 | 08 09 10 11  globalX=\n                   *    00 01 02 03 | 04 05 06 07 | 08 09 10 11     groupsPerLineWidth=globalWidth/localWidth (=12/4 =3)\n                   *    ------------+-------------+------------     groupInset =groupId%groupsPerLineWidth (=4%3 = 1)\n                   *    00 01 02 03 | 04[05]06 07 | 08 09 10 11\n                   *    00 01 02 03 | 04 05 06 07 | 08 09 10 11     globalX = groupInset*localWidth+localX (= 1*4+1 = 5)\n                   *\n                   *    00 00 00 00 | 00 00 00 00 | 00 00 00 00  globalY\n                   *    01 01 01 01 | 01 01 01 01 | 01 01 01 01\n                   *    ------------+-------------+------------\n                   *    02 02 02 02 | 02[02]02 02 | 02 02 02 02\n                   *    03 03 03 03 | 03 03 03 03 | 03 03 03 03\n                   *\n                   * </pre>\n                   * Assume we are trying to locate the id's for #33\n                   *\n                   */\n                  threadIdSetter = new ThreadIdSetter() {\n                     @Override\n                     public void set(KernelState kernelState, int globalGroupId, int threadId) {\n                        //                   (kernelState, globalGroupId, threadId) ->{\n                    \tfinal int localId0 = (threadId % localSize0);\n                    \tfinal int localId1 = (threadId / localSize0);\n                        kernelState.setLocalId(0, localId0); // threadId % localWidth =  (for 33 = 1 % 4 = 1)\n                        kernelState.setLocalId(1, localId1); // threadId / localWidth = (for 33 = 1 / 4 == 0)\n\n                        //The displacement in the overall 2D computation grid in the X direction is\n                        //the offset in X given by the current group being executed, plus the X displacement\n                        //inside that work-group.\n                        //Groups are like this:\n                        //[Group 0] [Group 1] [Group 2]\n                        //[Group 3] [Group 4] [Group 5]\n                        final int globalThreadIdOffsetX = (globalGroupId % numGroups0) * localSize0; \n                        kernelState.setGlobalId(0, globalThreadIdOffsetX + localId0);\n\n                        //Likewise X, but now for the Y direction. \n                        final int globalThreadIdOffsetY = (globalGroupId / numGroups0) * localSize1;\n                        kernelState.setGlobalId(1, globalThreadIdOffsetY + localId1);\n                        \n                        kernelState.setGroupId(0, (globalGroupId % numGroups0));\n                        kernelState.setGroupId(1, (globalGroupId / numGroups0));\n                     }\n                  };\n               }\n               else if (_settings.range.getDims() == 3) {\n                  //Same as 2D actually turns out that localId[0] is identical for all three dims so could be hoisted out of conditional code\n                  threadIdSetter = new ThreadIdSetter() {\n                     @Override\n                     public void set(KernelState kernelState, int globalGroupId, int threadId) {\n                        //                   (kernelState, globalGroupId, threadId) ->{\n                        kernelState.setLocalId(0, (threadId % localSize0));\n\n                        kernelState.setLocalId(1, ((threadId / localSize0) % localSize1));\n\n                        // the thread id's span WxHxD so threadId/(WxH) should yield the local depth\n                        kernelState.setLocalId(2, (threadId / (localSize0 * localSize1)));\n\n                        kernelState.setGlobalId(0, (((globalGroupId % numGroups0) * localSize0) + kernelState.getLocalIds()[0]));\n\n                        kernelState.setGlobalId(1,\n                        ((((globalGroupId / numGroups0) * localSize1) % globalSize1) + kernelState.getLocalIds()[1]));\n\n                        kernelState.setGlobalId(2,\n                        (((globalGroupId / (numGroups0 * numGroups1)) * localSize2) + kernelState.getLocalIds()[2]));\n\n                        kernelState.setGroupId(0, (globalGroupId % numGroups0));\n                        kernelState.setGroupId(1, ((globalGroupId / numGroups0) % numGroups1));\n                        kernelState.setGroupId(2, (globalGroupId / (numGroups0 * numGroups1)));\n                     }\n                  };\n               }\n               else {\n                  throw new IllegalArgumentException(\"Expected 1,2 or 3 dimensions, found \" + _settings.range.getDims());\n               }\n               \n               ForkJoinTask<?>[] tasks = new ForkJoinTask<?>[threads];\n               for (passId = 0; passId < _settings.passes; passId++) {\n                  if (getCancelState() == CANCEL_STATUS_TRUE) {\n                     break;\n                  }\n                  \n                  long deadThreadCount = handler.threadsDiedCounter.get();\n                  /**\n                   * Note that we emulate OpenCL by creating one thread per localId (across the group).\n                   *\n                   * So threadCount == range.getLocalSize(0)*range.getLocalSize(1)*range.getLocalSize(2);\n                   *\n                   * For a 1D range of 12 groups of 4 we create 4 threads. One per localId(0).\n                   *\n                   * We also clone the kernel 4 times. One per thread.\n                   *\n                   * We create local barrier which has a width of 4\n                   *\n                   *    Thread-0 handles localId(0) (global 0,4,8)\n                   *    Thread-1 handles localId(1) (global 1,5,7)\n                   *    Thread-2 handles localId(2) (global 2,6,10)\n                   *    Thread-3 handles localId(3) (global 3,7,11)\n                   *\n                   * This allows all threads to synchronize using the local barrier.\n                   *\n                   * Initially the use of local buffers seems broken as the buffers appears to be per Kernel.\n                   * Thankfully Kernel.clone() performs a shallow clone of all buffers (local and global)\n                   * So each of the cloned kernels actually still reference the same underlying local/global buffers.\n                   *\n                   * If the kernel uses local buffers but does not use barriers then it is possible for different groups\n                   * to see mutations from each other (unlike OpenCL), however if the kernel does not us barriers then it\n                   * cannot assume any coherence in OpenCL mode either (the failure mode will be different but still wrong)\n                   *\n                   * So even JTP mode use of local buffers will need to use barriers. Not for the same reason as OpenCL but to keep groups in lockstep.\n                   *\n                   **/\n                  for (int id = 0; id < threads; id++) {\n                     final int threadId = id;\n\n                     /**\n                      *  We clone one kernel for each thread.\n                      *\n                      *  They will all share references to the same range, localBarrier and global/local buffers because the clone is shallow.\n                      *  We need clones so that each thread can assign 'state' (localId/globalId/groupId) without worrying\n                      *  about other threads.\n                      */\n                     final Kernel kernelClone = kernel.clone();\n                     final KernelState kernelState = kernelClone.getKernelState();\n                     kernelState.setRange(_settings.range);\n                     kernelState.setPassId(passId);\n\n                     if (threads == 1) {\n                        kernelState.disableLocalBarrier();\n                     }\n                     else {\n                        kernelState.setLocalBarrier(localBarrier);\n                     }\n\n                     ForkJoinTask<?> fjt = threadPool.submit(\n                     //                     () -> {\n                     new Runnable() {\n                        public void run() {\n                           try {\n                              for (int globalGroupId = 0; globalGroupId < globalGroups; globalGroupId++) {\n                                 threadIdSetter.set(kernelState, globalGroupId, threadId);\n                                 kernelClone.run();\n                              }\n                           } catch (AparapiBrokenBarrierException e) {\n                        \t   //Intentionally empty to not obfuscate threads that failed executing the kernel with those that had\n                        \t   //the barrier broken by the first ones.\n                           } catch (RuntimeException | Error e) {\n                        \t  localBarrier.breakBarrier(e);\n                        \t  throw new AparapiKernelFailedException(kernelState.describe(), e);\n                           }\n                        }\n                     });\n                     \n                     tasks[id] = fjt;\n                  }\n\n                  for (ForkJoinTask<?> task : tasks) { // This dispatch thread waits for all worker threads here.\n                \t  task.join();\n                  }\n                  \n                  long deathCount = handler.threadsDiedCounter.get() - deadThreadCount;\n                  if (deathCount > 0) {\n                \t  logger.log(Level.SEVERE, \"(\" + deathCount + \") Pool threads died during execution of kernel: \" + kernel.getClass().getName() + \" at pass: \" + passId);\n                  }\n               }\n               passId = PASS_ID_COMPLETED_EXECUTION;\n            } // execution mode == JTP\n         }\n      } finally {\n         passId = PASS_ID_COMPLETED_EXECUTION;\n      }\n   }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#Assignment#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#NullLiteral#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#MethodInvocation#SimpleName#InfixExpression#BreakStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#ForStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#ForStatement#Block#IfStatement#IfStatement#IfStatement#Block#ForStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#IfStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#Assignment#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#MethodInvocation#SimpleName#InfixExpression#BreakStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#Modifier#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ForStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ForStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)ForStatement)Block(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)ForStatement)Block)IfStatement)IfStatement)IfStatement)Block)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)IfStatement(VariableDeclarationStatement(ArrayType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)ForStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Execute using a Java thread pool, or sequentially, or using an alternative algorithm, usually as a result of failing to compile or execute OpenCL", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "103", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelRunner.java", "methodName": "com.aparapi.internal.kernel.KernelRunner.getClassModelFromArg", "methodParameterType": "KernelArg#Class<?>#", "methodParameterName": "arg#arrayClass#", "methodBody": "private ClassModel getClassModelFromArg(KernelArg arg, final Class<?> arrayClass) {\n\t  ClassModel c = null;\n      if (arg.getObjArrayElementModel() == null) {\n          final String tmp = arrayClass.getName().substring(2).replace('/', '.');\n          final String arrayClassInDotForm = tmp.substring(0, tmp.length() - 1);\n\n          if (logger.isLoggable(Level.FINE)) {\n             logger.fine(\"looking for type = \" + arrayClassInDotForm);\n          }\n\n          // get ClassModel of obj array from entrypt.objectArrayFieldsClasses\n          c = entryPoint.getObjectArrayFieldsClasses().get(arrayClassInDotForm);\n          arg.setObjArrayElementModel(c);\n       } else {\n          c = arg.getObjArrayElementModel();\n       }\n       assert c != null : \"should find class for elements \" + arrayClass.getName();\n       \n       return c;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#AssertStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(AssertStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)AssertStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper method to retrieve the class model from a kernel argument.", "call_func_name": ["com.aparapi.internal.kernel.KernelArg.getObjArrayElementModel", "java.lang.Class.getName", "java.lang.String.substring", "java.lang.String.replace", "java.lang.String.length", "java.lang.String.substring", "java.util.logging.Logger.isLoggable", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.logging.Logger.fine", "com.aparapi.internal.model.Entrypoint.getObjectArrayFieldsClasses", "java.util.Map.get", "com.aparapi.internal.kernel.KernelArg.setObjArrayElementModel", "java.lang.AssertionError.<init>"], "call_func_parameter": [[""], [""], ["int"], ["char", "char"], [""], ["int", "int"], ["java.util.logging.Level"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["com.aparapi.internal.model.ClassModel"], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelArg.getObjArrayElementModel": "@return the objArrayElementModel"}, {"com.aparapi.internal.kernel.KernelArg.setObjArrayElementModel": "@param objArrayElementModel the objArrayElementModel to set"}]}, {"index": "104", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelRunner.java", "methodName": "com.aparapi.internal.kernel.KernelRunner.allocateArrayBufferIfFirstTimeOrArrayChanged", "methodParameterType": "KernelArg#Object#int#int#int#", "methodParameterName": "arg#newRef#objArraySize#totalStructSize#totalBufferSize#", "methodBody": "public boolean allocateArrayBufferIfFirstTimeOrArrayChanged(KernelArg arg, Object newRef, \n\t\t   \t\t\tfinal int objArraySize, final int totalStructSize, final int totalBufferSize) {\n\t   boolean didReallocate = false;\n\t   \n\t   if ((arg.getObjArrayBuffer() == null) || (newRef != arg.getArray())) {\n\t      final ByteBuffer structBuffer = ByteBuffer.allocate(totalBufferSize);\n\t      arg.setObjArrayByteBuffer(structBuffer.order(ByteOrder.LITTLE_ENDIAN));\n\t      arg.setObjArrayBuffer(arg.getObjArrayByteBuffer().array());\n\t      didReallocate = true;\n\t      if (logger.isLoggable(Level.FINEST)) {\n\t         logger.finest(\"objArraySize = \" + objArraySize + \" totalStructSize= \" + totalStructSize + \" totalBufferSize=\"\n\t               + totalBufferSize);\n\t      }\n\t   } else {\n\t      arg.getObjArrayByteBuffer().clear();\n\t   }\n\t   \n\t   return didReallocate;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper method that manages the memory allocation for storing the kernel argument data, so that the data can be exchanged between the host and the OpenCL device.", "call_func_name": ["com.aparapi.internal.kernel.KernelArg.getObjArrayBuffer", "com.aparapi.internal.kernel.KernelArg.getArray", "java.nio.ByteBuffer.allocate", "java.nio.ByteBuffer.order", "com.aparapi.internal.kernel.KernelArg.setObjArrayByteBuffer", "com.aparapi.internal.kernel.KernelArg.getObjArrayByteBuffer", "java.nio.ByteBuffer.array", "com.aparapi.internal.kernel.KernelArg.setObjArrayBuffer", "java.util.logging.Logger.isLoggable", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.logging.Logger.finest", "java.nio.ByteBuffer.clear"], "call_func_parameter": [[""], [""], ["int"], ["java.nio.ByteOrder"], ["java.nio.ByteBuffer"], [""], [""], ["byte[]"], ["java.util.logging.Level"], [""], ["java.lang.String"], ["int"], [""], ["java.lang.String"], [""]], "passed_comments": [{"com.aparapi.internal.kernel.KernelArg.getObjArrayBuffer": "@return the objArrayBuffer"}, {"com.aparapi.internal.kernel.KernelArg.getArray": "@return the array"}, {"com.aparapi.internal.kernel.KernelArg.setObjArrayByteBuffer": "@param objArrayByteBuffer the objArrayByteBuffer to set"}, {"com.aparapi.internal.kernel.KernelArg.getObjArrayByteBuffer": "@return the objArrayByteBuffer"}, {"com.aparapi.internal.kernel.KernelArg.setObjArrayBuffer": "@param objArrayBuffer the objArrayBuffer to set"}]}, {"index": "105", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelRunner.java", "methodName": "com.aparapi.internal.kernel.KernelRunner.prepareOopConversionBuffer", "methodParameterType": "KernelArg#", "methodParameterName": "arg#", "methodBody": "private boolean prepareOopConversionBuffer(KernelArg arg) throws AparapiException {\n      usesOopConversion = true;\n      final Class<?> arrayClass = arg.getField().getType();\n      ClassModel c = getClassModelFromArg(arg, arrayClass);\n\n      final int arrayBaseOffset = UnsafeWrapper.arrayBaseOffset(arrayClass);\n      final int arrayScale = UnsafeWrapper.arrayIndexScale(arrayClass);\n\n      if (logger.isLoggable(Level.FINEST)) {\n         logger.finest(\"Syncing obj array type = \" + arrayClass + \" cvtd= \" + c.getClassWeAreModelling().getName()\n               + \"arrayBaseOffset=\" + arrayBaseOffset + \" arrayScale=\" + arrayScale);\n      }\n\n      int objArraySize = 0;\n      Object newRef = null;\n      try {\n         newRef = arg.getField().get(kernel);\n         objArraySize = Array.getLength(newRef);\n      } catch (final IllegalAccessException e) {\n         throw new AparapiException(e);\n      }\n\n      assert (newRef != null) && (objArraySize != 0) : \"no data\";\n\n      final int totalStructSize = c.getTotalStructSize();\n      final int totalBufferSize = objArraySize * totalStructSize;\n\n      // allocate ByteBuffer if first time or array changed\n      boolean didReallocate = allocateArrayBufferIfFirstTimeOrArrayChanged(arg, newRef, objArraySize, totalStructSize, totalBufferSize);\n\n      // copy the fields that the JNI uses\n      arg.setJavaArray(arg.getObjArrayBuffer());\n      arg.setNumElements(objArraySize);\n      arg.setSizeInBytes(totalBufferSize);\n\n      for (int j = 0; j < objArraySize; j++) {\n         int sizeWritten = 0;\n\n         final Object object = UnsafeWrapper.getObject(newRef, arrayBaseOffset + (arrayScale * j));\n         for (int i = 0; i < c.getStructMemberTypes().size(); i++) {\n            final TypeSpec t = c.getStructMemberTypes().get(i);\n            final long offset = c.getStructMemberOffsets().get(i);\n\n            if (logger.isLoggable(Level.FINEST)) {\n               logger.finest(\"name = \" + c.getStructMembers().get(i).getNameAndTypeEntry().getNameUTF8Entry().getUTF8() + \" t= \"\n                     + t);\n            }\n\n            switch (t) {\n               case I: {\n                  final int x = UnsafeWrapper.getInt(object, offset);\n                  arg.getObjArrayByteBuffer().putInt(x);\n                  sizeWritten += t.getSize();\n                  break;\n               }\n               case F: {\n                  final float x = UnsafeWrapper.getFloat(object, offset);\n                  arg.getObjArrayByteBuffer().putFloat(x);\n                  sizeWritten += t.getSize();\n                  break;\n               }\n               case J: {\n                  final long x = UnsafeWrapper.getLong(object, offset);\n                  arg.getObjArrayByteBuffer().putLong(x);\n                  sizeWritten += t.getSize();\n                  break;\n               }\n               case Z: {\n                  final boolean x = UnsafeWrapper.getBoolean(object, offset);\n                  arg.getObjArrayByteBuffer().put(x == true ? (byte) 1 : (byte) 0);\n                  // Booleans converted to 1 byte C chars for opencl\n                  sizeWritten += TypeSpec.B.getSize();\n                  break;\n               }\n               case B: {\n                  final byte x = UnsafeWrapper.getByte(object, offset);\n                  arg.getObjArrayByteBuffer().put(x);\n                  sizeWritten += t.getSize();\n                  break;\n               }\n               case D: {\n                  throw new AparapiException(\"Double not implemented yet\");\n               }\n               default:\n                  assert true == false : \"typespec did not match anything\";\n                  throw new AparapiException(\"Unhandled type in buffer conversion\");\n            }\n         }\n\n         // add padding here if needed\n         if (logger.isLoggable(Level.FINEST)) {\n            logger.finest(\"sizeWritten = \" + sizeWritten + \" totalStructSize= \" + totalStructSize);\n         }\n\n         assert sizeWritten <= totalStructSize : \"wrote too much into buffer\";\n\n         while (sizeWritten < totalStructSize) {\n            if (logger.isLoggable(Level.FINEST)) {\n               logger.finest(arg.getName() + \" struct pad byte = \" + sizeWritten + \" totalStructSize= \" + totalStructSize);\n            }\n            arg.getObjArrayByteBuffer().put((byte) -1);\n            sizeWritten++;\n         }\n      }\n\n      assert arg.getObjArrayByteBuffer().arrayOffset() == 0 : \"should be zero\";\n\n      return didReallocate;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#StringLiteral#AssertStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SwitchCase#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SwitchCase#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SwitchCase#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SwitchCase#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#InfixExpression#PrimitiveType#NumberLiteral#CastExpression#PrimitiveType#NumberLiteral#CastExpression#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SwitchCase#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SwitchCase#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#SwitchCase#BooleanLiteral#BooleanLiteral#InfixExpression#StringLiteral#AssertStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#StringLiteral#AssertStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#PrimitiveType#NumberLiteral#PrefixExpression#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#StringLiteral#AssertStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(AssertStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(StringLiteral)StringLiteral)AssertStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)InfixExpression(CastExpression(PrimitiveType)PrimitiveType(NumberLiteral)NumberLiteral)CastExpression(CastExpression(PrimitiveType)PrimitiveType(NumberLiteral)NumberLiteral)CastExpression)ConditionalExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block(SwitchCase)SwitchCase(AssertStatement(InfixExpression(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)InfixExpression(StringLiteral)StringLiteral)AssertStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)ForStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(AssertStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(StringLiteral)StringLiteral)AssertStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)CastExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement)Block)ForStatement(AssertStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral)AssertStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param arg", "call_func_name": ["com.aparapi.internal.kernel.KernelArg.getField", "java.lang.reflect.Field.getType", "com.aparapi.internal.kernel.KernelRunner.getClassModelFromArg", "com.aparapi.internal.util.UnsafeWrapper.arrayBaseOffset", "com.aparapi.internal.util.UnsafeWrapper.arrayIndexScale", "java.util.logging.Logger.isLoggable", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "com.aparapi.internal.model.ClassModel.getClassWeAreModelling", "java.lang.Class.getName", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.logging.Logger.finest", "java.lang.reflect.Field.get", "java.lang.reflect.Array.getLength", "com.aparapi.internal.exception.AparapiException.<init>", "java.lang.AssertionError.<init>", "com.aparapi.internal.model.ClassModel.getTotalStructSize", "com.aparapi.internal.kernel.KernelRunner.allocateArrayBufferIfFirstTimeOrArrayChanged", "com.aparapi.internal.kernel.KernelArg.getObjArrayBuffer", "com.aparapi.internal.kernel.KernelArg.setJavaArray", "com.aparapi.internal.kernel.KernelArg.setNumElements", "com.aparapi.internal.kernel.KernelArg.setSizeInBytes", "com.aparapi.internal.util.UnsafeWrapper.getObject", "com.aparapi.internal.model.ClassModel.getStructMemberTypes", "java.util.ArrayList.size", "java.util.ArrayList.get", "com.aparapi.internal.model.ClassModel.getStructMemberOffsets", "java.lang.Long.longValue", "com.aparapi.internal.model.ClassModel.getStructMembers", "com.aparapi.internal.util.UnsafeWrapper.getInt", "com.aparapi.internal.kernel.KernelArg.getObjArrayByteBuffer", "java.nio.ByteBuffer.putInt", "com.aparapi.internal.util.UnsafeWrapper.getFloat", "java.nio.ByteBuffer.putFloat", "com.aparapi.internal.util.UnsafeWrapper.getLong", "java.nio.ByteBuffer.putLong", "com.aparapi.internal.util.UnsafeWrapper.getBoolean", "java.nio.ByteBuffer.put", "com.aparapi.internal.util.UnsafeWrapper.getByte", "com.aparapi.internal.exception.AparapiException.<init>", "com.aparapi.internal.kernel.KernelArg.getName", "java.nio.ByteBuffer.arrayOffset"], "call_func_parameter": [[""], [""], ["com.aparapi.internal.kernel.KernelArg", "java.lang.Class"], ["java.lang.Class"], ["java.lang.Class"], ["java.util.logging.Level"], [""], ["java.lang.String"], ["java.lang.Object"], [""], [""], ["int"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Throwable"], ["java.lang.Object"], [""], ["com.aparapi.internal.kernel.KernelArg", "java.lang.Object", "int", "int", "int"], [""], ["java.lang.Object"], ["int"], ["int"], ["java.lang.Object", "long"], [""], [""], ["int"], [""], [""], [""], ["java.lang.Object", "long"], [""], ["int"], ["java.lang.Object", "long"], ["float"], ["java.lang.Object", "long"], ["long"], ["java.lang.Object", "long"], ["byte"], ["java.lang.Object", "long"], ["java.lang.String"], [""], [""]], "passed_comments": [{"com.aparapi.internal.kernel.KernelArg.getField": "@return the field"}, {"com.aparapi.internal.kernel.KernelRunner.getClassModelFromArg": "Helper method to retrieve the class model from a kernel argument."}, {"com.aparapi.internal.kernel.KernelRunner.allocateArrayBufferIfFirstTimeOrArrayChanged": "Helper method that manages the memory allocation for storing the kernel argument data, so that the data can be exchanged between the host and the OpenCL device."}, {"com.aparapi.internal.kernel.KernelArg.getObjArrayBuffer": "@return the objArrayBuffer"}, {"com.aparapi.internal.kernel.KernelArg.setJavaArray": "@param javaArray the javaArray to set"}, {"com.aparapi.internal.kernel.KernelArg.setNumElements": "@param numElements the numElements to set"}, {"com.aparapi.internal.kernel.KernelArg.setSizeInBytes": "@param sizeInBytes the sizeInBytes to set"}, {"com.aparapi.internal.kernel.KernelArg.getObjArrayByteBuffer": "@return the objArrayByteBuffer"}, {"com.aparapi.internal.kernel.KernelArg.getName": "@return the name"}]}, {"index": "106", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelRunner.java", "methodName": "com.aparapi.internal.kernel.KernelRunner.getCurrentPass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getCurrentPass() {\n      if (!executing) {\n         return PASS_ID_COMPLETED_EXECUTION;\n      }\n\n      if (kernel.isRunningCL()) {\n         return getCurrentPassRemote();\n      } else {\n         return getCurrentPassLocal();\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#PrefixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Returns the index of the current pass, or one of two special constants with negative values to indicate special progress states. Those constants are {@link #PASS_ID_PREPARING_EXECUTION} to indicate that the Kernel has started executing but not reached the initial pass, or{@link #PASS_ID_COMPLETED_EXECUTION} to indicate that execution is complete (possibly due to early termination via {@link #cancelMultiPass()}), i.e. the Kernel is idle.  {@link #PASS_ID_COMPLETED_EXECUTION} is also returned before the first execution has been invoked.<p>This can be used, for instance, to update a visual progress bar.", "call_func_name": ["com.aparapi.Kernel.isRunningCL", "com.aparapi.internal.kernel.KernelRunner.getCurrentPassRemote", "com.aparapi.internal.kernel.KernelRunner.getCurrentPassLocal"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelRunner.java", "methodName": "com.aparapi.internal.kernel.KernelRunner.isExecuting", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isExecuting() {\n      return executing;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True while any of the  {@code execute()} methods are in progress.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "108", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelRunner.java", "methodName": "com.aparapi.internal.kernel.KernelRunner.get", "methodParameterType": "Object#", "methodParameterName": "array#", "methodBody": "public void get(Object array) {\n      if (explicit && (kernel.isRunningCL())) {\n        // Only makes sense when we are using OpenCL\n         getJNI(jniContextHandle, array);\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public", "call_func_name": ["com.aparapi.Kernel.isRunningCL", "com.aparapi.internal.kernel.KernelRunner.getJNI"], "call_func_parameter": [[""], ["long", "java.lang.Object"]], "passed_comments": "/"}, {"index": "109", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelRunner.java", "methodName": "com.aparapi.internal.kernel.KernelRunner.put", "methodParameterType": "Object#", "methodParameterName": "array#", "methodBody": "public void put(Object array) {\n      if (explicit && (kernel.isRunningCL())) {\n         // Only makes sense when we are using OpenCL\n         puts.add(array);\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public", "call_func_name": ["com.aparapi.Kernel.isRunningCL", "java.util.Set.add"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/IKernelBarrier.java", "methodName": "com.aparapi.internal.kernel.IKernelBarrier.cancelBarrier", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void cancelBarrier();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Cancels the barrier. All threads that may be waiting for the barrier are released and barrier is permanently disabled.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/IKernelBarrier.java", "methodName": "com.aparapi.internal.kernel.IKernelBarrier.breakBarrier", "methodParameterType": "Throwable#", "methodParameterName": "e#", "methodBody": "public void breakBarrier(Throwable e);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Breaks the barrier. All threads that may be waiting for the barrier are released and will throw  {@link com.aparapi.exception.AparapiBrokenBarrierException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelDeviceProfile.java", "methodName": "com.aparapi.internal.kernel.KernelDeviceProfile.getElapsedTimeCurrentThread", "methodParameterType": "int#", "methodParameterName": "stage#", "methodBody": "public double getElapsedTimeCurrentThread(int stage) {\n\t   if (stage == ProfilingEvent.START.ordinal()) {\n           return 0;    \n\t   }\n\t   \n\t   Accumulator acc = getAccForThread();\n\n\t   return acc == null ? Double.NaN : (acc.currentTimes[stage] - acc.currentTimes[stage - 1]) / MILLION;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#NumberLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Elapsed time for a single event only and for the current thread, i.e. since the previous stage rather than from the start.", "call_func_name": ["com.aparapi.internal.kernel.ProfilingEvent.ordinal", "com.aparapi.internal.kernel.KernelDeviceProfile.getAccForThread"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelDeviceProfile.java", "methodName": "com.aparapi.internal.kernel.KernelDeviceProfile.getElapsedTimeCurrentThread", "methodParameterType": "int#int#", "methodParameterName": "from#to#", "methodBody": "public double getElapsedTimeCurrentThread(int from, int to) {\n\t   Accumulator acc = getAccForThread();\n\n\t   return acc == null ? Double.NaN : (acc.currentTimes[to] - acc.currentTimes[from]) / MILLION;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Elapsed time for all events  {@code from} through {@code to} for the current thread.", "call_func_name": ["com.aparapi.internal.kernel.KernelDeviceProfile.getAccForThread"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelDeviceProfile.java", "methodName": "com.aparapi.internal.kernel.KernelDeviceProfile.getReportCurrentThread", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public WeakReference<ProfileReport> getReportCurrentThread() {\n\t   Accumulator acc = getAccForThread();\n\n\t   return acc == null ? null : acc.reportRef;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#SimpleName#SimpleName#QualifiedName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(NullLiteral)NullLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the most recent complete report available for the current thread calling this method.<br/> <b>Note1: </b>If the profile report is intended to be kept in memory, the object should be cloned with {@link com.aparapi.ProfileReport#clone()}<br/> <b>Note2: </b>If the thread didn't execute this KernelDeviceProfile instance respective kernel and device, it will return null.", "call_func_name": ["com.aparapi.internal.kernel.KernelDeviceProfile.getAccForThread"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelDeviceProfile.java", "methodName": "com.aparapi.internal.kernel.KernelDeviceProfile.getReportLastThread", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public WeakReference<ProfileReport> getReportLastThread() {\n\t   Accumulator acc = lastAccumulator.get();\n\n\t   return acc == null ? null : acc.reportRef;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#SimpleName#SimpleName#QualifiedName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(NullLiteral)NullLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the most recent complete report available for the last thread that executed this KernelDeviceProfile instance respective kernel and device.<br/> <b>Note1: </b>If the profile report is intended to be kept in memory, the object should be cloned with {@link com.aparapi.ProfileReport#clone()}<br/>", "call_func_name": ["java.util.concurrent.atomic.AtomicReference.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelDeviceProfile.java", "methodName": "com.aparapi.internal.kernel.KernelDeviceProfile.getCumulativeElapsedTimeCurrrentThread", "methodParameterType": "ProfilingEvent#", "methodParameterName": "stage#", "methodBody": "public double getCumulativeElapsedTimeCurrrentThread(ProfilingEvent stage) {\n\t   Accumulator acc = getAccForThread();\n\n\t   return acc == null ? Double.NaN : acc.accumulatedTimes[stage.ordinal()] / MILLION;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ArrayAccess#SimpleName#InfixExpression#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayAccess(SimpleName)SimpleName)InfixExpression)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Elapsed time for a single event only, i.e. since the previous stage rather than from the start, summed over all executions,  for the current thread, if it has executed the kernel on the device assigned to this KernelDeviceProfile instance.", "call_func_name": ["com.aparapi.internal.kernel.KernelDeviceProfile.getAccForThread", "com.aparapi.internal.kernel.ProfilingEvent.ordinal"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelDeviceProfile.java", "methodName": "com.aparapi.internal.kernel.KernelDeviceProfile.getCumulativeElapsedTimeAllCurrentThread", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public double getCumulativeElapsedTimeAllCurrentThread() {\n\t  double sum = 0;\n\t  \n\t  Accumulator acc = getAccForThread();\n\t  if (acc == null) {\n\t\t  return sum;\n\t  }\n\n      for (int i = 1; i <= ProfilingEvent.EXECUTED.ordinal(); ++i) {\n         sum += acc.accumulatedTimes[i];\n      }\n      \n      return sum;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Elapsed time of entire execution, summed over all executions, for the current thread, if it has executed the kernel on the device assigned to this KernelDeviceProfile instance.", "call_func_name": ["com.aparapi.internal.kernel.KernelDeviceProfile.getAccForThread", "com.aparapi.internal.kernel.ProfilingEvent.ordinal"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelDeviceProfile.java", "methodName": "com.aparapi.internal.kernel.KernelDeviceProfile.getElapsedTimeLastThread", "methodParameterType": "int#", "methodParameterName": "stage#", "methodBody": "public double getElapsedTimeLastThread(int stage) {\n\t   if (stage == ProfilingEvent.START.ordinal()) {\n           return 0;    \n\t   }\n\t   \n\t   Accumulator acc = lastAccumulator.get();\n\n\t   return acc == null ? Double.NaN : (acc.currentTimes[stage] - acc.currentTimes[stage - 1]) / MILLION;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#NumberLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Elapsed time for a single event only and for the last thread that finished executing a kernel, i.e. single event only - since the previous stage rather than from the start.", "call_func_name": ["com.aparapi.internal.kernel.ProfilingEvent.ordinal", "java.util.concurrent.atomic.AtomicReference.get"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelDeviceProfile.java", "methodName": "com.aparapi.internal.kernel.KernelDeviceProfile.getElapsedTimeLastThread", "methodParameterType": "int#int#", "methodParameterName": "from#to#", "methodBody": "public double getElapsedTimeLastThread(int from, int to) {\n\t   Accumulator acc = lastAccumulator.get();\n\t   \n\t   return acc == null ? Double.NaN : (acc.currentTimes[to] - acc.currentTimes[from]) / MILLION;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Elapsed time for all events  {@code from} through {@code to} for the last thread that executed this KernelDeviceProfileinstance respective kernel and device.", "call_func_name": ["java.util.concurrent.atomic.AtomicReference.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelDeviceProfile.java", "methodName": "com.aparapi.internal.kernel.KernelDeviceProfile.getCumulativeElapsedTimeGlobal", "methodParameterType": "ProfilingEvent#", "methodParameterName": "stage#", "methodBody": "public double getCumulativeElapsedTimeGlobal(ProfilingEvent stage) {\n\t   final long[] accumulatedTimesHolder = new long[NUM_EVENTS];\n\t   globalAcc.consultAccumulatedTimes(accumulatedTimesHolder);\n\n\t   return accumulatedTimesHolder[stage.ordinal()] / MILLION;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ArrayAccess#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayAccess(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Elapsed time for a single event only, i.e. since the previous stage rather than from the start, summed over all executions, for the last thread that executed this KernelDeviceProfile instance respective kernel and device.", "call_func_name": ["com.aparapi.internal.kernel.ProfilingEvent.ordinal"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelDeviceProfile.java", "methodName": "com.aparapi.internal.kernel.KernelDeviceProfile.getCumulativeElapsedTimeAllGlobal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public double getCumulativeElapsedTimeAllGlobal() {\n\t  final long[] accumulatedTimesHolder = new long[NUM_EVENTS];\n\t  globalAcc.consultAccumulatedTimes(accumulatedTimesHolder);\n\n      double sum = 0;\n      for (int i = 1; i <= ProfilingEvent.EXECUTED.ordinal(); ++i) {\n         sum += accumulatedTimesHolder[i];\n      }\n      return sum;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Elapsed time of entire execution, summed over all executions, for all the threads, that executed the kernel on this device.", "call_func_name": ["com.aparapi.internal.kernel.ProfilingEvent.ordinal"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.KernelArg", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected KernelArg() {\n      // empty\n   }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "123", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getObjArrayBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected byte[] getObjArrayBuffer() {\n      return objArrayBuffer;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the objArrayBuffer", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setObjArrayBuffer", "methodParameterType": "byte[]#", "methodParameterName": "objArrayBuffer#", "methodBody": "protected void setObjArrayBuffer(byte[] objArrayBuffer) {\n      this.objArrayBuffer = objArrayBuffer;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param objArrayBuffer the objArrayBuffer to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getObjArrayByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected ByteBuffer getObjArrayByteBuffer() {\n      return objArrayByteBuffer;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the objArrayByteBuffer", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setObjArrayByteBuffer", "methodParameterType": "ByteBuffer#", "methodParameterName": "objArrayByteBuffer#", "methodBody": "protected void setObjArrayByteBuffer(ByteBuffer objArrayByteBuffer) {\n      this.objArrayByteBuffer = objArrayByteBuffer;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param objArrayByteBuffer the objArrayByteBuffer to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getObjArrayElementModel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected ClassModel getObjArrayElementModel() {\n      return objArrayElementModel;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the objArrayElementModel", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setObjArrayElementModel", "methodParameterType": "ClassModel#", "methodParameterName": "objArrayElementModel#", "methodBody": "protected void setObjArrayElementModel(ClassModel objArrayElementModel) {\n      this.objArrayElementModel = objArrayElementModel;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param objArrayElementModel the objArrayElementModel to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getPrimitiveBuf", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Object getPrimitiveBuf() {\n      return primitiveBuf;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the primitiveBuf", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setPrimitiveBuf", "methodParameterType": "Object#", "methodParameterName": "primitiveBuf#", "methodBody": "protected void setPrimitiveBuf(Object primitiveBuf) {\n      this.primitiveBuf = primitiveBuf;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param primitiveBuf the primitiveBuf to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getPrimitiveSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected int getPrimitiveSize() {\n      return primitiveSize;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the primitiveSize", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setPrimitiveSize", "methodParameterType": "int#", "methodParameterName": "primitiveSize#", "methodBody": "protected void setPrimitiveSize(int primitiveSize) {\n      this.primitiveSize = primitiveSize;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param primitiveSize the primitiveSize to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected int getType() {\n      return type;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "134", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setType", "methodParameterType": "int#", "methodParameterName": "type#", "methodBody": "protected void setType(int type) {\n      this.type = type;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param type the type to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "135", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected String getName() {\n      return name;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "136", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "protected void setName(String name) {\n      this.name = name;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param name the name to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getJavaArray", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Object getJavaArray() {\n      return javaArray;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the javaArray", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "138", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setJavaArray", "methodParameterType": "Object#", "methodParameterName": "javaArray#", "methodBody": "protected void setJavaArray(Object javaArray) {\n      this.javaArray = javaArray;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param javaArray the javaArray to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "139", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getSizeInBytes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected int getSizeInBytes() {\n      return sizeInBytes;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the sizeInBytes", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setSizeInBytes", "methodParameterType": "int#", "methodParameterName": "sizeInBytes#", "methodBody": "protected void setSizeInBytes(int sizeInBytes) {\n      this.sizeInBytes = sizeInBytes;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param sizeInBytes the sizeInBytes to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getNumElements", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected int getNumElements() {\n      return numElements;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the numElements", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "142", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setNumElements", "methodParameterType": "int#", "methodParameterName": "numElements#", "methodBody": "protected void setNumElements(int numElements) {\n      this.numElements = numElements;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param numElements the numElements to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "143", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getArray", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Object getArray() {\n      return array;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the array", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "144", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setArray", "methodParameterType": "Object#", "methodParameterName": "array#", "methodBody": "protected void setArray(Object array) {\n      this.array = array;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param array the array to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Field getField() {\n      return field;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the field", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "146", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setField", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "protected void setField(Field field) {\n      this.field = field;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param field the field to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "147", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getJavaBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Object getJavaBuffer() {\n      return javaBuffer;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the buffer", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "148", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setJavaBuffer", "methodParameterType": "Object#", "methodParameterName": "buffer#", "methodBody": "protected void setJavaBuffer(Object buffer) {\n      this.javaBuffer = buffer;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param buffer the buffer to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "149", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getNumDims", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected int getNumDims() {\n      return numDims;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the number of dimensions to buffer", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "150", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setNumDims", "methodParameterType": "int#", "methodParameterName": "numDims#", "methodBody": "protected void setNumDims(int numDims) {\n      this.numDims = numDims;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param numDims the number of dimensions for the buffer", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.getDims", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected int[] getDims() {\n      return dims;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the dimensions for the buffer", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "152", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelArg.java", "methodName": "com.aparapi.internal.kernel.KernelArg.setDims", "methodParameterType": "int[]#", "methodParameterName": "dims#", "methodBody": "protected void setDims(int[] dims) {\n      this.dims = dims;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param dims the dimsensions for the buffer", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "153", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelManager.java", "methodName": "com.aparapi.internal.kernel.KernelManager.setup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void setup() {\n\t   defaultPreferences = createDefaultPreferences(); \n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Default KernelManager initialization.<br/> Convenience method for being overridden to an empty implementation, so that derived  KernelManager classes can provide non static parameters to their constructors.", "call_func_name": ["com.aparapi.internal.kernel.KernelManager.createDefaultPreferences"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "154", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelManager.java", "methodName": "com.aparapi.internal.kernel.KernelManager.sharedKernelInstance", "methodParameterType": "Class<T>#", "methodParameterName": "kernelClass#", "methodBody": "public static <T extends Kernel> T sharedKernelInstance(Class<T> kernelClass) {\n       return instance().getSharedKernelInstance(kernelClass);\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method returns a shared instance of a given Kernel subclass. The kernelClass needs a no-args constructor, which need not be public. <p>Each new Kernel instance requires a new JNIContext, the creation of which is expensive. There is apparently no simple solution by which a cached JNIContext can be reused for all instances of a given Kernel class, since it is intimately connected with resource aquisition and release. In the absence of a context caching solution, it is often highly desirable to only ever create one instance of any given Kernel subclass, which this method facilitates.</p> <p>In order to maintain thread saftey when using a shared instance, it is necessary to synchronize on the returned kernel for the duration of the process of setting up, executing and extracting the results from that kernel.</p> <p>This method instantiates a Kernel (per Kernel class) via Reflection, and thus can only be used where the Kernel class has a no-args constructor, which need not be public. In fact, if a Kernel subclass is designed to be used in conjunction with this method, it is recommended that its <b>only</b> constructor is a <b>private</b> no-args constructor. </p>", "call_func_name": ["com.aparapi.internal.kernel.KernelManager.instance", "com.aparapi.internal.kernel.KernelManager.getSharedKernelInstance"], "call_func_parameter": [[""], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "155", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelManager.java", "methodName": "com.aparapi.internal.kernel.KernelManager.reportDeviceUsage", "methodParameterType": "StringBuilder#boolean#", "methodParameterName": "builder#withProfilingInfo#", "methodBody": "public void reportDeviceUsage(StringBuilder builder, boolean withProfilingInfo) {\n      builder.append(\"Device Usage by Kernel Subclass\");\n      if (withProfilingInfo) {\n         builder.append(\" (showing mean elapsed times in milliseconds)\");\n      }\n      builder.append(\"\\n\\n\");\n      for (PreferencesWrapper wrapper : preferences.values()) {\n         KernelPreferences preferences = wrapper.getPreferences();\n         Class<? extends Kernel> klass = wrapper.getKernelClass();\n         KernelProfile profile = withProfilingInfo ? profiles.get(klass) : null;\n         builder.append(klass.getName()).append(\":\\n\\tusing \").append(preferences.getPreferredDevice(null).getShortDescription());\n         List<Device> failedDevices = preferences.getFailedDevices();\n         if (failedDevices.size() > 0) {\n            builder.append(\", failed devices = \");\n            for (int i = 0; i < failedDevices.size(); ++i) {\n               builder.append(failedDevices.get(i).getShortDescription());\n               if (i < failedDevices.size() - 1) {\n                  builder.append(\" | \");\n               }\n            }\n         }\n         if (profile != null) {\n            builder.append(\"\\n\");\n            int row = 0;\n            for (KernelDeviceProfile deviceProfile : profile.getDeviceProfiles()) {\n               if (row == 0) {\n                  builder.append(deviceProfile.getTableHeader()).append(\"\\n\");\n               }\n               builder.append(deviceProfile.getAverageAsTableRow()).append(\"\\n\");\n               ++row;\n            }\n         }\n         builder.append(\"\\n\");\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Append a report to  {@code builder} which contains information, per Kernel subclass, on which device is currently being used for thekernel class, and which (if any) devices failed to execute a given Kernel.", "call_func_name": ["java.lang.StringBuilder.append", "java.util.LinkedHashMap.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.aparapi.internal.kernel.PreferencesWrapper.getPreferences", "com.aparapi.internal.kernel.PreferencesWrapper.getKernelClass", "java.util.LinkedHashMap.get", "java.lang.Class.getName", "com.aparapi.internal.kernel.KernelPreferences.getPreferredDevice", "com.aparapi.device.Device.getShortDescription", "com.aparapi.internal.kernel.KernelPreferences.getFailedDevices", "java.util.List.size", "java.util.List.get", "com.aparapi.internal.kernel.KernelProfile.getDeviceProfiles", "com.aparapi.internal.kernel.KernelDeviceProfile.getTableHeader", "com.aparapi.internal.kernel.KernelDeviceProfile.getAverageAsTableRow"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], [""], [""], ["java.lang.Object"], [""], ["com.aparapi.Kernel"], [""], [""], [""], ["int"], [""], [""], [""]], "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelManager.java", "methodName": "com.aparapi.internal.kernel.KernelManager.getDefaultAcceleratorComparator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Comparator<OpenCLDevice> getDefaultAcceleratorComparator() {\n      return new Comparator<OpenCLDevice>() {\n         @Override\n         public int compare(OpenCLDevice left, OpenCLDevice right) {\n            return (right.getMaxComputeUnits() - left.getMaxComputeUnits());\n         }\n      };\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "NB, returns -ve for the better device.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelManager.java", "methodName": "com.aparapi.internal.kernel.KernelManager.getDefaultGPUComparator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected Comparator<OpenCLDevice> getDefaultGPUComparator() {\n      return new Comparator<OpenCLDevice>() {\n         @Override\n         public int compare(OpenCLDevice left, OpenCLDevice right) {\n            return selectLhs(left, right) ? -1 : 1;\n         }\n      };\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#NumberLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression(NumberLiteral)NumberLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "NB, returns -ve for the better device.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelManager.java", "methodName": "com.aparapi.internal.kernel.KernelManager.selectLhsIfCUDA", "methodParameterType": "OpenCLDevice#OpenCLDevice#", "methodParameterName": "_deviceLhs#_deviceRhs#", "methodBody": "protected static boolean selectLhsIfCUDA(OpenCLDevice _deviceLhs, OpenCLDevice _deviceRhs) {\n       if (_deviceLhs.getType() != _deviceRhs.getType()) {\n          return selectLhsByType(_deviceLhs.getType(), _deviceRhs.getType());\n       }\n       return _deviceLhs.getMaxWorkGroupSize() == _deviceRhs.getMaxWorkGroupSize()\n               ? _deviceLhs.getGlobalMemSize() > _deviceRhs.getGlobalMemSize()\n               : _deviceLhs.getMaxWorkGroupSize() > _deviceRhs.getMaxWorkGroupSize();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "NVidia/CUDA architecture reports maxComputeUnits in a completely different context, i.e. maxComputeUnits is not same as (is much less than) the number of OpenCL cores available. <p>Therefore when comparing an NVidia device we use different criteria.</p>", "call_func_name": ["com.aparapi.device.OpenCLDevice.getType", "com.aparapi.device.OpenCLDevice.getMaxWorkGroupSize", "com.aparapi.device.OpenCLDevice.getGlobalMemSize"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelPreferences.java", "methodName": "com.aparapi.internal.kernel.KernelPreferences.getKernelClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class<? extends Kernel> getKernelClass() {\n      return kernelClass;\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "What Kernel subclass is this the preferences for?", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/kernel/KernelPreferences.java", "methodName": "com.aparapi.internal.kernel.KernelPreferences.isDeviceAmongPreferredDevices", "methodParameterType": "Device#", "methodParameterName": "device#", "methodBody": "public boolean isDeviceAmongPreferredDevices(Device device) {\n\t   maybeSetUpDefaultPreferredDevices();\n\t   \n\t   boolean result = false;\n\t   synchronized (this) {\n\t\t   result = preferredDevices.get().contains(device);\n\t   }\n\t   \n\t   return result;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SynchronizedStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(ThisExpression)ThisExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)SynchronizedStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Validates if the specified devices is among the preferred devices for executing the kernel associated with the current kernel preferences.", "call_func_name": ["com.aparapi.internal.kernel.KernelPreferences.maybeSetUpDefaultPreferredDevices", "java.util.concurrent.atomic.AtomicReference.get", "java.util.LinkedHashSet.contains"], "call_func_parameter": [[""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/internal/writer/KernelWriter.java", "methodName": "com.aparapi.internal.writer.KernelWriter.convertType", "methodParameterType": "String#boolean#boolean#", "methodParameterName": "_typeDesc#useClassModel#isLocal#", "methodBody": "@Override public String convertType(String _typeDesc, boolean useClassModel, boolean isLocal) {\n      if (_typeDesc.equals(\"Z\") || _typeDesc.equals(\"boolean\")) {\n         return (cvtBooleanToChar);\n      } else if (_typeDesc.equals(\"[Z\") || _typeDesc.equals(\"boolean[]\")) {\n         return isLocal ? (cvtBooleanArrayToChar) : (cvtBooleanArrayToCharStar);\n      } else if (_typeDesc.equals(\"B\") || _typeDesc.equals(\"byte\")) {\n         return (cvtByteToChar);\n      } else if (_typeDesc.equals(\"[B\") || _typeDesc.equals(\"byte[]\")) {\n         return isLocal ? (cvtByteArrayToChar) : (cvtByteArrayToCharStar);\n      } else if (_typeDesc.equals(\"C\") || _typeDesc.equals(\"char\")) {\n         return (cvtCharToShort);\n      } else if (_typeDesc.equals(\"[C\") || _typeDesc.equals(\"char[]\")) {\n         return isLocal ? (cvtCharArrayToShort) : (cvtCharArrayToShortStar);\n      } else if (_typeDesc.equals(\"[I\") || _typeDesc.equals(\"int[]\")) {\n         return isLocal ? (cvtIntArrayToInt) : (cvtIntArrayToIntStar);\n      } else if (_typeDesc.equals(\"[F\") || _typeDesc.equals(\"float[]\")) {\n         return isLocal ? (cvtFloatArrayToFloat) : (cvtFloatArrayToFloatStar);\n      } else if (_typeDesc.equals(\"[D\") || _typeDesc.equals(\"double[]\")) {\n         return isLocal ? (cvtDoubleArrayToDouble) : (cvtDoubleArrayToDoubleStar);\n      } else if (_typeDesc.equals(\"[J\") || _typeDesc.equals(\"long[]\")) {\n         return isLocal ? (cvtLongArrayToLong) : (cvtLongArrayToLongStar);\n      } else if (_typeDesc.equals(\"[S\") || _typeDesc.equals(\"short[]\")) {\n         return isLocal ? (cvtShortArrayToShort) : (cvtShortArrayToShortStar);\n      } else if (\"[Ljava/util/concurrent/atomic/AtomicInteger;\".equals(_typeDesc) ||\n    \t\t  \"[Ljava.util.concurrent.atomic.AtomicInteger;\".equals(_typeDesc)) {\n    \t return (cvtIntArrayToIntStar);\n      }\n      // if we get this far, we haven't matched anything yet\n      if (useClassModel) {\n         return (ClassModel.convert(_typeDesc, \"\", true));\n      } else {\n         return _typeDesc;\n      }\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#ParenthesizedExpression#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#ParenthesizedExpression#SimpleName#ParenthesizedExpression#ConditionalExpression#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#ParenthesizedExpression#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#ParenthesizedExpression#SimpleName#ParenthesizedExpression#ConditionalExpression#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#ParenthesizedExpression#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#ParenthesizedExpression#SimpleName#ParenthesizedExpression#ConditionalExpression#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#ParenthesizedExpression#SimpleName#ParenthesizedExpression#ConditionalExpression#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#ParenthesizedExpression#SimpleName#ParenthesizedExpression#ConditionalExpression#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#ParenthesizedExpression#SimpleName#ParenthesizedExpression#ConditionalExpression#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#ParenthesizedExpression#SimpleName#ParenthesizedExpression#ConditionalExpression#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#ParenthesizedExpression#SimpleName#ParenthesizedExpression#ConditionalExpression#ReturnStatement#Block#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ParenthesizedExpression#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#BooleanLiteral#MethodInvocation#ParenthesizedExpression#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(ConditionalExpression(SimpleName)SimpleName(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ConditionalExpression)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(ConditionalExpression(SimpleName)SimpleName(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ConditionalExpression)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(ConditionalExpression(SimpleName)SimpleName(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ConditionalExpression)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(ConditionalExpression(SimpleName)SimpleName(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ConditionalExpression)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(ConditionalExpression(SimpleName)SimpleName(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ConditionalExpression)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(ConditionalExpression(SimpleName)SimpleName(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ConditionalExpression)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(ConditionalExpression(SimpleName)SimpleName(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ConditionalExpression)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(ConditionalExpression(SimpleName)SimpleName(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ConditionalExpression)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ParenthesizedExpression)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "These three convert functions are here to perform any type conversion that may be required between Java and OpenCL.", "call_func_name": ["java.lang.String.equals", "com.aparapi.internal.model.ClassModel.convert"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String", "java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getGlobalId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@OpenCLDelegate\n   protected final int getGlobalId() {\n      return getGlobalId(0);\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine the globalId of an executing kernel. <p> The kernel implementation uses the globalId to determine which of the executing kernels (in the global domain space) this invocation is expected to deal with. <p> For example in a <code>SquareKernel</code> implementation: <p> <blockquote><pre> class SquareKernel extends Kernel{ private int values[]; private int squares[]; public SquareKernel(int values[]){ this.values = values; squares = new int[values.length]; } public void run() { int gid = getGlobalID(); squares[gid] = values[gid]", "call_func_name": ["com.aparapi.Kernel.getGlobalId"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "163", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getGroupId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@OpenCLDelegate\n   protected final int getGroupId() {\n      return getGroupId(0);\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine the groupId of an executing kernel. <p> When a <code>Kernel.execute(int globalSize)</code> is invoked for a particular kernel, the runtime will break the work into various 'groups'. <p> A kernel can use <code>getGroupId()</code> to determine which group a kernel is currently dispatched to <p> The following code would capture the groupId for each kernel and map it against globalId. <blockquote><pre> final int[] groupIds = new int[1024]; Kernel kernel = new Kernel(){ public void run() { int gid = getGlobalId(); groupIds[gid] = getGroupId(); } }; kernel.execute(groupIds.length); for (int i=0; i< values.length; i++){ System.out.printf(\"%4d %4d\\n\", i, groupIds[i]); } </pre></blockquote>", "call_func_name": ["com.aparapi.Kernel.getGroupId"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "164", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getPassId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@OpenCLDelegate\n   protected final int getPassId() {\n      return kernelState.getPassId();\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine the passId of an executing kernel. <p> When a <code>Kernel.execute(int globalSize, int passes)</code> is invoked for a particular kernel, the runtime will break the work into various 'groups'. <p> A kernel can use <code>getPassId()</code> to determine which pass we are in.  This is ideal for 'reduce' type phases", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "165", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getLocalId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@OpenCLDelegate\n   protected final int getLocalId() {\n      return getLocalId(0);\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine the local id of an executing kernel. <p> When a <code>Kernel.execute(int globalSize)</code> is invoked for a particular kernel, the runtime will break the work into various 'groups'. <code>getLocalId()</code> can be used to determine the relative id of the current kernel within a specific group. <p> The following code would capture the groupId for each kernel and map it against globalId. <blockquote><pre> final int[] localIds = new int[1024]; Kernel kernel = new Kernel(){ public void run() { int gid = getGlobalId(); localIds[gid] = getLocalId(); } }; kernel.execute(localIds.length); for (int i=0; i< values.length; i++){ System.out.printf(\"%4d %4d\\n\", i, localIds[i]); } </pre></blockquote>", "call_func_name": ["com.aparapi.Kernel.getLocalId"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getLocalSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@OpenCLDelegate\n   protected final int getLocalSize() {\n      return kernelState.getRange().getLocalSize(0);\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine the size of the group that an executing kernel is a member of. <p> When a <code>Kernel.execute(int globalSize)</code> is invoked for a particular kernel, the runtime will break the work into various 'groups'. <code>getLocalSize()</code> allows a kernel to determine the size of the current group. <p> Note groups may not all be the same size. In particular, if <code>(global size)%(# of compute devices)!=0</code>, the runtime can choose to dispatch kernels to groups with differing sizes.", "call_func_name": ["com.aparapi.Range.getLocalSize"], "call_func_parameter": [["int"]], "passed_comments": [{"com.aparapi.Range.getLocalSize": "Get the localSize (of the group) given the requested dimension"}]}, {"index": "167", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getGlobalSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@OpenCLDelegate\n   protected final int getGlobalSize() {\n      return kernelState.getRange().getGlobalSize(0);\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine the value that was passed to <code>Kernel.execute(int globalSize)</code> method.", "call_func_name": ["com.aparapi.Range.getGlobalSize"], "call_func_parameter": [["int"]], "passed_comments": [{"com.aparapi.Range.getGlobalSize": "Get the globalSize (of the range) given the requested dimension"}]}, {"index": "168", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getNumGroups", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@OpenCLDelegate\n   protected final int getNumGroups() {\n      return kernelState.getRange().getNumGroups(0);\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine the number of groups that will be used to execute a kernel <p> When <code>Kernel.execute(int globalSize)</code> is invoked, the runtime will split the work into multiple 'groups'. <code>getNumGroups()</code> returns the total number of groups that will be used.", "call_func_name": ["com.aparapi.Range.getNumGroups"], "call_func_parameter": [["int"]], "passed_comments": [{"com.aparapi.Range.getNumGroups": "Get the number of groups for the given dimension.  <p> This will essentially return globalXXXX/localXXXX for the given dimension (width, height, depth)"}]}, {"index": "169", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.run", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract void run();", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The entry point of a kernel. <p> Every kernel must override this method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.hasFallbackAlgorithm", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean hasFallbackAlgorithm() {\n      return false;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "False by default. In the event that all preferred devices fail to execute a kernel, it is possible to supply an alternate (possibly non-parallel) execution algorithm by overriding this method to return true, and overriding  {@link #executeFallbackAlgorithm(Range,int)} with the alternatealgorithm.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "171", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.executeFallbackAlgorithm", "methodParameterType": "Range#int#", "methodParameterName": "_range#_passId#", "methodBody": "public void executeFallbackAlgorithm(Range _range, int _passId) {\n      // nothing\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "If  {@link #hasFallbackAlgorithm()} has been overriden to return true, this method should be overriden so as toapply a single pass of the kernel's logic to the entire _range. <p> This is not normally required, as fallback to  {@link JavaDevice#THREAD_POOL} will implement the algorithm in parallel. Howeverin the event that thread pool execution may be prohibitively slow, this method might implement a \"quick and dirty\" approximation to the desired result (for example, a simple box-blur as opposed to a gaussian blur in an image processing application).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "172", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.cancelMultiPass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void cancelMultiPass() {\n      if (kernelRunner == null) {\n         return;\n      }\n      kernelRunner.cancelMultiPass();\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Invoking this method flags that once the current pass is complete execution should be abandoned. Due to the complexity of intercommunication between java (or C) and executing OpenCL, this is the best we can do for general cancellation of execution at present. OpenCL 2.0 should introduce pipe mechanisms which will support mid-pass cancellation easily. <p> Note that in the case of thread-pool/pure java execution we could do better already, using Thread.interrupt() (and/or other means) to abandon execution mid-pass. However at present this is not attempted.", "call_func_name": ["com.aparapi.internal.kernel.KernelRunner.cancelMultiPass"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "173", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getCurrentPass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getCurrentPass() {\n      if (kernelRunner == null) {\n         return KernelRunner.PASS_ID_COMPLETED_EXECUTION;\n      }\n      return kernelRunner.getCurrentPass();\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see KernelRunner#getCurrentPass()", "call_func_name": ["com.aparapi.internal.kernel.KernelRunner.getCurrentPass"], "call_func_parameter": [[""]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.getCurrentPass": "Returns the index of the current pass, or one of two special constants with negative values to indicate special progress states. Those constants are {@link #PASS_ID_PREPARING_EXECUTION} to indicate that the Kernel has started executing but not reached the initial pass, or{@link #PASS_ID_COMPLETED_EXECUTION} to indicate that execution is complete (possibly due to early termination via {@link #cancelMultiPass()}), i.e. the Kernel is idle.  {@link #PASS_ID_COMPLETED_EXECUTION} is also returned before the first execution has been invoked.<p>This can be used, for instance, to update a visual progress bar."}]}, {"index": "174", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.isExecuting", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isExecuting() {\n      if (kernelRunner == null) {\n         return false;\n      }\n      return kernelRunner.isExecuting();\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see KernelRunner#isExecuting()", "call_func_name": ["com.aparapi.internal.kernel.KernelRunner.isExecuting"], "call_func_parameter": [[""]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.isExecuting": "True while any of the  {@code execute()} methods are in progress."}]}, {"index": "175", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.clone", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n   public Kernel clone() {\n      try {\n         final Kernel worker = (Kernel) super.clone();\n\n         // We need to be careful to also clone the KernelState\n         worker.kernelState = worker.new KernelState(kernelState); // Qualified copy constructor\n\n         worker.kernelState.setGroupIds(new int[] {0, 0, 0});\n\n         worker.kernelState.setLocalIds(new int[] {0, 0, 0});\n\n         worker.kernelState.setGlobalIds(new int[] {0, 0, 0});\n\n         return worker;\n      } catch (final CloneNotSupportedException e) {\n         // TODO Auto-generated catch block\n         e.printStackTrace();\n         return (null);\n      }\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SuperMethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#NumberLiteral#NumberLiteral#ArrayInitializer#ArrayCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#NumberLiteral#NumberLiteral#ArrayInitializer#ArrayCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#NumberLiteral#NumberLiteral#ArrayInitializer#ArrayCreation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ParenthesizedExpression#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(ArrayInitializer(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ArrayInitializer)ArrayCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(ArrayInitializer(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ArrayInitializer)ArrayCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(ArrayInitializer(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ArrayInitializer)ArrayCreation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(NullLiteral)NullLiteral)ParenthesizedExpression)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "When using a Java Thread Pool Aparapi uses clone to copy the initial instance to each thread. <p> If you choose to override <code>clone()</code> you are responsible for delegating to <code>super.clone();</code>", "call_func_name": ["com.aparapi.Kernel.clone"], "call_func_parameter": [[""]], "passed_comments": [{"com.aparapi.Kernel.clone": "When using a Java Thread Pool Aparapi uses clone to copy the initial instance to each thread. <p> If you choose to override <code>clone()</code> you are responsible for delegating to <code>super.clone();</code>"}]}, {"index": "176", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.acos", "methodParameterType": "float#", "methodParameterName": "a#", "methodBody": "@OpenCLMapping(mapTo = \"acos\")\n   protected float acos(float a) {\n      return (float) Math.acos(a);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#acos(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/acos.html\">acos(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.acos"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "177", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.acos", "methodParameterType": "double#", "methodParameterName": "a#", "methodBody": "@OpenCLMapping(mapTo = \"acos\")\n   protected double acos(double a) {\n      return Math.acos(a);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#acos(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/acos.html\">acos(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.acos"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "178", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.asin", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"asin\")\n   protected float asin(float _f) {\n      return (float) Math.asin(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#asin(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/asin.html\">asin(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.asin"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "179", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.asin", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"asin\")\n   protected double asin(double _d) {\n      return Math.asin(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#asin(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/asin.html\">asin(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.asin"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "180", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.atan", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"atan\")\n   protected float atan(float _f) {\n      return (float) Math.atan(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#atan(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/atan.html\">atan(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.atan"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "181", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.atan", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"atan\")\n   protected double atan(double _d) {\n      return Math.atan(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#atan(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/atan.html\">atan(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.atan"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "182", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.atan2", "methodParameterType": "float#float#", "methodParameterName": "_f1#_f2#", "methodBody": "@OpenCLMapping(mapTo = \"atan2\")\n   protected float atan2(float _f1, float _f2) {\n      return (float) Math.atan2(_f1, _f2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#atan2(double,double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/atan.html\">atan2(float, float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.atan2"], "call_func_parameter": [["double", "double"]], "passed_comments": "/"}, {"index": "183", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.atan2", "methodParameterType": "double#double#", "methodParameterName": "_d1#_d2#", "methodBody": "@OpenCLMapping(mapTo = \"atan2\")\n   protected double atan2(double _d1, double _d2) {\n      return Math.atan2(_d1, _d2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#atan2(double,double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/atan.html\">atan2(double, double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.atan2"], "call_func_parameter": [["double", "double"]], "passed_comments": "/"}, {"index": "184", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.ceil", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"ceil\")\n   protected float ceil(float _f) {\n      return (float) Math.ceil(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#ceil(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/ceil.html\">ceil(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.ceil"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.ceil", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"ceil\")\n   protected double ceil(double _d) {\n      return Math.ceil(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#ceil(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/ceil.html\">ceil(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.ceil"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.cos", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"cos\")\n   protected float cos(float _f) {\n      return (float) Math.cos(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#cos(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/cos.html\">cos(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.cos"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.cos", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"cos\")\n   protected double cos(double _d) {\n      return Math.cos(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#cos(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/cos.html\">cos(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.cos"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.exp", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"exp\")\n   protected float exp(float _f) {\n      return (float) Math.exp(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#exp(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/exp.html\">exp(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.exp"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "189", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.exp", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"exp\")\n   protected double exp(double _d) {\n      return Math.exp(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#exp(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/exp.html\">exp(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.exp"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "190", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.abs", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"fabs\")\n   protected float abs(float _f) {\n      return Math.abs(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#abs(float)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/fabs.html\">fabs(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.abs"], "call_func_parameter": [["float"]], "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.popcount", "methodParameterType": "int#", "methodParameterName": "_i#", "methodBody": "@OpenCLMapping(mapTo = \"popcount\")\n   protected int popcount(int _i) {\n      return Integer.bitCount(_i);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Integer#bitCount(int)} (Java) or <code><a href=\"https://www.khronos.org/registry/OpenCL/sdk/1.2/docs/man/xhtml/popcount.html\">popcount(int)</a></code> (OpenCL).", "call_func_name": ["java.lang.Integer.bitCount"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.popcount", "methodParameterType": "long#", "methodParameterName": "_i#", "methodBody": "@OpenCLMapping(mapTo = \"popcount\")\n   protected long popcount(long _i) {\n      return Long.bitCount(_i);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Long#bitCount(long)} (Java) or <code><a href=\"https://www.khronos.org/registry/OpenCL/sdk/1.2/docs/man/xhtml/popcount.html\">popcount(long)</a></code> (OpenCL).", "call_func_name": ["java.lang.Long.bitCount"], "call_func_parameter": [["long"]], "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.clz", "methodParameterType": "int#", "methodParameterName": "_i#", "methodBody": "@OpenCLMapping(mapTo = \"clz\")\n   protected int clz(int _i) {\n      return Integer.numberOfLeadingZeros(_i);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Integer#numberOfLeadingZeros(int)} (Java) or <code><a href=\"https://www.khronos.org/registry/OpenCL/sdk/1.1/docs/man/xhtml/clz.html\">clz(int)</a></code> (OpenCL).", "call_func_name": ["java.lang.Integer.numberOfLeadingZeros"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.clz", "methodParameterType": "long#", "methodParameterName": "_l#", "methodBody": "@OpenCLMapping(mapTo = \"clz\")\n   protected long clz(long _l) {\n      return Long.numberOfLeadingZeros(_l);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Long#numberOfLeadingZeros(long)} (Java) or <code><a href=\"https://www.khronos.org/registry/OpenCL/sdk/1.1/docs/man/xhtml/clz.html\">clz(long)</a></code> (OpenCL).", "call_func_name": ["java.lang.Long.numberOfLeadingZeros"], "call_func_parameter": [["long"]], "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.abs", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"fabs\")\n   protected double abs(double _d) {\n      return Math.abs(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#abs(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/fabs.html\">fabs(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.abs"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.abs", "methodParameterType": "int#", "methodParameterName": "n#", "methodBody": "@OpenCLMapping(mapTo = \"abs\")\n   protected int abs(int n) {\n      return Math.abs(n);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#abs(int)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/abs.html\">abs(int)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.abs"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.abs", "methodParameterType": "long#", "methodParameterName": "n#", "methodBody": "@OpenCLMapping(mapTo = \"abs\")\n   protected long abs(long n) {\n      return Math.abs(n);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#abs(long)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/abs.html\">abs(long)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.abs"], "call_func_parameter": [["long"]], "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.floor", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"floor\")\n   protected float floor(float _f) {\n      return (float) Math.floor(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#floor(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/abs.html\">floor(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.floor"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.floor", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"floor\")\n   protected double floor(double _d) {\n      return Math.floor(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#floor(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/abs.html\">floor(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.floor"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.max", "methodParameterType": "float#float#", "methodParameterName": "_f1#_f2#", "methodBody": "@OpenCLMapping(mapTo = \"fmax\")\n   protected float max(float _f1, float _f2) {\n      return Math.max(_f1, _f2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#max(float,float)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/fmax.html\">fmax(float, float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.max"], "call_func_parameter": [["float", "float"]], "passed_comments": "/"}, {"index": "201", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.max", "methodParameterType": "double#double#", "methodParameterName": "_d1#_d2#", "methodBody": "@OpenCLMapping(mapTo = \"fmax\")\n   protected double max(double _d1, double _d2) {\n      return Math.max(_d1, _d2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#max(double,double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/fmax.html\">fmax(double, double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.max"], "call_func_parameter": [["double", "double"]], "passed_comments": "/"}, {"index": "202", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.max", "methodParameterType": "int#int#", "methodParameterName": "n1#n2#", "methodBody": "@OpenCLMapping(mapTo = \"max\")\n   protected int max(int n1, int n2) {\n      return Math.max(n1, n2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#max(int,int)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/integerMax.html\">max(int, int)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.max"], "call_func_parameter": [["int", "int"]], "passed_comments": "/"}, {"index": "203", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.max", "methodParameterType": "long#long#", "methodParameterName": "n1#n2#", "methodBody": "@OpenCLMapping(mapTo = \"max\")\n   protected long max(long n1, long n2) {\n      return Math.max(n1, n2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#max(long,long)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/integerMax.html\">max(long, long)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.max"], "call_func_parameter": [["long", "long"]], "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.min", "methodParameterType": "float#float#", "methodParameterName": "_f1#_f2#", "methodBody": "@OpenCLMapping(mapTo = \"fmin\")\n   protected float min(float _f1, float _f2) {\n      return Math.min(_f1, _f2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#min(float,float)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/fmin.html\">fmin(float, float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.min"], "call_func_parameter": [["float", "float"]], "passed_comments": "/"}, {"index": "205", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.min", "methodParameterType": "double#double#", "methodParameterName": "_d1#_d2#", "methodBody": "@OpenCLMapping(mapTo = \"fmin\")\n   protected double min(double _d1, double _d2) {\n      return Math.min(_d1, _d2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#min(double,double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/fmin.html\">fmin(double, double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.min"], "call_func_parameter": [["double", "double"]], "passed_comments": "/"}, {"index": "206", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.min", "methodParameterType": "int#int#", "methodParameterName": "n1#n2#", "methodBody": "@OpenCLMapping(mapTo = \"min\")\n   protected int min(int n1, int n2) {\n      return Math.min(n1, n2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#min(int,int)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/integerMax.html\">min(int, int)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.min"], "call_func_parameter": [["int", "int"]], "passed_comments": "/"}, {"index": "207", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.min", "methodParameterType": "long#long#", "methodParameterName": "n1#n2#", "methodBody": "@OpenCLMapping(mapTo = \"min\")\n   protected long min(long n1, long n2) {\n      return Math.min(n1, n2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#min(long,long)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/integerMax.html\">min(long, long)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.min"], "call_func_parameter": [["long", "long"]], "passed_comments": "/"}, {"index": "208", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.log", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"log\")\n   protected float log(float _f) {\n      return (float) Math.log(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#log(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/log.html\">log(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.log"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "209", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.log", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"log\")\n   protected double log(double _d) {\n      return Math.log(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#log(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/log.html\">log(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.log"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "210", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.pow", "methodParameterType": "float#float#", "methodParameterName": "_f1#_f2#", "methodBody": "@OpenCLMapping(mapTo = \"pow\")\n   protected float pow(float _f1, float _f2) {\n      return (float) Math.pow(_f1, _f2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#pow(double,double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/pow.html\">pow(float, float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.pow"], "call_func_parameter": [["double", "double"]], "passed_comments": "/"}, {"index": "211", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.pow", "methodParameterType": "double#double#", "methodParameterName": "_d1#_d2#", "methodBody": "@OpenCLMapping(mapTo = \"pow\")\n   protected double pow(double _d1, double _d2) {\n      return Math.pow(_d1, _d2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#pow(double,double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/pow.html\">pow(double, double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.pow"], "call_func_parameter": [["double", "double"]], "passed_comments": "/"}, {"index": "212", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.IEEEremainder", "methodParameterType": "float#float#", "methodParameterName": "_f1#_f2#", "methodBody": "@OpenCLMapping(mapTo = \"remainder\")\n   protected float IEEEremainder(float _f1, float _f2) {\n      return (float) Math.IEEEremainder(_f1, _f2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#IEEEremainder(double,double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/remainder.html\">remainder(float, float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.IEEEremainder"], "call_func_parameter": [["double", "double"]], "passed_comments": "/"}, {"index": "213", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.IEEEremainder", "methodParameterType": "double#double#", "methodParameterName": "_d1#_d2#", "methodBody": "@OpenCLMapping(mapTo = \"remainder\")\n   protected double IEEEremainder(double _d1, double _d2) {\n      return Math.IEEEremainder(_d1, _d2);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#IEEEremainder(double,double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/remainder.html\">remainder(double, double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.IEEEremainder"], "call_func_parameter": [["double", "double"]], "passed_comments": "/"}, {"index": "214", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.toRadians", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"radians\")\n   protected float toRadians(float _f) {\n      return (float) Math.toRadians(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#toRadians(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/radians.html\">radians(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.toRadians"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "215", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.toRadians", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"radians\")\n   protected double toRadians(double _d) {\n      return Math.toRadians(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#toRadians(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/radians.html\">radians(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.toRadians"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "216", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.toDegrees", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"degrees\")\n   protected float toDegrees(float _f) {\n      return (float) Math.toDegrees(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#toDegrees(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/degrees.html\">degrees(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.toDegrees"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "217", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.toDegrees", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"degrees\")\n   protected double toDegrees(double _d) {\n      return Math.toDegrees(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#toDegrees(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/degrees.html\">degrees(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.toDegrees"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "218", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.rint", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"rint\")\n   protected float rint(float _f) {\n      return (float) Math.rint(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#rint(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/rint.html\">rint(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.rint"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "219", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.rint", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"rint\")\n   protected double rint(double _d) {\n      return Math.rint(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#rint(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/rint.html\">rint(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.rint"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "220", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.round", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"round\")\n   protected int round(float _f) {\n      return Math.round(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#round(float)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/round.html\">round(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.round"], "call_func_parameter": [["float"]], "passed_comments": "/"}, {"index": "221", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.round", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"round\")\n   protected long round(double _d) {\n      return Math.round(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#round(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/round.html\">round(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.round"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "222", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.sin", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"sin\")\n   protected float sin(float _f) {\n      return (float) Math.sin(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#sin(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/sin.html\">sin(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.sin"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "223", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.sin", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"sin\")\n   protected double sin(double _d) {\n      return Math.sin(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#sin(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/sin.html\">sin(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.sin"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "224", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.sqrt", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"sqrt\")\n   protected float sqrt(float _f) {\n      return (float) Math.sqrt(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#sqrt(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/sqrt.html\">sqrt(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.sqrt"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "225", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.sqrt", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"sqrt\")\n   protected double sqrt(double _d) {\n      return Math.sqrt(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#sqrt(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/sqrt.html\">sqrt(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.sqrt"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "226", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.tan", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"tan\")\n   protected float tan(float _f) {\n      return (float) Math.tan(_f);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#tan(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/tan.html\">tan(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.tan"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "227", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.tan", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"tan\")\n   protected double tan(double _d) {\n      return Math.tan(_d);\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#tan(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/tan.html\">tan(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.tan"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "228", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.fma", "methodParameterType": "float#float#float#", "methodParameterName": "a#b#c#", "methodBody": "@OpenCLMapping(mapTo = \"fma\")\n    protected float fma(final float a, final float b, final float c) {\n       return a * b + c;\n    }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either {code}a", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "229", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.fma", "methodParameterType": "double#double#double#", "methodParameterName": "a#b#c#", "methodBody": "@OpenCLMapping(mapTo = \"fma\")\n    protected double fma(final double a, final double b, final double c) {\n       return a * b + c;\n    }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either {code}a", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "230", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.sinh", "methodParameterType": "double#", "methodParameterName": "x#", "methodBody": "@OpenCLMapping(mapTo = \"sinh\")\n    protected final double sinh(final double x) {\n        return Math.sinh(x);\n    }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#sinh(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/sin.html\">sinh(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.sinh"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "231", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.sinh", "methodParameterType": "float#", "methodParameterName": "x#", "methodBody": "@OpenCLMapping(mapTo = \"sinh\")\n    protected final float sinh(final float x) {\n        return (float)(Math.sinh(x));\n    }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#sinh(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/sin.html\">sinh(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.sinh"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "232", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.sinpi", "methodParameterType": "double#", "methodParameterName": "a#", "methodBody": "@OpenCLMapping(mapTo = \"sinpi\")\n    protected final double sinpi(final double a) {\n        return Math.sin(a * Math.PI);\n    }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Backed by either  {@link java.lang.Math#sin(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/tan.html\">sinpi(double)</a></code> (OpenCL).This method is equivelant to <code>Math.sin(a", "call_func_name": ["java.lang.Math.sin"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "233", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.sinpi", "methodParameterType": "float#", "methodParameterName": "a#", "methodBody": "@OpenCLMapping(mapTo = \"sinpi\")\n    protected final float sinpi(final float a) {\n        return (float)(Math.sin(a * Math.PI));\n    }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#ParenthesizedExpression#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)ParenthesizedExpression)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Backed by either  {@link java.lang.Math#sin(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/tan.html\">sinpi(float)</a></code> (OpenCL).This method is equivelant to <code>Math.sin(a", "call_func_name": ["java.lang.Math.sin"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "234", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.tanh", "methodParameterType": "double#", "methodParameterName": "x#", "methodBody": "@OpenCLMapping(mapTo = \"tanh\")\n    protected final double tanh(final double x) {\n        return Math.tanh(x);\n    }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#tanh(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/tan.html\">tanh(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.tanh"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "235", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.tanh", "methodParameterType": "float#", "methodParameterName": "x#", "methodBody": "@OpenCLMapping(mapTo = \"tanh\")\n    protected final float tanh(final float x) {\n        return (float)(Math.tanh(x));\n    }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to either  {@link java.lang.Math#tanh(float)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/tan.html\">tanh(float)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.tanh"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "236", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.tanpi", "methodParameterType": "double#", "methodParameterName": "a#", "methodBody": "@OpenCLMapping(mapTo = \"tanpi\")\n    protected final double tanpi(final double a) {\n        return Math.tan(a * Math.PI);\n    }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Backed by either  {@link java.lang.Math#tan(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/tan.html\">tanpi(double)</a></code> (OpenCL).This method is equivelant to <code>Math.tan(a", "call_func_name": ["java.lang.Math.tan"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "237", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.tanpi", "methodParameterType": "float#", "methodParameterName": "a#", "methodBody": "@OpenCLMapping(mapTo = \"tanpi\")\n    protected final float tanpi(final float a) {\n        return (float)(Math.tan(a * Math.PI));\n    }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#ParenthesizedExpression#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)ParenthesizedExpression)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Backed by either  {@link java.lang.Math#tan(double)} (Java) or <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/tan.html\">tanpi(float)</a></code> (OpenCL).This method is equivelant to <code>Math.tan(a", "call_func_name": ["java.lang.Math.tan"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "238", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.rsqrt", "methodParameterType": "float#", "methodParameterName": "_f#", "methodBody": "@OpenCLMapping(mapTo = \"rsqrt\")\n   protected float rsqrt(float _f) {\n      return (1.0f / (float) Math.sqrt(_f));\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#NumberLiteral#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Computes  inverse square root using  {@link java.lang.Math#sqrt(double)} (Java) or delegates to <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/sqrt.html\">rsqrt(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.sqrt"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "239", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.rsqrt", "methodParameterType": "double#", "methodParameterName": "_d#", "methodBody": "@OpenCLMapping(mapTo = \"rsqrt\")\n   protected double rsqrt(double _d) {\n      return (1.0 / Math.sqrt(_d));\n   }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Computes  inverse square root using  {@link java.lang.Math#sqrt(double)} (Java) or delegates to <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/sqrt.html\">rsqrt(double)</a></code> (OpenCL).User should note the differences in precision between Java and OpenCL's implementation of arithmetic functions to determine whether the difference in precision is acceptable.", "call_func_name": ["java.lang.Math.sqrt"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "240", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.atomicAdd", "methodParameterType": "int[]#int#int#", "methodParameterName": "_arr#_index#_delta#", "methodBody": "@OpenCLMapping(atomic32 = true)\n   protected int atomicAdd(int[] _arr, int _index, int _delta) {\n      if (!Config.disableUnsafe) {\n         return UnsafeWrapper.atomicAdd(_arr, _index, _delta);\n      } else {\n         synchronized (_arr) {\n            final int previous = _arr[_index];\n            _arr[_index] += _delta;\n            return previous;\n         }\n      }\n   }", "AST": "Javadoc#SimpleName#SimpleName#BooleanLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#SynchronizedStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(SynchronizedStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)SynchronizedStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Atomically adds <code>_delta</code> value to <code>_index</code> element of array <code>_arr</code> (Java) or delegates to <code><a href=\"http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/atomic_add.html\">atomic_add(volatile int", "call_func_name": ["com.aparapi.internal.util.UnsafeWrapper.atomicAdd"], "call_func_parameter": [["int[]", "int", "int"]], "passed_comments": "/"}, {"index": "241", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.localBarrier", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@OpenCLDelegate\n   @Experimental\n   protected final void localBarrier() {\n      kernelState.awaitOnLocalBarrier();\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Wait for all kernels in the current work group to rendezvous at this call before continuing execution.<br/>  It will also enforce memory ordering, such that modifications made by each thread in the work-group, to the memory, before entering into this barrier call will be visible by all threads leaving the barrier. <br/> <br/><b>Note1: </b>In OpenCL will execute as barrier(CLK_LOCAL_MEM_FENCE), which will have a different behaviour than in Java, because it will only guarantee visibility of modifications made to <b>local memory space</b> to all threads leaving the barrier. <br/> <br/><b>Note2: </b>In OpenCL it is required that all threads must enter the same if blocks and must iterate the same number of times in all loops (for, while, ...). <br/> <br/><b>Note3: </b> Java version is identical to localBarrier(), globalBarrier() and localGlobalBarrier()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "242", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.globalBarrier", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@OpenCLDelegate\n   @Experimental\n   protected final void globalBarrier() {\n\t   kernelState.awaitOnLocalBarrier();\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Wait for all kernels in the current work group to rendezvous at this call before continuing execution.<br/>  It will also enforce memory ordering, such that modifications made by each thread in the work-group, to the memory, before entering into this barrier call will be visible by all threads leaving the barrier. <br/>  <br/><b>Note1: </b>In OpenCL will execute as barrier(CLK_GLOBAL_MEM_FENCE), which will have a different behaviour; than in Java, because it will only guarantee visibility of modifications made to <b>global memory space</b> to all threads, in the work group, leaving the barrier. <br/> <br/><b>Note2: </b>In OpenCL it is required that all threads must enter the same if blocks and must iterate the same number of times in all loops (for, while, ...). <br/> <br/><b>Note3: </b> Java version is identical to localBarrier(), globalBarrier() and localGlobalBarrier()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "243", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.localGlobalBarrier", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@OpenCLDelegate\n   @Experimental\n   protected final void localGlobalBarrier() {\n\t   kernelState.awaitOnLocalBarrier();\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Wait for all kernels in the current work group to rendezvous at this call before continuing execution.<br/>  It will also enforce memory ordering, such that modifications made by each thread in the work-group, to the memory, before entering into this barrier call will be visible by all threads leaving the barrier. <br/>  <br/><b>Note1: </b>When in doubt, use this barrier instead of localBarrier() or globalBarrier(), despite the possible performance loss. <br/> <br/><b>Note2: </b>In OpenCL will execute as barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE), which will  have the same behaviour than in Java, because it will guarantee the visibility of modifications made to  <b>any of the memory spaces</b> to all threads, in the work group, leaving the barrier. <br/> <br/><b>Note3: </b>In OpenCL it is required that all threads must enter the same if blocks and must iterate the same number of times in all loops (for, while, ...). <br/> <br/><b>Note4: </b> Java version is identical to localBarrier(), globalBarrier() and localGlobalBarrier()", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "244", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.registerProfileReportObserver", "methodParameterType": "IProfileReportObserver#", "methodParameterName": "observer#", "methodBody": "public void registerProfileReportObserver(IProfileReportObserver observer) {\n      KernelProfile profile = KernelManager.instance().getProfile(getClass());\n      synchronized (profile) {\n    \t  profile.setReportObserver(observer);\n      }\t   \n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Registers a new profile report observer to receive profile reports as they're produced. This is the method recommended when the client application desires to receive all the execution profiles for the current kernel instance on all devices over all client threads running such kernel with a single observer<br/> <b>Note1: </b>A report will be generated by a thread that finishes executing a kernel. In multithreaded execution environments it is up to the observer implementation to handle thread safety. <br/> <b>Note2: </b>To cancel the report subscription just set observer to <code>null</code> value. <br/>", "call_func_name": ["com.aparapi.internal.kernel.KernelManager.instance", "java.lang.Object.getClass", "com.aparapi.internal.kernel.KernelManager.getProfile", "com.aparapi.internal.kernel.KernelProfile.setReportObserver"], "call_func_parameter": [[""], [""], ["java.lang.Class"], ["com.aparapi.IProfileReportObserver"]], "passed_comments": "/"}, {"index": "245", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getProfileReportLastThread", "methodParameterType": "Device#", "methodParameterName": "device#", "methodBody": "public WeakReference<ProfileReport> getProfileReportLastThread(Device device) {\n\t   KernelProfile profile = KernelManager.instance().getProfile(getClass());\n\t   KernelDeviceProfile deviceProfile = null;\n\t   boolean hasObserver = false;\n\t   synchronized (profile) {\n\t\t   if (profile.getReportObserver() != null) {\n\t\t\t   hasObserver = true;\n\t\t   }\n\t\t   deviceProfile = profile.getDeviceProfile(device);\n\t   }\n\n\t   if (hasObserver) {\n\t\t   return null;\n\t   }\n\t   \n\t   return deviceProfile.getReportLastThread();\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SynchronizedStatement#SimpleName#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)SynchronizedStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves a profile report for the last thread that executed this kernel on the given device. A report will only be available if at least one thread executed the kernel on the device. <br/> <b>Note1: </b>If the profile report is intended to be kept in memory, the object should be cloned with {@link com.aparapi.ProfileReport#clone()}<br/>", "call_func_name": ["com.aparapi.internal.kernel.KernelManager.instance", "java.lang.Object.getClass", "com.aparapi.internal.kernel.KernelManager.getProfile", "com.aparapi.internal.kernel.KernelProfile.getReportObserver", "com.aparapi.internal.kernel.KernelProfile.getDeviceProfile", "com.aparapi.internal.kernel.KernelDeviceProfile.getReportLastThread"], "call_func_parameter": [[""], [""], ["java.lang.Class"], [""], ["com.aparapi.device.Device"], [""]], "passed_comments": [{"com.aparapi.internal.kernel.KernelDeviceProfile.getReportLastThread": "Retrieves the most recent complete report available for the last thread that executed this KernelDeviceProfile instance respective kernel and device.<br/> <b>Note1: </b>If the profile report is intended to be kept in memory, the object should be cloned with {@link com.aparapi.ProfileReport#clone()}<br/>"}]}, {"index": "246", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getProfileReportCurrentThread", "methodParameterType": "Device#", "methodParameterName": "device#", "methodBody": "public WeakReference<ProfileReport> getProfileReportCurrentThread(Device device) {\n\t   KernelProfile profile = KernelManager.instance().getProfile(getClass());\n\t   KernelDeviceProfile deviceProfile = null;\n\t   boolean hasObserver = false;\n\t   synchronized (profile) {\n\t\t   if (profile.getReportObserver() != null) {\n\t\t\t   hasObserver = true;\n\t\t   }\n\t\t   deviceProfile = profile.getDeviceProfile(device);\n\t   }\n\n\t   if (hasObserver) {\n\t\t   return null;\n\t   }\n\t   \n\t   return deviceProfile.getReportCurrentThread();\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SynchronizedStatement#SimpleName#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)SynchronizedStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the most recent complete report available for the current thread calling this method for the current kernel instance and executed on the given device. <br/> <b>Note1: </b>If the profile report is intended to be kept in memory, the object should be cloned with {@link com.aparapi.ProfileReport#clone()}<br/> <b>Note2: </b>If the thread didn't execute this kernel on the specified device, it will return null.", "call_func_name": ["com.aparapi.internal.kernel.KernelManager.instance", "java.lang.Object.getClass", "com.aparapi.internal.kernel.KernelManager.getProfile", "com.aparapi.internal.kernel.KernelProfile.getReportObserver", "com.aparapi.internal.kernel.KernelProfile.getDeviceProfile", "com.aparapi.internal.kernel.KernelDeviceProfile.getReportCurrentThread"], "call_func_parameter": [[""], [""], ["java.lang.Class"], [""], ["com.aparapi.device.Device"], [""]], "passed_comments": [{"com.aparapi.internal.kernel.KernelDeviceProfile.getReportCurrentThread": "Retrieves the most recent complete report available for the current thread calling this method.<br/> <b>Note1: </b>If the profile report is intended to be kept in memory, the object should be cloned with {@link com.aparapi.ProfileReport#clone()}<br/> <b>Note2: </b>If the thread didn't execute this KernelDeviceProfile instance respective kernel and device, it will return null."}]}, {"index": "247", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getExecutionTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public double getExecutionTime() {\n      KernelProfile profile = KernelManager.instance().getProfile(getClass());\n      synchronized (profile) {\n         return profile.getLastExecutionTime();\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Determine the execution time of the previous Kernel.execute(range) called from the last thread that ran and  executed on the most recently used device. <br/> <b>Note1: </b>This is kept for backwards compatibility only, usage of either {@link #getProfileReportLastThread(Device)} or {@link #registerProfileReportObserver(IProfileReportObserver)}is encouraged instead.<br/> <b>Note2: </b>Calling this method is not recommended when using more than a single thread to execute the same kernel, or when running kernels on more than one device concurrently.<br/> <br/> Note that for the first call this will include the conversion time.<br/> <br/>", "call_func_name": ["com.aparapi.internal.kernel.KernelManager.instance", "java.lang.Object.getClass", "com.aparapi.internal.kernel.KernelManager.getProfile", "com.aparapi.internal.kernel.KernelProfile.getLastExecutionTime"], "call_func_parameter": [[""], [""], ["java.lang.Class"], [""]], "passed_comments": "/"}, {"index": "248", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getConversionTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public double getConversionTime() {\n      KernelProfile profile = KernelManager.instance().getProfile(getClass());\n      synchronized (profile) {\n         return profile.getLastConversionTime();\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Determine the time taken to convert bytecode to OpenCL for first Kernel.execute(range) call. <br/> <b>Note1: </b>This is kept for backwards compatibility only, usage of either {@link #getProfileReportLastThread(Device)} or {@link #registerProfileReportObserver(IProfileReportObserver)}is encouraged instead.<br/> <b>Note2: </b>Calling this method is not recommended when using more than a single thread to execute the same kernel, or when running kernels on more than one device concurrently.<br/> <br/> Note that for the first call this will include the conversion time.<br/> <br/>", "call_func_name": ["com.aparapi.internal.kernel.KernelManager.instance", "java.lang.Object.getClass", "com.aparapi.internal.kernel.KernelManager.getProfile", "com.aparapi.internal.kernel.KernelProfile.getLastConversionTime"], "call_func_parameter": [[""], [""], ["java.lang.Class"], [""]], "passed_comments": "/"}, {"index": "249", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getAccumulatedExecutionTimeCurrentThread", "methodParameterType": "Device#", "methodParameterName": "device#", "methodBody": "public double getAccumulatedExecutionTimeCurrentThread(Device device) {\n      KernelProfile profile = KernelManager.instance().getProfile(getClass());\n      synchronized (profile) {\n    \t  KernelDeviceProfile deviceProfile = profile.getDeviceProfile(device);\n    \t  if (deviceProfile == null) {\n    \t\t  return Double.NaN;\n    \t  }\n    \t  return deviceProfile.getCumulativeElapsedTimeAllCurrentThread() / KernelProfile.MILLION;\n      }\t\t\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Determine the total execution time of all previous kernel executions called from the current thread, calling this method, that executed the current kernel on the specified device. <br/> <b>Note1: </b>This is the recommended method to retrieve the accumulated execution time for a single current thread, even when doing multithreading for the same kernel and device. <br/> Note that this will include the initial conversion time.", "call_func_name": ["com.aparapi.internal.kernel.KernelManager.instance", "java.lang.Object.getClass", "com.aparapi.internal.kernel.KernelManager.getProfile", "com.aparapi.internal.kernel.KernelProfile.getDeviceProfile", "com.aparapi.internal.kernel.KernelDeviceProfile.getCumulativeElapsedTimeAllCurrentThread"], "call_func_parameter": [[""], [""], ["java.lang.Class"], ["com.aparapi.device.Device"], [""]], "passed_comments": [{"com.aparapi.internal.kernel.KernelDeviceProfile.getCumulativeElapsedTimeAllCurrentThread": "Elapsed time of entire execution, summed over all executions, for the current thread, if it has executed the kernel on the device assigned to this KernelDeviceProfile instance."}]}, {"index": "250", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getAccumulatedExecutionTimeAllThreads", "methodParameterType": "Device#", "methodParameterName": "device#", "methodBody": "public double getAccumulatedExecutionTimeAllThreads(Device device) {\n      KernelProfile profile = KernelManager.instance().getProfile(getClass());\n      synchronized (profile) {\n    \t  KernelDeviceProfile deviceProfile = profile.getDeviceProfile(device);\n    \t  if (deviceProfile == null) {\n    \t\t  return Double.NaN;\n    \t  }\n    \t  return deviceProfile.getCumulativeElapsedTimeAllGlobal() / KernelProfile.MILLION;\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Determine the total execution time of all produced profile reports from all threads that executed the current kernel on the specified device. <br/> <b>Note1: </b>This is the recommended method to retrieve the accumulated execution time, even when doing multithreading for the same kernel and device. <br/> Note that this will include the initial conversion time.", "call_func_name": ["com.aparapi.internal.kernel.KernelManager.instance", "java.lang.Object.getClass", "com.aparapi.internal.kernel.KernelManager.getProfile", "com.aparapi.internal.kernel.KernelProfile.getDeviceProfile", "com.aparapi.internal.kernel.KernelDeviceProfile.getCumulativeElapsedTimeAllGlobal"], "call_func_parameter": [[""], [""], ["java.lang.Class"], ["com.aparapi.device.Device"], [""]], "passed_comments": [{"com.aparapi.internal.kernel.KernelDeviceProfile.getCumulativeElapsedTimeAllGlobal": "Elapsed time of entire execution, summed over all executions, for all the threads, that executed the kernel on this device."}]}, {"index": "251", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getAccumulatedExecutionTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public double getAccumulatedExecutionTime() {\n      KernelProfile profile = KernelManager.instance().getProfile(getClass());\n      synchronized (profile) {\n         return profile.getAccumulatedTotalTime();\n      }\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Determine the total execution time of all previous Kernel.execute(range) calls for all threads that ran this kernel for the device used in the last kernel execution.    <br/> <b>Note1: </b>This is kept for backwards compatibility only, usage of  {@link #getAccumulatedExecutionTimeAllThreads(Device)} is encouraged instead.<br/><b>Note2: </b>Calling this method is not recommended when using more than a single thread to execute the same kernel on multiple devices concurrently.<br/> <br/> Note that this will include the initial conversion time.", "call_func_name": ["com.aparapi.internal.kernel.KernelManager.instance", "java.lang.Object.getClass", "com.aparapi.internal.kernel.KernelManager.getProfile", "com.aparapi.internal.kernel.KernelProfile.getAccumulatedTotalTime"], "call_func_parameter": [[""], [""], ["java.lang.Class"], [""]], "passed_comments": "/"}, {"index": "252", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.execute", "methodParameterType": "Range#", "methodParameterName": "_range#", "methodBody": "public synchronized Kernel execute(Range _range) {\n      return (execute(_range, 1));\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Start execution of <code>_range</code> kernels. <p> When <code>kernel.execute(globalSize)</code> is invoked, Aparapi will schedule the execution of <code>globalSize</code> kernels. If the execution mode is GPU then the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. <p>", "call_func_name": ["com.aparapi.Kernel.execute"], "call_func_parameter": [["com.aparapi.Range", "int"]], "passed_comments": [{"com.aparapi.Kernel.execute": "Start execution of <code>_passes</code> iterations of <code>_range</code> kernels. <p> When <code>kernel.execute(_range, _passes)</code> is invoked, Aparapi will schedule the execution of <code>_reange</code> kernels. If the execution mode is GPU then the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. <p>"}]}, {"index": "253", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.execute", "methodParameterType": "int#", "methodParameterName": "_range#", "methodBody": "public synchronized Kernel execute(int _range) {\n      return (execute(createRange(_range), 1));\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#MethodInvocation#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Start execution of <code>_range</code> kernels. <p> When <code>kernel.execute(_range)</code> is 1invoked, Aparapi will schedule the execution of <code>_range</code> kernels. If the execution mode is GPU then the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. <p> Since adding the new <code>Range class</code> this method offers backward compatibility and merely defers to <code> return (execute(Range.create(_range), 1));</code>.", "call_func_name": ["com.aparapi.Kernel.createRange", "com.aparapi.Kernel.execute"], "call_func_parameter": [["int"], ["com.aparapi.Range", "int"]], "passed_comments": [{"com.aparapi.Kernel.execute": "Start execution of <code>_passes</code> iterations of <code>_range</code> kernels. <p> When <code>kernel.execute(_range, _passes)</code> is invoked, Aparapi will schedule the execution of <code>_reange</code> kernels. If the execution mode is GPU then the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. <p>"}]}, {"index": "254", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.execute", "methodParameterType": "Range#int#", "methodParameterName": "_range#_passes#", "methodBody": "public synchronized Kernel execute(Range _range, int _passes) {\n      return (execute(\"run\", _range, _passes));\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Start execution of <code>_passes</code> iterations of <code>_range</code> kernels. <p> When <code>kernel.execute(_range, _passes)</code> is invoked, Aparapi will schedule the execution of <code>_reange</code> kernels. If the execution mode is GPU then the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. <p>", "call_func_name": ["com.aparapi.Kernel.execute"], "call_func_parameter": [["java.lang.String", "com.aparapi.Range", "int"]], "passed_comments": [{"com.aparapi.Kernel.execute": "Start execution of <code>globalSize</code> kernels for the given entrypoint. <p> When <code>kernel.execute(\"entrypoint\", globalSize)</code> is invoked, Aparapi will schedule the execution of <code>globalSize</code> kernels. If the execution mode is GPU then the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. <p>"}]}, {"index": "255", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.execute", "methodParameterType": "int#int#", "methodParameterName": "_range#_passes#", "methodBody": "public synchronized Kernel execute(int _range, int _passes) {\n      return (execute(createRange(_range), _passes));\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Start execution of <code>_passes</code> iterations over the <code>_range</code> of kernels. <p> When <code>kernel.execute(_range)</code> is invoked, Aparapi will schedule the execution of <code>_range</code> kernels. If the execution mode is GPU then the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. <p> Since adding the new <code>Range class</code> this method offers backward compatibility and merely defers to <code> return (execute(Range.create(_range), 1));</code>.", "call_func_name": ["com.aparapi.Kernel.createRange", "com.aparapi.Kernel.execute"], "call_func_parameter": [["int"], ["com.aparapi.Range", "int"]], "passed_comments": [{"com.aparapi.Kernel.execute": "Start execution of <code>_passes</code> iterations of <code>_range</code> kernels. <p> When <code>kernel.execute(_range, _passes)</code> is invoked, Aparapi will schedule the execution of <code>_reange</code> kernels. If the execution mode is GPU then the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. <p>"}]}, {"index": "256", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.execute", "methodParameterType": "String#Range#", "methodParameterName": "_entrypoint#_range#", "methodBody": "public synchronized Kernel execute(String _entrypoint, Range _range) {\n      return (execute(_entrypoint, _range, 1));\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Start execution of <code>globalSize</code> kernels for the given entrypoint. <p> When <code>kernel.execute(\"entrypoint\", globalSize)</code> is invoked, Aparapi will schedule the execution of <code>globalSize</code> kernels. If the execution mode is GPU then the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. <p>", "call_func_name": ["com.aparapi.Kernel.execute"], "call_func_parameter": [["java.lang.String", "com.aparapi.Range", "int"]], "passed_comments": [{"com.aparapi.Kernel.execute": "Start execution of <code>globalSize</code> kernels for the given entrypoint. <p> When <code>kernel.execute(\"entrypoint\", globalSize)</code> is invoked, Aparapi will schedule the execution of <code>globalSize</code> kernels. If the execution mode is GPU then the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. <p>"}]}, {"index": "257", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.execute", "methodParameterType": "String#Range#int#", "methodParameterName": "_entrypoint#_range#_passes#", "methodBody": "public synchronized Kernel execute(String _entrypoint, Range _range, int _passes) {\n      return prepareKernelRunner().execute(_entrypoint, _range, _passes);\n   }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Start execution of <code>globalSize</code> kernels for the given entrypoint. <p> When <code>kernel.execute(\"entrypoint\", globalSize)</code> is invoked, Aparapi will schedule the execution of <code>globalSize</code> kernels. If the execution mode is GPU then the kernels will execute as OpenCL code on the GPU device. Otherwise, if the mode is JTP, the kernels will execute as a pool of Java threads on the CPU. <p>", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.execute"], "call_func_parameter": [[""], ["java.lang.String", "com.aparapi.Range", "int"]], "passed_comments": "/"}, {"index": "258", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.setAutoCleanUpArrays", "methodParameterType": "boolean#", "methodParameterName": "autoCleanUpArrays#", "methodBody": "public void setAutoCleanUpArrays(boolean autoCleanUpArrays) {\n      this.autoCleanUpArrays = autoCleanUpArrays;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Property which if true enables automatic calling of  {@link #cleanUpArrays()} following each execution.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "259", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.cleanUpArrays", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public synchronized void cleanUpArrays() {\n      if (kernelRunner != null) {\n         kernelRunner.cleanUpArrays();\n      }\n   }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Frees the bulk of the resources used by this kernel, by setting array sizes in non-primitive  {@link KernelArg}s to 1 (0 size is prohibited) and invoking kernel execution on a zero size range. Unlike  {@link #dispose()}, this does not prohibit further invocations of this kernel, as sundry resources such as OpenCL queues are <b>not</b> freed by this method. <p>This allows a \"dormant\" Kernel to remain in existence without undue strain on GPU resources, which may be strongly preferable to disposing a Kernel and recreating another one later, as creation/use of a new Kernel (specifically creation of its associated OpenCL context) is expensive.</p> <p>Note that where the underlying array field is declared final, for obvious reasons it is not resized to zero.</p>", "call_func_name": ["com.aparapi.internal.kernel.KernelRunner.cleanUpArrays"], "call_func_parameter": [[""]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.cleanUpArrays": "@see Kernel#cleanUpArrays()."}]}, {"index": "260", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.dispose", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public synchronized void dispose() {\n      if (kernelRunner != null) {\n         kernelRunner.dispose();\n         kernelRunner = null;\n      }\n   }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Release any resources associated with this Kernel. <p> When the execution mode is <code>CPU</code> or <code>GPU</code>, Aparapi stores some OpenCL resources in a data structure associated with the kernel instance.  The <code>dispose()</code> method must be called to release these resources. <p> If <code>execute(int _globalSize)</code> is called after <code>dispose()</code> is called the results are undefined.", "call_func_name": ["com.aparapi.internal.kernel.KernelRunner.dispose"], "call_func_parameter": [[""]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.dispose": "<code>Kernel.dispose()</code> delegates to <code>KernelRunner.dispose()</code> which delegates to <code>disposeJNI()</code> to actually close JNI data structures.<br/>"}]}, {"index": "261", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.isAllowDevice", "methodParameterType": "Device#", "methodParameterName": "_device#", "methodBody": "public boolean isAllowDevice(Device _device) {\n      return true;\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true by default, may be overriden to allow vetoing of a device or devices by a given Kernel instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "262", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getExecutionMode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n   public EXECUTION_MODE getExecutionMode() {\n      return (executionMode);\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated See {@link EXECUTION_MODE}<p> Return the current execution mode. Before a Kernel executes, this return value will be the execution mode as determined by the setting of the EXECUTION_MODE enumeration. By default, this setting is either <b>GPU</b> if OpenCL is available on the target system, or <b>JTP</b> otherwise. This default setting can be changed by calling setExecutionMode(). <p> After a Kernel executes, the return value will be the mode in which the Kernel actually executed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "263", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.setExecutionMode", "methodParameterType": "EXECUTION_MODE#", "methodParameterName": "_executionMode#", "methodBody": "@Deprecated\n   public void setExecutionMode(EXECUTION_MODE _executionMode) {\n      executionMode = _executionMode;\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@deprecated See {@link EXECUTION_MODE}<p> Set the execution mode. <p> This should be regarded as a request. The real mode will be determined at runtime based on the availability of OpenCL and the characteristics of the workload.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "264", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.setFallbackExecutionMode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n   public void setFallbackExecutionMode() {\n      executionMode = EXECUTION_MODE.getFallbackExecutionMode();\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@deprecated See {@link EXECUTION_MODE}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "265", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.setExplicit", "methodParameterType": "boolean#", "methodParameterName": "_explicit#", "methodBody": "public void setExplicit(boolean _explicit) {\n      prepareKernelRunner().setExplicit(_explicit);\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "For dev purposes (we should remove this for production) allow us to define that this Kernel uses explicit memory management", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.setExplicit"], "call_func_parameter": [[""], ["boolean"]], "passed_comments": "/"}, {"index": "266", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.isExplicit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isExplicit() {\n      return prepareKernelRunner().isExplicit();\n   }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For dev purposes (we should remove this for production) determine whether this Kernel uses explicit memory management", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.isExplicit"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "267", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "long[]#", "methodParameterName": "array#", "methodBody": "public Kernel put(long[] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "268", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "long[][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(long[][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "269", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "long[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(long[][][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "270", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "double[]#", "methodParameterName": "array#", "methodBody": "public Kernel put(double[] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "271", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "double[][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(double[][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "272", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "double[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(double[][][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "273", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "float[]#", "methodParameterName": "array#", "methodBody": "public Kernel put(float[] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "274", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "float[][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(float[][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "275", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "float[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(float[][][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "276", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "int[]#", "methodParameterName": "array#", "methodBody": "public Kernel put(int[] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "277", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "int[][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(int[][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "278", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "int[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(int[][][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "279", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "byte[]#", "methodParameterName": "array#", "methodBody": "public Kernel put(byte[] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "280", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "byte[][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(byte[][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "281", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "byte[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(byte[][][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "282", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "char[]#", "methodParameterName": "array#", "methodBody": "public Kernel put(char[] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "283", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "char[][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(char[][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "284", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "char[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(char[][][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "285", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "boolean[]#", "methodParameterName": "array#", "methodBody": "public Kernel put(boolean[] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "286", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "boolean[][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(boolean[][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "287", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.put", "methodParameterType": "boolean[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel put(boolean[][][] array) {\n      prepareKernelRunner().put(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tag this array so that it is explicitly enqueued before the kernel is executed", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.put"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.put": "Tag this array so that it is explicitly enqueued before the kernel is executed. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "288", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "long[]#", "methodParameterName": "array#", "methodBody": "public Kernel get(long[] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "289", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "long[][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(long[][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "290", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "long[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(long[][][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "291", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "double[]#", "methodParameterName": "array#", "methodBody": "public Kernel get(double[] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "292", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "double[][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(double[][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "293", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "double[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(double[][][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "294", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "float[]#", "methodParameterName": "array#", "methodBody": "public Kernel get(float[] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "295", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "float[][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(float[][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "296", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "float[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(float[][][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "297", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "int[]#", "methodParameterName": "array#", "methodBody": "public Kernel get(int[] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "298", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "int[][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(int[][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "299", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "int[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(int[][][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "300", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "byte[]#", "methodParameterName": "array#", "methodBody": "public Kernel get(byte[] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "301", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "byte[][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(byte[][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "302", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "byte[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(byte[][][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "303", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "char[]#", "methodParameterName": "array#", "methodBody": "public Kernel get(char[] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "304", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "char[][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(char[][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "305", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "char[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(char[][][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "306", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "boolean[]#", "methodParameterName": "array#", "methodBody": "public Kernel get(boolean[] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "307", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "boolean[][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(boolean[][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "308", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.get", "methodParameterType": "boolean[][][]#", "methodParameterName": "array#", "methodBody": "public Kernel get(boolean[][][] array) {\n      prepareKernelRunner().get(array);\n      return (this);\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ParenthesizedExpression(ThisExpression)ThisExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Enqueue a request to return this buffer from the GPU. This method blocks until the array is available.", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"com.aparapi.internal.kernel.KernelRunner.get": "Enqueue a request to return this array from the GPU. This method blocks until the array is available. <br/> Note that <code>Kernel.put(type [])</code> calls will delegate to this call. <br/> Package public"}]}, {"index": "309", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.getProfileInfo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<ProfileInfo> getProfileInfo() {\n      return prepareKernelRunner().getProfileInfo();\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the profiling information from the last successful call to Kernel.execute().", "call_func_name": ["com.aparapi.Kernel.prepareKernelRunner", "com.aparapi.internal.kernel.KernelRunner.getProfileInfo"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "310", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.addExecutionModes", "methodParameterType": "EXECUTION_MODE#", "methodParameterName": "platforms#", "methodBody": "@Deprecated\n  public void addExecutionModes(EXECUTION_MODE... platforms) {\n      executionModes.addAll(Arrays.asList(platforms));\n      currentMode = executionModes.iterator();\n      executionMode = currentMode.next();\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@deprecated See {@link EXECUTION_MODE}. <p> set possible fallback path for execution modes. for example setExecutionFallbackPath(GPU,CPU,JTP) will try to use the GPU if it fails it will fall back to OpenCL CPU and finally it will try JTP.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "311", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.hasNextExecutionMode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n  public boolean hasNextExecutionMode() {\n      return currentMode.hasNext();\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated See {@link EXECUTION_MODE}.", "call_func_name": ["java.util.Iterator.hasNext"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "312", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/Kernel.java", "methodName": "com.aparapi.Kernel.tryNextExecutionMode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n  public void tryNextExecutionMode() {\n      if (currentMode.hasNext()) {\n         executionMode = currentMode.next();\n      }\n   }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@deprecated See {@link EXECUTION_MODE}. try the next execution path in the list if there aren't any more than give up", "call_func_name": ["java.util.Iterator.hasNext", "java.util.Iterator.next"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "313", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.ProfileReport", "methodParameterType": "long#Class<? extends Kernel>#Device#", "methodParameterName": "_threadId#clazz#_device#", "methodBody": "public ProfileReport(final long _threadId, final Class<? extends Kernel> clazz, final Device _device) {\n\t\tthreadId = _threadId;\n\t\tkernelClass = clazz;\n\t\tdevice = _device;\n\t\tstagesNames = ProfilingEvent.getStagesNames();\n\t}", "AST": "Javadoc#Modifier#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a profile report pertaining to a given thread that executed kernel class on the specified device.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "314", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.setProfileReport", "methodParameterType": "long#long[]#", "methodParameterName": "reportId#_currentTimes#", "methodBody": "public void setProfileReport(final long reportId, final long[] _currentTimes) {\n\t\tid = reportId;\n\t\tSystem.arraycopy(_currentTimes, 0, currentTimes, 0, NUM_EVENTS);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets specific report data.", "call_func_name": ["java.lang.System.arraycopy"], "call_func_parameter": [["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": "/"}, {"index": "315", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.getReportId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getReportId() {\n\t\treturn id;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the current report unique identifier.<br/> <b>Note: </b>The identifier is monotonically incremented at each new report for the current <kernel, device> tuple.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "316", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.getThreadId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getThreadId() {\n\t\treturn threadId;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the thread id of the thread that executed the kernel, producing this profile report.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "317", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.getKernelClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class<? extends Kernel> getKernelClass() {\n\t\treturn kernelClass;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the class of the kernel to which this profile report pertains to", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "318", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.getDevice", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Device getDevice() {\n\t\treturn device;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the Aparapi device where the kernel was executed, producing this profile report.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "319", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.getStageNames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getStageNames() {\n\t\treturn Collections.unmodifiableList(Arrays.asList(stagesNames));\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the names of the stages for which data was collected.", "call_func_name": ["java.util.Arrays.asList", "java.util.Collections.unmodifiableList"], "call_func_parameter": [["java.lang.Object[]"], ["java.util.List"]], "passed_comments": "/"}, {"index": "320", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.getNumberOfStages", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getNumberOfStages() {\n\t\treturn stagesNames.length;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The number of stages available with report data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "321", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.getStageName", "methodParameterType": "int#", "methodParameterName": "stage#", "methodBody": "public String getStageName(int stage) {\n\t\treturn stagesNames[stage];\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name of a given stage", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "322", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.getElapsedTime", "methodParameterType": "int#", "methodParameterName": "stage#", "methodBody": "public double getElapsedTime(int stage) {\n       if (stage == ProfilingEvent.START.ordinal()) {\n          return 0;\n       }\n       return (currentTimes[stage] - currentTimes[stage - 1]) / MILLION;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#NumberLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Elapsed time for a single event only, i.e. since the previous stage rather than from the start.", "call_func_name": ["com.aparapi.internal.kernel.ProfilingEvent.ordinal"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "323", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.getElapsedTime", "methodParameterType": "int#int#", "methodParameterName": "from#to#", "methodBody": "public double getElapsedTime(int from, int to) {\n       return (currentTimes[to] - currentTimes[from]) / MILLION;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Elapsed time for all events  {@code from} through {@code to}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "324", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.getExecutionTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public double getExecutionTime() {\n       return getElapsedTime(ProfilingEvent.START.ordinal(), ProfilingEvent.EXECUTED.ordinal());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine the execution time of the Kernel.execute(range) call from this report.", "call_func_name": ["com.aparapi.internal.kernel.ProfilingEvent.ordinal", "com.aparapi.ProfileReport.getElapsedTime"], "call_func_parameter": [[""], ["int", "int"]], "passed_comments": [{"com.aparapi.ProfileReport.getElapsedTime": "Elapsed time for all events  {@code from} through {@code to}."}]}, {"index": "325", "file": "/root/repos/repos28/aparapi/src/main/java/com/aparapi/ProfileReport.java", "methodName": "com.aparapi.ProfileReport.getConversionTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public double getConversionTime() {\n       return getElapsedTime(ProfilingEvent.START.ordinal(), ProfilingEvent.PREPARE_EXECUTE.ordinal());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine the time taken to convert bytecode to OpenCL for first Kernel.execute(range) call.", "call_func_name": ["com.aparapi.internal.kernel.ProfilingEvent.ordinal", "com.aparapi.ProfileReport.getElapsedTime"], "call_func_parameter": [[""], ["int", "int"]], "passed_comments": [{"com.aparapi.ProfileReport.getElapsedTime": "Elapsed time for all events  {@code from} through {@code to}."}]}]