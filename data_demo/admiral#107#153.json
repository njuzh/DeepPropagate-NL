[{"index": "0", "file": "/root/repos/repos30/admiral/rdbms/src/main/java/com/vmware/xenon/services/rdbms/PostgresServiceDocumentDao.java", "methodName": "com.vmware.xenon.services.rdbms.PostgresServiceDocumentDao.initForDocument", "methodParameterType": "String#Class<? extends ServiceDocument>#ServiceDocumentDescription#", "methodParameterName": "factoryLink#documentType#sdd#", "methodBody": "public void initForDocument(String factoryLink, Class<? extends ServiceDocument> documentType,\n            ServiceDocumentDescription sdd) {\n        this.schemaManager.addFactory(factoryLink, documentType, sdd);\n\n        TableDescription desc = this.schemaManager.getTableDescriptionForFactoryLink(factoryLink);\n        if (desc != null) {\n            ensureTableExists(desc);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Performs SQL initialization for the given document type, e.g. creating a dedicated table for it, etc. Expected to be called once per document type upon host startup.", "call_func_name": ["com.vmware.xenon.services.rdbms.PostgresSchemaManager.addFactory", "com.vmware.xenon.services.rdbms.PostgresSchemaManager.getTableDescriptionForFactoryLink"], "call_func_parameter": [["java.lang.String", "java.lang.Class", "com.vmware.xenon.common.ServiceDocumentDescription"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos30/admiral/rdbms/src/main/java/com/vmware/xenon/services/rdbms/PostgresServiceDocumentDao.java", "methodName": "com.vmware.xenon.services.rdbms.PostgresServiceDocumentDao.loadDocument", "methodParameterType": "String#", "methodParameterName": "selfLink#", "methodBody": "public ServiceDocument loadDocument(String selfLink) throws SQLException {\n        TableDescription tableDescription = this.schemaManager\n                .getTableDescriptionForDocumentSelfLink(selfLink);\n        if (tableDescription == null) {\n            logger.severe(String.format(\"Cannot determine SQL table name for document %s\",\n                    selfLink));\n            return null;\n        }\n\n        String sql = String\n                .format(\"SELECT data FROM %s WHERE documentselflink = ? AND (documentexpirationtimemicros = 0 OR documentexpirationtimemicros > ?)\",\n                        tableDescription.getTableName());\n\n        PostgresDocumentStoredFieldVisitor visitor;\n        try (Connection conn = this.ds.getConnection();\n                PreparedStatement stmt = conn.prepareStatement(sql)) {\n            stmt.setString(1, selfLink);\n            stmt.setLong(2, Utils.getSystemNowMicrosUtc());\n\n            try (ResultSet rs = stmt.executeQuery()) {\n                if (!rs.next()) {\n                    if (isDetailedLoggingEnabled) {\n                        logger.info(String.format(\"SQL loadDocument NOT FOUND: %s\", selfLink));\n                    }\n                    return null;\n                }\n\n                visitor = new PostgresDocumentStoredFieldVisitor();\n                loadDoc(visitor, rs);\n\n                if (isDetailedLoggingEnabled) {\n                    logger.info(String.format(\"SQL loadDocument: %s : ver=%d documentOwner=%s\",\n                            selfLink, visitor.documentVersion, visitor.documentOwner));\n                }\n            }\n        } catch (SQLException e) {\n            logger.severe(String.format(\"SQL loadDocument failed: %s : %s\", selfLink, e));\n            throw e;\n        }\n\n        Long expiration = visitor.documentExpirationTimeMicros;\n        boolean hasExpired = expiration != null\n                && expiration != 0\n                && expiration <= Utils.getSystemNowMicrosUtc();\n\n        if (hasExpired) {\n            return null;\n        }\n\n        return getStateFromPostgresDocument(tableDescription, visitor, selfLink);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find the document given a self link . This function is used for two purposes; find given version to... 1) load state if the service state is not yet cached 2) filter query results to only include the given version In case (1), authorization is applied in the service host (either against the cached state or freshly loaded state). In case (2), authorization should NOT be applied because the original query already included the resource group query per the authorization context. Query results will be filtered given the REAL latest version, not the latest version subject to the resource group query. This means older versions of a document will NOT appear in the query result if the user is not authorized to see the newer version.", "call_func_name": ["com.vmware.xenon.services.rdbms.PostgresSchemaManager.getTableDescriptionForDocumentSelfLink", "java.lang.String.format", "java.util.logging.Logger.severe", "javax.sql.DataSource.getConnection", "java.sql.Connection.prepareStatement", "java.sql.PreparedStatement.setString", "com.vmware.xenon.common.Utils.getSystemNowMicrosUtc", "java.sql.PreparedStatement.setLong", "java.sql.PreparedStatement.executeQuery", "java.sql.ResultSet.next", "java.util.logging.Logger.info", "java.sql.ResultSet.close", "java.lang.Throwable.addSuppressed", "java.sql.PreparedStatement.close", "java.sql.Connection.close", "com.vmware.xenon.services.rdbms.PostgresDocumentStoredFieldVisitor.<init>", "com.vmware.xenon.services.rdbms.PostgresServiceDocumentDao.loadDoc", "java.lang.Long.valueOf", "java.lang.Long.longValue"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"], [""], ["java.lang.String"], ["int", "java.lang.String"], [""], ["int", "long"], [""], [""], ["java.lang.String"], [""], ["java.lang.Throwable"], [""], [""], [""], ["com.vmware.xenon.services.rdbms.PostgresDocumentStoredFieldVisitor", "java.sql.ResultSet"], ["long"], [""]], "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos30/admiral/rdbms/src/main/java/com/vmware/xenon/services/rdbms/PostgresServiceDocumentDao.java", "methodName": "com.vmware.xenon.services.rdbms.PostgresServiceDocumentDao.updateQuery", "methodParameterType": "Operation#TableDescription#String#long#QuerySpecification#boolean#", "methodParameterName": "op#td#tq#now#qs#forceIncludeDeleted#", "methodBody": "private String updateQuery(Operation op, TableDescription td, String tq, long now,\n            QuerySpecification qs, boolean forceIncludeDeleted) {\n        if (isSqlFalse(tq)) {\n            return null;\n        }\n\n        StringBuilder sb = new StringBuilder();\n        if (!forceIncludeDeleted && !qs.options.contains(QueryOption.INCLUDE_DELETED)\n                && !qs.options.contains(QueryOption.INCLUDE_ALL_VERSIONS)) {\n            sb.append(\"documentupdateaction in ('POST','PATCH','PUT')\");\n            sb.append(String.format(\n                    \" AND (documentexpirationtimemicros = 0 OR documentexpirationtimemicros > %d)\",\n                    now));\n        }\n\n        if (qs.options.contains(QueryOption.TIME_SNAPSHOT)\n                && qs.timeSnapshotBoundaryMicros != null\n                && qs.timeSnapshotBoundaryMicros > 0) {\n            if (sb.length() > 0) {\n                sb.append(\" AND \");\n            }\n            sb.append(String.format(\"documentupdatetimemicros <= %d\",\n                    qs.timeSnapshotBoundaryMicros));\n        }\n\n        if (this.host.isAuthorizationEnabled()) {\n            AuthorizationContext ctx = op.getAuthorizationContext();\n            if (ctx == null) {\n                // Don't allow operation if no authorization context and auth is enabled\n                return null;\n            }\n\n            // Allow unconditionally if this is the system user\n            if (!ctx.isSystemUser()) {\n                // If the resource query in the authorization context is unspecified,\n                // use a Lucene query that doesn't return any documents so that every\n                // result will be empty.\n                QueryTask.Query resourceQuery = ctx.getResourceQuery(Action.GET);\n                if (resourceQuery == null) {\n                    return null;\n                }\n\n                // Use first table for any needed property descriptions\n                String rq = PostgresQueryConverter.convert(resourceQuery, null, td);\n                if (isSqlFalse(rq)) {\n                    return null;\n                }\n                if (!isSqlTrue(rq)) {\n                    if (sb.length() > 0) {\n                        sb.append(\" AND \");\n                    }\n                    sb.append(rq);\n\n                    if (isDebugQuery()) {\n                        appendDebugInfo(op,\n                                \"Auth Query\", Utils.toJsonHtml(resourceQuery),\n                                \"Auth SQL\", prettySqlStatement(sb.toString()));\n                    }\n                }\n            }\n        }\n        if (sb.length() == 0) {\n            return tq;\n        }\n        if (isSqlTrue(tq)) {\n            return sb.toString();\n        }\n        return sb.toString() + \" AND \" + tq;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This routine modifies a user-specified query to include clauses which apply the resource group query specified by the operation's authorization context and which exclude expired documents. If the operation was executed by the system user, no resource group query is applied. If no query needs to be executed return null", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos30/admiral/rdbms/src/main/java/com/vmware/xenon/services/rdbms/PostgresServiceDocumentDao.java", "methodName": "com.vmware.xenon.services.rdbms.PostgresServiceDocumentDao.createNextPage", "methodParameterType": "Operation#QuerySpecification#String#List<String>#String#Integer#Integer#long#String#String#boolean#", "methodParameterName": "op#qs#tq#sortFields#after#offset#groupOffset#expiration#indexLink#nodeSelectorLink#hasPage#", "methodBody": "private String createNextPage(Operation op, QuerySpecification qs,\n            String tq,\n            List<String> sortFields,\n            String after,\n            Integer offset,\n            Integer groupOffset,\n            long expiration,\n            String indexLink,\n            String nodeSelectorLink,\n            boolean hasPage) {\n\n        String nextPageId = Utils.getNowMicrosUtc() + \"\";\n        URI u = UriUtils.buildUri(this.host, UriUtils.buildUriPath(ServiceUriPaths.CORE_QUERY_PAGE,\n                nextPageId));\n\n        // the page link must point to this node, since the index searcher and results have been\n        // computed locally. Transform the link to a query page forwarder link, which will\n        // transparently forward requests to the current node.\n\n        URI forwarderUri = UriUtils.buildForwardToQueryPageUri(u, this.host.getId());\n        String nextLink = forwarderUri.getPath() + UriUtils.URI_QUERY_CHAR\n                + forwarderUri.getQuery();\n\n        // Compute previous page link. When FORWARD_ONLY option is specified, do not create previous\n        // page link.\n        String prevLinkForNewPage = null;\n        boolean isForwardOnly = qs.options.contains(QueryOption.FORWARD_ONLY);\n        if (!isForwardOnly) {\n            URI forwarderUriOfPrevLinkForNewPage = UriUtils\n                    .buildForwardToQueryPageUri(op.getReferer(),\n                            this.host.getId());\n            prevLinkForNewPage = forwarderUriOfPrevLinkForNewPage.getPath()\n                    + UriUtils.URI_QUERY_CHAR + forwarderUriOfPrevLinkForNewPage.getQuery();\n        }\n\n        // Requests to core/query-page are forwarded to document-index (this service) and\n        // referrer of that forwarded request is set to original query-page request.\n        // This method is called when query-page wants to create new page for a paginated query.\n        // If a new page is going to be created then it is safe to use query-page link\n        // from referrer as previous page link of this new page being created.\n        PostgresQueryPage page;\n        if (after != null || groupOffset == null) {\n            // page for documents\n            page = new PostgresQueryPage(hasPage ? prevLinkForNewPage : null, after);\n        } else {\n            // page for group results\n            page = new PostgresQueryPage(hasPage ? prevLinkForNewPage : null, groupOffset);\n        }\n\n        QuerySpecification spec = new QuerySpecification();\n        qs.copyTo(spec);\n\n        if (groupOffset == null) {\n            spec.options.remove(QueryOption.GROUP_BY);\n        }\n\n        spec.offset = offset;\n        spec.context.nativeQuery = tq;\n        spec.context.nativePage = page;\n        spec.context.nativeSearcher = qs.context.nativeSearcher;\n        spec.context.nativeSort = sortFields;\n\n        ServiceDocument body = new ServiceDocument();\n        body.documentSelfLink = u.getPath();\n        body.documentExpirationTimeMicros = expiration;\n\n        AuthorizationContext ctx = op.getAuthorizationContext();\n        if (ctx != null) {\n            body.documentAuthPrincipalLink = ctx.getClaims().getSubject();\n        }\n\n        Operation startPost = Operation\n                .createPost(u)\n                .setBodyNoCloning(body)\n                .setCompletion((o, e) -> {\n                    if (e != null) {\n                        logger.warning(() -> String.format(\"Unable to start next page \"\n                                + \"service: %s\", e));\n                    }\n                });\n\n        if (ctx != null) {\n            this.service.setAuthorizationContext(startPost, ctx);\n        }\n\n        this.host.startService(startPost,\n                new PostgresQueryPageService(spec, indexLink, nodeSelectorLink));\n\n        return nextLink;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#ConditionalExpression#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#ConditionalExpression#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ConditionalExpression(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)ConditionalExpression(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ConditionalExpression(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)ConditionalExpression(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Starts a  {@code QueryPageService} to track a partial search result set, associated with aindex searcher and search pointers. The page can be used for both grouped queries or document queries", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos30/admiral/rdbms/src/main/java/com/vmware/xenon/services/rdbms/PostgresServiceDocumentDao.java", "methodName": "com.vmware.xenon.services.rdbms.PostgresServiceDocumentDao.findFactoryScopeFromQuery", "methodParameterType": "Query#Set<String>#", "methodParameterName": "query#result#", "methodBody": "private void findFactoryScopeFromQuery(Query query, Set<String> result) {\n        if (query.booleanClauses != null) {\n            for (Query innerQuery : query.booleanClauses) {\n                findFactoryScopeFromQuery(innerQuery, result);\n            }\n            return;\n        }\n\n        if (query.term != null &&\n                ServiceDocument.FIELD_NAME_SELF_LINK.equals(query.term.propertyName) &&\n                !UriUtils.URI_WILDCARD_CHAR.equals(query.term.matchValue)) {\n            String factoryLink = UriUtils.getParentPath(query.term.matchValue);\n            if (factoryLink != null && !factoryLink.isEmpty() &&\n                    !UriUtils.URI_PATH_CHAR.equals(factoryLink) &&\n                    !factoryLink.contains(UriUtils.URI_WILDCARD_CHAR)) {\n                String documentKind = this.schemaManager.getDocumentKindForFactoryLink(factoryLink);\n                if (documentKind != null) {\n                    result.add(documentKind);\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Traverses the given query and find documentSelfLink constraints from which the factory query scope is deducted. Takes all links into account no matter if they MUST_NOT_OCCUR - no need for such optimization for now as our support for multiple kind scope will cope with that.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos30/admiral/rdbms/src/main/java/com/vmware/xenon/services/rdbms/PostgresServiceDocumentDao.java", "methodName": "com.vmware.xenon.services.rdbms.PostgresServiceDocumentDao.findKindScopeFromQuery", "methodParameterType": "Query#Set<String>#", "methodParameterName": "query#result#", "methodBody": "private void findKindScopeFromQuery(Query query, Set<String> result) {\n        if (query.booleanClauses != null) {\n            for (Query innerQuery : query.booleanClauses) {\n                findKindScopeFromQuery(innerQuery, result);\n            }\n            return;\n        }\n\n        if (query.term != null &&\n                ServiceDocument.FIELD_NAME_KIND.equals(query.term.propertyName) &&\n                query.occurance != QueryTask.Query.Occurance.MUST_NOT_OCCUR) {\n            result.add(query.term.matchValue);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Traverses the given query and find documentSelfLink constraints from which the factory query scope is deducted. Takes all links into account no matter if they MUST_NOT_OCCUR - no need for such optimization for now as our support for multiple kind scope will cope with that.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos30/admiral/rdbms/src/main/java/com/vmware/xenon/services/rdbms/PostgresDocumentIndexService.java", "methodName": "com.vmware.xenon.services.rdbms.PostgresDocumentIndexService.pollQueryOperation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private Operation pollQueryOperation() {\n        return this.queryQueue.poll();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "retrieves the next available operation given the fairness scheme", "call_func_name": ["com.vmware.xenon.common.RoundRobinOperationQueue.poll"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "7", "file": "/root/repos/repos30/admiral/rdbms/src/main/java/com/vmware/xenon/services/rdbms/PostgresDocumentIndexService.java", "methodName": "com.vmware.xenon.services.rdbms.PostgresDocumentIndexService.offerQueryOperation", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "private boolean offerQueryOperation(Operation op) {\n        String subject = getSubject(op);\n        return this.queryQueue.offer(subject, op);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Queues operation in a multi-queue that uses the subject as the key per queue", "call_func_name": ["com.vmware.xenon.services.rdbms.PostgresDocumentIndexService.getSubject", "com.vmware.xenon.common.RoundRobinOperationQueue.offer"], "call_func_parameter": [["com.vmware.xenon.common.Operation"], ["java.lang.String", "com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos30/admiral/rdbms/src/main/java/com/vmware/xenon/services/rdbms/PostgresDocumentIndexService.java", "methodName": "com.vmware.xenon.services.rdbms.PostgresDocumentIndexService.checkFailureAndRecover", "methodParameterType": "Exception#", "methodParameterName": "e#", "methodBody": "private void checkFailureAndRecover(Exception e) {\n        if (getHost().isStopping()) {\n            logInfo(\"Exception after host stop, on index service thread: %s\", e);\n            return;\n        }\n\n        logSevere(\"Exception on index service thread: %s\", Utils.toString(e));\n        adjustStat(STAT_NAME_WRITER_ALREADY_CLOSED_EXCEPTION_COUNT, 1);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Will attempt to re-open index writer to recover from a specific exception. The method assumes the caller has acquired the writer semaphore", "call_func_name": ["com.vmware.xenon.services.rdbms.PostgresDocumentIndexService.getHost", "com.vmware.xenon.common.ServiceHost.isStopping", "com.vmware.xenon.services.rdbms.PostgresDocumentIndexService.logInfo", "com.vmware.xenon.common.Utils.toString", "com.vmware.xenon.services.rdbms.PostgresDocumentIndexService.logSevere", "com.vmware.xenon.services.rdbms.PostgresDocumentIndexService.adjustStat"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "double"]], "passed_comments": "/"}, {"index": "9", "file": "/root/repos/repos30/admiral/rdbms/src/main/java/com/vmware/xenon/services/rdbms/PostgresServiceHost.java", "methodName": "com.vmware.xenon.services.rdbms.PostgresServiceHost.registerPostgresSchema", "methodParameterType": "PostgresSchemaManager#", "methodParameterName": "sm#", "methodBody": "protected void registerPostgresSchema(PostgresSchemaManager sm) {\n        sm.addFactory(CheckpointFactoryService.SELF_LINK, CheckpointService.class);\n        sm.addTable(td -> {\n            td.useStatefulService(AuthCredentialsService.class);\n            td.setIndexType(\"privateKey\", \"hash\");\n            td.setIndexType(\"publicKey\", \"hash\");\n        });\n        sm.addFactory(RoleService.class);\n        sm.addFactory(TenantService.class);\n        sm.addFactory(UserService.class);\n        sm.addFactory(UserGroupService.class);\n        sm.addFactory(ResourceGroupService.class);\n        sm.addFactory(TransactionFactoryService.SELF_LINK, TransactionService.class);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Override to register factory services used by the host.", "call_func_name": ["com.vmware.xenon.services.rdbms.PostgresSchemaManager.addFactory", "java.util.function.Consumer.accept", "com.vmware.xenon.services.rdbms.PostgresSchemaManager.addTable", "com.vmware.xenon.services.rdbms.PostgresSchemaManager.addFactory"], "call_func_parameter": [["java.lang.String", "java.lang.Class"], [""], ["java.util.function.Consumer"], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos30/admiral/upgrade/src/main/java/com/vmware/admiral/upgrade/transformation/util/ClonePerProjectUtil.java", "methodName": "com.vmware.admiral.upgrade.transformation.util.ClonePerProjectUtil.skipAddProjectTenantLink", "methodParameterType": "MultiTenantDocument#", "methodParameterName": "document#", "methodBody": "private static boolean skipAddProjectTenantLink(MultiTenantDocument document) {\n        return ConfigurationUtil.isEmbedded()\n                && document.documentKind != null\n                && document.documentKind.equals(TEMPLATE_DOCUMENT_KIND);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether the document specified is a  {@link CompositeDescription} in embedded.Templates ( {@link CompositeDescription} instances) in embedded mode are shared among allprojects so the project tenant link must not be added.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/project/ProjectRolesHandler.java", "methodName": "com.vmware.admiral.auth.project.ProjectRolesHandler.buildAddRemoveLists", "methodParameterType": "PrincipalRoleAssignment#List<String>#List<String>#List<String>#List<String>#List<DeferredResult<Void>>#Operation#", "methodParameterName": "assignment#usersToAdd#userGroupsToAdd#usersToRemove#userGroupsToRemove#principalResults#requestorOperation#", "methodBody": "private void buildAddRemoveLists(PrincipalRoleAssignment assignment,\n            List<String> usersToAdd, List<String> userGroupsToAdd,\n            List<String> usersToRemove, List<String> userGroupsToRemove,\n            List<DeferredResult<Void>> principalResults, Operation requestorOperation) {\n        if (assignment == null) {\n            return;\n        }\n\n        if (assignment.add != null && !assignment.add.isEmpty()) {\n            assignment.add.stream().forEach(principalId -> {\n                principalResults.add(PrincipalUtil\n                        .getPrincipal(service, requestorOperation, principalId)\n                        .thenAccept(p -> {\n                            if (PrincipalType.USER.equals(p.type)) {\n                                usersToAdd.add(principalId);\n                            } else {\n                                userGroupsToAdd.add(principalId);\n                            }\n                        }));\n            });\n        }\n\n        if (assignment.remove != null && !assignment.remove.isEmpty()) {\n            assignment.remove.stream().forEach(principalId -> {\n                principalResults.add(PrincipalUtil\n                        .getPrincipal(service, requestorOperation, principalId)\n                        .thenAccept(p -> {\n                            if (PrincipalType.USER.equals(p.type)) {\n                                usersToRemove.add(principalId);\n                            } else {\n                                userGroupsToRemove.add(principalId);\n                            }\n                        }));\n            });\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Iterates through the specified  {@link PrincipalRoleAssignment} and fills the provided listswith users and groups to add/remove from a given project.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/project/ProjectService.java", "methodName": "com.vmware.admiral.auth.project.ProjectService.handleProjectPatch", "methodParameterType": "ProjectState#ProjectState#", "methodParameterName": "currentState#patchState#", "methodBody": "private DeferredResult<Boolean> handleProjectPatch(ProjectState currentState,\n            ProjectState patchState) {\n        ServiceDocumentDescription docDesc = getDocumentTemplate().documentDescription;\n        String currentSignature = Utils.computeSignature(currentState, docDesc);\n        DeferredResult<Integer> projectIndex;\n\n        if (currentState.customProperties == null) {\n            projectIndex = generateProjectIndex();\n        } else {\n            projectIndex = DeferredResult.completed(Integer.parseInt(\n                    currentState.customProperties.get(CUSTOM_PROPERTY_PROJECT_INDEX)));\n        }\n\n        return projectIndex.thenApply(index -> {\n            Map<String, String> mergedProperties = PropertyUtils.mergeCustomProperties(\n                    currentState.customProperties, patchState.customProperties);\n            PropertyUtils.mergeServiceDocuments(currentState, patchState);\n            currentState.customProperties = mergedProperties;\n\n            handleProjectIndex(index, currentState);\n            String newSignature = Utils.computeSignature(currentState, docDesc);\n            return !currentSignature.equals(newSignature);\n        });\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the projects state signature was changed after the patch.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "13", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/util/ProjectUtil.java", "methodName": "com.vmware.admiral.auth.util.ProjectUtil.expandProjectState", "methodParameterType": "Service#Operation#ProjectState#URI#", "methodParameterName": "service#requestorOperation#simpleState#referer#", "methodBody": "public static DeferredResult<ExpandedProjectState> expandProjectState(Service service,\n            Operation requestorOperation, ProjectState simpleState, URI referer) {\n        ExpandedProjectState expandedState = new ExpandedProjectState();\n        simpleState.copyTo(expandedState);\n        expandedState.administrators = new ArrayList<>();\n        expandedState.members = new ArrayList<>();\n        expandedState.viewers = new ArrayList<>();\n\n        String projectId = Service.getId(simpleState.documentSelfLink);\n\n        String adminsGroupLink = isNullOrEmpty(simpleState.administratorsUserGroupLinks) ? null\n                : UriUtils.buildUriPath(UserGroupService.FACTORY_LINK,\n                        AuthRole.PROJECT_ADMIN.buildRoleWithSuffix(projectId));\n\n        String membersGroupLink = isNullOrEmpty(simpleState.membersUserGroupLinks) ? null\n                : UriUtils.buildUriPath(UserGroupService.FACTORY_LINK,\n                        AuthRole.PROJECT_MEMBER.buildRoleWithSuffix(projectId));\n\n        String viewersGroupLink = isNullOrEmpty(simpleState.viewersUserGroupLinks) ? null\n                : UriUtils.buildUriPath(UserGroupService.FACTORY_LINK,\n                        AuthRole.PROJECT_VIEWER.buildRoleWithSuffix(projectId));\n\n        Map<String, UserState> userStates = new ConcurrentHashMap<>();\n        Map<String, Principal> userLinkToPrincipal = new ConcurrentHashMap<>();\n        Map<AuthRole, List<String>> roleToUsersLinks = new ConcurrentHashMap<>();\n\n        DeferredResult<Void> retrieveAdmins = retrieveUserGroupMembers(service,\n                adminsGroupLink, referer)\n                        .thenAccept((adminsList) -> {\n                            adminsList.forEach(a -> userStates.put(a.documentSelfLink, a));\n                            roleToUsersLinks.put(AuthRole.PROJECT_ADMIN, adminsList.stream()\n                                    .map(a -> a.documentSelfLink).collect(Collectors.toList()));\n                        });\n\n        DeferredResult<Void> retrieveMembers = retrieveUserGroupMembers(service,\n                membersGroupLink, referer)\n                        .thenAccept((membersList) -> {\n                            membersList.forEach(m -> userStates.put(m.documentSelfLink, m));\n                            roleToUsersLinks.put(AuthRole.PROJECT_MEMBER, membersList.stream()\n                                    .map(m -> m.documentSelfLink).collect(Collectors.toList()));\n                        });\n\n        DeferredResult<Void> retrieveViewers = retrieveUserGroupMembers(service,\n                viewersGroupLink, referer)\n                        .thenAccept((viewersList) -> {\n                            viewersList.forEach(v -> userStates.put(v.documentSelfLink, v));\n                            roleToUsersLinks.put(AuthRole.PROJECT_VIEWER, viewersList.stream()\n                                    .map(m -> m.documentSelfLink).collect(Collectors.toList()));\n                        });\n\n        DeferredResult<Void> retrieveUserStatePrincipals = DeferredResult.allOf(retrieveAdmins,\n                retrieveMembers, retrieveViewers)\n                .thenCompose(ignore -> {\n                    List<DeferredResult<Void>> results = new ArrayList<>();\n\n                    for (Entry<String, UserState> entry : userStates.entrySet()) {\n                        DeferredResult<Void> tempResult = PrincipalUtil.getPrincipal(service,\n                                requestorOperation,\n                                Service.getId(entry.getValue().documentSelfLink))\n                                .thenApply(p -> new Pair<>(p, null))\n                                .exceptionally(ex -> new Pair<>(null, ex))\n                                .thenAccept(pair -> {\n                                    if (pair.left != null) {\n                                        userLinkToPrincipal.put(entry.getKey(), pair.left);\n                                    }\n                                });\n\n                        results.add(tempResult);\n                    }\n\n                    return DeferredResult.allOf(results);\n                })\n                .thenAccept(ignore -> {\n                    List<String> admins = roleToUsersLinks.get(AuthRole.PROJECT_ADMIN);\n                    List<String> members = roleToUsersLinks.get(AuthRole.PROJECT_MEMBER);\n                    List<String> viewers = roleToUsersLinks.get(AuthRole.PROJECT_VIEWER);\n\n                    admins.forEach(a -> {\n                        Principal principal = userLinkToPrincipal.get(a);\n                        if (principal != null) {\n                            expandedState.administrators.add(userLinkToPrincipal.get(a));\n                        }\n                    });\n\n                    members.forEach(m -> {\n                        Principal principal = userLinkToPrincipal.get(m);\n                        if (principal != null) {\n                            expandedState.members.add(userLinkToPrincipal.get(m));\n                        }\n                    });\n\n                    viewers.forEach(v -> {\n                        Principal principal = userLinkToPrincipal.get(v);\n                        if (principal != null) {\n                            expandedState.viewers.add(userLinkToPrincipal.get(v));\n                        }\n                    });\n                });\n\n        DeferredResult<Void> retrieveAdminsGroupPrincipals = getGroupPrincipals(service,\n                requestorOperation, simpleState.administratorsUserGroupLinks, projectId,\n                AuthRole.PROJECT_ADMIN)\n                        .thenAccept(principals -> expandedState.administrators.addAll(principals));\n\n        DeferredResult<Void> retrieveMembersGroupPrincipals = getGroupPrincipals(service,\n                requestorOperation, simpleState.membersUserGroupLinks, projectId,\n                AuthRole.PROJECT_MEMBER)\n                        .thenAccept(principals -> expandedState.members.addAll(principals));\n\n        DeferredResult<Void> retrieveViewersGroupPrincipals = getGroupPrincipals(service,\n                requestorOperation, simpleState.viewersUserGroupLinks, projectId,\n                AuthRole.PROJECT_VIEWER)\n                        .thenAccept(principals -> expandedState.viewers.addAll(principals));\n\n        DeferredResult<Void> retrieveClusterLinks = retrieveClusterLinks(service,\n                simpleState.documentSelfLink)\n                        .thenAccept((clusterLinks) -> expandedState.clusterLinks = clusterLinks);\n\n        DeferredResult<Void> retrieveTemplateLinks = retrieveTemplateLinks(service,\n                simpleState.documentSelfLink)\n                        .thenAccept((templateLinks) -> expandedState.templateLinks = templateLinks);\n\n        DeferredResult<Void> retrieveRepositoriesAndImagesCount = retrieveRepositoriesAndTagsCount(\n                service,\n                simpleState.documentSelfLink, getProjectIndex(simpleState))\n                        .thenAccept(\n                                (repositories) -> {\n                                    expandedState.repositories = new ArrayList<>(\n                                            repositories.size());\n                                    expandedState.numberOfImages = 0L;\n\n                                    repositories.forEach((entry) -> {\n                                        expandedState.repositories.add(entry.name);\n                                        expandedState.numberOfImages += entry.tagsCount;\n                                    });\n                                });\n\n        return DeferredResult.allOf(retrieveUserStatePrincipals, retrieveAdminsGroupPrincipals,\n                retrieveMembersGroupPrincipals, retrieveViewersGroupPrincipals,\n                retrieveClusterLinks, retrieveTemplateLinks, retrieveRepositoriesAndImagesCount)\n                .thenApply((ignore) -> expandedState);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#ParameterizedType#SimpleName#NullLiteral#ClassInstanceCreation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#ParameterizedType#NullLiteral#SimpleName#ClassInstanceCreation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(NullLiteral)NullLiteral)ClassInstanceCreation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NullLiteral)NullLiteral(SimpleName)SimpleName)ClassInstanceCreation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(SimpleName)SimpleName)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link ExpandedProjectState} based on the provided simple state additionallybuilding the lists of administrators and members.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/util/ProjectUtil.java", "methodName": "com.vmware.admiral.auth.util.ProjectUtil.retrieveUserGroupMembers", "methodParameterType": "Service#String#URI#", "methodParameterName": "service#groupLink#referer#", "methodBody": "private static DeferredResult<List<UserState>> retrieveUserGroupMembers(Service service,\n            String groupLink, URI referer) {\n\n        if (groupLink == null || groupLink.isEmpty()) {\n            return DeferredResult.completed(new ArrayList<>());\n        }\n\n        Operation groupGet = Operation.createGet(service, groupLink).setReferer(referer);\n        authorizeOperationIfProjectService(service, groupGet);\n        return service.sendWithDeferredResult(groupGet, UserGroupState.class)\n                .thenCompose(groupState -> retrieveUserStatesForGroup(service, groupState));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the list of members for the specified by document link user group.", "call_func_name": ["java.lang.String.isEmpty", "java.util.ArrayList.<init>", "com.vmware.xenon.common.DeferredResult.completed", "com.vmware.xenon.common.Operation.createGet", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.admiral.auth.util.ProjectUtil.authorizeOperationIfProjectService", "com.vmware.xenon.common.Service.sendWithDeferredResult", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.thenCompose"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["com.vmware.xenon.common.Service", "java.lang.String"], ["java.net.URI"], ["com.vmware.xenon.common.Service", "com.vmware.xenon.common.Operation"], ["com.vmware.xenon.common.Operation", "java.lang.Class"], ["com.vmware.xenon.common.Service"], ["java.util.function.Function"]], "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/util/ProjectUtil.java", "methodName": "com.vmware.admiral.auth.util.ProjectUtil.retrieveUserStatesForGroup", "methodParameterType": "Service#UserGroupState#", "methodParameterName": "service#groupState#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static <T extends UserState> DeferredResult<List<T>> retrieveUserStatesForGroup(\n            Service service, UserGroupState groupState) {\n        DeferredResult<List<T>> deferredResult = new DeferredResult<>();\n        ArrayList<T> resultList = new ArrayList<>();\n\n        QueryTask queryTask = QueryUtil.buildQuery(AuthUtil.USER_STATE_CLASS, true,\n                groupState.query);\n        QueryUtil.addExpandOption(queryTask);\n        new ServiceDocumentQuery<>(service.getHost(), AuthUtil.USER_STATE_CLASS)\n                .query(queryTask, (r) -> {\n                    if (r.hasException()) {\n                        service.getHost().log(Level.WARNING,\n                                \"Failed to retrieve members of UserGroupState %s: %s\",\n                                groupState.documentSelfLink, Utils.toString(r.getException()));\n                        deferredResult.fail(r.getException());\n                    } else if (r.hasResult()) {\n                        resultList.add((T) r.getResult());\n                    } else {\n                        deferredResult.complete(resultList);\n                    }\n                });\n\n        return deferredResult;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the list of members for the specified user group.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/util/ProjectUtil.java", "methodName": "com.vmware.admiral.auth.util.ProjectUtil.buildQueryProjectsFromGroups", "methodParameterType": "Collection<String>#", "methodParameterName": "groupLinks#", "methodBody": "public static Query buildQueryProjectsFromGroups(Collection<String> groupLinks) {\n        Query query = new Query();\n\n        Query kindQuery = QueryUtil.createKindClause(ProjectState.class);\n        kindQuery.setOccurance(Occurance.MUST_OCCUR);\n        query.addBooleanClause(kindQuery);\n\n        Query groupQuery = new Query();\n        groupQuery.setOccurance(Occurance.MUST_OCCUR);\n        query.addBooleanClause(groupQuery);\n\n        Query adminGroupQuery = QueryUtil.addListValueClause(\n                QuerySpecification.buildCollectionItemName(\n                        ProjectState.FIELD_NAME_ADMINISTRATORS_USER_GROUP_LINKS),\n                groupLinks, MatchType.TERM);\n        adminGroupQuery.setOccurance(Occurance.SHOULD_OCCUR);\n        groupQuery.addBooleanClause(adminGroupQuery);\n\n        Query membersGroupQuery = QueryUtil.addListValueClause(\n                QuerySpecification\n                        .buildCollectionItemName(ProjectState.FIELD_NAME_MEMBERS_USER_GROUP_LINKS),\n                groupLinks, MatchType.TERM);\n        membersGroupQuery.setOccurance(Occurance.SHOULD_OCCUR);\n        groupQuery.addBooleanClause(membersGroupQuery);\n\n        Query viewersGroupQuery = QueryUtil.addListValueClause(\n                QuerySpecification\n                        .buildCollectionItemName(ProjectState.FIELD_NAME_VIEWERS_USER_GROUP_LINKS),\n                groupLinks, MatchType.TERM);\n        viewersGroupQuery.setOccurance(Occurance.SHOULD_OCCUR);\n        groupQuery.addBooleanClause(viewersGroupQuery);\n\n        return query;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a  {@link Query} that selects all projects that contain any of the specified groups inone of the administrators, members or viewers group lists", "call_func_name": ["com.vmware.admiral.common.util.QueryUtil.createKindClause"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/util/SecurityContextUtil.java", "methodName": "com.vmware.admiral.auth.util.SecurityContextUtil.getSecurityContext", "methodParameterType": "Service#Operation#", "methodParameterName": "requestorService#requestorOperation#", "methodBody": "public static DeferredResult<SecurityContext> getSecurityContext(Service requestorService,\n            Operation requestorOperation) {\n        return getSecurityContext(requestorService, requestorOperation,\n                AuthUtil.getAuthorizedUserId(requestorOperation.getAuthorizationContext()));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link SecurityContext} for the currently authenticated user", "call_func_name": ["com.vmware.xenon.common.Operation.getAuthorizationContext", "com.vmware.admiral.auth.util.SecurityContextUtil.getSecurityContext"], "call_func_parameter": [[""], ["com.vmware.xenon.common.Service", "com.vmware.xenon.common.Operation", "java.lang.String"]], "passed_comments": [{"com.vmware.admiral.auth.util.SecurityContextUtil.getSecurityContext": "Gets the  {@link SecurityContext} for the denoted user"}]}, {"index": "18", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/util/SecurityContextUtil.java", "methodName": "com.vmware.admiral.auth.util.SecurityContextUtil.getSecurityContext", "methodParameterType": "Service#Operation#String#", "methodParameterName": "requestorService#requestorOperation#userId#", "methodBody": "public static DeferredResult<SecurityContext> getSecurityContext(Service requestorService,\n            Operation requestorOperation, String userId) {\n\n\n        return PrincipalUtil.getPrincipal(requestorService, requestorOperation, encode(userId))\n                .thenCompose(principal -> PrincipalRolesUtil.getAllRolesForPrincipal(\n                        requestorService, requestorOperation, principal))\n                .thenApply(SecurityContextUtil::fromPrincipalRolesToSecurityContext);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link SecurityContext} for the denoted user", "call_func_name": ["com.vmware.admiral.auth.util.PrincipalUtil.encode", "com.vmware.admiral.auth.util.PrincipalUtil.getPrincipal", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.thenCompose", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.thenApply"], "call_func_parameter": [["java.lang.String"], ["com.vmware.xenon.common.Service", "com.vmware.xenon.common.Operation", "java.lang.String"], ["com.vmware.xenon.common.Service", "com.vmware.xenon.common.Operation"], ["java.util.function.Function"], [""], ["java.util.function.Function"]], "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/util/AuthUtil.java", "methodName": "com.vmware.admiral.auth.util.AuthUtil.buildBasicUsersExtendedResourceGroup", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ResourceGroupState buildBasicUsersExtendedResourceGroup() {\n        Query resourceGroupQuery = Query.Builder\n                .create()\n                .addFieldClause(ServiceDocument.FIELD_NAME_SELF_LINK,\n                        buildUriWithWildcard(ServiceUriPaths.CORE_QUERY_TASKS),\n                        MatchType.WILDCARD, Occurance.SHOULD_OCCUR)\n                .addFieldClause(ServiceDocument.FIELD_NAME_SELF_LINK,\n                        buildUriWithWildcard(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS),\n                        MatchType.WILDCARD, Occurance.SHOULD_OCCUR)\n                .addFieldClause(ServiceDocument.FIELD_NAME_SELF_LINK,\n                        buildUriWithWildcard(ServiceUriPaths.CORE + UriUtils.URI_PATH_CHAR\n                                + BroadcastQueryPageService.SELF_LINK_PREFIX),\n                        MatchType.WILDCARD, Occurance.SHOULD_OCCUR)\n                .addFieldClause(ServiceDocument.FIELD_NAME_SELF_LINK,\n                        buildUriWithWildcard(ServiceUriPaths.CORE_QUERY_PAGE),\n                        MatchType.WILDCARD, Occurance.SHOULD_OCCUR)\n\n                // this is needed so project admins can create project-specific registries. Since\n                // this service makes calls to the RegistryService, additional authorization rules\n                // are applied there. Because of them, only admins (cloud and project) can create\n                // registries.\n                .addFieldClause(ServiceDocument.FIELD_NAME_SELF_LINK,\n                        RegistryHostConfigService.SELF_LINK,\n                        MatchType.TERM, Occurance.SHOULD_OCCUR)\n                .build();\n\n        ResourceGroupState resourceGroupState = ResourceGroupState.Builder\n                .create()\n                .withQuery(resourceGroupQuery)\n                .withSelfLink(BASIC_USERS_EXTENDED_RESOURCE_GROUP_LINK)\n                .build();\n\n        return resourceGroupState;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This is currently used to workaround xenon problem, where we can't get documents if with OData query.", "call_func_name": ["com.vmware.admiral.auth.util.AuthUtil.buildUriWithWildcard"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/util/AuthUtil.java", "methodName": "com.vmware.admiral.auth.util.AuthUtil.buildBasicUsersExtendedRole", "methodParameterType": "String#String#", "methodParameterName": "identifier#userGroupLink#", "methodBody": "public static RoleState buildBasicUsersExtendedRole(String identifier, String userGroupLink) {\n        String id = AuthRole.BASIC_USER_EXTENDED.buildRoleWithSuffix(identifier);\n        String selfLink = UriUtils.buildUriPath(RoleService.FACTORY_LINK, id);\n\n        EnumSet<Action> verbs = EnumSet.allOf(Action.class);\n\n        RoleState roleState = buildRoleState(selfLink, userGroupLink,\n                BASIC_USERS_EXTENDED_RESOURCE_GROUP_LINK, verbs, Policy.ALLOW);\n\n        return roleState;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This is currently used to workaround xenon problem, where we can't get documents if with OData query.", "call_func_name": ["com.vmware.admiral.auth.idm.AuthRole.buildRoleWithSuffix", "com.vmware.xenon.common.UriUtils.buildUriPath", "java.util.EnumSet.allOf"], "call_func_parameter": [["java.lang.String[]"], ["java.lang.String[]"], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/util/AuthUtil.java", "methodName": "com.vmware.admiral.auth.util.AuthUtil.addReplicationFactor", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "public static void addReplicationFactor(Operation op) {\n        op.addRequestHeader(Operation.REPLICATION_QUORUM_HEADER,\n                Operation.REPLICATION_QUORUM_HEADER_VALUE_ALL);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Authorization related operations should take effect on all replicas, before they complete. This method adds a special header that sets the quorum level to all available nodes, avoiding a race where a client can reach a node that has not yet received latest authorization changes, even if it received success from this auth helper class", "call_func_name": ["com.vmware.xenon.common.Operation.addRequestHeader"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/util/AuthUtil.java", "methodName": "com.vmware.admiral.auth.util.AuthUtil.isDevOpsAdmin", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "public static boolean isDevOpsAdmin(Operation op) {\n        return !OperationUtil.isGuestUser(op);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "TODO Currently all authorized non-guest users are devOpsAdmins. Needs to be changed after roles are introduced.", "call_func_name": ["com.vmware.admiral.common.util.OperationUtil.isGuestUser"], "call_func_parameter": [["com.vmware.xenon.common.Operation"]], "passed_comments": [{"com.vmware.admiral.common.util.OperationUtil.isGuestUser": "Checks whether the specified  {@link Operation} <code>op</code> comes from a guest or not.Guest operations will either have no  {@link AuthorizationContext} set or will have an{@link AuthorizationContext} that is asociated with the Guest user (see{@link GuestUserService})."}]}, {"index": "23", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/util/AuthUtil.java", "methodName": "com.vmware.admiral.auth.util.AuthUtil.extractDataFromRoleStateId", "methodParameterType": "String#", "methodParameterName": "roleStateId#", "methodBody": "public static String[] extractDataFromRoleStateId(String roleStateId) {\n        assertNotNullOrEmpty(roleStateId, \"roleStateId\");\n\n        int firstSeparatorIndex = roleStateId.indexOf(AuthRole.SUFFIX_SEPARATOR);\n        int lastSeparatorIndex = roleStateId.lastIndexOf(AuthRole.SUFFIX_SEPARATOR);\n\n        if (firstSeparatorIndex == -1 || lastSeparatorIndex == -1\n                || firstSeparatorIndex == lastSeparatorIndex) {\n            throw new IllegalArgumentException(\"Provided role state id is not following the \"\n                    + \"pattern: projectId_groupdId_roleSuffix - \" + roleStateId);\n        }\n\n        String projectId = roleStateId.substring(0, firstSeparatorIndex);\n        String groupId = roleStateId.substring(firstSeparatorIndex + 1, lastSeparatorIndex);\n        String roleSuffix = roleStateId.substring(lastSeparatorIndex + 1, roleStateId.length());\n\n        return new String[] { projectId, groupId, roleSuffix };\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#ArrayInitializer#ArrayCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extract data from RoleState ID, which RoleState was build as duplicate RoleState when assigning groups to project roles, with ID following the pattern: projectId_groupdId_roleSuffix", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotNullOrEmpty", "java.lang.String.indexOf", "java.lang.String.lastIndexOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "java.lang.String.substring", "java.lang.String.length"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["int", "int"], [""]], "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/idm/AuthConfigProvider.java", "methodName": "com.vmware.admiral.auth.idm.AuthConfigProvider.initBootConfig", "methodParameterType": "ServiceHost#Operation#Consumer<Operation>#", "methodParameterName": "host#post#authContext#", "methodBody": "void initBootConfig(ServiceHost host, Operation post, Consumer<Operation> authContext);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Initialization method to be executed as a first-boot script.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/idm/AuthConfigProvider.java", "methodName": "com.vmware.admiral.auth.idm.AuthConfigProvider.initConfig", "methodParameterType": "ServiceHost#Operation#Consumer<Operation>#", "methodParameterName": "host#post#authContext#", "methodBody": "void initConfig(ServiceHost host, Operation post, Consumer<Operation> authContext);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Initialization method to be executed as an every-boot script.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/idm/AuthConfigProvider.java", "methodName": "com.vmware.admiral.auth.idm.AuthConfigProvider.waitForInitBootConfig", "methodParameterType": "ServiceHost#String#Runnable#Consumer<Throwable>#", "methodParameterName": "host#configFile#successfulCallback#failureCallback#", "methodBody": "void waitForInitBootConfig(ServiceHost host, String configFile, Runnable successfulCallback,\n            Consumer<Throwable> failureCallback);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Waits for the first-boot initialization to be completed (for testing purposes).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "27", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/idm/AuthConfigProvider.java", "methodName": "com.vmware.admiral.auth.idm.AuthConfigProvider.getPrivilegedServices", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<Class<? extends Service>> getPrivilegedServices();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return a list of services that should be registered as privileged services.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/idm/PrincipalProvider.java", "methodName": "com.vmware.admiral.auth.idm.PrincipalProvider.getPrincipal", "methodParameterType": "Operation#String#", "methodParameterName": "op#principalId#", "methodBody": "DeferredResult<Principal> getPrincipal(Operation op, String principalId);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets a principal by its id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/idm/PrincipalProvider.java", "methodName": "com.vmware.admiral.auth.idm.PrincipalProvider.getPrincipals", "methodParameterType": "Operation#String#", "methodParameterName": "op#criteria#", "methodBody": "DeferredResult<List<Principal>> getPrincipals(Operation op, String criteria);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets all the principals matching the given criteria.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/idm/PrincipalProvider.java", "methodName": "com.vmware.admiral.auth.idm.PrincipalProvider.getAllGroupsForPrincipal", "methodParameterType": "Operation#String#", "methodParameterName": "op#principalId#", "methodBody": "DeferredResult<Set<String>> getAllGroupsForPrincipal(Operation op, String principalId);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets all the groups that a given principal belongs to.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/idm/PrincipalProvider.java", "methodName": "com.vmware.admiral.auth.idm.PrincipalProvider.getPrincipalByCredentials", "methodParameterType": "Operation#String#String#", "methodParameterName": "op#principalId#password#", "methodBody": "DeferredResult<Principal> getPrincipalByCredentials(Operation op, String principalId,\n            String password);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets a principal after validating that his credentials are correct.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "32", "file": "/root/repos/repos30/admiral/auth/src/main/java/com/vmware/admiral/auth/idm/PrincipalService.java", "methodName": "com.vmware.admiral.auth.idm.PrincipalService.isPrincipalByIdRequest", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "private boolean isPrincipalByIdRequest(Operation op) {\n        return op.getUri().getPath().length() > SELF_LINK.length() + 1;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether a principal ID was specified. Ignores suffixes like  {@link #ROLES_SUFFIX}or  {@link #SECURITY_CONTEXT_SUFFIX}. Additional checks are needed when those are expected.", "call_func_name": ["com.vmware.xenon.common.Operation.getUri", "java.net.URI.getPath", "java.lang.String.length"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/LogService.java", "methodName": "com.vmware.admiral.service.common.LogService.getDocumentTemplate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public ServiceDocument getDocumentTemplate() {\n        ServiceDocument template = super.getDocumentTemplate();\n        ServiceUtils.setRetentionLimit(template);\n\n        /* Workaround until https://www.pivotaltracker.com/n/projects/1471320/stories/143794415\n         * is fixed. Keep minimum versions of this state, because it is going to be kept until\n         * the container is existing. */\n        // com.vmware.photon.controller.model.ServiceUtils.setRetentionLimit(template);\n        template.documentDescription.versionRetentionFloor = 1;\n        template.documentDescription.versionRetentionLimit = 2;\n\n        // resource reference prop:\n        ServiceDocumentDescription.PropertyDescription pd = template.documentDescription\n                .propertyDescriptions.get(LogServiceState.FIELD_NAME_LOGS);\n        pd.indexingOptions = EnumSet.of(PropertyIndexingOption.STORE_ONLY,\n                PropertyIndexingOption.EXCLUDE_FROM_SIGNATURE);\n\n        // logs can be big, need to increase the default size limit\n        template.documentDescription.serializedStateSizeLimit = MAX_LOG_SIZE;\n\n        return template;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Provides a default instance of the service state and allows service author to specify indexing and usage options, per service document property", "call_func_name": ["com.vmware.xenon.common.StatefulService.getDocumentTemplate", "com.vmware.photon.controller.model.ServiceUtils.setRetentionLimit", "java.util.Map.get", "java.util.EnumSet.of"], "call_func_parameter": [[""], ["com.vmware.xenon.common.ServiceDocument"], ["java.lang.Object"], ["java.lang.Enum", "java.lang.Enum"]], "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/CloneableResource.java", "methodName": "com.vmware.admiral.service.common.CloneableResource.createCloneOperation", "methodParameterType": "Service#", "methodParameterName": "sender#", "methodBody": "Operation createCloneOperation(Service sender);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Clone current state and create  {@link Operation} with cloned state as body.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/SslTrustImportService.java", "methodName": "com.vmware.admiral.service.common.SslTrustImportService.handlePut", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "@Override\n    public void handlePut(Operation op) {\n        assertNotNull(op.getBodyRaw(), \"body is required\");\n        SslTrustImportRequest request = op.getBody(SslTrustImportRequest.class);\n        assertNotNull(request.hostUri, \"hostUri\");\n\n        SslCertificateResolver.execute(request.hostUri, (resolver, ex) -> {\n            if (ex != null) {\n                if (!(ex instanceof IllegalArgumentException)\n                        && !(ex instanceof LocalizableValidationException)) {\n                    ex = new IllegalArgumentException(ex);\n                }\n                op.setStatusCode(Operation.STATUS_CODE_BAD_REQUEST);\n                op.fail(ex);\n                return;\n            }\n\n            X509Certificate[] certificateChain = resolver.getCertificateChain();\n\n            SslTrustCertificateState sslTrustState;\n            try {\n                CertificateUtil.validateCertificateChain(certificateChain);\n                // moved in the try/catch block to prevent UI hangs in case of unexpected errors,\n                // e.g. SecurityException thrown by bouncy castle\n                sslTrustState = createSslTrustCertificateState(request, certificateChain);\n            } catch (Exception e) {\n                op.fail(e);\n                return;\n            }\n\n            if (resolver.isCertsTrusted()) {\n                // No need to store the certificate since it is signed by a known CA.\n                op.setStatusCode(HttpURLConnection.HTTP_ACCEPTED);\n                op.setBody(sslTrustState);\n                op.complete();\n            } else if (request.acceptCertificate) {\n                // store the accepted certificated to be used by the trust store.\n                storeTrustCertificate(sslTrustState, op);\n            } else {\n                // self-signed certificate - return to the user for confirmation if not\n                // already accepted\n                String fullSslTrustDocumentSelfLink = UriUtils.buildUriPath(\n                        SslTrustCertificateService.FACTORY_LINK,\n                        sslTrustState.documentSelfLink);\n                // Check if such trust cert state already exists:\n                new ServiceDocumentQuery<>(getHost(), SslTrustCertificateState.class)\n                        .queryDocument(\n                                fullSslTrustDocumentSelfLink,\n                                (r) -> {\n                                    if (r.hasException()) {\n                                        logWarning(\"Exception during ssl trust certificate check:\"\n                                                        + \" %s\", Utils.toString(r.getException()));\n                                        // return the certificate to the user for\n                                        // confirmation.\n                                        op.setBody(sslTrustState);\n                                        op.complete();\n                                    } else if (r.hasResult()) {\n                                        // Such trust state already exists, return it's\n                                        // location\n                                        op.addResponseHeader(Operation.LOCATION_HEADER,\n                                                fullSslTrustDocumentSelfLink);\n                                        op.setBody(null);\n                                        op.setStatusCode(HttpURLConnection.HTTP_NO_CONTENT);\n                                        op.complete();\n                                    } else {\n                                        // return the certificate to the user for\n                                        // confirmation.\n                                        op.setBody(sslTrustState);\n                                        op.complete();\n                                    }\n                                });\n            }\n        });\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)CatchClause)TryStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Handles PUT operation. Import certificate from an URI. Any errors during connection, encoding/decoding and validation of the certificate results in 400 BAD REQUEST status response. When a certificate is downloaded and validated successfully, an empty response with status 204 is returned. When a certificate is imported but not validated successfully (ex: self-signed certificates) and <code>acceptCertificate=false</code>, then a  {@link SslTrustCertificateState} is returnedas part of the body for user confirmation with response status code of 200. When a certificate is imported and not validated successfully but the <code>acceptCertificate</code> flag is set to true, then a  {@link SslTrustCertificateState}is stored in  {@link SslTrustCertificateService}. The selfDocumentLink of the new stored state {@link SslTrustCertificateState} is returned as part of the <code>Location</code> responseheader.", "call_func_name": ["com.vmware.xenon.common.Operation.getBodyRaw", "com.vmware.admiral.common.util.AssertUtil.assertNotNull", "com.vmware.xenon.common.Operation.getBody", "com.vmware.admiral.common.util.SslCertificateResolver.execute"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.String"], ["java.lang.Class"], ["java.net.URI", "java.util.function.BiConsumer"]], "passed_comments": [{"com.vmware.admiral.common.util.SslCertificateResolver.execute": "Connects to uri in separate thread and then executes the callback. First parameter for the callback function is the SSLCertificateResolver object itself or null in case there's an error. The second one is the error itself or null if no such is thrown."}]}, {"index": "36", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractInitialBootService.java", "methodName": "com.vmware.admiral.service.common.AbstractInitialBootService.initInstances", "methodParameterType": "Operation#ServiceDocument#", "methodParameterName": "post#states#", "methodBody": "protected void initInstances(Operation post, ServiceDocument... states) {\n        initInstances(post, true, true, states);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initialize a list of service default states if not already created. This method could be called only once per instance initialization.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractInitialBootService.java", "methodName": "com.vmware.admiral.service.common.AbstractInitialBootService.initInstances", "methodParameterType": "Operation#boolean#boolean#ServiceDocument#", "methodParameterName": "post#checkIfExists#selfDelete#states#", "methodBody": "protected void initInstances(Operation post, boolean checkIfExists, boolean selfDelete,\n            ServiceDocument... states) {\n        if (states == null || states.length == 0) {\n            post.complete();\n            logInfo(\"Finish initial boot service: %s\", getSelfLink());\n            if (selfDelete) {\n                logInfo(\"Stopping initial boot service: %s\", getSelfLink());\n                sendRequest(Operation.createDelete(getUri()));\n            }\n            return;\n        }\n        final AtomicInteger countDown = new AtomicInteger(states.length);\n        final Consumer<Throwable> callback = (e) -> countDown(countDown, selfDelete, post, e);\n        for (ServiceDocument state : states) {\n            initInstance(state, checkIfExists, callback);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Initialize a list of service default states if not already created. This method could be called only once per instance initialization.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractInitialBootService.java", "methodName": "com.vmware.admiral.service.common.AbstractInitialBootService.ensureInstanceExists", "methodParameterType": "ServiceDocument#Consumer<Throwable>#", "methodParameterName": "state#callback#", "methodBody": "private void ensureInstanceExists(ServiceDocument state, Consumer<Throwable> callback) {\n        new ServiceDocumentQuery<>(getHost(), state.getClass())\n                .queryUpdatedDocumentSince(0, state.documentSelfLink, (r) -> {\n                    if (r.hasException()) {\n                        logSevere(\"Can't query for system document: %s. Error: %s\",\n                                state.documentSelfLink,\n                                (r.getException() instanceof CancellationException)\n                                        ? r.getException().getClass().getName()\n                                        : Utils.toString(r.getException()));\n                        callback.accept(r.getException());\n                        return;\n                    } else if (r.hasResult()) {\n                        logFine(\"Not creating document %s as it has been created before\",\n                                state.documentSelfLink);\n                        callback.accept(null);\n                    } else {\n                        createDefaultInstance(state, callback, RETRIES_COUNT);\n                    }\n                });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ConditionalExpression(ParenthesizedExpression(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Make sure the given instance exists, if not create it using the state supplier The callback will be called when done, whether the instance was created or already existed (will not be called in case of failure to query or create the instance)", "call_func_name": ["com.vmware.admiral.service.common.AbstractInitialBootService.getHost", "java.lang.Object.getClass", "com.vmware.admiral.common.util.ServiceDocumentQuery.<init>", "java.util.function.Consumer.accept", "com.vmware.admiral.common.util.ServiceDocumentQuery.queryUpdatedDocumentSince"], "call_func_parameter": [[""], [""], ["com.vmware.xenon.common.ServiceHost", "java.lang.Class"], ["com.vmware.admiral.service.common.AbstractInitialBootService", "com.vmware.xenon.common.ServiceDocument", "java.util.function.Consumer"], ["long", "java.lang.String", "java.util.function.Consumer"]], "passed_comments": [{"com.vmware.admiral.common.util.ServiceDocumentQuery.queryUpdatedDocumentSince": "Query an expanded document extending  {@link ServiceDocument}s that is updated or deleted since given time in the past. The result will return if there is any update or delete operation from provided documentSinceUpdateTimeMicros. The deleted documents will be marked as with  {@link ServiceDocument#documentSignature} ={@link ServiceDocument#isDeletedTemplate(ServiceDocument)}. This query could be used to find out if there was any updates since the time it is provided as parameter."}]}, {"index": "39", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractInitialBootService.java", "methodName": "com.vmware.admiral.service.common.AbstractInitialBootService.createDefaultInstance", "methodParameterType": "ServiceDocument#Consumer<Throwable>#int#", "methodParameterName": "state#callback#retryCount#", "methodBody": "private void createDefaultInstance(ServiceDocument state, Consumer<Throwable> callback,\n            int retryCount) {\n        String factoryPath = UriUtils.getParentPath(state.documentSelfLink);\n        logInfo(\"Creating Default instance for %s\", state.documentSelfLink);\n        sendRequest(Operation\n                .createPost(this, factoryPath)\n                .addPragmaDirective(Operation.PRAGMA_DIRECTIVE_FORCE_INDEX_UPDATE)\n                .setBody(state)\n                .setCompletion(\n                        (op, ex) -> {\n                            if (ex != null) {\n                                if (retryCount > 0 && !(ex instanceof CancellationException)) {\n                                    logWarning(\n                                            \"Retrying with count %s after error creating default %s\"\n                                                    + \" instance for factory %s. Error: %s\",\n                                            retryCount, state.documentSelfLink, factoryPath,\n                                            Utils.toString(ex));\n                                    /*\n                                     * The factory should be up an available since we\n                                     * registerForServiceAvailability before that.\n                                     * However, it often fails with service not found.\n                                     * Hence, the retries and the wait here.\n                                     */\n                                    getHost().schedule(() -> {\n                                        logInfo(\"Waiting for the default %s instance for factory %s\"\n                                                        + \" to be created\",\n                                                state.documentSelfLink, factoryPath);\n                                        createDefaultInstance(state, callback, retryCount - 1);\n                                    }, RETRIES_WAIT, TimeUnit.MILLISECONDS);\n                                } else {\n                                    logWarning(\"Error creating default %s instance for factory %s.\"\n                                                    + \" Error: %s\",\n                                            state.documentSelfLink, factoryPath,\n                                            ex instanceof CancellationException\n                                                    ? ex.getClass().getName()\n                                                    : Utils.toString(ex));\n                                    callback.accept(ex);\n                                }\n                                return;\n                            }\n\n                            logInfo(\"Default instance created: %s\", state.documentSelfLink);\n                            callback.accept(null);\n                        }));\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#InfixExpression#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ReturnStatement#Block#IfStatement#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "create the given instance", "call_func_name": ["com.vmware.xenon.common.UriUtils.getParentPath", "com.vmware.admiral.service.common.AbstractInitialBootService.logInfo", "com.vmware.xenon.common.Operation.createPost", "com.vmware.xenon.common.Operation.addPragmaDirective", "com.vmware.xenon.common.Operation.setBody", "com.vmware.admiral.service.common.AbstractInitialBootService.sendRequest"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.Object[]"], ["com.vmware.xenon.common.Service", "java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.handleExpiration", "methodParameterType": "T#", "methodParameterName": "state#", "methodBody": "public void handleExpiration(T state) {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Invoked when the task has expired and the document was marked deleted in the index, but before the running service instance is stopped. Provides a hook for custom procedures executed when the task expires.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.validateStateOnStart", "methodParameterType": "T#", "methodParameterName": "state#", "methodBody": "protected void validateStateOnStart(T state) throws IllegalArgumentException {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "Optional custom validation code, if needed. Validation based on state annotations has been already performed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.autoMergeState", "methodParameterType": "Operation#T#T#", "methodParameterName": "patch#patchBody#currentState#", "methodBody": "protected void autoMergeState(Operation patch, T patchBody, T currentState) {\n        // use default merging for AUTO_MERGE_IF_NOT_NULL fields\n        Utils.mergeWithState(getStateDescription(), currentState, patchBody);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Performs automatic task state merge based on state annotations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "43", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.customStateValidationAndMerge", "methodParameterType": "Operation#T#T#", "methodParameterName": "patch#patchBody#currentState#", "methodBody": "protected void customStateValidationAndMerge(Operation patch, T patchBody, T currentState) {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Performs custom task state validation and merge. Allows sub-classes to provide custom validation and merge code when the automatic merge based on annotations is not sufficient. <p> This method must not complete/fail the given patch operation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "44", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.proceedTo", "methodParameterType": "E#Consumer<T>#", "methodParameterName": "subStage#patchBodyConfigurator#", "methodBody": "protected void proceedTo(E subStage, Consumer<T> patchBodyConfigurator) {\n        proceedTo(TaskStage.STARTED, subStage, patchBodyConfigurator);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Moves the task to the given subStage. The method assumes the task stage is STARTED as this is the stage where most sub-stage transition happen.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "45", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.complete", "methodParameterType": "E#Consumer<T>#", "methodParameterName": "subStage#patchBodyConfigurator#", "methodBody": "protected void complete(E subStage, Consumer<T> patchBodyConfigurator) {\n        proceedTo(TaskStage.FINISHED, subStage, patchBodyConfigurator);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Completes the task by setting its stage to FINISHED. The subStage can be specified, and if not, the one named COMPLETED will be used, if any.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "46", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.completeWithError", "methodParameterType": "E#Consumer<T>#", "methodParameterName": "subStage#patchBodyConfigurator#", "methodBody": "protected void completeWithError(E subStage, Consumer<T> patchBodyConfigurator) {\n        proceedTo(TaskStage.FAILED, subStage, patchBodyConfigurator);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Completes the task by setting its stage to FAILED. The subStage can be specified, and if not, the one named ERROR will be used, if any.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "47", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.proceedTo", "methodParameterType": "TaskStage#E#Consumer<T>#", "methodParameterName": "stage#subStage#patchBodyConfigurator#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    protected void proceedTo(TaskStage stage, E subStage, Consumer<T> patchBodyConfigurator) {\n        T body = null;\n\n        try {\n            body = (T) getStateType().newInstance();\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n\n        body.taskInfo = new TaskState();\n        body.taskInfo.stage = stage;\n        body.taskSubStage = subStage;\n        if (patchBodyConfigurator != null) {\n            patchBodyConfigurator.accept(body);\n        }\n\n        sendRequest(Operation.createPatch(getUri())\n                .setBody(body)\n                .setCompletion((o, e) -> {\n                    if (e != null) {\n                        logWarning(\"Moving task to %s:%s failed: %s\", stage, subStage,\n                                e.getMessage());\n                    }\n                }));\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Moves the task to the specified stage/subStage by sending a patch to self. By default the patch body is empty; use the  {@code patchBodyConfigurator} argument to set patch fields thatare required for this stage transition.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "48", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.notificationPayload", "methodParameterType": "T#", "methodParameterName": "state#", "methodBody": "protected BaseExtensibilityCallbackResponse notificationPayload(T state) {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Declares service fields which will be sent to client for information about the task.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.replyPayload", "methodParameterType": "T#", "methodParameterName": "state#", "methodBody": "protected ServiceTaskCallbackResponse replyPayload(T state) {\n        return notificationPayload(state);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Declares service fields which will be merged once response from subscriber is received.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "50", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.enhanceNotificationPayload", "methodParameterType": "T#Collection<ResourceState>#BaseExtensibilityCallbackResponse#", "methodParameterName": "state#relatedStates#notificationPayload#", "methodBody": "protected DeferredResult<Void> enhanceNotificationPayload(T state, Collection<ResourceState>\n            relatedStates, BaseExtensibilityCallbackResponse notificationPayload) {\n        return DeferredResult.completed(null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extends notification payload in order to include more data, that is not possible to be retrieved directly from task.  {@link notificationPayload()} is used like schema. It declareswhich fields will be merged from task state just before sending an event to subscriber. For example in ContainerAllocationTaskState there is a field 'resourceDescriptionLink' which points to ContainerDescription documentSelfLink. The ContainerDescription itself is not defined in task, so additional logic is neccessary in order to retrieve the object. Here comes the method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "51", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.enhanceExtensibilityResponse", "methodParameterType": "T#ServiceTaskCallbackResponse#", "methodParameterName": "state#replyPayload#", "methodBody": "public DeferredResult<Void> enhanceExtensibilityResponse(T state, ServiceTaskCallbackResponse\n            replyPayload) {\n        return DeferredResult.completed(null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p> Once response from client is received, it may contains data that can not be merged automatically to some of the task fields. Additional request to some resource may be needed in order to patch object which is not defined in task itself. <br/> <p> For example: {@link ComputeProvisionTaskService} provides extensibility mechanism for patchingComputeState address. ComputeState is not defined in task, but its self link is. In this case once the response from subscriber is received, additional call is needed to get the corresponded ComputeState(s) in order to patch its address before task is resumed. </p> </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/AbstractTaskStatefulService.java", "methodName": "com.vmware.admiral.service.common.AbstractTaskStatefulService.getExtensibilityManager", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private ExtensibilitySubscriptionManager getExtensibilityManager() {\n        if (extensibilityManager == null) {\n            if (getHost() instanceof IExtensibilityRegistryHost) {\n                extensibilityManager = ((IExtensibilityRegistryHost) getHost())\n                        .getExtensibilityRegistry();\n            }\n            if (extensibilityManager == null) {\n                getHost().log(Level.SEVERE, \"Host does not provide extensibility manager\");\n            }\n        }\n        return extensibilityManager;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns extensibility manager associated with the host.", "call_func_name": ["com.vmware.admiral.service.common.AbstractTaskStatefulService.getHost", "com.vmware.admiral.host.IExtensibilityRegistryHost.getExtensibilityRegistry", "com.vmware.xenon.common.ServiceHost.log"], "call_func_parameter": [[""], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/ExtensibilitySubscriptionManager.java", "methodName": "com.vmware.admiral.service.common.ExtensibilitySubscriptionManager.initialize", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "private void initialize(Operation op) {\n        if (initialized.getAndSet(true)) {\n            // already initialized\n            op.complete();\n            return;\n        }\n\n        DeferredResult<Void> subscriptionsRead = subscribeForSubscriptions().thenCompose(k ->\n                loadSubscriptions());\n        DeferredResult<Void> topicsRead = subscribeForTopics().thenCompose(k -> loadTopics());\n\n        DeferredResult.allOf(subscriptionsRead, topicsRead).whenComplete((useless, th) -> {\n            if (th != null) {\n                op.fail(th);\n            } else {\n                op.complete();\n            }\n        });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initialization method that <ul> <li>subscribes for changes on extensibility states</li> <li>loads current subscriptions</li> </ul>", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.getAndSet", "com.vmware.xenon.common.Operation.complete", "com.vmware.admiral.service.common.ExtensibilitySubscriptionManager.subscribeForSubscriptions", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.thenCompose", "com.vmware.admiral.service.common.ExtensibilitySubscriptionManager.subscribeForTopics", "com.vmware.xenon.common.DeferredResult.allOf", "java.util.function.BiConsumer.accept", "com.vmware.xenon.common.DeferredResult.whenComplete"], "call_func_parameter": [["boolean"], [""], [""], ["com.vmware.admiral.service.common.ExtensibilitySubscriptionManager"], ["java.util.function.Function"], [""], ["com.vmware.xenon.common.DeferredResult[]"], ["com.vmware.xenon.common.Operation"], ["java.util.function.BiConsumer"]], "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/ExtensibilitySubscriptionManager.java", "methodName": "com.vmware.admiral.service.common.ExtensibilitySubscriptionManager.sendBlockingNotificationCall", "methodParameterType": "ServiceTaskCallbackResponse#ServiceTaskCallbackResponse#ExtensibilitySubscription#T#", "methodParameterName": "notificationPayload#replyPayload#extensibility#state#", "methodBody": "@SuppressWarnings({ \"rawtypes\" })\n    private <T extends TaskServiceDocument> void sendBlockingNotificationCall(\n            ServiceTaskCallbackResponse notificationPayload,\n            ServiceTaskCallbackResponse replyPayload,\n            ExtensibilitySubscription extensibility, T state) {\n\n        logFine(\"Sending blocking notification to [%s] for [%s]\",\n                extensibility.callbackReference, state.documentSelfLink);\n\n        // Create callback which will handle response from subscriber client.\n        ExtensibilitySubscriptionCallback callbackState = new ExtensibilitySubscriptionCallback();\n        callbackState.taskStateJson = Utils.toJson(state);\n        callbackState.taskStateClassName = state.getClass().getSimpleName();\n\n        // Set callback to service task which will be resumed, once subscriber finished.\n        callbackState.serviceTaskCallback = ServiceTaskCallback.create(\n                state.documentSelfLink,\n                state.taskInfo.stage, state.taskSubStage,\n                TaskStage.STARTED, DefaultSubStage.ERROR);\n        callbackState.requestTrackerLink = state.requestTrackerLink;\n        callbackState.replyPayload = replyPayload;\n        callbackState.tenantLinks = state.tenantLinks;\n\n        Duration stagePhaseTimeout = getStagePhaseTimeout(state);\n\n        callbackState.due = LocalDateTime.now().plusNanos(stagePhaseTimeout.toNanos());\n\n        sendRequest(Operation\n                .createPost(this, ExtensibilitySubscriptionCallbackService.FACTORY_LINK)\n                .setBody(callbackState)\n                .setCompletion((o, e) -> {\n                    if (e != null) {\n                        logSevere(\"Failure creating extensibility callback: %s\", Utils.toJson(e));\n                        return;\n                    }\n\n                    ExtensibilitySubscriptionCallback result = o\n                            .getBody(ExtensibilitySubscriptionCallback.class);\n\n                    sendExternalNotification(extensibility,\n                            buildDataToSend(notificationPayload, replyPayload, result),\n                            state, NOTIFICATION_RETRY_COUNT);\n                }));\n    }", "AST": "Javadoc#SimpleName#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sends notification to subscriber. Client should post to the callback state to resume the task execution.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/ExtensibilitySubscriptionManager.java", "methodName": "com.vmware.admiral.service.common.ExtensibilitySubscriptionManager.sendAsyncNotificationCall", "methodParameterType": "ServiceTaskCallbackResponse#ServiceTaskCallbackResponse#ExtensibilitySubscription#T#", "methodParameterName": "notificationPayload#replyPayload#extensibility#state#", "methodBody": "@SuppressWarnings({ \"rawtypes\" })\n    private <T extends TaskServiceDocument> void sendAsyncNotificationCall(\n            ServiceTaskCallbackResponse notificationPayload,\n            ServiceTaskCallbackResponse replyPayload,\n            ExtensibilitySubscription extensibility, T state) {\n        logFine(\"Sending async notification to [%s] for [%s]\",\n                extensibility.callbackReference, state.documentSelfLink);\n        // Task is filtered to provide only fields declared as notification payload.\n        T notificationPayloadState = prepareTaskNotificationPayload(notificationPayload, state);\n        sendExternalNotification(extensibility, notificationPayloadState, state,\n                NOTIFICATION_RETRY_COUNT);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sends notification to subscriber", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/ExtensibilitySubscriptionManager.java", "methodName": "com.vmware.admiral.service.common.ExtensibilitySubscriptionManager.sendExternalNotification", "methodParameterType": "ExtensibilitySubscription#ServiceDocument#T#int#", "methodParameterName": "extensibility#body#state#retriesLeft#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n    private <T extends TaskServiceDocument> void sendExternalNotification(\n            ExtensibilitySubscription extensibility,\n            ServiceDocument body, T state,\n            int retriesLeft) {\n\n        sendRequest(Operation.createPost(extensibility.callbackReference)\n                .setBody(body)\n                .setCompletion((o, e) -> {\n                    if (e != null) {\n                        logWarning(\n                                \"Retrying [%s] times to notify [%s]. Error: [%s]\",\n                                retriesLeft, extensibility.callbackReference,\n                                e.getMessage());\n\n                        if (retriesLeft <= 1) {\n                            logWarning(\"Cannot notify [%s] for task [%s]. Error: %s\",\n                                    extensibility.callbackReference, body.documentSelfLink,\n                                    e.getMessage());\n\n                            failTask(e.getMessage(), state.documentSelfLink);\n                        } else if (o.getStatusCode() == Operation.STATUS_CODE_TIMEOUT) {\n                            // Call to ExtensibilitySubscriptionCallback will resume the service\n                            // task.\n                            logWarning(\"Request to [%s] for task [%s] expired!\",\n                                    extensibility.callbackReference, body.documentSelfLink);\n                        } else {\n                            getHost().schedule(() -> {\n                                sendExternalNotification(extensibility, body, state,\n                                        retriesLeft - 1);\n                            }, NOTIFICATION_RETRY_WAIT, TimeUnit.SECONDS);\n\n                        }\n                    }\n                }));\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sends a service document to external url. Supports retry in case of an error and if task service is provided this method will call failTask when no more retries left.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/EventTopicDeclarator.java", "methodName": "com.vmware.admiral.service.common.EventTopicDeclarator.registerEventTopics", "methodParameterType": "ServiceHost#", "methodParameterName": "host#", "methodBody": "public void registerEventTopics(ServiceHost host);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Asynchronous registration of one or more  {@link EventTopicState}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/ExtensibilitySubscriptionCallbackService.java", "methodName": "com.vmware.admiral.service.common.ExtensibilitySubscriptionCallbackService.markDone", "methodParameterType": "String#", "methodParameterName": "statusMessage#", "methodBody": "private void markDone(String statusMessage) {\n        ExtensibilitySubscriptionCallback patch = new ExtensibilitySubscriptionCallback();\n        patch.status = ExtensibilitySubscriptionCallback.Status.DONE;\n        patch.errorMessage = statusMessage;\n        patch.documentExpirationTimeMicros = ServiceUtils.getExpirationTimeFromNowInMicros(\n                TimeUnit.MINUTES.toMicros(PROCESSED_NOTIFICATION_EXPIRE_TIME));\n\n        sendRequest(Operation.createPatch(getUri())\n                .setBody(patch)\n                .setCompletion((o, e) -> {\n                    if (e != null && !(e instanceof ServiceNotFoundException)) {\n                        logSevere(\"Self patch [%s] failed: %s\", getSelfLink(), Utils.toString(e));\n                    }\n                }));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#InfixExpression#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Self-update with status done and sets expiration time.", "call_func_name": ["java.util.concurrent.TimeUnit.toMicros", "com.vmware.admiral.common.util.ServiceUtils.getExpirationTimeFromNowInMicros", "com.vmware.admiral.service.common.ExtensibilitySubscriptionCallbackService.getUri", "com.vmware.xenon.common.Operation.createPatch", "com.vmware.xenon.common.Operation.setBody", "com.vmware.admiral.service.common.ExtensibilitySubscriptionCallbackService.sendRequest"], "call_func_parameter": [["long"], ["long"], [""], ["java.net.URI"], ["java.lang.Object"], ["com.vmware.xenon.common.Operation"]], "passed_comments": [{"com.vmware.admiral.common.util.ServiceUtils.getExpirationTimeFromNowInMicros": "Adds the supplied argument to the value from {@link com.vmware.xenon.common.Utils#getSystemNowMicrosUtc()} and returns an absoluteexpiration time in the future"}]}, {"index": "59", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/ExtensibilitySubscriptionCallbackService.java", "methodName": "com.vmware.admiral.service.common.ExtensibilitySubscriptionCallbackService.syncTaskStates", "methodParameterType": "ExtensibilitySubscriptionCallback#Operation#", "methodParameterName": "currentState#op#", "methodBody": "private void syncTaskStates(\n            ExtensibilitySubscriptionCallback currentState, Operation op) {\n\n        currentState.status = ExtensibilitySubscriptionCallback.Status.RESUME;\n\n        // Original callback to task which has to be resumed.\n        ServiceTaskCallbackResponse serviceTaskCallbackResponse = currentState.serviceTaskCallback\n                .getFinishedResponse();\n        // Every service task which supports extensibility should provide it's own\n        // 'extensibilityCallbackResponse' which will define suitable for modification fields, once\n        // the response from subscriber is received. Here fields are merged from response to\n        // callback.\n        ServiceTaskCallbackResponse extensibilityResponse = op\n                .getBody(currentState.replyPayload.getClass());\n        // Save the properties that came back from the response to support update\n        Map<String, String> customProperties = extensibilityResponse.customProperties;\n        // Inherit original callback in order to be aware which task stage should be resumed.\n        extensibilityResponse.copy(serviceTaskCallbackResponse);\n        extensibilityResponse.customProperties = customProperties;\n\n        // Store extensibility callback in order to be used as finished callback response.\n        currentState.replyPayload = extensibilityResponse;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Merges received task state with the persisted one.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/harbor/HarborInitRegistryService.java", "methodName": "com.vmware.admiral.service.common.harbor.HarborInitRegistryService.checkAndCreateRegistry", "methodParameterType": "Operation#String#", "methodParameterName": "post#harborUrl#", "methodBody": "private void checkAndCreateRegistry(Operation post, String harborUrl) {\n        sendRequest(Operation\n                .createGet(this, Harbor.DEFAULT_REGISTRY_LINK)\n                .setCompletion((o, e) -> {\n                    if (o.getStatusCode() == Operation.STATUS_CODE_NOT_FOUND) {\n                        logInfo(\"Creating default Harbor registry\");\n                        createHarborCredentials(post,\n                                (authLink) -> createHarborRegistry(post, harborUrl, authLink));\n                    } else if (e != null) {\n                        logSevere(\"Error getting default Harbor registry: %s\", Utils.toString(e));\n                        post.fail(e);\n                    } else {\n                        RegistryState registryState = o.getBody(RegistryState.class);\n                        if (!harborUrl.equals(registryState.address)) {\n                            logInfo(\"Default Harbor registry address has changed. Recreating it.\");\n                            createHarborCredentials(post,\n                                    (authLink) -> createHarborRegistry(post, harborUrl, authLink));\n                        } else {\n                            post.complete();\n                        }\n                    }\n                }));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Checks for existing default-harbor-registry and compares the address. If needed an new registry is created or existing is updated and a new credentials are created.", "call_func_name": ["com.vmware.xenon.common.Operation.createGet", "com.vmware.admiral.service.common.harbor.HarborInitRegistryService.sendRequest"], "call_func_parameter": [["com.vmware.xenon.common.Service", "java.lang.String"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "61", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/service/common/SslTrustCertificateFactoryService.java", "methodName": "com.vmware.admiral.service.common.SslTrustCertificateFactoryService.handlePost", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "@Override\n    public void handlePost(Operation op) {\n        if (op.isSynchronize()) {\n            op.complete();\n            return;\n        }\n        if (op.hasBody()) {\n            SslTrustCertificateState body = (SslTrustCertificateState) op.getBody(this.stateType);\n            if (body == null) {\n                op.fail(new IllegalArgumentException(\"structured body is required\"));\n                return;\n            }\n\n            if (body.documentSourceLink != null) {\n                op.fail(new IllegalArgumentException(\"clone request not supported\"));\n                return;\n            }\n\n            body.documentSelfLink = generateSelfLlink(body);\n            op.setBody(body);\n            op.complete();\n        } else {\n            op.fail(new IllegalArgumentException(\"body is required\"));\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Override the handlePost method to set the documentSelfLink. We don't want to have multiple certificate states with the same certificate, so we build the documentSelfLink ourselves", "call_func_name": ["com.vmware.xenon.common.Operation.isSynchronize", "com.vmware.xenon.common.Operation.complete", "com.vmware.xenon.common.Operation.hasBody", "com.vmware.xenon.common.Operation.getBody", "java.lang.IllegalArgumentException.<init>", "com.vmware.xenon.common.Operation.fail", "com.vmware.xenon.common.Operation.setBody"], "call_func_parameter": [[""], [""], [""], ["java.lang.Class"], ["java.lang.String"], ["java.lang.Throwable"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "62", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/UriUtilsExtended.java", "methodName": "com.vmware.admiral.common.util.UriUtilsExtended.parseBooleanParam", "methodParameterType": "String#", "methodParameterName": "value#", "methodBody": "public static boolean parseBooleanParam(String value) {\n        if (value == null) {\n            return false;\n        }\n\n        if (value.equalsIgnoreCase(\"false\") || value.equals(\"0\")) {\n            return false;\n        }\n\n        // anything else is considered true\n        return true;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parse a boolean query parameter value Unlike Boolean.parseBoolean this will treat any value except null, false and 0 as true.", "call_func_name": ["java.lang.String.equalsIgnoreCase", "java.lang.String.equals"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/UriUtilsExtended.java", "methodName": "com.vmware.admiral.common.util.UriUtilsExtended.flattenQueryParams", "methodParameterType": "Map<String,String>#", "methodParameterName": "queryParams#", "methodBody": "public static String[] flattenQueryParams(Map<String, String> queryParams) {\n        return queryParams.entrySet().stream()\n                .flatMap((e) -> Stream.of(e.getKey(), e.getValue()))\n                .toArray(String[]::new);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#CreationReference#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(CreationReference(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)CreationReference)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Flattens a query parameters map so it can be used with extendQueryWithParams", "call_func_name": ["java.util.Map.entrySet", "java.util.Set.stream", "java.util.function.Function.apply", "java.util.stream.Stream.flatMap", "java.util.function.IntFunction.apply", "java.util.stream.Stream.toArray"], "call_func_parameter": [[""], [""], [""], ["java.util.function.Function"], [""], ["java.util.function.IntFunction"]], "passed_comments": "/"}, {"index": "64", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/UriUtilsExtended.java", "methodName": "com.vmware.admiral.common.util.UriUtilsExtended.getReverseProxyUri", "methodParameterType": "URI#", "methodParameterName": "in#", "methodBody": "public static URI getReverseProxyUri(URI in) {\n        if (in == null) {\n            return null;\n        }\n        String encodedUri = getValueEncoded(in.toString());\n        return UriUtils.buildUri(UriUtils.buildUriPath(ReverseProxyService.SELF_LINK, encodedUri));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the provided  {@link URI} transformed to be sent to the {@link ReverseProxyService}instead of accessing directly to it. Some transformation examples ({xyz} means Reverse Proxy encoded path): <pre> http://abc:80/p1/p2 -> ../rp/{http://abc:80/p1/p2} http://abc:80/p1/p2?q1=v1 -> ../rp/{http://abc:80/p1/p2?q1=v1} </pre>", "call_func_name": ["java.net.URI.toString", "com.vmware.admiral.common.util.UriUtilsExtended.getValueEncoded", "com.vmware.xenon.common.UriUtils.buildUriPath", "com.vmware.xenon.common.UriUtils.buildUri"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String[]"], ["java.lang.String"]], "passed_comments": [{"com.vmware.admiral.common.util.UriUtilsExtended.getValueEncoded": "Returns the provided value encoded to a  {@link ReverseProxyService} friendly format."}]}, {"index": "65", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/UriUtilsExtended.java", "methodName": "com.vmware.admiral.common.util.UriUtilsExtended.getReverseProxyLocation", "methodParameterType": "String#URI#URI#", "methodParameterName": "location#currentUri#originalUri#", "methodBody": "public static String getReverseProxyLocation(String location, URI currentUri, URI originalUri) {\n        if (location.startsWith(UriUtils.URI_PATH_CHAR)) { // relative path\n            location = UriUtils.buildUri(currentUri, location).toString()\n                    // keep trailing '/' if applies (important! e.g. for the ShellInABox case)\n                    + (location.endsWith(UriUtils.URI_PATH_CHAR) ? UriUtils.URI_PATH_CHAR : \"\");\n        }\n        String newLocation = UriUtils.buildUriPath(ReverseProxyService.SELF_LINK,\n                getValueEncoded(location));\n        if (originalUri == null) {\n            return newLocation;\n        }\n        // check for the parameter RP_RELATIVE_TO_PARAM and use it if it applies\n        Map<String, String> params = UriUtils.parseUriQueryParams(originalUri);\n        String relativeTo = params.get(RP_RELATIVE_TO_PARAM);\n        if (relativeTo == null) {\n            return newLocation;\n        }\n        return UriUtils.buildUriPath(relativeTo, newLocation) + UriUtils.URI_QUERY_CHAR\n                + UriUtils.buildUriQuery(RP_RELATIVE_TO_PARAM, relativeTo);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#StringLiteral#ConditionalExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the provided new location (from the header \"location\") transformed to be sent to the {@link ReverseProxyService} instead of accessing directly to it. If the new location isrelative then it's transformed to absolute based on the provided current  {@link URI}. Optionally, if the original  {@link URI} containing the Reverse Proxy target specifies theparameter  {@link RP_RELATIVE_TO_PARAM}, then the value of that parameter is used as a prefix of the new location. That's required in order to avoid relying on Xenon's method getReferer() since it's value can be altered by the framework. Some transformation examples ({xyz} means Reverse Proxy encoded path): <pre> /p3/p4 & http://abc:80/p1/p2 -> /rp/{http://abc:80/p3/p4} http://abc:80/p1/p2 & xxx -> /rp/{http://abc:80/p1/p2} </pre>", "call_func_name": ["java.lang.String.startsWith", "java.lang.StringBuilder.<init>", "com.vmware.xenon.common.UriUtils.buildUri", "java.net.URI.toString", "java.lang.StringBuilder.append", "java.lang.String.endsWith", "java.lang.StringBuilder.toString", "com.vmware.admiral.common.util.UriUtilsExtended.getValueEncoded", "com.vmware.xenon.common.UriUtils.buildUriPath", "com.vmware.xenon.common.UriUtils.parseUriQueryParams", "java.util.Map.get", "com.vmware.xenon.common.UriUtils.buildUriQuery"], "call_func_parameter": [["java.lang.String"], [""], ["java.net.URI", "java.lang.String[]"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String[]"], ["java.net.URI"], ["java.lang.Object"], ["java.lang.String[]"]], "passed_comments": [{"com.vmware.admiral.common.util.UriUtilsExtended.getValueEncoded": "Returns the provided value encoded to a  {@link ReverseProxyService} friendly format."}]}, {"index": "66", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/UriUtilsExtended.java", "methodName": "com.vmware.admiral.common.util.UriUtilsExtended.getReverseProxyTargetUri", "methodParameterType": "URI#", "methodParameterName": "opUri#", "methodBody": "public static URI getReverseProxyTargetUri(URI opUri) {\n        if (opUri == null) {\n            return null;\n        }\n\n        String opUriPath = opUri.getPath();\n\n        int rpIndex = opUriPath.indexOf(ReverseProxyService.SELF_LINK);\n        if (rpIndex == -1) {\n            // no target URI provided!\n            return null;\n        }\n        String opPath = opUriPath.substring(rpIndex + ReverseProxyService.SELF_LINK.length());\n\n        if (opPath.startsWith(UriUtils.URI_PATH_CHAR)) {\n            opPath = opPath.substring(1);\n        } else {\n            // no target URI provided!\n            return null;\n        }\n\n        String encodedUri = opPath.split(UriUtils.URI_PATH_CHAR)[0];\n        String decodedUri;\n        try {\n            decodedUri = getReverseProxyDecoded(encodedUri);\n        } catch (Exception e) {\n            // target URI is not RP encoded, most probably just a relative path\n            return null;\n        }\n\n        URI targetUri = UriUtils.buildUri(decodedUri);\n        if (targetUri == null) {\n            throw new LocalizableValidationException(\"Invalid target URI: \" + decodedUri,\n                    \"common.invalid.uri\", decodedUri);\n        }\n\n        Map<String, String> queryParams = UriUtils.parseUriQueryParams(targetUri);\n        queryParams.putAll(UriUtils.parseUriQueryParams(opUri));\n        queryParams.remove(RP_RELATIVE_TO_PARAM);\n\n        String opExtraPath = opPath.replace(encodedUri, \"\");\n        if (!opExtraPath.isEmpty() && !opExtraPath.equals(UriUtils.URI_PATH_CHAR)) {\n            targetUri = UriUtils.extendUri(targetUri, opExtraPath);\n        }\n\n        if (opExtraPath.endsWith(UriUtils.URI_PATH_CHAR) &&\n                !targetUri.toString().endsWith(UriUtils.URI_PATH_CHAR)) {\n            // keep trailing '/' if applies (important! e.g. for the ShellInABox case)\n            targetUri = UriUtils.buildUri(targetUri.toString() + UriUtils.URI_PATH_CHAR);\n        }\n\n        if (!queryParams.isEmpty()) {\n            targetUri = UriUtils.extendUriWithQuery(\n                    // keep trailing '/' if applies (important! e.g. for the ShellInABox case)\n                    UriUtils.buildUri(\n                            targetUri.toString().replace(\"?\" + targetUri.getRawQuery(), \"\")),\n                    flattenQueryParams(queryParams));\n        }\n\n        return targetUri;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#StringLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the actual  {@link URI} that the {@link URI} coming from the{@link ReverseProxyService} is targeting.Some transformation examples ({xyz} means Reverse Proxy encoded path): <pre> ../rp/{http://abc:80/p1/p2} -> http://abc:80/p1/p2 ../rp/{http://abc:80/p1/p2?q1=v1} -> http://abc:80/p1/p2?q1=v1 ../rp/{http://abc:80/p1/p2}/ep1/ep2 -> http://abc:80/p1/p2/ep1/ep2 ../rp/{http://abc:80/p1/p2?q1=v1}/ep1/ep2 -> http://abc:80/p1/p2/ep1/ep2?q1=v1 ../rp/{http://abc:80/p1/p2?q1=v1}/ep1/ep2?q2=v2 -> http://abc:80/p1/p2/ep1/ep2?q1=v1&q2=v2 </pre>", "call_func_name": ["java.net.URI.getPath", "java.lang.String.indexOf", "java.lang.String.length", "java.lang.String.substring", "java.lang.String.startsWith", "java.lang.String.split", "com.vmware.admiral.common.util.UriUtilsExtended.getReverseProxyDecoded", "com.vmware.xenon.common.UriUtils.buildUri", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.vmware.xenon.common.LocalizableValidationException.<init>", "com.vmware.xenon.common.UriUtils.parseUriQueryParams", "java.util.Map.putAll", "java.util.Map.remove", "java.lang.String.replace", "java.lang.String.isEmpty", "java.lang.String.equals", "com.vmware.xenon.common.UriUtils.extendUri", "java.lang.String.endsWith", "java.net.URI.toString", "java.util.Map.isEmpty", "java.net.URI.getRawQuery", "com.vmware.admiral.common.util.UriUtilsExtended.flattenQueryParams", "com.vmware.xenon.common.UriUtils.extendUriWithQuery"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["int"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.Object[]"], ["java.net.URI"], ["java.util.Map"], ["java.lang.Object"], ["java.lang.CharSequence", "java.lang.CharSequence"], [""], ["java.lang.Object"], ["java.net.URI", "java.lang.String"], ["java.lang.String"], [""], [""], [""], ["java.util.Map"], ["java.net.URI", "java.lang.String[]"]], "passed_comments": [{"com.vmware.admiral.common.util.UriUtilsExtended.getReverseProxyDecoded": "Returns the provided value decoded from a  {@link ReverseProxyService} friendly format."}, {"com.vmware.admiral.common.util.UriUtilsExtended.flattenQueryParams": "Flattens a query parameters map so it can be used with extendQueryWithParams"}]}, {"index": "67", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/UriUtilsExtended.java", "methodName": "com.vmware.admiral.common.util.UriUtilsExtended.getValueEncoded", "methodParameterType": "String#", "methodParameterName": "input#", "methodBody": "public static String getValueEncoded(String input) {\n        return Base64.getUrlEncoder().encodeToString(input.getBytes(UTF_8));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the provided value encoded to a  {@link ReverseProxyService} friendly format.", "call_func_name": ["java.util.Base64.getUrlEncoder", "java.lang.String.getBytes"], "call_func_parameter": [[""], ["java.nio.charset.Charset"]], "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/UriUtilsExtended.java", "methodName": "com.vmware.admiral.common.util.UriUtilsExtended.getReverseProxyDecoded", "methodParameterType": "String#", "methodParameterName": "input#", "methodBody": "public static String getReverseProxyDecoded(String input) {\n        return new String(Base64.getUrlDecoder().decode(input), UTF_8);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the provided value decoded from a  {@link ReverseProxyService} friendly format.", "call_func_name": ["java.util.Base64.getUrlDecoder", "java.lang.String.<init>"], "call_func_parameter": [[""], ["byte[]", "java.nio.charset.Charset"]], "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/PropertyUtils.java", "methodName": "com.vmware.admiral.common.util.PropertyUtils.mergeServiceDocuments", "methodParameterType": "ServiceDocument#ServiceDocument#", "methodParameterName": "copyTo#copyFrom#", "methodBody": "public static void mergeServiceDocuments(ServiceDocument copyTo, ServiceDocument copyFrom) {\n        mergeServiceDocuments(copyTo, copyFrom, SHALLOW_MERGE_STRATEGY);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Perform shallow merge of ServiceDocuments using reflection", "call_func_name": ["com.vmware.admiral.common.util.PropertyUtils.mergeServiceDocuments"], "call_func_parameter": [["com.vmware.xenon.common.ServiceDocument", "com.vmware.xenon.common.ServiceDocument", "java.util.function.BinaryOperator"]], "passed_comments": [{"com.vmware.admiral.common.util.PropertyUtils.mergeServiceDocuments": "Perform merge of ServiceDocuments using the given strategy"}]}, {"index": "70", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/PropertyUtils.java", "methodName": "com.vmware.admiral.common.util.PropertyUtils.mergeServiceDocuments", "methodParameterType": "ServiceDocument#ServiceDocument#BinaryOperator<Object>#", "methodParameterName": "copyTo#copyFrom#fieldMergeStrategy#", "methodBody": "public static void mergeServiceDocuments(ServiceDocument copyTo, ServiceDocument copyFrom,\n            BinaryOperator<Object> fieldMergeStrategy) {\n        mergeObjects(copyTo, copyFrom, fieldMergeStrategy);\n        // the expiration time could be updated\n        long exp = copyFrom.documentExpirationTimeMicros;\n        if (exp != 0) {\n            copyTo.documentExpirationTimeMicros = exp < 0 ? 0 : exp;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Perform merge of ServiceDocuments using the given strategy", "call_func_name": ["com.vmware.admiral.common.util.PropertyUtils.mergeObjects"], "call_func_parameter": [["java.lang.Object", "java.lang.Object", "java.util.function.BinaryOperator"]], "passed_comments": [{"com.vmware.admiral.common.util.PropertyUtils.mergeObjects": "Perform merge of Objects using the given strategy"}]}, {"index": "71", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/PropertyUtils.java", "methodName": "com.vmware.admiral.common.util.PropertyUtils.mergeObjects", "methodParameterType": "Object#Object#BinaryOperator<Object>#", "methodParameterName": "copyTo#copyFrom#fieldMergeStrategy#", "methodBody": "public static void mergeObjects(Object copyTo, Object copyFrom,\n            BinaryOperator<Object> fieldMergeStrategy) {\n\n        for (Field field : copyFrom.getClass().getFields()) {\n            // skip framework and static fields\n            if (ServiceDocument.isBuiltInDocumentField(field.getName())\n                    || Modifier.isStatic(field.getModifiers())) {\n                continue;\n            }\n\n            try {\n                Object value = field.get(copyFrom);\n                Object oldValue = field.get(copyTo);\n                field.set(copyTo, fieldMergeStrategy.apply(oldValue, value));\n\n            } catch (IllegalArgumentException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Perform merge of Objects using the given strategy", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getFields", "java.lang.reflect.Field.getName", "com.vmware.xenon.common.ServiceDocument.isBuiltInDocumentField", "java.lang.reflect.Field.getModifiers", "java.lang.reflect.Modifier.isStatic", "java.lang.reflect.Field.get", "java.util.function.BinaryOperator.apply", "java.lang.reflect.Field.set", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], ["int"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/PropertyUtils.java", "methodName": "com.vmware.admiral.common.util.PropertyUtils.findField", "methodParameterType": "Class<?>#String#", "methodParameterName": "clazz#name#", "methodBody": "public static Field findField(Class<?> clazz, String name) {\n        Class<?> searchType = clazz;\n        while (Object.class != searchType && searchType != null) {\n            Field field = ReflectionUtils.getField(searchType, name);\n            if (field != null) {\n                return field;\n            }\n            searchType = searchType.getSuperclass();\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Attempt to find a  {@link Field field} on the supplied {@link Class} with the supplied{@code name}. Searches all superclasses up to  {@link Object}.", "call_func_name": ["com.vmware.xenon.common.ReflectionUtils.getField", "java.lang.Class.getSuperclass"], "call_func_parameter": [["java.lang.Class", "java.lang.String"], [""]], "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CertificateUtilExtended.java", "methodName": "com.vmware.admiral.common.util.CertificateUtilExtended.fromFile", "methodParameterType": "File#", "methodParameterName": "certFile#", "methodBody": "public static X509Certificate[] fromFile(File certFile) {\n        try {\n            String content = new String(Files.readAllBytes(certFile.toPath()));\n            return CertificateUtil.createCertificateChain(content);\n        } catch (Exception e) {\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Serialize the content of a .crt file to X509 certificate chain", "call_func_name": ["java.io.File.toPath", "java.nio.file.Files.readAllBytes", "java.lang.String.<init>", "com.vmware.photon.controller.model.security.util.CertificateUtil.createCertificateChain"], "call_func_parameter": [[""], ["java.nio.file.Path"], ["byte[]"], ["java.lang.String"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.createCertificateChain": "Utility method to decode a certificate chain PEM encoded string value to an array of X509Certificate certificate instances."}]}, {"index": "74", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CertificateUtilExtended.java", "methodName": "com.vmware.admiral.common.util.CertificateUtilExtended.toPEMformat", "methodParameterType": "X509Certificate#ServiceHost#", "methodParameterName": "certificate#host#", "methodBody": "public static String toPEMformat(X509Certificate certificate, ServiceHost host) {\n        if (useAuthConfig(host)) {\n            return certToPEMformat(certificate);\n        } else {\n            return CertificateUtil.toPEMformat(certificate);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "PSC 6.5 SAML requirement due to Bouncycastle library conflicts.", "call_func_name": ["com.vmware.admiral.common.util.CertificateUtilExtended.useAuthConfig", "com.vmware.admiral.common.util.CertificateUtilExtended.certToPEMformat", "com.vmware.photon.controller.model.security.util.CertificateUtil.toPEMformat"], "call_func_parameter": [["com.vmware.xenon.common.ServiceHost"], ["java.security.cert.X509Certificate"], ["java.security.cert.X509Certificate"]], "passed_comments": [{"com.vmware.admiral.common.util.CertificateUtilExtended.certToPEMformat": "Serialize Certificate in PEM format, compatible version for bcprov 1.50"}, {"com.vmware.photon.controller.model.security.util.CertificateUtil.toPEMformat": "Serialize Certificate in PEM format"}, {"com.vmware.photon.controller.model.security.util.CertificateUtil.toPEMformat": "Serialize Certificate chain in PEM format"}]}, {"index": "75", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CertificateUtilExtended.java", "methodName": "com.vmware.admiral.common.util.CertificateUtilExtended.toPEMformat", "methodParameterType": "X509Certificate[]#ServiceHost#", "methodParameterName": "certificateChain#host#", "methodBody": "public static String toPEMformat(X509Certificate[] certificateChain, ServiceHost host) {\n        StringWriter sw = new StringWriter();\n        for (X509Certificate certificate : certificateChain) {\n            sw.append(toPEMformat(certificate, host));\n        }\n        return sw.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "PSC 6.5 SAML requirement due to Bouncycastle library conflicts.", "call_func_name": ["java.io.StringWriter.<init>", "com.vmware.admiral.common.util.CertificateUtilExtended.toPEMformat", "java.io.StringWriter.append", "java.io.StringWriter.toString"], "call_func_parameter": [[""], ["java.security.cert.X509Certificate", "com.vmware.xenon.common.ServiceHost"], ["java.lang.CharSequence"], [""]], "passed_comments": [{"com.vmware.admiral.common.util.CertificateUtilExtended.toPEMformat": "PSC 6.5 SAML requirement due to Bouncycastle library conflicts."}, {"com.vmware.admiral.common.util.CertificateUtilExtended.toPEMformat": "PSC 6.5 SAML requirement due to Bouncycastle library conflicts."}]}, {"index": "76", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CertificateUtilExtended.java", "methodName": "com.vmware.admiral.common.util.CertificateUtilExtended.toPEMFormat", "methodParameterType": "Key#ServiceHost#", "methodParameterName": "key#host#", "methodBody": "public static String toPEMFormat(Key key, ServiceHost host) {\n        if (useAuthConfig(host)) {\n            return keyToPEMFormat(key);\n        } else {\n            return KeyUtil.toPEMFormat(key);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "PSC 6.5 SAML requirement due to Bouncycastle library conflicts.", "call_func_name": ["com.vmware.admiral.common.util.CertificateUtilExtended.useAuthConfig", "com.vmware.admiral.common.util.CertificateUtilExtended.keyToPEMFormat", "com.vmware.photon.controller.model.security.util.KeyUtil.toPEMFormat"], "call_func_parameter": [["com.vmware.xenon.common.ServiceHost"], ["java.security.Key"], ["java.security.Key"]], "passed_comments": [{"com.vmware.admiral.common.util.CertificateUtilExtended.keyToPEMFormat": "Serialize Key in PEM format, compatible version for bcprov 1.50"}]}, {"index": "77", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CertificateUtilExtended.java", "methodName": "com.vmware.admiral.common.util.CertificateUtilExtended.keyToPEMFormat", "methodParameterType": "Key#", "methodParameterName": "key#", "methodBody": "private static String keyToPEMFormat(Key key) {\n        StringWriter sw = new StringWriter();\n        PEMWriter pemWriter = new PEMWriter(sw);\n        try {\n            pemWriter.writeObject(key);\n            pemWriter.close();\n\n            return sw.toString();\n\n        } catch (IOException x) {\n            throw new RuntimeException(\"Failed to serialize key\", x);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Serialize Key in PEM format, compatible version for bcprov 1.50", "call_func_name": ["java.io.StringWriter.<init>", "org.bouncycastle.openssl.PEMWriter.<init>", "org.bouncycastle.openssl.PEMWriter.writeObject", "org.bouncycastle.openssl.PEMWriter.close", "java.io.StringWriter.toString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["java.io.Writer"], ["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CertificateUtilExtended.java", "methodName": "com.vmware.admiral.common.util.CertificateUtilExtended.certToPEMformat", "methodParameterType": "X509Certificate#", "methodParameterName": "certificate#", "methodBody": "private static String certToPEMformat(X509Certificate certificate) {\n        StringWriter sw = new StringWriter();\n        PEMWriter pemWriter = new PEMWriter(sw);\n        try {\n            pemWriter.writeObject(certificate);\n            pemWriter.close();\n\n            return sw.toString();\n\n        } catch (IOException x) {\n            throw new RuntimeException(\"Failed to serialize certificate\", x);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Serialize Certificate in PEM format, compatible version for bcprov 1.50", "call_func_name": ["java.io.StringWriter.<init>", "org.bouncycastle.openssl.PEMWriter.<init>", "org.bouncycastle.openssl.PEMWriter.writeObject", "org.bouncycastle.openssl.PEMWriter.close", "java.io.StringWriter.toString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["java.io.Writer"], ["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DockerImage.java", "methodName": "com.vmware.admiral.common.util.DockerImage.getHost", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getHost() {\n        return host;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the host", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "80", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DockerImage.java", "methodName": "com.vmware.admiral.common.util.DockerImage.getNamespace", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNamespace() {\n        return namespace;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the namespace", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DockerImage.java", "methodName": "com.vmware.admiral.common.util.DockerImage.getRepository", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getRepository() {\n        return repository;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the repository", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DockerImage.java", "methodName": "com.vmware.admiral.common.util.DockerImage.getTag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getTag() {\n        return tag;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the tag", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DockerImage.java", "methodName": "com.vmware.admiral.common.util.DockerImage.fromImageName", "methodParameterType": "String#", "methodParameterName": "imageName#", "methodBody": "public static DockerImage fromImageName(String imageName) {\n        AssertUtil.assertNotNullOrEmpty(imageName, \"imageName\");\n        logger.log(Level.INFO, () -> String.format(\"Parsing '%s' to DockerImage\", imageName));\n\n        String[] parts = imageName.split(SECTION_SEPARATOR);\n        switch (parts.length) {\n        case 0:\n            throw new IllegalArgumentException(\"Invalid image format: \" + imageName);\n\n        case 1:\n            // only one section - it is the repository name with optional tag\n            return fromParts(null, null, parts[0]);\n\n        case 2:\n            // since there are two sections the second one can be either a host or a namespace\n            if (isValidNamespace(parts[0])) {\n                return fromParts(null, parts[0], parts[1]);\n            } else {\n                return fromParts(parts[0], null, parts[1]);\n            }\n\n        default:\n            // three or more sections present: host, namespace and repo. According to Docker\n            // documentation, the most common case is to have two path components in the name of the\n            // repository, however, it is possible to have a different number of path segments:\n            // https://docs.docker.com/registry/spec/api/#overview\n            // We are going to treat the extra path arguments as part of the namespace, e.g. the\n            // repo name host:port/path/to/repo will have \"host:port\" for host, \"path/to\" for\n            // namespace and \"repo\" for name.\n\n            String host = parts[0];\n            String repo = parts[parts.length - 1];\n            String namespace = imageName.substring(host.length() + SECTION_SEPARATOR.length(),\n                    imageName.length() - repo.length() - SECTION_SEPARATOR.length());\n            return fromParts(host, namespace, repo);\n\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#NumberLiteral#SwitchCase#SimpleName#NullLiteral#NullLiteral#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#ReturnStatement#NumberLiteral#SwitchCase#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#SimpleName#NullLiteral#SimpleName#NumberLiteral#ArrayAccess#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#NumberLiteral#ArrayAccess#NullLiteral#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#ReturnStatement#Block#IfStatement#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)ReturnStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(IfStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(NullLiteral)NullLiteral(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)ReturnStatement)Block)IfStatement(SwitchCase)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "parse a full image name (myhost:300/namespace/repo:tag) into its components", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotNullOrEmpty", "java.util.function.Supplier.get", "java.util.logging.Logger.log", "java.lang.String.split", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "com.vmware.admiral.common.util.DockerImage.fromParts", "com.vmware.admiral.common.util.DockerImage.isValidNamespace", "java.lang.String.length", "java.lang.String.substring"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.util.logging.Level", "java.util.function.Supplier"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["int", "int"]], "passed_comments": [{"com.vmware.admiral.common.util.DockerImage.isValidNamespace": "When a image name part can be ambiguously either host or namespace, check which one it is based on a regex of valid characters for the namespace part"}]}, {"index": "84", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DockerImage.java", "methodName": "com.vmware.admiral.common.util.DockerImage.isValidNamespace", "methodParameterType": "String#", "methodParameterName": "namespaceCandidate#", "methodBody": "public static boolean isValidNamespace(String namespaceCandidate) {\n        return NAMESPACE_PATTERN.matcher(namespaceCandidate).matches();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "When a image name part can be ambiguously either host or namespace, check which one it is based on a regex of valid characters for the namespace part", "call_func_name": ["java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches"], "call_func_parameter": [["java.lang.CharSequence"], [""]], "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DockerImage.java", "methodName": "com.vmware.admiral.common.util.DockerImage.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String toString() {\n        StringBuilder imageName = new StringBuilder();\n\n        if (!isDockerHubImage()) {\n            imageName.append(host);\n            imageName.append(SECTION_SEPARATOR);\n        }\n\n        // If namespace is null, do not set the default value 'library' as not all\n        // V2 registry implementations support this convention\n        imageName.append(getNamespaceAndRepo());\n\n        if (tag != null) {\n            imageName.append(TAG_SEPARATOR);\n            imageName.append(tag);\n        }\n\n        return imageName.toString();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convert to a canonical single string representation", "call_func_name": ["java.lang.StringBuilder.<init>", "com.vmware.admiral.common.util.DockerImage.isDockerHubImage", "java.lang.StringBuilder.append", "com.vmware.admiral.common.util.DockerImage.getNamespaceAndRepo", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/OperationUtil.java", "methodName": "com.vmware.admiral.common.util.OperationUtil.getDocumentState", "methodParameterType": "Service#String#Class<T>#Consumer<T>#", "methodParameterName": "service#link#classT#callbackFunction#", "methodBody": "public static <T extends ServiceDocument> void getDocumentState(Service service, String link,\n            Class<T> classT, Consumer<T> callbackFunction) {\n        getDocumentState(service, link, classT, callbackFunction, null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Helper method executing Operation.createGet. Calls  {@code callbackFunction} passing the result,or in case of exception just logs it and returns.", "call_func_name": ["com.vmware.admiral.common.util.OperationUtil.getDocumentState"], "call_func_parameter": [["com.vmware.xenon.common.Service", "java.lang.String", "java.lang.Class", "java.util.function.Consumer", "java.util.function.Consumer"]], "passed_comments": [{"com.vmware.admiral.common.util.OperationUtil.getDocumentState": "Helper method executing Operation.createGet. Calls  {@code callbackFunction} passing the result,or in case of exception logs it and calls the  {@code failureFunction}."}]}, {"index": "87", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/OperationUtil.java", "methodName": "com.vmware.admiral.common.util.OperationUtil.getDocumentState", "methodParameterType": "Service#String#Class<T>#Consumer<T>#Consumer<Throwable>#", "methodParameterName": "service#link#classT#callbackFunction#failureFunction#", "methodBody": "public static <T extends ServiceDocument> void getDocumentState(Service service, String link,\n            Class<T> classT, Consumer<T> callbackFunction, Consumer<Throwable> failureFunction) {\n        service.sendRequest(\n                Operation\n                        .createGet(service, link)\n                        .setCompletion((o, e) -> {\n                            if (e != null) {\n                                service.getHost().log(\n                                        Level.WARNING,\n                                        \"Failure retrieving document [%s], referrer: [%s],\"\n                                                + \" context id [%s] : %s\",\n                                        link, o.getRefererAsString(),\n                                        o.getContextId(), Utils.toString(e));\n\n                                if (failureFunction != null) {\n                                    failureFunction.accept(e);\n                                }\n                                return;\n                            }\n\n                            callbackFunction.accept(o.getBody(classT));\n                        })\n        );\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Helper method executing Operation.createGet. Calls  {@code callbackFunction} passing the result,or in case of exception logs it and calls the  {@code failureFunction}.", "call_func_name": ["com.vmware.xenon.common.Operation.createGet", "com.vmware.xenon.common.Service.sendRequest"], "call_func_parameter": [["com.vmware.xenon.common.Service", "java.lang.String"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/OperationUtil.java", "methodName": "com.vmware.admiral.common.util.OperationUtil.isGuestUser", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "public static boolean isGuestUser(Operation op) {\n        AuthorizationContext ctx = op.getAuthorizationContext();\n        return ctx == null || ctx.getClaims() == null\n                || ctx.getClaims().getSubject() == null\n                || ctx.getClaims().getSubject().isEmpty()\n                || ctx.getClaims().getSubject().equals(GuestUserService.SELF_LINK);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether the specified  {@link Operation} <code>op</code> comes from a guest or not.Guest operations will either have no  {@link AuthorizationContext} set or will have an{@link AuthorizationContext} that is asociated with the Guest user (see{@link GuestUserService}).", "call_func_name": ["com.vmware.xenon.common.Operation.getAuthorizationContext", "com.vmware.xenon.common.Claims.getSubject", "java.lang.String.isEmpty", "java.lang.String.equals"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "89", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/OperationUtil.java", "methodName": "com.vmware.admiral.common.util.OperationUtil.transformProjectHeaderToFilterQuery", "methodParameterType": "Operation#", "methodParameterName": "get#", "methodBody": "public static void transformProjectHeaderToFilterQuery(Operation get) {\n        transformProjectHeaderToFilterQuery(get, false);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Extract the project link from the header and extend operation's URI with filter that contains clause to return only documents which have the project link from the header in their tenantLinks field. If there is no project link in header the URI is not modified. If there is already filter query the method will not override it, but extend it with 'and' and the new clause, example for this case: If there operation's URI have existing filter: \"name eq 'test'\", after the modification the filter will look like: \"name eq 'test' and tenantLinks.item eq '/projects/test'\" Calling this method is equivalent to calling {@link #transformProjectHeaderToFilterQuery(Operation,boolean)} with<code>includeGlobalEntries</code> set to <code>false</code>", "call_func_name": ["com.vmware.admiral.common.util.OperationUtil.transformProjectHeaderToFilterQuery"], "call_func_parameter": [["com.vmware.xenon.common.Operation", "boolean"]], "passed_comments": [{"com.vmware.admiral.common.util.OperationUtil.transformProjectHeaderToFilterQuery": "Extract the project link from the header and extend operation's URI with filter that contains clause to return only documents which have the project link from the header in their tenantLinks field. If <code>includeGlobalEntries</code> is set to <code>true</code>, entries that have no project link set in their tenantLinks (a.k.a. global entries) will also be returned. If there is no project link in header the URI is not modified. If there is already filter query the method will not override it, but extend it with 'and' and the new clause, example for this case: If there operation's URI have existing filter: <code>\"name eq 'test'\"</code>, after the modification the filter will look like: <ul> <li><code>\"name eq 'test' and tenantLinks.item eq '/projects/test'\"</code></li> <li><code>\"name eq 'test' and (tenantLinks.item eq '/projects/test' or (documentSelfLink eq '"}]}, {"index": "90", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/OperationUtil.java", "methodName": "com.vmware.admiral.common.util.OperationUtil.transformProjectHeaderToFilterQuery", "methodParameterType": "Operation#boolean#", "methodParameterName": "get#includeGlobalEntries#", "methodBody": "public static void transformProjectHeaderToFilterQuery(Operation get,\n            boolean includeGlobalEntries) {\n        String projectLink = OperationUtil.extractProjectFromHeader(get);\n        if (projectLink == null || projectLink.isEmpty()) {\n            return;\n        }\n\n        URI opUri = get.getUri();\n        String filterQuery = UriUtils.getODataFilterParamValue(opUri);\n        if (filterQuery == null || filterQuery.isEmpty()) {\n            filterQuery = constructFilterWithTenantLinks(projectLink, includeGlobalEntries);\n        } else {\n            filterQuery = filterQuery + \" and \"\n                    + constructFilterWithTenantLinks(projectLink, includeGlobalEntries);\n        }\n        Map<String, String> queryMap = UriUtils.parseUriQueryParams(opUri);\n        queryMap.put(UriUtils.URI_PARAM_ODATA_FILTER, filterQuery);\n\n        String[] queryKeyVals = new String[queryMap.size() * 2];\n        int i = 0;\n        for (Entry<String, String> entry : queryMap.entrySet()) {\n            queryKeyVals[i] = entry.getKey();\n            i++;\n            queryKeyVals[i] = entry.getValue();\n            i++;\n        }\n\n        opUri = UriUtils.buildUri(opUri.getScheme(), opUri.getHost(), opUri.getPort(),\n                opUri.getPath(), UriUtils.buildUriQuery(queryKeyVals));\n\n        get.setUri(opUri);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Extract the project link from the header and extend operation's URI with filter that contains clause to return only documents which have the project link from the header in their tenantLinks field. If <code>includeGlobalEntries</code> is set to <code>true</code>, entries that have no project link set in their tenantLinks (a.k.a. global entries) will also be returned. If there is no project link in header the URI is not modified. If there is already filter query the method will not override it, but extend it with 'and' and the new clause, example for this case: If there operation's URI have existing filter: <code>\"name eq 'test'\"</code>, after the modification the filter will look like: <ul> <li><code>\"name eq 'test' and tenantLinks.item eq '/projects/test'\"</code></li> <li><code>\"name eq 'test' and (tenantLinks.item eq '/projects/test' or (documentSelfLink eq '", "call_func_name": ["com.vmware.admiral.common.util.OperationUtil.extractProjectFromHeader", "java.lang.String.isEmpty", "com.vmware.xenon.common.Operation.getUri", "com.vmware.xenon.common.UriUtils.getODataFilterParamValue", "com.vmware.admiral.common.util.OperationUtil.constructFilterWithTenantLinks", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.vmware.xenon.common.UriUtils.parseUriQueryParams", "java.util.Map.put", "java.util.Map.size", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.net.URI.getScheme", "java.net.URI.getHost", "java.net.URI.getPort", "java.net.URI.getPath", "com.vmware.xenon.common.UriUtils.buildUriQuery", "com.vmware.xenon.common.UriUtils.buildUri", "com.vmware.xenon.common.Operation.setUri"], "call_func_parameter": [["com.vmware.xenon.common.Operation"], [""], [""], ["java.net.URI"], ["java.lang.String", "boolean"], [""], ["java.lang.String"], [""], ["java.net.URI"], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["java.lang.String[]"], ["java.lang.String", "java.lang.String", "int", "java.lang.String", "java.lang.String"], ["java.net.URI"]], "passed_comments": "/"}, {"index": "91", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/OperationUtil.java", "methodName": "com.vmware.admiral.common.util.OperationUtil.constructFilterWithTenantLinksNoGlobalEntries", "methodParameterType": "String#", "methodParameterName": "projectLink#", "methodBody": "public static String constructFilterWithTenantLinksNoGlobalEntries(String projectLink) {\n        return ResourceState.FIELD_NAME_TENANT_LINKS\n                + QuerySpecification.FIELD_NAME_CHARACTER\n                + QuerySpecification.COLLECTION_FIELD_SUFFIX\n                + \" eq '\" + projectLink + \"'\";\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return an ODATA filter that will select all entries with a project link set to the specifiedone.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "92", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/OperationUtil.java", "methodName": "com.vmware.admiral.common.util.OperationUtil.constructFilterWithTenantLinksIncludeGlobalEntries", "methodParameterType": "String#", "methodParameterName": "projectLink#", "methodBody": "public static String constructFilterWithTenantLinksIncludeGlobalEntries(String projectLink) {\n\n        final String noProjectLinkFilter = getNoProjectLinkOdataFilter();\n\n        final String projectLinkFilter = String.format(\n                \"%s eq '%s'\",\n                TENANT_LINKS_ITEM_ODATA_SELECTOR,\n                projectLink);\n\n        return String.format(\"(%s or %s)\", projectLinkFilter, noProjectLinkFilter);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return an ODATA filter that will select all entries without a project link and all entrieswith project link set to the specified one.", "call_func_name": ["com.vmware.admiral.common.util.OperationUtil.getNoProjectLinkOdataFilter", "java.lang.String.format"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "93", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/OperationUtil.java", "methodName": "com.vmware.admiral.common.util.OperationUtil.isServiceAlreadyStarted", "methodParameterType": "Throwable#Operation#", "methodParameterName": "ex#op#", "methodBody": "public static boolean isServiceAlreadyStarted(Throwable ex, Operation op) {\n        return ex instanceof ServiceAlreadyStartedException\n                || (ex != null && ex.getCause() instanceof ServiceAlreadyStartedException)\n                || (op != null && op.getStatusCode() == Operation.STATUS_CODE_CONFLICT);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#InfixExpression#ParenthesizedExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ParenthesizedExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Validates whether the result of an operation is a HTTP conflict or the exception is a {@link ServiceAlreadyStartedException} or the exception's cause is{@link ServiceAlreadyStartedException}.", "call_func_name": ["java.lang.Throwable.getCause", "com.vmware.xenon.common.Operation.getStatusCode"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ArrayUtils.java", "methodName": "com.vmware.admiral.common.util.ArrayUtils.toStringArray", "methodParameterType": "Object#", "methodParameterName": "value#", "methodBody": "public static String[] toStringArray(Object value) {\n        if (value instanceof String[]) {\n            // already a string array, just need a cast\n            return (String[]) value;\n\n        } else {\n            // perform a toString on each element and return a new array\n            Object[] valueArray = (Object[]) value;\n            return Arrays.stream(valueArray)\n                    .map(o -> o.toString())\n                    .toArray(size -> new String[size]);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#InstanceofExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#CastExpression#ReturnStatement#Block#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayCreation#LambdaExpression#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)InstanceofExpression(Block(ReturnStatement(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)LambdaExpression)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Convert an Object array to a String array by invoking toString on each element", "call_func_name": ["java.util.Arrays.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.function.IntFunction.apply", "java.util.stream.Stream.toArray"], "call_func_parameter": [["java.lang.Object[]"], [""], ["java.util.function.Function"], [""], ["java.util.function.IntFunction"]], "passed_comments": "/"}, {"index": "95", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServiceUtils.java", "methodName": "com.vmware.admiral.common.util.ServiceUtils.getDefaultTaskExpirationTimeInMicros", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static long getDefaultTaskExpirationTimeInMicros() {\n        return getExpirationTimeFromNowInMicros(EXPIRATION_MICROS);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The default expiration time for all Task Services.", "call_func_name": ["com.vmware.admiral.common.util.ServiceUtils.getExpirationTimeFromNowInMicros"], "call_func_parameter": [["long"]], "passed_comments": [{"com.vmware.admiral.common.util.ServiceUtils.getExpirationTimeFromNowInMicros": "Adds the supplied argument to the value from {@link com.vmware.xenon.common.Utils#getSystemNowMicrosUtc()} and returns an absoluteexpiration time in the future"}]}, {"index": "96", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServiceUtils.java", "methodName": "com.vmware.admiral.common.util.ServiceUtils.getExpirationTimeFromNowInMicros", "methodParameterType": "long#", "methodParameterName": "microsFromNow#", "methodBody": "public static long getExpirationTimeFromNowInMicros(long microsFromNow) {\n        return Utils.fromNowMicrosUtc(microsFromNow);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Adds the supplied argument to the value from {@link com.vmware.xenon.common.Utils#getSystemNowMicrosUtc()} and returns an absoluteexpiration time in the future", "call_func_name": ["com.vmware.xenon.common.Utils.fromNowMicrosUtc"], "call_func_parameter": [["long"]], "passed_comments": "/"}, {"index": "97", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServiceUtils.java", "methodName": "com.vmware.admiral.common.util.ServiceUtils.sendSelfDelete", "methodParameterType": "Service#", "methodParameterName": "s#", "methodBody": "public static void sendSelfDelete(Service s) {\n        s.sendRequest(Operation.createDelete(s.getUri()).setBody(new ServiceDocument()));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sends  {@code DELETE} request to service {@code s}. Result is ignored.", "call_func_name": ["com.vmware.xenon.common.Service.getUri", "com.vmware.xenon.common.Operation.createDelete", "com.vmware.xenon.common.ServiceDocument.<init>", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.Service.sendRequest"], "call_func_parameter": [[""], ["java.net.URI"], [""], ["java.lang.Object"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServiceUtils.java", "methodName": "com.vmware.admiral.common.util.ServiceUtils.handleExceptions", "methodParameterType": "Operation#Runnable#", "methodParameterName": "o#function#", "methodBody": "public static void handleExceptions(Operation o, Runnable function) {\n        try {\n            function.run();\n        } catch (Throwable e) {\n            logger.severe(\"Unexpected error: \" + Utils.toString(e));\n            if (o != null) {\n                o.fail(e);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Run safely runnable function. If operation is passed it will be failed in case of exception.", "call_func_name": ["java.lang.Runnable.run", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.vmware.xenon.common.Utils.toString", "java.lang.StringBuilder.toString", "java.util.logging.Logger.severe", "com.vmware.xenon.common.Operation.fail"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.Throwable"], [""], ["java.lang.String"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/FileUtil.java", "methodName": "com.vmware.admiral.common.util.FileUtil.getForwardSlashesPathString", "methodParameterType": "Path#", "methodParameterName": "path#", "methodBody": "public static String getForwardSlashesPathString(Path path) {\n        if (path == null) {\n            return null;\n        } else {\n            return path.toString().replace('\\\\', '/');\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@return a {@link String} representation of the {@link Path} specified. It is guaranteed thatthe result will contain only forward slashes (and no back slashes). If <code>path</code> is <code>null</code>, then <code>null</code> is returned.", "call_func_name": ["java.nio.file.Path.toString", "java.lang.String.replace"], "call_func_parameter": [[""], ["char", "char"]], "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServiceDocumentQuery.java", "methodName": "com.vmware.admiral.common.util.ServiceDocumentQuery.queryDocument", "methodParameterType": "String#Consumer<ServiceDocumentQueryElementResult<T>>#", "methodParameterName": "documentSelfLink#completionHandler#", "methodBody": "public void queryDocument(String documentSelfLink,\n            Consumer<ServiceDocumentQueryElementResult<T>> completionHandler) {\n        queryUpdatedDocumentSince(-1, documentSelfLink, completionHandler);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#PrefixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Query for a document based on  {@link ServiceDocument#documentSelfLink}. This is the same operation of GET <code>documentSelfLink</code>. It is especially needed when a {@link ServiceDocument} might not exist since using <code>GET</code> directly will timeout if{@link ServiceDocument} doesn't exist.", "call_func_name": ["com.vmware.admiral.common.util.ServiceDocumentQuery.queryUpdatedDocumentSince"], "call_func_parameter": [["long", "java.lang.String", "java.util.function.Consumer"]], "passed_comments": [{"com.vmware.admiral.common.util.ServiceDocumentQuery.queryUpdatedDocumentSince": "Query an expanded document extending  {@link ServiceDocument}s that is updated or deleted since given time in the past. The result will return if there is any update or delete operation from provided documentSinceUpdateTimeMicros. The deleted documents will be marked as with  {@link ServiceDocument#documentSignature} ={@link ServiceDocument#isDeletedTemplate(ServiceDocument)}. This query could be used to find out if there was any updates since the time it is provided as parameter."}]}, {"index": "101", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServiceDocumentQuery.java", "methodName": "com.vmware.admiral.common.util.ServiceDocumentQuery.queryUpdatedDocumentSince", "methodParameterType": "long#String#Consumer<ServiceDocumentQueryElementResult<T>>#", "methodParameterName": "documentSinceUpdateTimeMicros#documentSelfLink#completionHandler#", "methodBody": "public void queryUpdatedDocumentSince(long documentSinceUpdateTimeMicros,\n            String documentSelfLink,\n            Consumer<ServiceDocumentQueryElementResult<T>> completionHandler) {\n        AssertUtil.assertNotEmpty(documentSelfLink, \"documentSelfLink\");\n        AssertUtil.assertNotNull(type, \"type\");\n        AssertUtil.assertNotNull(completionHandler, \"completionHandler\");\n        QueryTask q = QueryUtil.buildPropertyQuery(type,\n                ServiceDocument.FIELD_NAME_SELF_LINK, documentSelfLink);\n        q.documentExpirationTimeMicros = getDefaultQueryExpiration();\n        q.querySpec.options = EnumSet.of(QueryOption.EXPAND_CONTENT);\n        if (documentSinceUpdateTimeMicros != -1) {\n            q.querySpec.options.add(QueryOption.INCLUDE_DELETED);\n            q.querySpec.query\n                    .addBooleanClause(createUpdatedSinceTimeRange(documentSinceUpdateTimeMicros));\n        }\n\n        host.sendRequest(Operation\n                .createPost(UriUtils.buildUri(host, ServiceUriPaths.CORE_QUERY_TASKS))\n                .setBody(q)\n                .setReferer(host.getUri())\n                .setCompletion(\n                        (o, e) -> {\n                            if (e != null) {\n                                completionHandler.accept(error(e));\n                                return;\n                            }\n                            try {\n                                QueryTask qtr = o.getBody(QueryTask.class);\n                                if (qtr.results.documents == null\n                                        || qtr.results.documents.isEmpty()) {\n                                    completionHandler.accept(noResult());\n                                } else {\n                                    Collection<Object> values = qtr.results.documents.values();\n                                    completionHandler.accept(result(values.iterator().next(),\n                                            values.size()));\n                                }\n                            } catch (Throwable ex) {\n                                completionHandler.accept(error(ex));\n                            }\n                        }));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Query an expanded document extending  {@link ServiceDocument}s that is updated or deleted since given time in the past. The result will return if there is any update or delete operation from provided documentSinceUpdateTimeMicros. The deleted documents will be marked as with  {@link ServiceDocument#documentSignature} ={@link ServiceDocument#isDeletedTemplate(ServiceDocument)}. This query could be used to find out if there was any updates since the time it is provided as parameter.", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotEmpty", "com.vmware.admiral.common.util.AssertUtil.assertNotNull", "com.vmware.admiral.common.util.QueryUtil.buildPropertyQuery", "com.vmware.admiral.common.util.ServiceDocumentQuery.getDefaultQueryExpiration", "java.util.EnumSet.of", "java.util.EnumSet.add", "com.vmware.admiral.common.util.ServiceDocumentQuery.createUpdatedSinceTimeRange", "com.vmware.xenon.common.UriUtils.buildUri", "com.vmware.xenon.common.Operation.createPost", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.ServiceHost.getUri", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.xenon.common.ServiceHost.sendRequest"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.Object", "java.lang.String"], ["java.lang.Class", "java.lang.String[]"], [""], ["java.lang.Enum"], ["java.lang.Object"], ["long"], ["com.vmware.xenon.common.ServiceHost", "java.lang.String"], ["java.net.URI"], ["java.lang.Object"], [""], ["java.net.URI"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServiceDocumentQuery.java", "methodName": "com.vmware.admiral.common.util.ServiceDocumentQuery.queryUpdatedSince", "methodParameterType": "long#Consumer<ServiceDocumentQueryElementResult<T>>#", "methodParameterName": "documentSinceUpdateTimeMicros#completionHandler#", "methodBody": "public void queryUpdatedSince(long documentSinceUpdateTimeMicros,\n            Consumer<ServiceDocumentQueryElementResult<T>> completionHandler) {\n        AssertUtil.assertNotNull(type, \"type\");\n        AssertUtil.assertNotNull(completionHandler, \"completionHandler\");\n\n        QueryTask q = QueryUtil.buildQuery(type, true);\n        q.querySpec.options = EnumSet.of(QueryOption.EXPAND_CONTENT, QueryOption.INCLUDE_DELETED);\n        q.querySpec.query\n                .addBooleanClause(createUpdatedSinceTimeRange(documentSinceUpdateTimeMicros));\n\n        q.documentExpirationTimeMicros = Utils.fromNowMicrosUtc(DEFAULT_EXPIRATION_TIME_IN_MICROS);\n        q.querySpec.resultLimit = DEFAULT_QUERY_RESULT_LIMIT;\n\n        query(q, completionHandler);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Query for a list of expanded documents extending  {@link ServiceDocument}s that are updated or deleted since given time. The result will include both updated and deleted documents. If document is deleted :  {@link ServiceDocument#isDeleted(ServiceDocument)}.", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotNull", "java.util.EnumSet.of", "com.vmware.admiral.common.util.ServiceDocumentQuery.createUpdatedSinceTimeRange", "com.vmware.xenon.common.Utils.fromNowMicrosUtc", "com.vmware.admiral.common.util.ServiceDocumentQuery.query"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.Enum", "java.lang.Enum"], ["long"], ["long"], ["com.vmware.xenon.services.common.QueryTask", "java.util.function.Consumer"]], "passed_comments": [{"com.vmware.admiral.common.util.ServiceDocumentQuery.query": "Generic Query helper method. The result could be  {@link ServiceDocument}s if the query is defined as expanded or just String document links."}]}, {"index": "103", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServiceDocumentQuery.java", "methodName": "com.vmware.admiral.common.util.ServiceDocumentQuery.query", "methodParameterType": "QueryTask#Consumer<ServiceDocumentQueryElementResult<T>>#", "methodParameterName": "q#completionHandler#", "methodBody": "public void query(QueryTask q,\n            Consumer<ServiceDocumentQueryElementResult<T>> completionHandler) {\n        if (q.documentExpirationTimeMicros == 0) {\n            q.documentExpirationTimeMicros = getDefaultQueryExpiration();\n        }\n        if (!(isCountQuery(q)) && q.querySpec.resultLimit == null) {\n            q.querySpec.resultLimit = DEFAULT_QUERY_RESULT_LIMIT;\n        }\n        q.querySpec.options.add(QueryOption.SINGLE_USE);\n\n        host.sendRequest(Operation\n                .createPost(UriUtils.buildUri(host, ServiceUriPaths.CORE_QUERY_TASKS))\n                .setBody(q)\n                .setReferer(host.getUri())\n                .setCompletion((o, e) -> {\n                    if (e != null) {\n                        completionHandler.accept(error(e));\n                        return;\n                    }\n                    QueryTask qrt = o.getBody(QueryTask.class);\n                    processQuery(qrt, completionHandler);\n                }));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)PrefixExpression(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Generic Query helper method. The result could be  {@link ServiceDocument}s if the query is defined as expanded or just String document links.", "call_func_name": ["com.vmware.admiral.common.util.ServiceDocumentQuery.getDefaultQueryExpiration", "com.vmware.admiral.common.util.ServiceDocumentQuery.isCountQuery", "java.util.EnumSet.add", "com.vmware.xenon.common.UriUtils.buildUri", "com.vmware.xenon.common.Operation.createPost", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.ServiceHost.getUri", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.xenon.common.ServiceHost.sendRequest"], "call_func_parameter": [[""], ["com.vmware.xenon.services.common.QueryTask"], ["java.lang.Object"], ["com.vmware.xenon.common.ServiceHost", "java.lang.String"], ["java.net.URI"], ["java.lang.Object"], [""], ["java.net.URI"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SecurityUtils.java", "methodName": "com.vmware.admiral.common.util.SecurityUtils.ensureTlsDisabledAlgorithms", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void ensureTlsDisabledAlgorithms() {\n        boolean enableTlsv1 = Boolean.getBoolean(\"com.vmware.admiral.enable.tlsv1\");\n        if (!enableTlsv1) {\n            String disabledAlgorithms = Security.getProperty(\"jdk.tls.disabledAlgorithms\");\n            disabledAlgorithms = \"TLSv1, \" + disabledAlgorithms;\n            Security.setProperty(\"jdk.tls.disabledAlgorithms\", disabledAlgorithms);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Unless explicitly enabled, disable TLS v1.0 by default due to the BEAST vulnerability. (see https://en.wikipedia.org/wiki/Transport_Layer_Security#BEAST_attack)", "call_func_name": ["java.lang.Boolean.getBoolean", "java.security.Security.getProperty", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.security.Security.setProperty"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "105", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SecurityUtils.java", "methodName": "com.vmware.admiral.common.util.SecurityUtils.ensureTrustStoreSettings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void ensureTrustStoreSettings() {\n        String trustStore = System.getProperty(JAVAX_NET_SSL_TRUST_STORE);\n        if (trustStore != null) {\n            // trustStore initialized via the standard system properties - nothing to do\n            return;\n        }\n\n        String securityProperties = System.getProperty(SECURITY_PROPERTIES);\n        if (securityProperties != null) {\n            // try to initialize the trustStore via the security properties file...\n            File f = new File(securityProperties);\n            if (f.exists()) {\n                Properties properties = FileUtil.getProperties(securityProperties, false);\n\n                String trustStoreFile = properties.getProperty(CERTIFICATE_STORE_FILE);\n                if (trustStoreFile != null) {\n                    System.setProperty(JAVAX_NET_SSL_TRUST_STORE, trustStoreFile);\n                }\n\n                String trustStorePassword = properties.getProperty(CERTIFICATE_STORE_PASSWORD);\n                if (trustStorePassword != null) {\n                    System.setProperty(JAVAX_NET_SSL_TRUST_STORE_PASSWORD,\n                            EncryptionUtils.decrypt(trustStorePassword));\n                }\n            } else {\n                throw new IllegalArgumentException(\n                        \"Unable to load security properties from '\" + securityProperties + \"'!\");\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Enable the configuration of the trustStore settings (file and password) via a provided security properties file instead of the standard system properties. The rationale behind that is to provide a mechanism to avoid showing the plain text password value of the trustStore when analyzing the OS running processes (e.g. ps -ax | grep java).", "call_func_name": ["java.lang.System.getProperty", "java.io.File.<init>", "java.io.File.exists", "com.vmware.admiral.common.util.FileUtil.getProperties", "java.util.Properties.getProperty", "java.lang.System.setProperty", "com.vmware.photon.controller.model.security.util.EncryptionUtils.decrypt", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String", "boolean"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.EncryptionUtils.decrypt": "Decrypts the provided string."}]}, {"index": "106", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/VersionUtil.java", "methodName": "com.vmware.admiral.common.util.VersionUtil.compareNumericVersions", "methodParameterType": "String#String#", "methodParameterName": "numericVersion1#numericVersion2#", "methodBody": "public static int compareNumericVersions(String numericVersion1, String numericVersion2) {\n        AssertUtil.assertNotNullOrEmpty(numericVersion1, \"numericVersion1\");\n        AssertUtil.assertNotNullOrEmpty(numericVersion2, \"numericVersion2\");\n\n        String[] v1Tokens = numericVersion1.split(\"\\\\.\");\n        String[] v2Tokens = numericVersion2.split(\"\\\\.\");\n\n        int index = 0;\n        while (index < v1Tokens.length\n                && index < v2Tokens.length\n                && v1Tokens[index].equals(v2Tokens[index])) {\n            index++;\n        }\n\n        if (index < Math.min(v1Tokens.length, v2Tokens.length)) {\n            int diff = Integer.parseInt(v1Tokens[index]) - Integer.parseInt(v2Tokens[index]);\n            return Integer.signum(diff);\n        }\n\n        return Integer.signum(v1Tokens.length - v2Tokens.length);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tries to compare the provided numeric version strings. They must be in the format <code>xxx.yyy.zzz</code> (variable number of segments is possible) where each segment is an integer.", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotNullOrEmpty", "java.lang.String.split", "java.lang.String.equals", "java.lang.Math.min", "java.lang.Integer.parseInt", "java.lang.Integer.signum"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["int", "int"], ["java.lang.String"], ["int"]], "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/VersionUtil.java", "methodName": "com.vmware.admiral.common.util.VersionUtil.compareRawVersions", "methodParameterType": "String#String#", "methodParameterName": "rawVersion1#rawVersion2#", "methodBody": "public static int compareRawVersions(String rawVersion1, String rawVersion2) {\n        AssertUtil.assertNotNullOrEmpty(rawVersion1, \"rawVersion1\");\n        AssertUtil.assertNotNullOrEmpty(rawVersion2, \"rawVersion2\");\n        return compareNumericVersions(\n                extractNumericVersion(rawVersion1),\n                extractNumericVersion(rawVersion2));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tries to compare the provided raw version strings by first extracting numeric versions of the form <code>xxx.yyy.zzz</code> with variable number of segments.", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotNullOrEmpty", "com.vmware.admiral.common.util.VersionUtil.extractNumericVersion", "com.vmware.admiral.common.util.VersionUtil.compareNumericVersions"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.vmware.admiral.common.util.VersionUtil.extractNumericVersion": "Extracts a version string in the format xxx.yyy.zzz (with variable number of segments) out of a raw string. E.g. it will extract <code>1.3.0</code> out of <code>v1.3.0-abcdef</code>."}, {"com.vmware.admiral.common.util.VersionUtil.compareNumericVersions": "Tries to compare the provided numeric version strings. They must be in the format <code>xxx.yyy.zzz</code> (variable number of segments is possible) where each segment is an integer."}]}, {"index": "108", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/VersionUtil.java", "methodName": "com.vmware.admiral.common.util.VersionUtil.extractNumericVersion", "methodParameterType": "String#", "methodParameterName": "rawVersion#", "methodBody": "public static String extractNumericVersion(String rawVersion) {\n        AssertUtil.assertNotNullOrEmpty(rawVersion, \"rawVersion\");\n\n        Matcher matcher = EXTRACT_NUMERIC_VERSION_PATTERN.matcher(rawVersion);\n        if (matcher.matches()) {\n            return matcher.group(VERSION_GROUP_NAME);\n        }\n\n        throw new IllegalArgumentException(\n                String.format(\"%s %s\", CANNOT_EXTRACT_NUMERIC_VERSION_MESSAGE, rawVersion));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Extracts a version string in the format xxx.yyy.zzz (with variable number of segments) out of a raw string. E.g. it will extract <code>1.3.0</code> out of <code>v1.3.0-abcdef</code>.", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotNullOrEmpty", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.util.regex.Matcher.group", "java.lang.String.format", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.CharSequence"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "109", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/QueryUtil.java", "methodName": "com.vmware.admiral.common.util.QueryUtil.buildGroupClause", "methodParameterType": "String#String#", "methodParameterName": "propertyName#group#", "methodBody": "public static Query buildGroupClause(String propertyName, String group) {\n        Query groupClause = new Query()\n                .setTermPropertyName(propertyName);\n\n        // if a group is not specified, search global only\n        if (group == null || group.isEmpty()) {\n            groupClause.setTermMatchType(MatchType.WILDCARD)\n                    .setTermMatchValue(UriUtils.URI_WILDCARD_CHAR);\n\n            groupClause.occurance = Occurance.MUST_NOT_OCCUR;\n\n        } else {\n            groupClause.setTermMatchValue(group);\n            groupClause.occurance = Occurance.MUST_OCCUR;\n        }\n\n        return groupClause;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a clause to filter results by group, including global entities Normally a query should contain one of these clauses - one to return global results, and another to return group specific results (if a group is specified)", "call_func_name": ["java.lang.String.isEmpty"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/QueryUtil.java", "methodName": "com.vmware.admiral.common.util.QueryUtil.getTenants", "methodParameterType": "List<String>#", "methodParameterName": "tenantLinks#", "methodBody": "public static List<String> getTenants(List<String> tenantLinks) {\n        if (tenantLinks == null || tenantLinks.isEmpty()) {\n            return tenantLinks;\n        }\n\n        return tenantLinks.stream()\n                .filter(tl -> tl != null\n                        && tl.startsWith(TENANT_IDENTIFIER)\n                        && !tl.contains(GROUP_IDENTIFIER))\n                .map(tl -> tl.substring(TENANT_IDENTIFIER.length()))\n                .collect(Collectors.toList());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Collects tenants from the given  {@code tenantLink}. <p> the implementation removes the  {@link #TENANT_IDENTIFIER} form tenant Link<p>e.g. [t1, t2]", "call_func_name": ["java.util.List.isEmpty", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], [""], ["java.util.function.Predicate"], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/QueryUtil.java", "methodName": "com.vmware.admiral.common.util.QueryUtil.getGroups", "methodParameterType": "List<String>#", "methodParameterName": "tenantLinks#", "methodBody": "public static List<String> getGroups(List<String> tenantLinks) {\n        if (tenantLinks == null || tenantLinks.isEmpty()) {\n            return tenantLinks;\n        }\n\n        return tenantLinks.stream()\n                .filter(tl -> tl != null\n                        && tl.startsWith(TENANT_IDENTIFIER)\n                        && tl.contains(GROUP_IDENTIFIER))\n                .map(tl -> tl.substring(TENANT_IDENTIFIER.length()))\n                .collect(Collectors.toList());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Collects groups from the given  {@code tenantLink}. <p> the implementation removes the  {@link #TENANT_IDENTIFIER} form tenant Link and does notremove tenant and  {@link #GROUP_IDENTIFIER} from the tenantLink<p>e.g. [t1/groups/g1, t2/groups/g1]", "call_func_name": ["java.util.List.isEmpty", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], [""], ["java.util.function.Predicate"], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/QueryUtil.java", "methodName": "com.vmware.admiral.common.util.QueryUtil.removeGroups", "methodParameterType": "List<String>#", "methodParameterName": "tenantLinks#", "methodBody": "public static List<String> removeGroups(List<String> tenantLinks) {\n        if (tenantLinks == null || tenantLinks.isEmpty()) {\n            return tenantLinks;\n        }\n\n        return tenantLinks.stream().filter(tenantLink ->\n                !PATTERN_EMBEDDED_GROUPS.matcher(tenantLink).matches()\n        ).collect(Collectors.toList());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove groups from the given  {@code tenantLink}.", "call_func_name": ["java.util.List.isEmpty", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], [""], ["java.util.function.Predicate"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/QueryUtil.java", "methodName": "com.vmware.admiral.common.util.QueryUtil.getUsers", "methodParameterType": "List<String>#", "methodParameterName": "tenantLinks#", "methodBody": "public static List<String> getUsers(List<String> tenantLinks) {\n        if (tenantLinks == null || tenantLinks.isEmpty()) {\n            return tenantLinks;\n        }\n\n        return tenantLinks.stream()\n                .filter(tl -> tl != null && tl.startsWith(USER_IDENTIFIER))\n                .map(tl -> tl.substring(USER_IDENTIFIER.length()))\n                .collect(Collectors.toList());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Collects users from the given  {@code tenantLink}. <p> the implementation removes the  {@link #USER_IDENTIFIER} form tenant Link<p>e.g. [john.doe@mydomain.org,  jane.roe@mydomain.org]", "call_func_name": ["java.util.List.isEmpty", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], [""], ["java.util.function.Predicate"], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/QueryUtil.java", "methodName": "com.vmware.admiral.common.util.QueryUtil.extractQueryResult", "methodParameterType": "ServiceDocumentQueryResult#Class<T>#", "methodParameterName": "result#type#", "methodBody": "public static <T extends ServiceDocument> Map<String, T> extractQueryResult(\n            ServiceDocumentQueryResult result, Class<T> type) {\n        Map<String, T> documentsByLink = new HashMap<>();\n        if (result != null && result.documents != null) {\n            result.documents.values().forEach(json -> {\n                T document = Utils.fromJson(json, type);\n                documentsByLink.put(document.documentSelfLink, document);\n            });\n        }\n        return documentsByLink;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts the service documents from the given query result.", "call_func_name": ["java.util.HashMap.<init>", "java.util.Map.values", "java.util.function.Consumer.accept", "java.util.Collection.forEach"], "call_func_parameter": [[""], [""], ["java.lang.Class", "java.util.Map"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/QueryUtil.java", "methodName": "com.vmware.admiral.common.util.QueryUtil.createQueryResult", "methodParameterType": "Collection<T>#", "methodParameterName": "documents#", "methodBody": "public static <T extends ServiceDocument> ServiceDocumentQueryResult createQueryResult(\n            Collection<T> documents) {\n        ServiceDocumentQueryResult result = new ServiceDocumentQueryResult();\n        result.documentCount = (long) documents.size();\n        result.documentLinks = documents.stream().map(d -> d.documentSelfLink)\n                .collect(Collectors.toList());\n        result.documents = new HashMap<>();\n        documents.forEach(d -> result.documents.put(d.documentSelfLink, d));\n        return result;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#PrimitiveType#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a query result instance containing the given service documents.", "call_func_name": ["com.vmware.xenon.common.ServiceDocumentQueryResult.<init>", "java.util.Collection.size", "java.lang.Long.valueOf", "java.util.Collection.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.HashMap.<init>", "java.util.function.Consumer.accept", "java.util.Collection.forEach"], "call_func_parameter": [[""], [""], ["long"], [""], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"], [""], ["com.vmware.xenon.common.ServiceDocumentQueryResult"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SubscriptionManager.java", "methodName": "com.vmware.admiral.common.util.SubscriptionManager.setSchedulingPeriodInMillis", "methodParameterType": "long#", "methodParameterName": "schedulingPeriodInMillis#", "methodBody": "public SubscriptionManager<T> setSchedulingPeriodInMillis(long schedulingPeriodInMillis) {\n        this.schedulingPeriodInMillis = schedulingPeriodInMillis;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The scheduling period in milliseconds. Default is DEFAULT_SUBSCRIPTION_POLLING_PERIOD_MILLIS. This property is only used in case the <code>useSubscriptionPollingStrategy</code> is set to true.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SubscriptionManager.java", "methodName": "com.vmware.admiral.common.util.SubscriptionManager.setCompletionHandler", "methodParameterType": "Consumer<Throwable>#", "methodParameterName": "completionHandler#", "methodBody": "public SubscriptionManager<T> setCompletionHandler(Consumer<Throwable> completionHandler) {\n        this.completionHandler = completionHandler;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set completion handler that it is called during startup and close of the subscription manager. The handler will be called in both cases - success or error. The parameter supplied will be Throwable in case of exception and null in case of success.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SubscriptionManager.java", "methodName": "com.vmware.admiral.common.util.SubscriptionManager.setSubscriptionLink", "methodParameterType": "String#", "methodParameterName": "subscriptionLink#", "methodBody": "public SubscriptionManager<T> setSubscriptionLink(String subscriptionLink) {\n        this.subscriptionLink = subscriptionLink;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the subscription link in case this is a new instance of already active subscription", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SubscriptionManager.java", "methodName": "com.vmware.admiral.common.util.SubscriptionManager.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void close() {\n        unsubscribe();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Close the resources and unsubscribe.", "call_func_name": ["com.vmware.admiral.common.util.SubscriptionManager.unsubscribe"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SubscriptionManager.java", "methodName": "com.vmware.admiral.common.util.SubscriptionManager.start", "methodParameterType": "Consumer<SubscriptionNotification<T>>#Consumer<String>#", "methodParameterName": "notificationHandler#callback#", "methodBody": "public void start(Consumer<SubscriptionNotification<T>> notificationHandler,\n            Consumer<String> callback) {\n        start(notificationHandler, false, callback);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Subscribe for the specified service link and provide a notification handler to be callback when there is an update or delete of the specified services. The Consumer<String> callback will contain either the subscription ID or null in case something went wrong.", "call_func_name": ["com.vmware.admiral.common.util.SubscriptionManager.start"], "call_func_parameter": [["java.util.function.Consumer", "boolean", "java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SubscriptionUtils.java", "methodName": "com.vmware.admiral.common.util.SubscriptionUtils.subscribeToNotifications", "methodParameterType": "ServiceHost#Consumer<Operation>#Consumer<Throwable>#String#", "methodParameterName": "host#onSuccessConsumer#onFailureConsumer#taskLink#", "methodBody": "public static void subscribeToNotifications(ServiceHost host,\n            Consumer<Operation> onSuccessConsumer,\n            Consumer<Throwable> onFailureConsumer,\n            String taskLink) {\n        ServiceSubscriber subscribeBody = new ServiceSubscriber();\n        subscribeBody.replayState = true;\n        subscribeBody.usePublicUri = true;\n        Operation subscribeOp = Operation\n                .createPost(host, taskLink)\n                .setReferer(host.getUri())\n                .setCompletion((regOp, regEx) -> {\n                    if (regEx != null) {\n                        onFailureConsumer.accept(regEx);\n                    }\n                });\n        ReliableSubscriptionService notificationTarget = ReliableSubscriptionService.create(\n                subscribeOp, subscribeBody, onSuccessConsumer);\n        host.startSubscriptionService(subscribeOp, notificationTarget, subscribeBody);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Helper routine to subscribe to notifications", "call_func_name": ["com.vmware.xenon.common.Operation.createPost", "com.vmware.xenon.common.ServiceHost.getUri", "com.vmware.xenon.common.Operation.setReferer"], "call_func_parameter": [["com.vmware.xenon.common.ServiceHost", "java.lang.String"], [""], ["java.net.URI"]], "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SubscriptionUtils.java", "methodName": "com.vmware.admiral.common.util.SubscriptionUtils.unsubscribeNotifications", "methodParameterType": "ServiceHost#String#URI#", "methodParameterName": "host#publisherLink#notificationTarget#", "methodBody": "public static void unsubscribeNotifications(ServiceHost host, String publisherLink,\n            URI notificationTarget) {\n        host.stopSubscriptionService(\n                Operation.createDelete(host, publisherLink).setReferer(host.getUri()),\n                notificationTarget);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Unsubscribe notifications.", "call_func_name": ["com.vmware.xenon.common.Operation.createDelete", "com.vmware.xenon.common.ServiceHost.getUri", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.xenon.common.ServiceHost.stopSubscriptionService"], "call_func_parameter": [["com.vmware.xenon.common.ServiceHost", "java.lang.String"], [""], ["java.net.URI"], ["com.vmware.xenon.common.Operation", "java.net.URI"]], "passed_comments": "/"}, {"index": "123", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SubscriptionUtils.java", "methodName": "com.vmware.admiral.common.util.SubscriptionUtils.sendFailureSelfPatch", "methodParameterType": "StatefulService#Throwable#", "methodParameterName": "service#e#", "methodBody": "private static void sendFailureSelfPatch(StatefulService service, Throwable e) {\n        StatefulTaskDocument body = new StatefulTaskDocument();\n        body.taskInfo = new TaskState();\n        body.taskInfo.stage = TaskStage.FAILED;\n        body.taskInfo.failure = Utils.toServiceErrorResponse(e);\n        service.logWarning(\"Operation failed: %s\", Utils.toString(e));\n        sendPatch(service, body);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Send a failure patch to the specified service", "call_func_name": ["com.vmware.xenon.common.TaskState.<init>", "com.vmware.xenon.common.Utils.toServiceErrorResponse", "com.vmware.xenon.common.Utils.toString", "com.vmware.xenon.common.StatefulService.logWarning", "com.vmware.admiral.common.util.SubscriptionUtils.sendPatch"], "call_func_parameter": [[""], ["java.lang.Throwable"], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Object[]"], ["com.vmware.xenon.common.StatefulService", "java.lang.Object"]], "passed_comments": [{"com.vmware.admiral.common.util.SubscriptionUtils.sendPatch": "Helper method to send a patch to the specified service"}]}, {"index": "124", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SubscriptionUtils.java", "methodName": "com.vmware.admiral.common.util.SubscriptionUtils.sendPatch", "methodParameterType": "StatefulService#Object#", "methodParameterName": "service#body#", "methodBody": "private static void sendPatch(StatefulService service, Object body) {\n        Operation patch = Operation\n                .createPatch(service.getUri())\n                .setBody(body)\n                .setCompletion(\n                        (o, ex) -> {\n                            if (ex != null) {\n                                service.logWarning(\"Self patch failed: %s\", Utils.toString(ex));\n                            }\n                        });\n        service.sendRequest(patch);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Helper method to send a patch to the specified service", "call_func_name": ["com.vmware.xenon.common.StatefulService.getUri", "com.vmware.xenon.common.Operation.createPatch", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.StatefulService.sendRequest"], "call_func_parameter": [[""], ["java.net.URI"], ["java.lang.Object"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/RegistryUtil.java", "methodName": "com.vmware.admiral.common.util.RegistryUtil.findRegistries", "methodParameterType": "ServiceHost#Collection<String>#String#BiConsumer<Collection<RegistryState>,Collection<Throwable>>#", "methodParameterName": "serviceHost#tenantLinks#registryFilter#consumer#", "methodBody": "public static void findRegistries(ServiceHost serviceHost, Collection<String> tenantLinks,\n            String registryFilter, BiConsumer<Collection<RegistryState>, Collection<Throwable>> consumer) {\n\n        List<QueryTask> queryTasks = new ArrayList<>();\n\n        if (registryFilter != null && !registryFilter.isEmpty()) {\n            // add query for a registry with a specific name and group\n            queryTasks.add(buildRegistryQueryByNameAndTenantLinks(registryFilter, tenantLinks));\n            if (tenantLinks != null) {\n                // add query for a global registry with a specific name\n                queryTasks.add(buildRegistryQueryByNameAndTenantLinks(registryFilter, null));\n            }\n        } else if (tenantLinks != null && !tenantLinks.isEmpty()) {\n            // add query for global groups\n            queryTasks.add(buildRegistryQueryByTenantLinks(null));\n            // add query for registries of a specific tenant\n            queryTasks.add(buildRegistryQueryByTenantLinks(tenantLinks));\n        } else {\n            // add query for all registries if no tenant\n            queryTasks.add(buildAllRegistriesQuery());\n        }\n\n        queryForRegistries(serviceHost, queryTasks, consumer);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Retrieve all the registries available to the given group (and global registries)", "call_func_name": ["java.util.ArrayList.<init>", "java.lang.String.isEmpty", "com.vmware.admiral.common.util.RegistryUtil.buildRegistryQueryByNameAndTenantLinks", "java.util.List.add", "java.util.Collection.isEmpty", "com.vmware.admiral.common.util.RegistryUtil.buildRegistryQueryByTenantLinks", "com.vmware.admiral.common.util.RegistryUtil.buildAllRegistriesQuery", "com.vmware.admiral.common.util.RegistryUtil.queryForRegistries"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.util.Collection"], ["java.lang.Object"], [""], ["java.util.Collection"], [""], ["com.vmware.xenon.common.ServiceHost", "java.util.Collection", "java.util.function.BiConsumer"]], "passed_comments": [{"com.vmware.admiral.common.util.RegistryUtil.buildRegistryQueryByNameAndTenantLinks": "Create a query to return all RegistryState links matching a given name. Results are filtered within a specified group/tenant or are global RegistryState links if the tenantLinks collection is null/empty."}, {"com.vmware.admiral.common.util.RegistryUtil.buildRegistryQueryByTenantLinks": "Create a query to return all RegistryState links within a group, tenant or global RegistryState links if the tenantLinks collection is null/empty."}, {"com.vmware.admiral.common.util.RegistryUtil.buildAllRegistriesQuery": "Create a query to return all RegistryState links."}, {"com.vmware.admiral.common.util.RegistryUtil.queryForRegistries": "Executes the given query tasks"}]}, {"index": "126", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/RegistryUtil.java", "methodName": "com.vmware.admiral.common.util.RegistryUtil.findRegistriesByHostname", "methodParameterType": "ServiceHost#String#Collection<String>#BiConsumer<Collection<RegistryState>,Collection<Throwable>>#", "methodParameterName": "serviceHost#hostname#tenantLinks#consumer#", "methodBody": "public static void findRegistriesByHostname(ServiceHost serviceHost, String hostname,\n            Collection<String> tenantLinks,\n            BiConsumer<Collection<RegistryState>, Collection<Throwable>> consumer) {\n\n        List<QueryTask> queryTasks = new ArrayList<>();\n\n        if (tenantLinks != null && !tenantLinks.isEmpty()) {\n            // add query for global groups\n            queryTasks.add(buildRegistryQuery(buildQueryByTenantLinks(null),\n                    buildQueryByHostname(hostname)));\n            // add query for registries of a specific tenant\n            queryTasks.add(buildRegistryQuery(buildQueryByTenantLinks(tenantLinks),\n                    buildQueryByHostname(hostname)));\n        } else {\n            // add query for all registries if no tenant\n            queryTasks.add(buildRegistryQuery(buildQueryByHostname(hostname)));\n        }\n\n        queryForRegistries(serviceHost, queryTasks, consumer);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the registries available to the given group for the given host (and global registries)", "call_func_name": ["java.util.ArrayList.<init>", "java.util.Collection.isEmpty", "com.vmware.admiral.common.util.RegistryUtil.buildQueryByTenantLinks", "com.vmware.admiral.common.util.RegistryUtil.buildQueryByHostname", "java.util.List.add", "com.vmware.admiral.common.util.RegistryUtil.queryForRegistries"], "call_func_parameter": [[""], [""], ["java.util.Collection"], ["java.lang.String"], ["java.lang.Object"], ["com.vmware.xenon.common.ServiceHost", "java.util.Collection", "java.util.function.BiConsumer"]], "passed_comments": [{"com.vmware.admiral.common.util.RegistryUtil.buildQueryByTenantLinks": "Create a query to return all RegistryState links within a group, tenant or global RegistryState links if the tenantLinks collection is null/empty."}, {"com.vmware.admiral.common.util.RegistryUtil.queryForRegistries": "Executes the given query tasks"}]}, {"index": "127", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/RegistryUtil.java", "methodName": "com.vmware.admiral.common.util.RegistryUtil.filterRegistriesByPath", "methodParameterType": "ServiceHost#Collection<RegistryState>#DockerImage#", "methodParameterName": "host#registries#image#", "methodBody": "public static List<RegistryState> filterRegistriesByPath(ServiceHost host, Collection<RegistryState> registries, DockerImage image) {\n        String imageHost = nonNullValue(image.getHost(), DEFAULT_DOCKER_REGISTRY_ADDRESS);\n        String imagePath = image.getNamespace();\n        host.log(Level.FINE, \"Image path: %s.\", imagePath);\n\n        List<String> imagePathSegments = new ArrayList<>();\n        if (imagePath != null && !imagePath.isEmpty()) {\n            imagePathSegments = Arrays.asList(imagePath.split(\"/\"));\n        }\n\n        if (registries != null && !registries.isEmpty()) {\n            List<String> finalPathSegments = imagePathSegments;\n            return registries.stream().filter(r -> {\n                if (r.address != null && !r.address.isEmpty()) {\n                    // strip schema from registry address\n                    String registryAddress = r.address.replaceFirst(\"^http[s]?:\\\\/\\\\/\", \"\");\n                    String imageAddress = imageHost;\n\n                    if (imageAddress.equals(registryAddress)) {\n                        return true;\n                    }\n\n                    for (String segment: finalPathSegments) {\n                        imageAddress = imageAddress + \"/\" + segment;\n                        if (imageAddress.equals(registryAddress)) {\n                            return true;\n                        }\n                    }\n                }\n\n                return false;\n            }).collect(Collectors.toList());\n        }\n\n        return Collections.emptyList();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Filter registries by image path.", "call_func_name": ["com.vmware.admiral.common.util.DockerImage.getHost", "com.vmware.admiral.common.util.RegistryUtil.nonNullValue", "com.vmware.admiral.common.util.DockerImage.getNamespace", "com.vmware.xenon.common.ServiceHost.log", "java.util.ArrayList.<init>", "java.lang.String.isEmpty", "java.lang.String.split", "java.util.Arrays.asList", "java.util.Collection.isEmpty", "java.util.Collection.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.Collections.emptyList"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Object[]"], [""], [""], ["java.lang.String"], ["java.lang.Object[]"], [""], [""], ["java.lang.String", "java.util.List"], ["java.util.function.Predicate"], [""], ["java.util.stream.Collector"], [""]], "passed_comments": [{"com.vmware.admiral.common.util.DockerImage.getHost": "@return the host"}, {"com.vmware.admiral.common.util.DockerImage.getNamespace": "@return the namespace"}]}, {"index": "128", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/RegistryUtil.java", "methodName": "com.vmware.admiral.common.util.RegistryUtil.queryForRegistries", "methodParameterType": "ServiceHost#Collection<QueryTask>#BiConsumer<Collection<RegistryState>,Collection<Throwable>>#", "methodParameterName": "serviceHost#queryTasks#consumer#", "methodBody": "private static void queryForRegistries(ServiceHost serviceHost, Collection<QueryTask> queryTasks,\n            BiConsumer<Collection<RegistryState>, Collection<Throwable>> consumer) {\n\n        List<Operation> queryOperations = new ArrayList<>();\n        for (QueryTask queryTask : queryTasks) {\n            queryOperations.add(Operation\n                    .createPost(UriUtils.buildUri(serviceHost, ServiceUriPaths.CORE_QUERY_TASKS))\n                    .setBody(queryTask)\n                    .setReferer(serviceHost.getUri()));\n        }\n\n        if (!queryOperations.isEmpty()) {\n            OperationJoin.create(queryOperations.toArray(new Operation[0]))\n                    .setCompletion((ops, failures) -> {\n                        if (failures != null) {\n                            consumer.accept(null, failures.values());\n                            return;\n                        }\n\n                        List<RegistryState> registryStates = new ArrayList<>();\n                        for (Operation o : ops.values()) {\n                            QueryTask result = o.getBody(QueryTask.class);\n\n                            for (Map.Entry<String, Object> document : result.results.documents.entrySet()) {\n                                RegistryState registryState = Utils.fromJson(document.getValue(), RegistryState.class);\n                                registryStates.add(registryState);\n                            }\n                        }\n\n                        consumer.accept(registryStates, null);\n                    })\n                    .sendWith(serviceHost);\n        } else {\n            // no registry links available\n            consumer.accept(Collections.emptyList(), null);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Executes the given query tasks", "call_func_name": ["java.util.ArrayList.<init>", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.vmware.xenon.common.UriUtils.buildUri", "com.vmware.xenon.common.Operation.createPost", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.ServiceHost.getUri", "com.vmware.xenon.common.Operation.setReferer", "java.util.List.add", "java.util.List.isEmpty", "java.util.List.toArray", "com.vmware.xenon.common.OperationJoin.create", "com.vmware.xenon.common.OperationJoin.sendWith", "java.util.Collections.emptyList", "java.util.function.BiConsumer.accept"], "call_func_parameter": [[""], [""], [""], [""], ["com.vmware.xenon.common.ServiceHost", "java.lang.String"], ["java.net.URI"], ["java.lang.Object"], [""], ["java.net.URI"], ["java.lang.Object"], [""], ["java.lang.Object[]"], ["com.vmware.xenon.common.Operation[]"], ["com.vmware.xenon.common.ServiceRequestSender"], [""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/RegistryUtil.java", "methodName": "com.vmware.admiral.common.util.RegistryUtil.buildQueryByTenantLinks", "methodParameterType": "Collection<String>#", "methodParameterName": "tenantLinks#", "methodBody": "private static Query buildQueryByTenantLinks(Collection<String> tenantLinks) {\n        return QueryUtil.addTenantGroupAndUserClause(tenantLinks);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a query to return all RegistryState links within a group, tenant or global RegistryState links if the tenantLinks collection is null/empty.", "call_func_name": ["com.vmware.admiral.common.util.QueryUtil.addTenantGroupAndUserClause"], "call_func_parameter": [["java.util.Collection"]], "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/RegistryUtil.java", "methodName": "com.vmware.admiral.common.util.RegistryUtil.buildAllRegistriesQuery", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private static QueryTask buildAllRegistriesQuery() {\n        return buildRegistryQuery();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a query to return all RegistryState links.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/RegistryUtil.java", "methodName": "com.vmware.admiral.common.util.RegistryUtil.buildRegistryQueryByTenantLinks", "methodParameterType": "Collection<String>#", "methodParameterName": "tenantLinks#", "methodBody": "private static QueryTask buildRegistryQueryByTenantLinks(Collection<String> tenantLinks) {\n        return buildRegistryQuery(buildQueryByTenantLinks(tenantLinks));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a query to return all RegistryState links within a group, tenant or global RegistryState links if the tenantLinks collection is null/empty.", "call_func_name": ["com.vmware.admiral.common.util.RegistryUtil.buildQueryByTenantLinks"], "call_func_parameter": [["java.util.Collection"]], "passed_comments": [{"com.vmware.admiral.common.util.RegistryUtil.buildQueryByTenantLinks": "Create a query to return all RegistryState links within a group, tenant or global RegistryState links if the tenantLinks collection is null/empty."}]}, {"index": "132", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/RegistryUtil.java", "methodName": "com.vmware.admiral.common.util.RegistryUtil.buildRegistryQueryByNameAndTenantLinks", "methodParameterType": "String#Collection<String>#", "methodParameterName": "registryName#tenantLinks#", "methodBody": "private static QueryTask buildRegistryQueryByNameAndTenantLinks(String registryName,\n            Collection<String> tenantLinks) {\n        Query nameClause = new Query()\n                .setTermPropertyName(RegistryState.FIELD_NAME_NAME)\n                .setTermMatchValue(registryName);\n\n        Query tenantsClause = buildQueryByTenantLinks(tenantLinks);\n        return buildRegistryQuery(nameClause, tenantsClause);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a query to return all RegistryState links matching a given name. Results are filtered within a specified group/tenant or are global RegistryState links if the tenantLinks collection is null/empty.", "call_func_name": ["com.vmware.admiral.common.util.RegistryUtil.buildQueryByTenantLinks"], "call_func_parameter": [["java.util.Collection"]], "passed_comments": [{"com.vmware.admiral.common.util.RegistryUtil.buildQueryByTenantLinks": "Create a query to return all RegistryState links within a group, tenant or global RegistryState links if the tenantLinks collection is null/empty."}]}, {"index": "133", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/RegistryUtil.java", "methodName": "com.vmware.admiral.common.util.RegistryUtil.buildRegistryQuery", "methodParameterType": "Query#", "methodParameterName": "additionalClauses#", "methodBody": "private static QueryTask buildRegistryQuery(Query... additionalClauses) {\n        List<Query> clauses = new ArrayList<>();\n        if (additionalClauses != null) {\n            clauses.addAll(Arrays.asList(additionalClauses));\n        }\n\n        Query excludeDisabledClause = new Query()\n                .setTermPropertyName(RegistryState.FIELD_NAME_DISABLED)\n                .setTermMatchValue(Boolean.TRUE.toString());\n        excludeDisabledClause.occurance = Occurance.MUST_NOT_OCCUR;\n        clauses.add(excludeDisabledClause);\n\n        QueryTask queryTask = QueryUtil.buildQuery(RegistryState.class, true,\n                clauses.toArray(new Query[clauses.size()]));\n        QueryUtil.addExpandOption(queryTask);\n\n        return queryTask;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#BooleanLiteral#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(BooleanLiteral)BooleanLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a query task from the given queries.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "134", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/RegistryUtil.java", "methodName": "com.vmware.admiral.common.util.RegistryUtil.filterWhitelistRelatedTenantLinks", "methodParameterType": "Collection<String>#", "methodParameterName": "allTenantLinks#", "methodBody": "private static Collection<String> filterWhitelistRelatedTenantLinks(\n            Collection<String> allTenantLinks) {\n        if (allTenantLinks == null) {\n            return null;\n        }\n\n        return allTenantLinks.stream().filter((tenantLink) -> {\n            if (tenantLink.startsWith(MultiTenantDocument.PROJECTS_IDENTIFIER)) {\n                return true;\n            }\n\n            return tenantLink.startsWith(MultiTenantDocument.TENANTS_PREFIX)\n                    && !tenantLink.contains(MultiTenantDocument.GROUP_IDENTIFIER);\n        }).collect(Collectors.toSet());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For the purposes of registry whitelist checks, only /projects/{id} and /tenants/{id} tenant links are important. /tenants/{id}/groups/{group}, /users/{principal} and other custom tenant links will be removed in the result.", "call_func_name": ["java.util.Collection.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.stream.Collectors.toSet", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], ["java.util.function.Predicate"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "135", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CertificateCleanupUtil.java", "methodName": "com.vmware.admiral.common.util.CertificateCleanupUtil.removeTrustCertsIfUnused", "methodParameterType": "ServiceHost#Collection<String>#Collection<String>#", "methodParameterName": "serviceHost#trustCertLinks#ignoredUsageLinks#", "methodBody": "public static DeferredResult<Void> removeTrustCertsIfUnused(ServiceHost serviceHost,\n            Collection<String> trustCertLinks, Collection<String> ignoredUsageLinks) {\n\n        trustCertLinks = sanitizeCollection(trustCertLinks);\n        if (trustCertLinks.isEmpty()) {\n            return DeferredResult.completed(null);\n        }\n        ignoredUsageLinks = sanitizeCollection(ignoredUsageLinks);\n\n        // Start with a set of all certificate links\n        Set<String> unusedCertLinks = ConcurrentHashMap.newKeySet();\n        unusedCertLinks.addAll(trustCertLinks);\n\n        // Build a query that selects all entities that use the specified certs\n        Query usagesQuery = buildCertUsageSelectionQuery(trustCertLinks, ignoredUsageLinks);\n        // ResourceState is used instead of ServiceDocument so we can\n        // check the custom properties as part of the query\n        QueryByPages<ResourceState> queryByPages = new QueryByPages<>(serviceHost,\n                usagesQuery, ResourceState.class, null);\n\n        return queryByPages\n                // remove all used certificates from the deletion list\n                .queryDocuments(usage -> {\n                    TRUST_CERT_CUSTOM_PROPERTY_NAMES.forEach(propName -> {\n                        String propValue = usage.customProperties.get(propName);\n                        if (propValue != null && !propName.isEmpty()) {\n                            unusedCertLinks.remove(propValue);\n                        }\n                    });\n                })\n                // delete the remaining certificates\n                .thenCompose(ignore -> deleteCertificatesByLink(serviceHost, unusedCertLinks));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#NullLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(NullLiteral)NullLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Finds which of the passed certificates are currently not used by any state and deletes them.", "call_func_name": ["com.vmware.admiral.common.util.CertificateCleanupUtil.sanitizeCollection", "java.util.Collection.isEmpty", "com.vmware.xenon.common.DeferredResult.completed", "java.util.concurrent.ConcurrentHashMap.newKeySet", "java.util.Set.addAll", "com.vmware.admiral.common.util.CertificateCleanupUtil.buildCertUsageSelectionQuery", "java.util.function.Consumer.accept", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.thenCompose"], "call_func_parameter": [["java.util.Collection"], [""], ["java.lang.Object"], [""], ["java.util.Collection"], ["java.util.Collection", "java.util.Collection"], ["java.util.Set"], ["com.vmware.xenon.common.ServiceHost", "java.util.Set"], ["java.util.function.Function"]], "passed_comments": [{"com.vmware.admiral.common.util.CertificateCleanupUtil.sanitizeCollection": "Converts <code>null</code> collections to empty collections, drops <code>null</code> elements in the passed collection, drops duplicated elements."}, {"com.vmware.admiral.common.util.CertificateCleanupUtil.buildCertUsageSelectionQuery": "Builds a query that will select all (not ignored) documents that use any of the specified certificates."}]}, {"index": "136", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CertificateCleanupUtil.java", "methodName": "com.vmware.admiral.common.util.CertificateCleanupUtil.sanitizeCollection", "methodParameterType": "Collection<String>#", "methodParameterName": "c#", "methodBody": "private static Set<String> sanitizeCollection(Collection<String> c) {\n        if (c == null) {\n            return Collections.emptySet();\n        }\n\n        return c.stream().filter(Objects::nonNull).collect(Collectors.toSet());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts <code>null</code> collections to empty collections, drops <code>null</code> elements in the passed collection, drops duplicated elements.", "call_func_name": ["java.util.Collections.emptySet", "java.util.Collection.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.stream.Collectors.toSet", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], [""], ["java.util.function.Predicate"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CertificateCleanupUtil.java", "methodName": "com.vmware.admiral.common.util.CertificateCleanupUtil.buildCertUsageSelectionQuery", "methodParameterType": "Collection<String>#Collection<String>#", "methodParameterName": "trustCertLinks#ignoredUsageLinks#", "methodBody": "private static Query buildCertUsageSelectionQuery(Collection<String> trustCertLinks,\n            Collection<String> ignoredUsageLinks) {\n        Builder queryBuilder = Query.Builder.create();\n\n        addClauseToQuery(queryBuilder, buildCertLinkClause(trustCertLinks));\n        addClauseToQuery(queryBuilder, buildSelfLinkExclusionClause(ignoredUsageLinks));\n\n        return queryBuilder.build();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a query that will select all (not ignored) documents that use any of the specified certificates.", "call_func_name": ["com.vmware.admiral.common.util.CertificateCleanupUtil.buildCertLinkClause", "com.vmware.admiral.common.util.CertificateCleanupUtil.buildSelfLinkExclusionClause"], "call_func_parameter": [["java.util.Collection"], ["java.util.Collection"]], "passed_comments": [{"com.vmware.admiral.common.util.CertificateCleanupUtil.buildCertLinkClause": "Builds a query that will select all documents that use any of the specified certificates."}, {"com.vmware.admiral.common.util.CertificateCleanupUtil.buildSelfLinkExclusionClause": "Builds a query that will select all documents that are not present in the ignored list"}]}, {"index": "138", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CertificateCleanupUtil.java", "methodName": "com.vmware.admiral.common.util.CertificateCleanupUtil.buildCertLinkClause", "methodParameterType": "Collection<String>#", "methodParameterName": "trustCertLinks#", "methodBody": "private static Query buildCertLinkClause(Collection<String> trustCertLinks) {\n        if (trustCertLinks == null || trustCertLinks.isEmpty()) {\n            return null;\n        }\n\n        Builder builder = Query.Builder.create(Occurance.MUST_OCCUR);\n\n        TRUST_CERT_CUSTOM_PROPERTY_NAMES.forEach(propName -> {\n            builder.addInClause(\n                    QuerySpecification.buildCompositeFieldName(\n                            ResourceState.FIELD_NAME_CUSTOM_PROPERTIES,\n                            propName),\n                    trustCertLinks, Occurance.SHOULD_OCCUR);\n        });\n\n        return builder.build();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a query that will select all documents that use any of the specified certificates.", "call_func_name": ["java.util.Collection.isEmpty", "java.util.List.forEach"], "call_func_parameter": [[""], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "139", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CertificateCleanupUtil.java", "methodName": "com.vmware.admiral.common.util.CertificateCleanupUtil.buildSelfLinkExclusionClause", "methodParameterType": "Collection<String>#", "methodParameterName": "ignoredUsageLinks#", "methodBody": "private static Query buildSelfLinkExclusionClause(Collection<String> ignoredUsageLinks) {\n        if (ignoredUsageLinks == null || ignoredUsageLinks.isEmpty()) {\n            return null;\n        }\n\n        return Query.Builder.create(Occurance.MUST_NOT_OCCUR)\n                .addInClause(ServiceDocument.FIELD_NAME_SELF_LINK, ignoredUsageLinks)\n                .build();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a query that will select all documents that are not present in the ignored list", "call_func_name": ["java.util.Collection.isEmpty"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CertificateCleanupUtil.java", "methodName": "com.vmware.admiral.common.util.CertificateCleanupUtil.deleteCertificatesByLink", "methodParameterType": "ServiceHost#Collection<String>#", "methodParameterName": "serviceHost#certLinks#", "methodBody": "private static DeferredResult<Void> deleteCertificatesByLink(ServiceHost serviceHost,\n            Collection<String> certLinks) {\n\n        if (certLinks == null || certLinks.isEmpty()) {\n            return DeferredResult.completed(null);\n        }\n\n        List<DeferredResult<Void>> deleteOps = certLinks.stream()\n                .map(certLink -> {\n                    Operation delete = Operation.createDelete(serviceHost, certLink)\n                            .setReferer(\"/certificate-cleanup\");\n                    return serviceHost.sendWithDeferredResult(delete)\n                            .thenAccept(ignore -> {\n                                serviceHost.log(Level.INFO,\n                                        \"Deleted unused trust cert [%s]\",\n                                        certLink);\n                            })\n                            .exceptionally(ex -> {\n                                serviceHost.log(Level.WARNING,\n                                        \"Failed to delete trust cert [%s]: %s\",\n                                        certLink, Utils.toString(ex));\n                                throw ex instanceof CompletionException\n                                        ? (CompletionException) ex\n                                        : new CompletionException(ex);\n                            });\n                }).collect(Collectors.toList());\n\n        return DeferredResult.allOf(deleteOps)\n                .thenAccept(ignore -> {\n                    // convert return type to DeferredResult<Void>\n                });\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ConditionalExpression#ThrowStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ThrowStatement(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ConditionalExpression)ThrowStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deletes the specified certificates.", "call_func_name": ["java.util.Collection.isEmpty", "com.vmware.xenon.common.DeferredResult.completed", "java.util.Collection.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "com.vmware.xenon.common.DeferredResult.allOf", "java.util.function.Consumer.accept", "com.vmware.xenon.common.DeferredResult.thenAccept"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["com.vmware.xenon.common.ServiceHost"], ["java.util.function.Function"], [""], ["java.util.stream.Collector"], ["java.util.List"], [""], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServiceClientFactory.java", "methodName": "com.vmware.admiral.common.util.ServiceClientFactory.createServiceClient", "methodParameterType": "TrustManager#KeyManager#", "methodParameterName": "trustManager#keyManager#", "methodBody": "public static ServiceClient createServiceClient(TrustManager trustManager,\n            KeyManager keyManager) {\n\n        return createServiceClient(CertificateUtil.createSSLContext(\n                trustManager, keyManager));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a ServiceClient instance using the given TrustManager and KeyManager", "call_func_name": ["com.vmware.photon.controller.model.security.util.CertificateUtil.createSSLContext", "com.vmware.admiral.common.util.ServiceClientFactory.createServiceClient"], "call_func_parameter": [["javax.net.ssl.TrustManager", "javax.net.ssl.KeyManager"], ["javax.net.ssl.SSLContext"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.createSSLContext": "Create an SSLContext for the given TrustManager and KeyManager"}, {"com.vmware.admiral.common.util.ServiceClientFactory.createServiceClient": "Create a ServiceClient instance using the given SSLContext"}]}, {"index": "142", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServiceClientFactory.java", "methodName": "com.vmware.admiral.common.util.ServiceClientFactory.createServiceClient", "methodParameterType": "TrustManager#KeyManager#int#", "methodParameterName": "trustManager#keyManager#requestPayloadSizeLimit#", "methodBody": "public static ServiceClient createServiceClient(TrustManager trustManager,\n            KeyManager keyManager, int requestPayloadSizeLimit) {\n\n        return createServiceClient(CertificateUtil.createSSLContext(\n                trustManager, keyManager), requestPayloadSizeLimit);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a ServiceClient instance using the given TrustManager, KeyManager and requestPayloadSizeLimit", "call_func_name": ["com.vmware.photon.controller.model.security.util.CertificateUtil.createSSLContext", "com.vmware.admiral.common.util.ServiceClientFactory.createServiceClient"], "call_func_parameter": [["javax.net.ssl.TrustManager", "javax.net.ssl.KeyManager"], ["javax.net.ssl.SSLContext", "int"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.createSSLContext": "Create an SSLContext for the given TrustManager and KeyManager"}, {"com.vmware.admiral.common.util.ServiceClientFactory.createServiceClient": "Create a ServiceClient instance using the given SSLContext and requestPayloadSizeLimit"}]}, {"index": "143", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServiceClientFactory.java", "methodName": "com.vmware.admiral.common.util.ServiceClientFactory.createServiceClient", "methodParameterType": "SSLContext#", "methodParameterName": "sslContext#", "methodBody": "public static ServiceClient createServiceClient(SSLContext sslContext) {\n        return createServiceClient(sslContext, 0);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a ServiceClient instance using the given SSLContext", "call_func_name": ["com.vmware.admiral.common.util.ServiceClientFactory.createServiceClient"], "call_func_parameter": [["javax.net.ssl.SSLContext", "int"]], "passed_comments": [{"com.vmware.admiral.common.util.ServiceClientFactory.createServiceClient": "Create a ServiceClient instance using the given SSLContext and requestPayloadSizeLimit"}]}, {"index": "144", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServiceClientFactory.java", "methodName": "com.vmware.admiral.common.util.ServiceClientFactory.createServiceClient", "methodParameterType": "SSLContext#int#", "methodParameterName": "sslContext#requestPayloadSizeLimit#", "methodBody": "public static ServiceClient createServiceClient(SSLContext sslContext,\n            int requestPayloadSizeLimit) {\n        ServiceClient serviceClient;\n        try {\n            // supply a scheduled executor for re-use by the client, but do not supply our\n            // regular executor, since the I/O threads might take up all threads\n            serviceClient = NettyHttpServiceClient.create(\n                    ServiceClientFactory.class.getCanonicalName(),\n                    null,\n                    Executors.newScheduledThreadPool(Utils.DEFAULT_THREAD_COUNT, r -> new Thread(\n                            r, ServiceClientFactory.class.getSimpleName())));\n\n            if (requestPayloadSizeLimit > 0) {\n                serviceClient.setRequestPayloadSizeLimit(requestPayloadSizeLimit);\n            }\n            serviceClient.setSSLContext(sslContext);\n            serviceClient.start();\n\n            return serviceClient;\n\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(\"Failed to create ServiceClient\", e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#ClassInstanceCreation#LambdaExpression#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)LambdaExpression)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create a ServiceClient instance using the given SSLContext and requestPayloadSizeLimit", "call_func_name": ["java.lang.Class.getCanonicalName", "java.util.concurrent.ThreadFactory.newThread", "java.util.concurrent.Executors.newScheduledThreadPool", "com.vmware.xenon.common.http.netty.NettyHttpServiceClient.create", "com.vmware.xenon.common.ServiceClient.setRequestPayloadSizeLimit", "com.vmware.xenon.common.ServiceClient.setSSLContext", "com.vmware.xenon.common.ServiceClient.start", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], [""], ["int", "java.util.concurrent.ThreadFactory"], ["java.lang.String", "java.util.concurrent.ExecutorService", "java.util.concurrent.ScheduledExecutorService"], ["int"], ["javax.net.ssl.SSLContext"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/YamlMapper.java", "methodName": "com.vmware.admiral.common.util.YamlMapper.isMultiYaml", "methodParameterType": "String#", "methodParameterName": "yaml#", "methodBody": "public static boolean isMultiYaml(String yaml) {\n        Pattern pattern = Pattern.compile(YAML_REGEX_VERIFIER);\n        Matcher matcher = pattern.matcher(yaml);\n        int counter = 0;\n        while (matcher.find()) {\n            counter++;\n        }\n\n        return counter > 1;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if the string contains multiple yaml definitions concatenated.", "call_func_name": ["java.util.regex.Pattern.compile", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.find"], "call_func_parameter": [["java.lang.String"], ["java.lang.CharSequence"], [""]], "passed_comments": "/"}, {"index": "146", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ConfigurationUtil.java", "methodName": "com.vmware.admiral.common.util.ConfigurationUtil.initialize", "methodParameterType": "ConfigurationState#", "methodParameterName": "cs#", "methodBody": "@Deprecated\n    public static void initialize(ConfigurationState... cs) {\n        configProperties = cs;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initializes the cache of configuration property values. See  {@link #getProperty(String)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "147", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ConfigurationUtil.java", "methodName": "com.vmware.admiral.common.util.ConfigurationUtil.getProperty", "methodParameterType": "String#", "methodParameterName": "propertyName#", "methodBody": "@Deprecated\n    public static String getProperty(String propertyName) {\n        if (configProperties == null || propertyName == null) {\n            return null;\n        }\n\n        if (ALLOW_SSH_CONSOLE_PROPERTY.equals(propertyName)) {\n            // shell in a box feature was removed due to security issues\n            return Boolean.toString(false);\n        }\n\n        for (ConfigurationState config : configProperties) {\n            if (propertyName.equals(config.key)) {\n                return config.value;\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the property value from a cache loaded with, a priori, the same configuration properties files values. The value of the property will be valid as long as: - It is not updated at runtime (the configuration state will be updated, this cache no). - (in cluster) All the nodes start with the same configuration properties files and their corresponding values.", "call_func_name": ["java.lang.String.equals", "java.lang.Boolean.toString"], "call_func_parameter": [["java.lang.Object"], ["boolean"]], "passed_comments": "/"}, {"index": "148", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ConfigurationUtil.java", "methodName": "com.vmware.admiral.common.util.ConfigurationUtil.isEmbedded", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static boolean isEmbedded() {\n        return Boolean.valueOf(ConfigurationUtil.getProperty(EMBEDDED_MODE_PROPERTY));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether Admiral is running on embedded mode or not based on the \"embedded\" configuration property.", "call_func_name": ["com.vmware.admiral.common.util.ConfigurationUtil.getProperty", "java.lang.Boolean.valueOf", "java.lang.Boolean.booleanValue"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": [{"com.vmware.admiral.common.util.ConfigurationUtil.getProperty": "Retrieves the property value from a cache loaded with, a priori, the same configuration properties files values. The value of the property will be valid as long as: - It is not updated at runtime (the configuration state will be updated, this cache no). - (in cluster) All the nodes start with the same configuration properties files and their corresponding values."}]}, {"index": "149", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ConfigurationUtil.java", "methodName": "com.vmware.admiral.common.util.ConfigurationUtil.getConfigProperty", "methodParameterType": "Service#String#Consumer<String>#", "methodParameterName": "service#propName#callback#", "methodBody": "public static void getConfigProperty(Service service, String propName,\n            Consumer<String> callback) {\n        getConfigProperty(service.getHost(), propName, callback);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the property value from the configuration properties service.", "call_func_name": ["com.vmware.xenon.common.Service.getHost", "com.vmware.admiral.common.util.ConfigurationUtil.getConfigProperty"], "call_func_parameter": [[""], ["com.vmware.xenon.common.ServiceHost", "java.lang.String", "java.util.function.Consumer"]], "passed_comments": [{"com.vmware.admiral.common.util.ConfigurationUtil.getConfigProperty": "Retrieves the property value from the configuration properties service."}]}, {"index": "150", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ConfigurationUtil.java", "methodName": "com.vmware.admiral.common.util.ConfigurationUtil.getConfigProperty", "methodParameterType": "ServiceHost#String#Consumer<String>#", "methodParameterName": "host#propName#callback#", "methodBody": "public static void getConfigProperty(ServiceHost host, String propName,\n            Consumer<String> callback) {\n        if (ALLOW_SSH_CONSOLE_PROPERTY.equals(propName)) {\n            // shell in a box feature was removed due to security issues\n            callback.accept(Boolean.toString(false));\n            return;\n        }\n        host.sendRequest(Operation\n                .createGet(host, UriUtils.buildUriPath(CONFIG_PROPS, propName))\n                .setReferer(host.getUri())\n                .setCompletion((res, ex) -> {\n                    if (ex != null) {\n                        logger.warning(String.format(\"Unable to get config property: %s\", ex.getMessage()));\n                        callback.accept(null);\n                        return;\n                    }\n                    ConfigurationState body = res.getBody(ConfigurationState.class);\n                    callback.accept(body.value);\n                }));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the property value from the configuration properties service.", "call_func_name": ["java.lang.String.equals", "java.lang.Boolean.toString", "java.util.function.Consumer.accept", "com.vmware.xenon.common.UriUtils.buildUriPath", "com.vmware.xenon.common.Operation.createGet", "com.vmware.xenon.common.ServiceHost.getUri", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.xenon.common.ServiceHost.sendRequest"], "call_func_parameter": [["java.lang.Object"], ["boolean"], ["java.lang.Object"], ["java.lang.String[]"], ["com.vmware.xenon.common.ServiceHost", "java.lang.String"], [""], ["java.net.URI"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ConversionUtil.java", "methodName": "com.vmware.admiral.common.util.ConversionUtil.memoryToBytes", "methodParameterType": "double#String#", "methodParameterName": "magnitude#unit#", "methodBody": "public static double memoryToBytes(double magnitude, String unit) {\n        if (BINARY_MEMORY_UNITS.contains(unit.toLowerCase())) {\n            return memoryBinaryConversion(magnitude, unit, \"b\");\n        } else {\n            return memoryDecimalConversion(magnitude, unit, \"b\");\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Converts a memory value from human readable form to the value in bytes.", "call_func_name": ["java.lang.String.toLowerCase", "java.util.List.contains", "com.vmware.admiral.common.util.ConversionUtil.memoryBinaryConversion", "com.vmware.admiral.common.util.ConversionUtil.memoryDecimalConversion"], "call_func_parameter": [[""], ["java.lang.Object"], ["double", "java.lang.String", "java.lang.String"], ["double", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.vmware.admiral.common.util.ConversionUtil.memoryBinaryConversion": "Converts a memory binary value from one unit to another."}, {"com.vmware.admiral.common.util.ConversionUtil.memoryDecimalConversion": "Converts a memory decimal value from one unit to another."}]}, {"index": "152", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ConversionUtil.java", "methodName": "com.vmware.admiral.common.util.ConversionUtil.memoryBinaryConversion", "methodParameterType": "double#String#String#", "methodParameterName": "inMagnitude#inUnit#outUnit#", "methodBody": "public static double memoryBinaryConversion(double inMagnitude, String inUnit, String outUnit) {\n        return memoryConversion(inMagnitude, inUnit, outUnit, false);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts a memory binary value from one unit to another.", "call_func_name": ["com.vmware.admiral.common.util.ConversionUtil.memoryConversion"], "call_func_parameter": [["double", "java.lang.String", "java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "153", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ConversionUtil.java", "methodName": "com.vmware.admiral.common.util.ConversionUtil.memoryDecimalConversion", "methodParameterType": "double#String#String#", "methodParameterName": "inMagnitude#inUnit#outUnit#", "methodBody": "public static double memoryDecimalConversion(double inMagnitude, String inUnit,\n            String outUnit) {\n        return memoryConversion(inMagnitude, inUnit, outUnit, true);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts a memory decimal value from one unit to another.", "call_func_name": ["com.vmware.admiral.common.util.ConversionUtil.memoryConversion"], "call_func_parameter": [["double", "java.lang.String", "java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "154", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ConversionUtil.java", "methodName": "com.vmware.admiral.common.util.ConversionUtil.cpuToHertz", "methodParameterType": "long#String#", "methodParameterName": "magnitude#unit#", "methodBody": "public static long cpuToHertz(long magnitude, String unit) {\n        assertNotNull(unit, \"unit\");\n        unit = unit.toLowerCase();\n        long base = 1;\n        for (String currentUnit : CPU_UNITS) {\n            if (currentUnit.equals(unit)) {\n                return magnitude * base;\n            }\n            base *= 1000;\n        }\n        return 0;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#EnhancedForStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts a CPU value from human readable form to the value in Hz.", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotNull", "java.lang.String.toLowerCase", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.equals"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "155", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/AuthUtils.java", "methodName": "com.vmware.admiral.common.util.AuthUtils.validateSessionData", "methodParameterType": "ServiceHost#Operation#AuthorizationContext#AuthorizationContext#", "methodParameterName": "host#op#guestCtx#authCtx#", "methodBody": "public static void validateSessionData(ServiceHost host, Operation op,\n            AuthorizationContext guestCtx, AuthorizationContext authCtx) {\n        if (op == null) {\n            return;\n        }\n\n        if (authCtx == null) {\n            try {\n                Method getAuthorizationContext = ServiceHost.class\n                        .getDeclaredMethod(\"getAuthorizationContext\", Service.class,\n                                String.class);\n                getAuthorizationContext.setAccessible(true);\n                String token = BasicAuthenticationUtils.getAuthToken(op);\n                if (token != null) {\n                    AuthorizationContext context = (AuthorizationContext) getAuthorizationContext\n                            .invoke(host, null, token);\n\n                    if (!(context == null || context.isSystemUser())) {\n                        op.setAuthorizationContext(context);\n                        validateSessionData(host, op, guestCtx, context);\n                    }\n                }\n\n            } catch (NoSuchMethodException | IllegalAccessException\n                    | InvocationTargetException e ) {\n                op.fail(e);\n            }\n        } else {\n            if (authCtx.isSystemUser()) {\n                return;\n            }\n\n            if (cleanedupSessionsCache.getIfPresent(authCtx.getToken()) != null) {\n                Utils.log(AuthUtils.class, AuthUtils.class.getSimpleName(), Level.FINE,\n                        \"Invalid session '%s'!\", authCtx.getToken());\n\n                try {\n                    AUTH_CTX_FIELD.set(op, guestCtx);\n                } catch (Exception e) {\n                    Utils.log(AuthUtils.class, AuthUtils.class.getSimpleName(), Level.WARNING,\n                            \"Error handling invalid session '%s': %s\", authCtx.getToken(),\n                            e.getMessage());\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Validates whether the provided operation relies on some session data which has been marked as cleaned up. In that case, operation's authorization context is replaced with the guest user authentication.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/AuthUtils.java", "methodName": "com.vmware.admiral.common.util.AuthUtils.cleanupSessionData", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "public static void cleanupSessionData(Operation op) {\n\n        String sessionId = BasicAuthenticationUtils.getAuthToken(op);\n\n        if (sessionId != null && !sessionId.isEmpty()) {\n            Utils.log(AuthUtils.class, AuthUtils.class.getSimpleName(), Level.FINE,\n                    \"Cleaning up session '%s'...\", sessionId);\n\n            cleanedupSessionsCache.put(sessionId, sessionId);\n        }\n        // return empty auth header\n        op.addResponseHeader(Operation.REQUEST_AUTH_TOKEN_HEADER, \"\");\n        // delete auth cookie\n        String cookie = AuthenticationConstants.REQUEST_AUTH_TOKEN_COOKIE + \"=; Path=/; Max-Age=0\";\n        op.addResponseHeader(Operation.SET_COOKIE_HEADER, cookie);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the proper headers to the operation response to clean up the session data in the client side. Also, marks the session as cleaned up thus further attempts to use it will default to unauthenticated or guest user authentication.", "call_func_name": ["com.vmware.xenon.services.common.authn.BasicAuthenticationUtils.getAuthToken", "java.lang.String.isEmpty", "java.lang.Class.getSimpleName", "com.vmware.xenon.common.Utils.log", "com.google.common.cache.Cache.put", "com.vmware.xenon.common.Operation.addResponseHeader"], "call_func_parameter": [["com.vmware.xenon.common.Operation"], [""], [""], ["java.lang.Class", "java.lang.String", "java.util.logging.Level", "java.lang.String", "java.lang.Object[]"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/UniquePropertiesUtil.java", "methodName": "com.vmware.admiral.common.util.UniquePropertiesUtil.claimProperty", "methodParameterType": "Service#String#String#", "methodParameterName": "service#propertiesId#propertyName#", "methodBody": "public static DeferredResult<Boolean> claimProperty(Service service, String propertiesId,\n            String propertyName) {\n\n        assertNotNull(service, \"service\");\n        assertNotNullOrEmpty(propertiesId, \"propertiesId\");\n        assertNotNullOrEmpty(propertyName, \"propertyName\");\n\n        UniquePropertiesRequest request = new UniquePropertiesRequest();\n        request.toAdd = Collections.singletonList(propertyName);\n\n        DeferredResult<Boolean> result = new DeferredResult<>();\n\n        String uriPath = UriUtils.buildUriPath(UniquePropertiesService.FACTORY_LINK, propertiesId);\n\n        Operation patch = Operation.createPatch(service, uriPath)\n                .setBody(request)\n                .setCompletion((o, ex) -> {\n                    if (ex != null) {\n                        if (o.getStatusCode() == Operation.STATUS_CODE_CONFLICT) {\n                            result.complete(true);\n                            return;\n                        }\n                        result.fail(ex);\n                        return;\n                    }\n                    result.complete(false);\n                });\n\n        service.sendRequest(patch);\n        return result;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param service Service that is using the util.", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotNull", "com.vmware.admiral.common.util.AssertUtil.assertNotNullOrEmpty", "java.util.Collections.singletonList", "com.vmware.xenon.common.DeferredResult.<init>", "com.vmware.xenon.common.UriUtils.buildUriPath", "com.vmware.xenon.common.Operation.createPatch", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.Service.sendRequest"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String[]"], ["com.vmware.xenon.common.Service", "java.lang.String"], ["java.lang.Object"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DelegatingX509TrustManager.java", "methodName": "com.vmware.admiral.common.util.DelegatingX509TrustManager.putDelegate", "methodParameterType": "Object#X509TrustManager#", "methodParameterName": "key#newDelegate#", "methodBody": "public void putDelegate(Object key, X509TrustManager newDelegate) {\n        delegates.put(key, newDelegate);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a delegate identified by the given unique key (can be used to remove it later)", "call_func_name": ["java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DelegatingX509TrustManager.java", "methodName": "com.vmware.admiral.common.util.DelegatingX509TrustManager.getDelegate", "methodParameterType": "Object#", "methodParameterName": "key#", "methodBody": "public X509TrustManager getDelegate(Object key) {\n        return delegates.get(key);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a delegate identified by the given unique key", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DelegatingX509TrustManager.java", "methodName": "com.vmware.admiral.common.util.DelegatingX509TrustManager.removeDelegate", "methodParameterType": "Object#", "methodParameterName": "key#", "methodBody": "public X509TrustManager removeDelegate(Object key) {\n        return delegates.remove(key);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove a previously added delegate", "call_func_name": ["java.util.Map.remove"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/CommonContinuousQueries.java", "methodName": "com.vmware.admiral.common.util.CommonContinuousQueries.subscribeTo", "methodParameterType": "ServiceHost#ContinuousQueryId#Consumer<Operation>#", "methodParameterName": "host#queryId#consumer#", "methodBody": "public static void subscribeTo(ServiceHost host, ContinuousQueryId queryId,\n            Consumer<Operation> consumer) {\n        QueryTask task = getQueryTask(host, queryId);\n        Operation.createPost(host, ServiceUriPaths.CORE_LOCAL_QUERY_TASKS)\n                .setBody(task)\n                .setReferer(host.getUri())\n                .setCompletion((o, e) -> {\n                    if (e != null && o.getStatusCode() != Operation.STATUS_CODE_CONFLICT) {\n                        host.log(Level.SEVERE, Utils.toString(e));\n                        return;\n                    }\n\n                    String taskUriPath = UriUtils.buildUriPath(\n                            ServiceUriPaths.CORE_LOCAL_QUERY_TASKS, task.documentSelfLink);\n                    Operation subscribePost = Operation.createPost(host, taskUriPath)\n                            .setReferer(host.getUri())\n                            .setCompletion((op, ex) -> {\n                                if (ex != null) {\n                                    host.log(Level.SEVERE, Utils.toString(ex));\n                                }\n                            });\n\n                    host.log(Level.INFO, \"Subscribing to a continuous task: %s\", taskUriPath);\n                    host.startSubscriptionService(subscribePost, consumer,\n                            ServiceSubscriber.create(false));\n                }).sendWith(host);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Subscribes a consumer to the given continuous query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServerX509TrustManager.java", "methodName": "com.vmware.admiral.common.util.ServerX509TrustManager.init", "methodParameterType": "ServiceHost#", "methodParameterName": "host#", "methodBody": "public static ServerX509TrustManager init(ServiceHost host) {\n        if (INSTANCE != null) {\n            return INSTANCE;\n        }\n        synchronized (ServerX509TrustManager.class) {\n            if (INSTANCE == null) {\n                INSTANCE = new ServerX509TrustManager(host);\n            }\n        }\n        return INSTANCE;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(SynchronizedStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method only initialize the ServerX509TrustManager, does not start it. The method is intended to be use only on server start.", "call_func_name": ["com.vmware.admiral.common.util.ServerX509TrustManager.<init>"], "call_func_parameter": [["com.vmware.xenon.common.ServiceHost"]], "passed_comments": "/"}, {"index": "163", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServerX509TrustManager.java", "methodName": "com.vmware.admiral.common.util.ServerX509TrustManager.invalidate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static synchronized void invalidate() {\n        INSTANCE = null;\n        SslCertificateResolver.invalidateTrustManager();\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Invalidate the instance, if created/initialized and the copy in SslCertificateResolver", "call_func_name": ["com.vmware.admiral.common.util.SslCertificateResolver.invalidateTrustManager"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "164", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServerX509TrustManager.java", "methodName": "com.vmware.admiral.common.util.ServerX509TrustManager.start", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void start() {\n        // check if it's already started\n        if (started.getAndSet(true)) {\n            return;\n        }\n\n        this.documentUpdateTimeMicros = 0;\n        try {\n            verifySubscriptionTargetExists(() -> {\n                try {\n                    subscribeForSslTrustCertNotifications();\n                    loadSslTrustCertServices();\n                } catch (Exception e) {\n                    host.log(Level.SEVERE,\n                            \"Failure while subscribing for ssl certificate notifications: %s\",\n                            Utils.toString(e));\n                }\n            });\n        } finally {\n            schedulePeriodicCertificatesReload();\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Start the active subscription notifications of this trust manager and load the initial state of ssl trust certificates.", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.getAndSet", "java.lang.Runnable.run", "com.vmware.admiral.common.util.ServerX509TrustManager.verifySubscriptionTargetExists", "com.vmware.admiral.common.util.ServerX509TrustManager.schedulePeriodicCertificatesReload"], "call_func_parameter": [["boolean"], ["com.vmware.admiral.common.util.ServerX509TrustManager"], ["java.lang.Runnable"], [""]], "passed_comments": [{"com.vmware.admiral.common.util.ServerX509TrustManager.schedulePeriodicCertificatesReload": "Periodically reload all certificates in case we missed something.. e.g. replicated certificates from other xenon nodes"}]}, {"index": "165", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/ServerX509TrustManager.java", "methodName": "com.vmware.admiral.common.util.ServerX509TrustManager.schedulePeriodicCertificatesReload", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void schedulePeriodicCertificatesReload() {\n        long nextDelay = (reloadCounter.get() > reloadCounterThreshold) ?\n                maintenanceInterval :\n                maintenanceIntervalInitial;\n\n        if (host.isStopping()) {\n            return;\n        }\n\n        Runnable task = () -> {\n            try {\n                host.log(Level.FINE, \"Host %s reloading all certificates\", host.getPublicUri());\n                documentUpdateTimeMicros = 0;\n                loadSslTrustCertServices();\n\n                reloadCounter.updateAndGet((r) -> (r > reloadCounterThreshold) ? r : r + 1);\n\n                schedulePeriodicCertificatesReload();\n            } catch (Exception e) {\n                host.log(Level.WARNING, e.getMessage());\n                host.log(Level.FINE, Utils.toString(e));\n\n                schedulePeriodicCertificatesReload();\n            }\n        };\n\n        try {\n            host.schedule(task, nextDelay, TimeUnit.MICROSECONDS);\n        } catch (Exception e) {\n            host.log(Level.INFO, \"Host is stopping\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ConditionalExpression#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(LambdaExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ConditionalExpression)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Periodically reload all certificates in case we missed something.. e.g. replicated certificates from other xenon nodes", "call_func_name": ["java.util.concurrent.atomic.AtomicInteger.get", "com.vmware.xenon.common.ServiceHost.isStopping", "java.lang.Runnable.run", "com.vmware.xenon.common.ServiceHost.schedule", "com.vmware.xenon.common.ServiceHost.log"], "call_func_parameter": [[""], [""], ["com.vmware.admiral.common.util.ServerX509TrustManager"], ["java.lang.Runnable", "long", "java.util.concurrent.TimeUnit"], ["java.util.logging.Level", "java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DelegatingX509KeyManager.java", "methodName": "com.vmware.admiral.common.util.DelegatingX509KeyManager.putDelegate", "methodParameterType": "String#X509ExtendedKeyManager#", "methodParameterName": "alias#newDelegate#", "methodBody": "public void putDelegate(String alias, X509ExtendedKeyManager newDelegate) {\n        if (!alias.equals(alias.toLowerCase())) {\n            // aliases given by the SSL engine are case insensitive so make sure\n            // they are normalized\n            throw new LocalizableValidationException(\"Aliases must be all lowercase\", \"common.certificate.aliases.lowercase\");\n        }\n        delegates.put(alias, newDelegate);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a delegate identified by the given unique key (can be used to remove it later).", "call_func_name": ["java.lang.String.toLowerCase", "java.lang.String.equals", "com.vmware.xenon.common.LocalizableValidationException.<init>", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.String", "java.lang.String", "java.lang.Object[]"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "167", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DelegatingX509KeyManager.java", "methodName": "com.vmware.admiral.common.util.DelegatingX509KeyManager.removeDelegate", "methodParameterType": "String#", "methodParameterName": "alias#", "methodBody": "public X509KeyManager removeDelegate(String alias) {\n        return delegates.remove(alias);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove a previously added delegate.", "call_func_name": ["java.util.Map.remove"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "168", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DeferredUtils.java", "methodName": "com.vmware.admiral.common.util.DeferredUtils.logErrorAndThrow", "methodParameterType": "Throwable#Function<Throwable,String>#Class#", "methodParameterName": "t#m#c#", "methodBody": "public static CompletionException logErrorAndThrow(Throwable t, Function<Throwable, String> m,\n            Class c) {\n\n        logException(t, Level.SEVERE, m, c);\n\n        return wrap(t);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility method to log an exception and rethrow it wrapped as CompletionException. First unwrap CompletionException if necessary.", "call_func_name": ["com.vmware.admiral.common.util.DeferredUtils.logException", "com.vmware.admiral.common.util.DeferredUtils.wrap"], "call_func_parameter": [["java.lang.Throwable", "java.util.logging.Level", "java.util.function.Function", "java.lang.Class"], ["java.lang.Throwable"]], "passed_comments": [{"com.vmware.admiral.common.util.DeferredUtils.logException": "Utility method to log an exception without rethrowing it. Unwrap CompletionException if necessary."}, {"com.vmware.admiral.common.util.DeferredUtils.wrap": "Returns same instance if <code>t</code> is instance of CompletionException or wraps it in CompletionException."}]}, {"index": "169", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DeferredUtils.java", "methodName": "com.vmware.admiral.common.util.DeferredUtils.logException", "methodParameterType": "Throwable#Level#Function<Throwable,String>#Class#", "methodParameterName": "t#l#m#c#", "methodBody": "public static void logException(Throwable t, Level l, Function<Throwable, String> m, Class c) {\n        Throwable cause = t instanceof CompletionException ? t.getCause() : t;\n\n        try {\n            String msg = m.apply(cause);\n            Utils.log(c, c.getSimpleName(), l, () -> msg);\n        } catch (Throwable e) {\n            Utils.logWarning(\"DeferredUtils: Cannot log an error, error: %s\", e.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(SimpleName)SimpleName)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Utility method to log an exception without rethrowing it. Unwrap CompletionException if necessary.", "call_func_name": ["java.lang.Throwable.getCause", "java.util.function.Function.apply", "java.lang.Class.getSimpleName", "java.util.function.Supplier.get", "com.vmware.xenon.common.Utils.log", "java.lang.Throwable.getMessage", "com.vmware.xenon.common.Utils.logWarning"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Class", "java.lang.String", "java.util.logging.Level", "java.util.function.Supplier"], [""], ["java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/DeferredUtils.java", "methodName": "com.vmware.admiral.common.util.DeferredUtils.wrap", "methodParameterType": "Throwable#", "methodParameterName": "t#", "methodBody": "public static CompletionException wrap(Throwable t) {\n        return t instanceof CompletionException\n                ? (CompletionException) t\n                : new CompletionException(t);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns same instance if <code>t</code> is instance of CompletionException or wraps it in CompletionException.", "call_func_name": ["java.util.concurrent.CompletionException.<init>"], "call_func_parameter": [["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "171", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SslCertificateResolver.java", "methodName": "com.vmware.admiral.common.util.SslCertificateResolver.execute", "methodParameterType": "URI#BiConsumer<SslCertificateResolver,Throwable>#", "methodParameterName": "uri#callback#", "methodBody": "public static void execute(URI uri,\n            BiConsumer<SslCertificateResolver, Throwable> callback) {\n        final OperationContext parentContext = OperationContext.getOperationContext();\n\n        executor.execute(() -> {\n            OperationContext childContext = OperationContext.getOperationContext();\n            try {\n                // set the operation context of the parent thread in the current thread\n                OperationContext.restoreOperationContext(parentContext);\n\n                SslCertificateResolver resolver = new SslCertificateResolver(uri);\n                Throwable t = null;\n                try {\n                    resolver = resolver.connect();\n                } catch (Throwable e) {\n                    String msg = String.format(\"Error connecting to %s : %s\",\n                            uri.toString(), e.getMessage());\n                    logger.warning(msg);\n\n                    if (e.getMessage().equals(MESSAGE_INVALID_HOSTNAME)) {\n                        e = new LocalizableValidationException(MESSAGE_INVALID_HOSTNAME,\n                                MESSAGE_CODE_INVALID_HOSTNAME);\n                    }\n\n                    t = e;\n                }\n                if (t != null) {\n                    callback.accept(null, t);\n                } else {\n                    callback.accept(resolver, null);\n                }\n            } finally {\n                OperationContext.restoreOperationContext(childContext);\n            }\n        });\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Connects to uri in separate thread and then executes the callback. First parameter for the callback function is the SSLCertificateResolver object itself or null in case there's an error. The second one is the error itself or null if no such is thrown.", "call_func_name": ["com.vmware.xenon.common.OperationContext.getOperationContext", "java.lang.Runnable.run", "java.util.concurrent.ExecutorService.execute"], "call_func_parameter": [[""], ["com.vmware.xenon.common.OperationContext", "java.net.URI", "java.util.function.BiConsumer"], ["java.lang.Runnable"]], "passed_comments": "/"}, {"index": "172", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/util/SslCertificateResolver.java", "methodName": "com.vmware.admiral.common.util.SslCertificateResolver.getCertificate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public X509Certificate getCertificate() {\n        if (connectionCertificates.isEmpty()) {\n            throw new IllegalStateException(\"connect() was not called or was not successful.\");\n        }\n        return connectionCertificates.get(0);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the Server Trust Certificate from the chain.", "call_func_name": ["java.util.List.isEmpty", "java.lang.IllegalStateException.<init>", "java.util.List.get"], "call_func_parameter": [[""], ["java.lang.String"], ["int"]], "passed_comments": "/"}, {"index": "173", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTaskBuilder.java", "methodName": "com.vmware.admiral.common.task.RetriableTaskBuilder.withTaskId", "methodParameterType": "String#", "methodParameterName": "taskId#", "methodBody": "public RetriableTaskBuilder<T> withTaskId(String taskId) {\n        assertTaskNotExecuted();\n        AssertUtil.assertNotNullOrEmpty(taskId, \"taskId\");\n        this.taskConfiguration.taskId = taskId;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the ID of the task.", "call_func_name": ["com.vmware.admiral.common.task.RetriableTaskBuilder.assertTaskNotExecuted", "com.vmware.admiral.common.util.AssertUtil.assertNotNullOrEmpty"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "174", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTaskBuilder.java", "methodName": "com.vmware.admiral.common.task.RetriableTaskBuilder.withServiceHost", "methodParameterType": "ServiceHost#", "methodParameterName": "serviceHost#", "methodBody": "public RetriableTaskBuilder<T> withServiceHost(ServiceHost serviceHost) {\n        assertTaskNotExecuted();\n        AssertUtil.assertNotNull(serviceHost, \"serviceHost\");\n        this.taskConfiguration.serviceHost = serviceHost;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the  {@link ServiceHost} that will be used for scheduling retries.", "call_func_name": ["com.vmware.admiral.common.task.RetriableTaskBuilder.assertTaskNotExecuted", "com.vmware.admiral.common.util.AssertUtil.assertNotNull"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.String"]], "passed_comments": "/"}, {"index": "175", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTaskBuilder.java", "methodName": "com.vmware.admiral.common.task.RetriableTaskBuilder.withMaximumRetries", "methodParameterType": "Integer#", "methodParameterName": "maxRetries#", "methodBody": "public RetriableTaskBuilder<T> withMaximumRetries(Integer maxRetries) {\n        assertTaskNotExecuted();\n        if (maxRetries != null) {\n            AssertUtil.assertTrue(maxRetries >= 0, \"maxRetries must be a non-negative integer\");\n        }\n        this.taskConfiguration.maxRetries = maxRetries;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the maximum number of retries for the task. If 0, the task will not be retried. If <code>null</code>, the number of retry delays will be implied. It is OK to specify for maxRetries a number greater than the number of specified delays. The last delay will be repeated in this case.", "call_func_name": ["com.vmware.admiral.common.task.RetriableTaskBuilder.assertTaskNotExecuted", "java.lang.Integer.intValue", "com.vmware.admiral.common.util.AssertUtil.assertTrue"], "call_func_parameter": [[""], [""], ["boolean", "java.lang.String"]], "passed_comments": "/"}, {"index": "176", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTaskBuilder.java", "methodName": "com.vmware.admiral.common.task.RetriableTaskBuilder.withRetryDelays", "methodParameterType": "Long#", "methodParameterName": "retryDelays#", "methodBody": "public RetriableTaskBuilder<T> withRetryDelays(Long... retryDelays) {\n        assertTaskNotExecuted();\n        AssertUtil.assertNotNull(retryDelays, \"retryDelays\");\n        AssertUtil.assertTrue(retryDelays.length > 0,\n                \"retryDelays must contain at least one delay declaration\");\n        AssertUtil.assertTrue(Stream.of(retryDelays).noneMatch(l -> l == null || l < 0),\n                \"retryDelays must contain only non-negative integers\");\n        this.taskConfiguration.retryDelays = Collections\n                .unmodifiableList(Arrays.asList(retryDelays));\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#LambdaExpression#MethodInvocation#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)LambdaExpression)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the retry delays for this task. They will be used in sequence until the maximum number of retries are exceeded. If the maximum number of retries is bigger than the number of delays, the last delay will be repeated.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "177", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTaskBuilder.java", "methodName": "com.vmware.admiral.common.task.RetriableTaskBuilder.withRetryDelays", "methodParameterType": "List<Long>#", "methodParameterName": "retryDelays#", "methodBody": "public RetriableTaskBuilder<T> withRetryDelays(List<Long> retryDelays) {\n        assertTaskNotExecuted();\n        AssertUtil.assertNotNull(retryDelays, \"retryDelays\");\n        AssertUtil.assertTrue(retryDelays.size() > 0,\n                \"retryDelays must contain at least one delay declaration\");\n        AssertUtil.assertTrue(retryDelays.stream().noneMatch(l -> l == null || l < 0),\n                \"retryDelays must contain only non-negative integers\");\n        this.taskConfiguration.retryDelays = Collections.unmodifiableList(retryDelays);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#LambdaExpression#MethodInvocation#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)LambdaExpression)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the retry delays for this task. They will be used in sequence until the maximum number of retries are exceeded. If the maximum number of retries is bigger than the number of delays, the last delay will be repeated.", "call_func_name": ["com.vmware.admiral.common.task.RetriableTaskBuilder.assertTaskNotExecuted", "com.vmware.admiral.common.util.AssertUtil.assertNotNull", "java.util.List.size", "com.vmware.admiral.common.util.AssertUtil.assertTrue", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.noneMatch", "java.util.Collections.unmodifiableList"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.String"], [""], ["boolean", "java.lang.String"], [""], [""], ["java.util.function.Predicate"], ["java.util.List"]], "passed_comments": "/"}, {"index": "178", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTaskBuilder.java", "methodName": "com.vmware.admiral.common.task.RetriableTaskBuilder.withRetryDelaysTimeUnit", "methodParameterType": "TimeUnit#", "methodParameterName": "delaysTimeUnit#", "methodBody": "public RetriableTaskBuilder<T> withRetryDelaysTimeUnit(TimeUnit delaysTimeUnit) {\n        assertTaskNotExecuted();\n        AssertUtil.assertNotNull(delaysTimeUnit, \"delaysTimeUnit\");\n        this.taskConfiguration.retryDelaysTimeUnit = delaysTimeUnit;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the  {@link TimeUnit} of the retry delays.", "call_func_name": ["com.vmware.admiral.common.task.RetriableTaskBuilder.assertTaskNotExecuted", "com.vmware.admiral.common.util.AssertUtil.assertNotNull"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.String"]], "passed_comments": "/"}, {"index": "179", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTaskBuilder.java", "methodName": "com.vmware.admiral.common.task.RetriableTaskBuilder.withTaskFunction", "methodParameterType": "Function<RetriableTask<T>,DeferredResult<T>>#", "methodParameterName": "taskFunction#", "methodBody": "public RetriableTaskBuilder<T> withTaskFunction(\n            Function<RetriableTask<T>, DeferredResult<T>> taskFunction) {\n        assertTaskNotExecuted();\n        AssertUtil.assertNotNull(taskFunction, \"taskBody\");\n        this.taskConfiguration.taskFunction = taskFunction;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the task function for this task. This is a  {@link Function} that defines the taskexecution. When executed, it will receive a reference to the  {@link RetriableTask} instance.This instance can be used for example to prevent task retries in case of a non-retriable failure. If the the  {@link DeferredResult} returned by this function completes successfully,the task will be completed with its result. If that  {@link DeferredResult} fails or anexception is thrown during the evaluation of the function, the task will be retried as long as retries are not prevented and the maximum number of retries is not exceeded.", "call_func_name": ["com.vmware.admiral.common.task.RetriableTaskBuilder.assertTaskNotExecuted", "com.vmware.admiral.common.util.AssertUtil.assertNotNull"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.String"]], "passed_comments": "/"}, {"index": "180", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTaskBuilder.java", "methodName": "com.vmware.admiral.common.task.RetriableTaskBuilder.execute", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DeferredResult<T> execute() {\n        try {\n            validateTaskAndCalculateOptionalFields();\n        } catch (Throwable e) {\n            log(Level.WARNING, \"Could not execute retriable task '%s': %s.\",\n                    taskConfiguration.taskId, Utils.toString(e));\n            return DeferredResult.failed(e);\n        }\n\n        this.taskExecuted = true;\n        return new RetriableTask<>(taskConfiguration).execute();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#CatchClause#TryStatement#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)CatchClause)TryStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Execute the task.", "call_func_name": ["com.vmware.admiral.common.task.RetriableTaskBuilder.validateTaskAndCalculateOptionalFields", "com.vmware.xenon.common.Utils.toString", "com.vmware.admiral.common.task.RetriableTaskBuilder.log", "com.vmware.xenon.common.DeferredResult.failed", "com.vmware.admiral.common.task.RetriableTask.execute"], "call_func_parameter": [[""], ["java.lang.Throwable"], ["java.util.logging.Level", "java.lang.String", "java.lang.Object[]"], ["java.lang.Throwable"], [""]], "passed_comments": [{"com.vmware.admiral.common.task.RetriableTask.execute": "Execute this  {@link RetriableTask}. The returned  {@link DeferredResult} will either becompleted with the result of the task or failed with the reason for the failure."}]}, {"index": "181", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTask.java", "methodName": "com.vmware.admiral.common.task.RetriableTask.RetriableTask", "methodParameterType": "RetriableTaskConfiguration<T>#", "methodParameterName": "taskConfiguration#", "methodBody": "protected RetriableTask(RetriableTaskConfiguration<T> taskConfiguration) {\n        this.taskConfiguration = taskConfiguration;\n        this.retriesPrevented = new AtomicBoolean(false);\n        this.executed = new AtomicBoolean(false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#BooleanLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#BooleanLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Internal use constructor. Instances are supposed to be created through the {@link RetriableTaskBuilder}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "182", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTask.java", "methodName": "com.vmware.admiral.common.task.RetriableTask.preventRetries", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void preventRetries() {\n        preventRetries(true);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Prevents all following retries for this  {@link RetriableTask} even if the maximum number ofretries has not been exceeded.", "call_func_name": ["com.vmware.admiral.common.task.RetriableTask.preventRetries"], "call_func_parameter": [["boolean"]], "passed_comments": [{"com.vmware.admiral.common.task.RetriableTask.preventRetries": "Controls whether retries for this  {@link RetriableTask} are allowed or not. Even if theretries are not prevented, a failed  {@link RetriableTask} will not be retried when themaximum number of retries is exceeded."}]}, {"index": "183", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTask.java", "methodName": "com.vmware.admiral.common.task.RetriableTask.preventRetries", "methodParameterType": "boolean#", "methodParameterName": "preventRetries#", "methodBody": "public void preventRetries(boolean preventRetries) {\n        this.retriesPrevented.set(preventRetries);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Controls whether retries for this  {@link RetriableTask} are allowed or not. Even if theretries are not prevented, a failed  {@link RetriableTask} will not be retried when themaximum number of retries is exceeded.", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.set"], "call_func_parameter": [["boolean"]], "passed_comments": "/"}, {"index": "184", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTask.java", "methodName": "com.vmware.admiral.common.task.RetriableTask.areRetriesPrevented", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean areRetriesPrevented() {\n        return this.retriesPrevented.get();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns <code>true</code> if retries are prevented and <code>false</code> otherwise. Note that this check does not account for the number of remaining retries available.", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/task/RetriableTask.java", "methodName": "com.vmware.admiral.common.task.RetriableTask.execute", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DeferredResult<T> execute() {\n        if (executed.getAndSet(true)) {\n            preventRetries();\n            RetriableTaskException exception = new RetriableTaskException(\n                    String.format(\"Cannot execute task '%s': task has already been executed\",\n                            taskConfiguration.getTaskId()));\n            log(Level.WARNING, Utils.toString(exception));\n            return DeferredResult.failed(exception);\n        }\n\n        return executeRetriableTask(0, taskConfiguration);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Execute this  {@link RetriableTask}. The returned  {@link DeferredResult} will either becompleted with the result of the task or failed with the reason for the failure.", "call_func_name": ["java.util.concurrent.atomic.AtomicBoolean.getAndSet", "com.vmware.admiral.common.task.RetriableTask.preventRetries", "java.lang.String.format", "com.vmware.xenon.common.Utils.toString", "com.vmware.admiral.common.task.RetriableTask.log", "com.vmware.xenon.common.DeferredResult.failed"], "call_func_parameter": [["boolean"], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.Throwable"], ["java.util.logging.Level", "java.lang.String", "java.lang.Object[]"], ["java.lang.Throwable"]], "passed_comments": [{"com.vmware.admiral.common.task.RetriableTask.preventRetries": "Prevents all following retries for this  {@link RetriableTask} even if the maximum number ofretries has not been exceeded."}, {"com.vmware.admiral.common.task.RetriableTask.preventRetries": "Controls whether retries for this  {@link RetriableTask} are allowed or not. Even if theretries are not prevented, a failed  {@link RetriableTask} will not be retried when themaximum number of retries is exceeded."}]}, {"index": "186", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/serialization/ThreadLocalVersionHolder.java", "methodName": "com.vmware.admiral.common.serialization.ThreadLocalVersionHolder.clearVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void clearVersion() {\n        versionHolder.remove();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Clears the version associated with the current thread.", "call_func_name": ["java.lang.ThreadLocal.remove"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/serialization/ThreadLocalVersionHolder.java", "methodName": "com.vmware.admiral.common.serialization.ThreadLocalVersionHolder.getVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static String getVersion() {\n        return versionHolder.get();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the version associated with the current thread.", "call_func_name": ["java.lang.ThreadLocal.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/serialization/ThreadLocalVersionHolder.java", "methodName": "com.vmware.admiral.common.serialization.ThreadLocalVersionHolder.setVersion", "methodParameterType": "String#", "methodParameterName": "version#", "methodBody": "public static void setVersion(String version) {\n        if (version != null) {\n            versionHolder.set(version);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Associates the passed version with the current thread.", "call_func_name": ["java.lang.ThreadLocal.set"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "189", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/common/serialization/ThreadLocalVersionHolder.java", "methodName": "com.vmware.admiral.common.serialization.ThreadLocalVersionHolder.setVersion", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "public static void setVersion(Operation op) {\n        String acceptHeader = op.getRequestHeader(ACCEPT_HEADER);\n        String version = extractApiVersion(acceptHeader);\n        setVersion(version);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Associates the version included in the passed operation with the current thread.", "call_func_name": ["com.vmware.xenon.common.Operation.getRequestHeader", "com.vmware.admiral.common.serialization.ThreadLocalVersionHolder.extractApiVersion", "com.vmware.admiral.common.serialization.ThreadLocalVersionHolder.setVersion"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.vmware.admiral.common.serialization.ThreadLocalVersionHolder.setVersion": "Associates the passed version with the current thread."}]}, {"index": "190", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/host/HostInitCommonServiceConfig.java", "methodName": "com.vmware.admiral.host.HostInitCommonServiceConfig.waitCommonInitialBootInitialization", "methodParameterType": "ServiceHost#", "methodParameterName": "host#", "methodBody": "private static void waitCommonInitialBootInitialization(ServiceHost host) {\n        Throwable[] t = new Throwable[1];\n        CountDownLatch l = new CountDownLatch(1);\n        host.sendRequest(Operation\n                .createPost(UriUtils.buildUri(host, CommonInitialBootService.class))\n                .addPragmaDirective(Operation.PRAGMA_DIRECTIVE_QUEUE_FOR_SERVICE_AVAILABILITY)\n                .setReferer(host.getUri())\n                .setBody(new ServiceDocument())\n                .setCompletion((o, e) -> {\n                    try {\n                        if (e != null) {\n                            host.log(Level.SEVERE, \"Failure while waiting for service availability\"\n                                    + \" of common services: %s\", Utils.toString(e));\n                            t[0] = e;\n                            return;\n                        }\n                        host.log(Level.INFO, \"Waiting for service availability of common services\"\n                                + \" finished.\");\n                    } finally {\n                        l.countDown();\n                    }\n                }\n        ));\n        try {\n            if (!l.await(COMMON_SERVICES_AVAILABILITY_TIMEOUT, TimeUnit.SECONDS)) {\n                t[0] = new TimeoutException(\"Waiting for service availability of common services\"\n                        + \" timed out.\");\n                host.log(Level.SEVERE, \"Waiting for service availability of common services timed\"\n                                + \" out: %s\", t[0]);\n            }\n        } catch (InterruptedException e1) {\n            host.log(Level.SEVERE, \"Waiting for service availability of common services was\"\n                            + \" interrupted: %s\", Utils.toString(e1));\n            t[0] = e1;\n        }\n        if (t[0] != null) {\n            throw new RuntimeException(t[0]);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleType#StringLiteral#StringLiteral#InfixExpression#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#StringLiteral#InfixExpression#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#NumberLiteral#ArrayAccess#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#NumberLiteral#ArrayAccess#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Start initialization of system documents, posting with pragma to queue a request, for a service to become available", "call_func_name": ["java.util.concurrent.CountDownLatch.<init>", "com.vmware.xenon.common.UriUtils.buildUri", "com.vmware.xenon.common.Operation.createPost", "com.vmware.xenon.common.Operation.addPragmaDirective", "com.vmware.xenon.common.ServiceHost.getUri", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.xenon.common.ServiceDocument.<init>", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.ServiceHost.sendRequest", "java.util.concurrent.CountDownLatch.await", "java.util.concurrent.TimeoutException.<init>", "com.vmware.xenon.common.ServiceHost.log", "com.vmware.xenon.common.Utils.toString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["int"], ["com.vmware.xenon.common.ServiceHost", "java.lang.Class"], ["java.net.URI"], ["java.lang.String"], [""], ["java.net.URI"], [""], ["java.lang.Object"], ["com.vmware.xenon.common.Operation"], ["long", "java.util.concurrent.TimeUnit"], ["java.lang.String"], ["java.util.logging.Level", "java.lang.String", "java.lang.Object[]"], ["java.lang.Throwable"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/host/interceptor/OperationInterceptorRegistry.java", "methodName": "com.vmware.admiral.host.interceptor.OperationInterceptorRegistry.addServiceInterceptor", "methodParameterType": "Class<? extends Service>#Action#BiFunction<Service,Operation,DeferredResult<Void>>#", "methodParameterName": "serviceType#action#interceptor#", "methodBody": "public void addServiceInterceptor(Class<? extends Service> serviceType, Action action,\n            BiFunction<Service, Operation, DeferredResult<Void>> interceptor) {\n        InterceptorData data = new InterceptorData();\n        data.action = action;\n        data.interceptor = interceptor;\n        this.serviceInterceptors.computeIfAbsent(serviceType, s -> new ArrayList<>()).add(data);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Register a service interceptor for the given service type and http action.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/host/interceptor/OperationInterceptorRegistry.java", "methodName": "com.vmware.admiral.host.interceptor.OperationInterceptorRegistry.addFactoryServiceInterceptor", "methodParameterType": "Class<? extends Service>#Action#BiFunction<Service,Operation,DeferredResult<Void>>#", "methodParameterName": "serviceInstanceType#action#interceptor#", "methodBody": "public void addFactoryServiceInterceptor(Class<? extends Service> serviceInstanceType,\n            Action action, BiFunction<Service, Operation, DeferredResult<Void>> interceptor) {\n        InterceptorData data = new InterceptorData();\n        data.action = action;\n        data.interceptor = interceptor;\n        this.factoryServiceInterceptors.computeIfAbsent(\n                serviceInstanceType, s -> new ArrayList<>()).add(data);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Register a factory service interceptor for the given instance service type and http action.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/host/interceptor/OperationInterceptorRegistry.java", "methodName": "com.vmware.admiral.host.interceptor.OperationInterceptorRegistry.subscribeToService", "methodParameterType": "Service#", "methodParameterName": "service#", "methodBody": "public void subscribeToService(Service service) {\n        Collection<InterceptorData> interceptors = checkForInterceptor(service);\n        if (interceptors != null) {\n            OperationProcessingChain chain = getServiceOperationProcessingChain(service);\n            for (InterceptorData data : interceptors) {\n                DeferredOperationPredicate filter = new DeferredOperationPredicate(service,\n                        data.action,\n                        data.interceptor);\n                filter.init();\n                chain.getFilters().add(filter);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Checks whether there are registered interceptors for the given service, and if there are, adds them to the operation processing chain of the service.", "call_func_name": ["com.vmware.admiral.host.interceptor.OperationInterceptorRegistry.checkForInterceptor", "com.vmware.admiral.host.interceptor.OperationInterceptorRegistry.getServiceOperationProcessingChain", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.vmware.admiral.host.interceptor.DeferredOperationPredicate.init", "com.vmware.xenon.common.OperationProcessingChain.getFilters", "java.util.List.add"], "call_func_parameter": [["com.vmware.xenon.common.Service"], ["com.vmware.xenon.common.Service"], [""], [""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos30/admiral/common/src/main/java/com/vmware/admiral/host/interceptor/DeferredOperationPredicate.java", "methodName": "com.vmware.admiral.host.interceptor.DeferredOperationPredicate.DeferredOperationPredicate", "methodParameterType": "Service#Action#BiFunction<Service,Operation,DeferredResult<Void>>#", "methodParameterName": "service#action#predicate#", "methodBody": "public DeferredOperationPredicate(Service service, Action action,\n            BiFunction<Service, Operation, DeferredResult<Void>> predicate) {\n        this.service = service;\n        this.action = action;\n        this.predicate = predicate;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/PhotonModelMetricServices.java", "methodName": "com.vmware.photon.controller.model.PhotonModelMetricServices.setFactoryToAvailable", "methodParameterType": "ServiceHost#String#", "methodParameterName": "host#factoryPath#", "methodBody": "public static void setFactoryToAvailable(ServiceHost host, String factoryPath) {\n        setFactoryToAvailable(host, factoryPath, null);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see #setFactoryToAvailable(ServiceHost,String,Operation.CompletionHandler)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/PhotonModelMetricServices.java", "methodName": "com.vmware.photon.controller.model.PhotonModelMetricServices.setFactoryToAvailable", "methodParameterType": "ServiceHost#String#Operation.CompletionHandler#", "methodParameterName": "host#factoryPath#handler#", "methodBody": "public static void setFactoryToAvailable(ServiceHost host, String factoryPath, Operation.CompletionHandler handler) {\n        ServiceStats.ServiceStat body = new ServiceStats.ServiceStat();\n        body.name = Service.STAT_NAME_AVAILABLE;\n        body.latestValue = Service.STAT_VALUE_TRUE;\n\n        Operation put = Operation.createPut(UriUtils.buildAvailableUri(host, factoryPath))\n                .setBody(body)\n                .setCompletion(handler)\n                .setReferer(host.getUri());\n        host.sendRequest(put);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Helper method to explicitly set a factory to be \"available\". This is usually unnecessary, but currently factories that create  {@code ON_DEMAND_LOAD} services are not being set toavailable... and currently require this work-around.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/TaskUtils.java", "methodName": "com.vmware.photon.controller.model.tasks.TaskUtils.isValidInetAddress", "methodParameterType": "String#", "methodParameterName": "IP#", "methodBody": "public static void isValidInetAddress(String IP) throws IllegalArgumentException {\n\n        // Opened issue #84 to track proper validation\n        if (IP == null || IP.isEmpty()) {\n            throw new IllegalArgumentException(\"IP is missing or empty\");\n        }\n\n        if (IP.contains(\":\")) {\n            // implement IPv6 validation\n        } else {\n            String[] segments = IP.split(\"\\\\.\");\n            if (segments.length != 4) {\n                throw new IllegalArgumentException(\"IP does not appear valid:\" + IP);\n            }\n            // it appears to be literal IP, its safe to use the getByName method\n            try {\n                InetAddress.getByName(IP);\n            } catch (UnknownHostException e) {\n                throw new IllegalArgumentException(e);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#Block#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block)Block(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Verify if IP string is an IPv4 address.", "call_func_name": ["java.lang.String.isEmpty", "java.lang.IllegalArgumentException.<init>", "java.lang.String.contains", "java.lang.String.split", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.net.InetAddress.getByName", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.CharSequence"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/TaskUtils.java", "methodName": "com.vmware.photon.controller.model.tasks.TaskUtils.normalizeMac", "methodParameterType": "String#", "methodParameterName": "mac#", "methodBody": "public static String normalizeMac(String mac) throws IllegalArgumentException {\n        mac = mac.replaceAll(\"[:-]\", \"\");\n        mac = mac.toLowerCase();\n        return mac;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Translate a MAC to its canonical format.", "call_func_name": ["java.lang.String.replaceAll", "java.lang.String.toLowerCase"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""]], "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/TaskUtils.java", "methodName": "com.vmware.photon.controller.model.tasks.TaskUtils.isCIDR", "methodParameterType": "String#", "methodParameterName": "network#", "methodBody": "public static void isCIDR(String network) throws IllegalArgumentException {\n        String[] hostMask = network.split(\"/\");\n        if (hostMask.length != 2) {\n            throw new IllegalArgumentException(\"subnetAddress is not a CIDR\");\n        }\n\n        isValidInetAddress(hostMask[0]);\n\n        // Mask must be < 32\n        if (Integer.parseUnsignedInt(hostMask[1]) > 32) {\n            throw new IllegalArgumentException(\"CIDR mask may not be larger than 32\");\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Verify if CIDR string is a valid CIDR address.", "call_func_name": ["java.lang.String.split", "java.lang.IllegalArgumentException.<init>", "com.vmware.photon.controller.model.tasks.TaskUtils.isValidInetAddress", "java.lang.Integer.parseUnsignedInt"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.vmware.photon.controller.model.tasks.TaskUtils.isValidInetAddress": "Verify if IP string is an IPv4 address."}]}, {"index": "200", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/TaskUtils.java", "methodName": "com.vmware.photon.controller.model.tasks.TaskUtils.sendPatch", "methodParameterType": "StatefulService#Object#", "methodParameterName": "service#body#", "methodBody": "public static void sendPatch(StatefulService service, Object body) {\n        Operation patch = Operation\n                .createPatch(service.getUri())\n                .setBody(body);\n        service.sendRequest(patch);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Issue a patch request to the specified service", "call_func_name": ["com.vmware.xenon.common.StatefulService.getUri", "com.vmware.xenon.common.Operation.createPatch", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.StatefulService.sendRequest"], "call_func_parameter": [[""], ["java.net.URI"], ["java.lang.Object"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "201", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/TaskUtils.java", "methodName": "com.vmware.photon.controller.model.tasks.TaskUtils.sendFailurePatch", "methodParameterType": "StatefulService#TaskServiceState#Collection<Throwable>#", "methodParameterName": "service#taskState#tList#", "methodBody": "public static void sendFailurePatch(StatefulService service, TaskServiceState taskState,\n            Collection<Throwable> tList) {\n        Throwable errorToPatch = null;\n        for (Throwable t : tList) {\n            errorToPatch = t;\n            service.logWarning(() -> String.format(\"Operation failed: %s\", Utils.toString(t)));\n        }\n        sendFailurePatch(service, taskState, errorToPatch);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Patch a service to failure after logging all errors", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "202", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/TaskUtils.java", "methodName": "com.vmware.photon.controller.model.tasks.TaskUtils.sendFailurePatch", "methodParameterType": "StatefulService#TaskServiceState#Throwable#", "methodParameterName": "service#taskState#t#", "methodBody": "public static void sendFailurePatch(StatefulService service, TaskServiceState taskState,\n            Throwable t) {\n        TaskState state = new TaskState();\n        state.stage = TaskStage.FAILED;\n        state.failure = Utils.toServiceErrorResponse(t);\n        service.logWarning(() -> String.format(\"Operation failed: %s\", Utils.toString(t)));\n        taskState.taskInfo = state;\n        sendPatch(service, taskState);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Patch a service to failure", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "203", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/TaskUtils.java", "methodName": "com.vmware.photon.controller.model.tasks.TaskUtils.createTaskState", "methodParameterType": "TaskStage#", "methodParameterName": "stage#", "methodBody": "public static TaskState createTaskState(TaskStage stage) {\n        TaskState tState = new TaskState();\n        tState.stage = stage;\n        return tState;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a TaskState object with the specified stage", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/TaskUtils.java", "methodName": "com.vmware.photon.controller.model.tasks.TaskUtils.handleSubscriptionNotifications", "methodParameterType": "StatefulService#Operation#String#TaskState#int#Object#Set<String>#boolean#", "methodParameterName": "service#update#notificationTaskLink#opTaskState#expectedNotificationCount#returnState#finishedTaskLinks#deleteTask#", "methodBody": "public static void handleSubscriptionNotifications(StatefulService service, Operation update,\n            String notificationTaskLink, TaskState opTaskState,\n            int expectedNotificationCount, Object returnState, Set<String> finishedTaskLinks,\n            boolean deleteTask) {\n        int finishedTaskCount;\n\n        update.complete();\n\n        if ((update.getAction() != Action.PATCH && update.getAction() != Action.PUT)) {\n            return;\n        }\n\n        // Fail if task was cancelled or has failed\n        if (TaskState.isCancelled(opTaskState)\n                || TaskState.isFailed(opTaskState)) {\n            if (update.getBodyRaw() != null) {\n                sendFailureSelfPatch(service,\n                        new IllegalStateException(\"Operation failed:\"\n                                + Utils.toJson(update.getBodyRaw())));\n            } else {\n                sendFailureSelfPatch(service,\n                        new IllegalStateException(\"Operation failed:\"\n                                + \"Operation cancelled or failed while deleting computes\"));\n            }\n\n            if (deleteTask) {\n                service.sendRequest(Operation\n                        .createDelete(\n                                service, notificationTaskLink)\n                        .setBody(new ServiceDocument()));\n            }\n            return;\n        }\n\n        // Ignore if task has not finished yet\n        if (!TaskState.isFinished(opTaskState)) {\n            return;\n        }\n\n        // Ignore if task has already been seen\n        synchronized (finishedTaskLinks) {\n            if (!finishedTaskLinks.add(notificationTaskLink)) {\n                return;\n            }\n\n            // Retrieve size in synchronized block to prevent racing\n            finishedTaskCount = finishedTaskLinks.size();\n        }\n\n        Operation deleteOp = Operation.createDelete(service, notificationTaskLink)\n                .setReferer(service.getUri())\n                .setCompletion(\n                        (delOp, delEx) -> {\n                            if (delEx != null) {\n                                service.logWarning(() -> String.format(\"Stopping subscriber failed\"\n                                                + \" %s\", Utils.toString(delEx)));\n                                return;\n                            }\n                        });\n        service.getHost().stopSubscriptionService(deleteOp,\n                UriUtils.buildPublicUri(service.getHost(), update.getUri().getPath()));\n\n        if (deleteTask) {\n            service.sendRequest(Operation\n                    .createDelete(\n                            service, notificationTaskLink)\n                    .setBody(new ServiceDocument()));\n        }\n\n        // patch service with return state when we have seen all tasks finish\n        if (finishedTaskCount == expectedNotificationCount) {\n            // Patch back the return state\n            sendPatch(service, returnState);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#StringLiteral#InfixExpression#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SynchronizedStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(ParenthesizedExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ParenthesizedExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)SynchronizedStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "handle subscriptions from multiple services 1. Mark operation as complete 2. If the operation is not PUT or POST, return 3. If the task has failed, send failure patch to service 4. Update the list of services from which we have received notification 5. Unsubscribe from notifications, optionally delete the task that raised the notification 6. If we have received the expected number of notifications, patch the next state back", "call_func_name": ["com.vmware.xenon.common.Operation.complete", "com.vmware.xenon.common.Operation.getAction", "com.vmware.xenon.common.TaskState.isCancelled", "com.vmware.xenon.common.TaskState.isFailed", "com.vmware.xenon.common.Operation.getBodyRaw", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.vmware.xenon.common.Utils.toJson", "java.lang.StringBuilder.toString", "java.lang.IllegalStateException.<init>", "com.vmware.photon.controller.model.tasks.TaskUtils.sendFailureSelfPatch", "com.vmware.xenon.common.Operation.createDelete", "com.vmware.xenon.common.ServiceDocument.<init>", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.StatefulService.sendRequest", "com.vmware.xenon.common.TaskState.isFinished", "java.util.Set.add", "java.util.Set.size", "com.vmware.xenon.common.StatefulService.getUri", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.xenon.common.StatefulService.getHost", "com.vmware.xenon.common.Operation.getUri", "java.net.URI.getPath", "com.vmware.xenon.common.UriUtils.buildPublicUri", "com.vmware.xenon.common.ServiceHost.stopSubscriptionService", "com.vmware.photon.controller.model.tasks.TaskUtils.sendPatch"], "call_func_parameter": [[""], [""], ["com.vmware.xenon.common.TaskState"], ["com.vmware.xenon.common.TaskState"], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["com.vmware.xenon.common.StatefulService", "java.lang.Throwable"], ["com.vmware.xenon.common.Service", "java.lang.String"], [""], ["java.lang.Object"], ["com.vmware.xenon.common.Operation"], ["com.vmware.xenon.common.TaskState"], ["java.lang.Object"], [""], [""], ["java.net.URI"], [""], [""], [""], ["com.vmware.xenon.common.ServiceHost", "java.lang.String[]"], ["com.vmware.xenon.common.Operation", "java.net.URI"], ["com.vmware.xenon.common.StatefulService", "java.lang.Object"]], "passed_comments": [{"com.vmware.photon.controller.model.tasks.TaskUtils.sendFailureSelfPatch": "Send a failure patch to the specified service"}, {"com.vmware.photon.controller.model.tasks.TaskUtils.sendPatch": "Issue a patch request to the specified service"}]}, {"index": "205", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/TaskUtils.java", "methodName": "com.vmware.photon.controller.model.tasks.TaskUtils.sendFailureSelfPatch", "methodParameterType": "StatefulService#Throwable#", "methodParameterName": "service#e#", "methodBody": "private static void sendFailureSelfPatch(StatefulService service, Throwable e) {\n        // It looks like Xenon can't handle correctly serializing abstract classes, so we have to\n        // use a simple class which extend the abstract.\n        StatefulTaskDocument body = new StatefulTaskDocument();\n        body.taskInfo = new TaskState();\n        body.taskInfo.stage = TaskStage.FAILED;\n        body.taskInfo.failure = Utils.toServiceErrorResponse(e);\n        service.logWarning(() -> String.format(\"Operation failed: %s\", Utils.toString(e)));\n        sendPatch(service, body);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Send a failure patch to the specified service", "call_func_name": ["com.vmware.xenon.common.TaskState.<init>", "com.vmware.xenon.common.Utils.toServiceErrorResponse", "java.util.function.Supplier.get", "com.vmware.xenon.common.StatefulService.logWarning", "com.vmware.photon.controller.model.tasks.TaskUtils.sendPatch"], "call_func_parameter": [[""], ["java.lang.Throwable"], ["java.lang.Throwable"], ["java.util.function.Supplier"], ["com.vmware.xenon.common.StatefulService", "java.lang.Object"]], "passed_comments": [{"com.vmware.photon.controller.model.tasks.TaskUtils.sendPatch": "Issue a patch request to the specified service"}]}, {"index": "206", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/TaskUtils.java", "methodName": "com.vmware.photon.controller.model.tasks.TaskUtils.assumeIdentity", "methodParameterType": "StatefulService#Operation#String#", "methodParameterName": "service#op#userServicePath#", "methodBody": "public static void assumeIdentity(StatefulService service, Operation op,\n            String userServicePath)\n            throws GeneralSecurityException {\n        Claims.Builder builder = new Claims.Builder();\n        builder.setSubject(userServicePath);\n        Claims claims = builder.getResult();\n        String token = service.getTokenSigner().sign(claims);\n\n        // Setting the AuthContext to null, so that xenon uses the token instead.\n        service.setAuthorizationContext(op, null);\n        op.addRequestHeader(Operation.REQUEST_AUTH_TOKEN_HEADER, token);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Inject user identity into operation context.", "call_func_name": ["com.vmware.xenon.common.StatefulService.getTokenSigner", "com.vmware.xenon.common.jwt.Signer.sign", "com.vmware.xenon.common.Operation.addRequestHeader"], "call_func_parameter": [[""], ["com.vmware.xenon.common.jwt.Rfc7519Claims"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "207", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ImageEnumerationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ImageEnumerationTaskService.validateStartPost", "methodParameterType": "Operation#", "methodParameterName": "startOp#", "methodBody": "@Override\n    protected ImageEnumerationTaskState validateStartPost(Operation startOp) {\n\n        // NOTE: This MUST go first!\n        // Delegate to default/parent validation\n        ImageEnumerationTaskState taskState = super.validateStartPost(startOp);\n\n        // Do annotation based validation\n        if (taskState != null) {\n            try {\n                // Default validation\n                Utils.validateState(getStateDescription(), taskState);\n\n                if (!taskState.enumeratePrivateImages() && !taskState.enumeratePublicImages()) {\n                    throw new IllegalArgumentException(\n                            \"Either \" + ImageEnumerationTaskState.class.getSimpleName()\n                                    + \".\" + ImageEnumerationTaskState.FIELD_NAME_ENDPOINT_TYPE +\n                                    \" or \" + ImageEnumerationTaskState.class.getSimpleName()\n                                    + \".\" + ImageEnumerationTaskState.FIELD_NAME_ENDPOINT_LINK +\n                                    \" must be set.\");\n                }\n                if (taskState.enumeratePrivateImages() && taskState.enumeratePublicImages()) {\n                    throw new IllegalArgumentException(\n                            \"Both \" + ImageEnumerationTaskState.class.getSimpleName()\n                                    + \".\" + ImageEnumerationTaskState.FIELD_NAME_ENDPOINT_TYPE +\n                                    \" and \" + ImageEnumerationTaskState.class.getSimpleName()\n                                    + \".\" + ImageEnumerationTaskState.FIELD_NAME_ENDPOINT_LINK +\n                                    \" cannot be set.\");\n                }\n\n                if (!isNullOrEmpty(taskState.regionId)) {\n                    assertTrue(\n                            taskState.enumeratePublicImages(),\n                            ImageEnumerationTaskState.class.getSimpleName()\n                                    + \".\" + ImageEnumerationTaskState.FIELD_NAME_REGION_ID +\n                                    \" must be used in conjunction with \"\n                                    + ImageEnumerationTaskState.class.getSimpleName()\n                                    + \".\" + ImageEnumerationTaskState.FIELD_NAME_ENDPOINT_TYPE\n                                    + \".\");\n                }\n            } catch (Throwable t) {\n                startOp.fail(t);\n                taskState = null;\n            }\n        }\n        return taskState;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Customize the validation logic that's part of initial  {@code POST} creating the task service.", "call_func_name": ["com.vmware.photon.controller.model.tasks.ImageEnumerationTaskService.validateStartPost"], "call_func_parameter": [["com.vmware.xenon.common.Operation"]], "passed_comments": [{"com.vmware.photon.controller.model.tasks.ImageEnumerationTaskService.validateStartPost": "Customize the validation logic that's part of initial  {@code POST} creating the task service."}]}, {"index": "208", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ImageEnumerationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ImageEnumerationTaskService.initializeState", "methodParameterType": "ImageEnumerationTaskState#Operation#", "methodParameterName": "startState#startOp#", "methodBody": "@Override\n    protected void initializeState(ImageEnumerationTaskState startState, Operation startOp) {\n\n        if (startState.options == null) {\n            startState.options = EnumSet.noneOf(TaskOption.class);\n        }\n\n        if (startState.taskInfo == null || startState.taskInfo.stage == null) {\n            startState.taskInfo = new TaskState();\n            startState.taskInfo.stage = TaskState.TaskStage.CREATED;\n        }\n\n        if (startState.documentExpirationTimeMicros <= 0) {\n            setExpiration(startState, DEFAULT_EXPIRATION_MINUTES, TimeUnit.MINUTES);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Customize the initialization logic (set the task with default values) that's part of initial {@code POST} creating the task service.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "209", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ImageEnumerationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ImageEnumerationTaskService.validateTransition", "methodParameterType": "Operation#ImageEnumerationTaskState#ImageEnumerationTaskState#", "methodParameterName": "patchOp#currentState#patchState#", "methodBody": "@Override\n    protected boolean validateTransition(\n            Operation patchOp,\n            ImageEnumerationTaskState currentState,\n            ImageEnumerationTaskState patchState) {\n\n        boolean ok = super.validateTransition(patchOp, currentState, patchState);\n\n        if (ok) {\n            if (currentState.taskInfo.stage == TaskStage.STARTED\n                    && patchState.taskInfo.stage == TaskStage.STARTED) {\n                patchOp.fail(new IllegalArgumentException(\"Cannot start task again\"));\n                return false;\n            }\n        }\n\n        return ok;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Customize the validation transition logic that's part of  {@code PATCH} request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "210", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ImageEnumerationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ImageEnumerationTaskService.handleTaskCompleted", "methodParameterType": "ImageEnumerationTaskState#", "methodParameterName": "taskState#", "methodBody": "private void handleTaskCompleted(ImageEnumerationTaskState taskState) {\n        if (taskState.options.contains(TaskOption.SELF_DELETE_ON_COMPLETION)) {\n            sendWithDeferredResult(Operation.createDelete(getUri()))\n                    .whenComplete((o, e) -> {\n                        if (e != null) {\n                            logSevere(\n                                    () -> String.format(\"Self-delete upon %s stage: FAILED with %s\",\n                                            taskState.taskInfo.stage, Utils.toString(e)));\n                        } else {\n                            logFine(() -> String.format(\"Self-delete upon %s stage: SUCCESS\",\n                                    taskState.taskInfo.stage));\n                        }\n                    });\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Self delete this task if specified through  {@link TaskOption#SELF_DELETE_ON_COMPLETION}option.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "211", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ImageEnumerationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ImageEnumerationTaskService.sendImageEnumerationAdapterRequest", "methodParameterType": "ImageEnumerationTaskState#", "methodParameterName": "taskState#", "methodBody": "private void sendImageEnumerationAdapterRequest(ImageEnumerationTaskState taskState) {\n\n        SendImageEnumerationAdapterContext context = new SendImageEnumerationAdapterContext();\n        context.taskState = taskState;\n\n        DeferredResult.completed(context)\n                // get the EndpointState from ImageEnumerationTaskState#endpointLink\n                .thenCompose(this::getEndpointState)\n\n                .thenCompose(ctx -> {\n                    if (ctx.endpointState == null) {\n                        // If no end-points are found then delete all public images of this EP type\n                        logFine(() -> String.format(\n                                \"NO '%s' endpoints found so skip the enumeration and delete Public images\",\n                                context.taskState.endpointType));\n\n                        return DeferredResult.completed(ctx)\n                                .thenCompose(this::deletePublicImagesByEndpointType)\n                                .thenCompose(this::sendSelfFinishedPatchDR);\n                    }\n\n                    return DeferredResult.completed(ctx)\n                            // get the 'image-enumeration' URI for passed end-point\n                            .thenCompose(this::getImageEnumerationAdapterReference)\n                            // call 'image-enumeration' adapter\n                            .thenCompose(this::callImageEnumerationAdapter);\n                })\n\n                .whenComplete((op, exc) -> {\n                    if (exc != null) {\n                        // If any of above steps failed sendSelfFailurePatch\n                        logFine(() -> String.format(\n                                \"FAILED: sendImageEnumerationAdapterRequest - %s\",\n                                Utils.toString(exc.getCause())));\n\n                        sendSelfFailurePatch(taskState, exc.getCause().getMessage());\n                    } else {\n                        logFine(\"SUCCESS: sendImageEnumerationAdapterRequest\");\n                    }\n                });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delegate image enumeration to the adapter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "212", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ImageEnumerationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ImageEnumerationTaskService.getEndpointState", "methodParameterType": "SendImageEnumerationAdapterContext#", "methodParameterName": "ctx#", "methodBody": "private DeferredResult<SendImageEnumerationAdapterContext> getEndpointState(\n            SendImageEnumerationAdapterContext ctx) {\n\n        if (ctx.taskState.enumeratePrivateImages()) {\n\n            return getEndpointStateByLink(ctx);\n        }\n\n        if (ctx.taskState.enumeratePublicImages()) {\n\n            return getEndpointStateByType(ctx);\n        }\n\n        // This MUST not happen due to task-state validation.\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the  {@link EndpointState} either by type or by link.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "213", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ImageEnumerationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ImageEnumerationTaskService.getEndpointStateByLink", "methodParameterType": "SendImageEnumerationAdapterContext#", "methodParameterName": "ctx#", "methodBody": "private DeferredResult<SendImageEnumerationAdapterContext> getEndpointStateByLink(\n            SendImageEnumerationAdapterContext ctx) {\n\n        Operation op = Operation.createGet(this, ctx.taskState.endpointLink);\n\n        return sendWithDeferredResult(op, EndpointState.class).thenApply(epState -> {\n\n            ctx.endpointState = epState;\n\n            logFine(() -> String.format(\n                    \"SUCCESS: '%s' EndpointState of '%s' type\",\n                    ctx.endpointState.name,\n                    ctx.endpointState.endpointType));\n\n            return ctx;\n        });\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolve specific End-point by link.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "214", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ImageEnumerationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ImageEnumerationTaskService.getEndpointStateByType", "methodParameterType": "SendImageEnumerationAdapterContext#", "methodParameterName": "ctx#", "methodBody": "private DeferredResult<SendImageEnumerationAdapterContext> getEndpointStateByType(\n            SendImageEnumerationAdapterContext ctx) {\n\n        QueryStrategy<EndpointState> queryEndpointsByType = new QueryTop<>(\n                getHost(),\n                endpointsByTypeQuery(ctx).build(),\n                EndpointState.class,\n                null).setMaxResultsLimit(1);\n\n        return queryEndpointsByType.collectDocuments(Collectors.toList()).thenApply(epStates -> {\n\n            final String regionStr = isNullOrEmpty(ctx.taskState.regionId)\n                    ? \"n/a\"\n                    : ctx.taskState.regionId;\n\n            Optional<EndpointState> epState = epStates.stream().findFirst();\n\n            if (epState.isPresent()) {\n                ctx.endpointState = epState.get();\n\n                logFine(() -> String.format(\n                        \"SUCCESS: '%s' EndpointState for (type=%s,region=%s)\",\n                        ctx.endpointState.name,\n                        ctx.taskState.endpointType,\n                        regionStr));\n            } else {\n                logInfo(() -> String.format(\n                        \"SUCCESS: NO EndpointState for (type=%s,region=%s)\",\n                        ctx.taskState.endpointType,\n                        regionStr));\n            }\n\n            return ctx;\n        });\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#NullLiteral#ClassInstanceCreation#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(NullLiteral)NullLiteral)ClassInstanceCreation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Pick arbitrary End-point of passed end-point type and optionally region.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "215", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ImageEnumerationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ImageEnumerationTaskService.getImageEnumerationAdapterReference", "methodParameterType": "SendImageEnumerationAdapterContext#", "methodParameterName": "ctx#", "methodBody": "private DeferredResult<SendImageEnumerationAdapterContext> getImageEnumerationAdapterReference(\n            SendImageEnumerationAdapterContext ctx) {\n\n        // We use 'endpointType' (such as aws, azure) as AdapterConfig id/selfLink!\n        String uri = buildUriPath(\n                PhotonModelAdaptersRegistryService.FACTORY_LINK, ctx.endpointState.endpointType);\n\n        Operation getEndpointConfigOp = Operation.createGet(this, uri);\n\n        return sendWithDeferredResult(getEndpointConfigOp, PhotonModelAdapterConfig.class)\n                .thenApply(endpointConfig -> {\n                    // Lookup the 'image-enumeration' URI for passed end-point\n                    if (endpointConfig.adapterEndpoints != null) {\n\n                        String uriStr = endpointConfig.adapterEndpoints.get(\n                                AdapterTypePath.IMAGE_ENUMERATION_ADAPTER.key);\n\n                        if (uriStr != null && !uriStr.isEmpty()) {\n                            ctx.adapterRef = URI.create(uriStr);\n                        }\n                    }\n\n                    logFine(() -> String.format(\"SUCCESS: getImageEnumerationAdapterReference [%s]\",\n                            ctx.adapterRef));\n\n                    return ctx;\n                });\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Go to  {@link PhotonModelAdaptersRegistryService Service Registry} and get the'image-enumeration' URI for passed end-point.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "216", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ImageEnumerationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ImageEnumerationTaskService.callImageEnumerationAdapter", "methodParameterType": "SendImageEnumerationAdapterContext#", "methodParameterName": "ctx#", "methodBody": "private DeferredResult<SendImageEnumerationAdapterContext> callImageEnumerationAdapter(\n            SendImageEnumerationAdapterContext ctx) {\n\n        if (ctx.adapterRef == null) {\n            // No 'image-enumeration' URI registered for passed end-point\n            return DeferredResult.failed(new IllegalStateException(\n                    String.format(\"No '%s' URI registered by '%s' end-point.\",\n                            AdapterTypePath.IMAGE_ENUMERATION_ADAPTER.key,\n                            ctx.taskState.endpointType)));\n        }\n\n        // Create 'image-enumeration' adapter request\n        final ImageEnumerateRequest adapterReq = new ImageEnumerateRequest();\n\n        // Set ImageEnumerateRequest specific params\n        adapterReq.enumerationAction = ctx.taskState.enumerationAction;\n        if (ctx.taskState.enumeratePrivateImages()) {\n            adapterReq.requestType = ImageEnumerateRequestType.PRIVATE;\n        } else if (ctx.taskState.enumeratePublicImages()) {\n            adapterReq.requestType = ImageEnumerateRequestType.PUBLIC;\n        }\n\n        // Set generic ResourceRequest params\n\n        // The end-point is ALWAYS set regardless of Private/Public enum type\n        // In case of Public, end-point credentials are used to run the enumeration\n        adapterReq.resourceReference = buildUri(getHost(), ctx.endpointState.documentSelfLink);\n        adapterReq.taskReference = buildUri(getHost(), ctx.taskState.documentSelfLink);\n        adapterReq.isMockRequest = ctx.taskState.options.contains(TaskOption.IS_MOCK);\n\n        Operation callAdapterOp = Operation.createPatch(ctx.adapterRef).setBody(adapterReq);\n\n        return sendWithDeferredResult(callAdapterOp).thenApply(op -> {\n\n            logFine(() -> String.format(\"SUCCESS: callImageEnumerationAdapter [%s]\",\n                    op.getUri()));\n\n            return ctx;\n        });\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Call 'image-enumeration' adapter if registered by the end-point OR fail if not registered.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "217", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ResourceRemovalTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ResourceRemovalTaskService.createSubTaskForDeleteCallbacks", "methodParameterType": "ResourceRemovalTaskState#QueryTask#Consumer<String>#", "methodParameterName": "currentState#queryTask#subTaskLinkConsumer#", "methodBody": "private void createSubTaskForDeleteCallbacks(ResourceRemovalTaskState currentState,\n            QueryTask queryTask, Consumer<String> subTaskLinkConsumer) {\n\n        ServiceTaskCallback<SubStage> callback = ServiceTaskCallback\n                .create(UriUtils.buildPublicUri(getHost(), getSelfLink()));\n        if (queryTask.results.nextPageLink != null) {\n            callback.onSuccessTo(SubStage.ISSUE_ADAPTER_DELETES)\n                    .addProperty(ResourceRemovalTaskState.FIELD_NAME_NEXT_PAGE_LINK,\n                            queryTask.results.nextPageLink);\n        } else {\n            callback.onSuccessTo(SubStage.DELETE_DOCUMENTS);\n        }\n\n        SubTaskService.SubTaskState<SubStage> subTaskInitState = new SubTaskService.SubTaskState<SubStage>();\n\n        // tell the sub task with what to patch us, on completion\n        subTaskInitState.serviceTaskCallback = callback;\n        subTaskInitState.completionsRemaining = queryTask.results.documentLinks.size();\n        subTaskInitState.errorThreshold = currentState.errorThreshold;\n        subTaskInitState.tenantLinks = currentState.tenantLinks;\n        subTaskInitState.documentExpirationTimeMicros = currentState.documentExpirationTimeMicros;\n        Operation startPost = Operation\n                .createPost(this, SubTaskService.FACTORY_LINK)\n                .setBody(subTaskInitState)\n                .setCompletion(\n                        (o, e) -> {\n                            if (e != null) {\n                                logWarning(() -> String.format(\"Failure creating sub task: %s\",\n                                        Utils.toString(e)));\n                                sendFailureSelfPatch(e);\n                                return;\n                            }\n                            SubTaskService.SubTaskState<?> body = o\n                                    .getBody(SubTaskService.SubTaskState.class);\n\n                            subTaskLinkConsumer.accept(body.documentSelfLink);\n                        });\n        sendRequest(startPost);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Before we proceed with issuing DELETE requests to the instance services we must create a sub task that will track the DELETE completions. The instance service will issue a PATCH with TaskStage.FINISHED, for every PATCH we send it, to delete the compute resource", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "218", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/EndpointRemovalTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.EndpointRemovalTaskService.doInstanceDeletes", "methodParameterType": "EndpointRemovalTaskState#SubStage#", "methodParameterName": "currentState#next#", "methodBody": "private void doInstanceDeletes(EndpointRemovalTaskState currentState, SubStage next) {\n        EndpointState endpoint = currentState.endpoint;\n\n        Operation crdOp = Operation.createDelete(this, endpoint.authCredentialsLink);\n        Operation cdsOp = Operation.createDelete(this, endpoint.computeDescriptionLink);\n        Operation csOp = Operation.createDelete(this, endpoint.computeLink);\n        Operation epOp = Operation.createDelete(this, endpoint.documentSelfLink);\n        // custom header identifier for endpoint service to validate before deleting endpoint\n        epOp.addRequestHeader(ENDPOINT_REMOVAL_REQUEST_REFERRER_NAME,\n                ENDPOINT_REMOVAL_REQUEST_REFERRER_VALUE);\n\n        OperationJoin.create(crdOp, cdsOp, csOp, epOp).setCompletion((ops, exc) -> {\n            if (exc != null) {\n                // failing to delete the endpoint itself is considered a critical error\n                Throwable endpointRemovalException = exc.get(epOp.getId());\n                if (endpointRemovalException != null) {\n                    sendFailureSelfPatch(endpointRemovalException);\n                    return;\n                }\n\n                // other removal exceptions are just warnings\n                logFine(() -> String.format(\"Failed delete some of the associated resources,\"\n                        + \" reason %s\", Utils.toString(exc)));\n            }\n            // all resources deleted; mark the operation as complete\n            sendSelfPatch(TaskStage.STARTED, next);\n        }).sendWith(this);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delete all top level objects, which are representing this endpoint, including endpoint itself.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "219", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/EndpointRemovalTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.EndpointRemovalTaskService.deleteAssociatedDocuments", "methodParameterType": "EndpointRemovalTaskState#Collection<String>#SubStage#", "methodParameterName": "state#documentKinds#next#", "methodBody": "private void deleteAssociatedDocuments(EndpointRemovalTaskState state,\n            Collection<String> documentKinds, SubStage next) {\n        Query resourceQuery = getAssociatedDocumentsQuery(state, documentKinds);\n        QueryTask resourceQueryTask = QueryTask.Builder.createDirectTask()\n                .setQuery(resourceQuery)\n                .setResultLimit(QueryUtils.DEFAULT_RESULT_LIMIT)\n                .build();\n        resourceQueryTask.tenantLinks = state.tenantLinks;\n\n        Operation.createPost(UriUtils.buildUri(getHost(), ServiceUriPaths.CORE_LOCAL_QUERY_TASKS))\n                .setBody(resourceQueryTask)\n                .setCompletion(\n                        (queryOp, throwable) -> {\n                            if (throwable != null) {\n                                logWarning(throwable.getMessage());\n                                sendSelfPatch(TaskStage.STARTED, next);\n                                return;\n                            }\n\n                            QueryTask rsp = queryOp.getBody(QueryTask.class);\n                            if (rsp.results.nextPageLink == null) {\n                                sendSelfPatch(TaskStage.STARTED, next);\n                                return;\n                            }\n\n                            deleteAssociatedDocumentsHelper(rsp.results.nextPageLink, next);\n                        })\n                .sendWith(this);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delete associated resource, e.g. enumeration task if started.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "220", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/EndpointRemovalTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.EndpointRemovalTaskService.deleteResources", "methodParameterType": "EndpointRemovalTaskState#SubStage#", "methodParameterName": "state#next#", "methodBody": "private void deleteResources(EndpointRemovalTaskState state, SubStage next) {\n        QuerySpecification qSpec = new QuerySpecification();\n        qSpec.query = Query.Builder.create()\n                .addKindFieldClause(ComputeState.class)\n                .addFieldClause(ComputeState.FIELD_NAME_PARENT_LINK, state.endpoint.computeLink)\n                .build();\n        ResourceRemovalTaskState removalServiceState = new ResourceRemovalTaskState();\n        removalServiceState.documentSelfLink = UUID.randomUUID().toString();\n        removalServiceState.resourceQuerySpec = qSpec;\n        removalServiceState.options = EnumSet.of(TaskOption.DOCUMENT_CHANGES_ONLY);\n        removalServiceState.isMockRequest = state.options.contains(TaskOption.IS_MOCK);\n        removalServiceState.tenantLinks = state.tenantLinks;\n\n        StatefulService service = this;\n\n        Operation\n                .createPost(UriUtils.buildUri(getHost(),\n                        ResourceRemovalTaskService.FACTORY_LINK))\n                .setBody(removalServiceState)\n                .setCompletion((resourcePostOp, resourcePostEx) -> {\n                    Consumer<Operation> onSuccess = new Consumer<Operation>() {\n                        Set<String> finishedTaskLinks = new HashSet<>();\n\n                        @Override\n                        public void accept(Operation op) {\n                            ResourceRemovalTaskState deletionState = op\n                                    .getBody(ResourceRemovalTaskState.class);\n\n                            TaskUtils.handleSubscriptionNotifications(service, op,\n                                    deletionState.documentSelfLink, deletionState.taskInfo,\n                                    1, createPatchSubStageTask(TaskStage.STARTED, next, null),\n                                    finishedTaskLinks,\n                                    true);\n                        }\n                    };\n\n                    TaskUtils.subscribeToNotifications(this, onSuccess, resourcePostOp\n                            .getBody(ResourceRemovalTaskState.class).documentSelfLink);\n                }).sendWith(this);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#FieldDeclaration#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#NumberLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ThisExpression)ThisExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(FieldDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)FieldDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Delete computes discovered with this endpoint.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "221", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/StatsUtil.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.StatsUtil.getMetricKey", "methodParameterType": "String#Long#", "methodParameterName": "resourceLink#sourceTimeMicrosUtc#", "methodBody": "public static String getMetricKey(String resourceLink,\n            Long sourceTimeMicrosUtc) {\n        return UriUtils.getLastPathSegment(resourceLink) + SEPARATOR +\n                +sourceTimeMicrosUtc;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a metric key for given resource link and timestamp.", "call_func_name": ["java.lang.StringBuilder.<init>", "com.vmware.xenon.common.UriUtils.getLastPathSegment", "java.lang.StringBuilder.append", "java.lang.Long.longValue", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""], ["long"], [""]], "passed_comments": "/"}, {"index": "222", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/StatsUtil.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.StatsUtil.getMetricLinkFragments", "methodParameterType": "String#", "methodParameterName": "metricLink#", "methodBody": "private static MetricKeyComponents getMetricLinkFragments(String metricLink) {\n        metricLink = UriUtils.getLastPathSegment(metricLink);\n\n        String[] linkFragments = metricLink.split(SEPARATOR);\n\n        if (linkFragments.length != 2) {\n            throw new IllegalArgumentException(\"Incorrect metric key format \"\n                    + Arrays.toString(linkFragments)\n                    + \". Expected resource-id_timestamp.\");\n        }\n\n        MetricKeyComponents metricKeyComponents = new MetricKeyComponents();\n        metricKeyComponents.resourceId = linkFragments[0];\n        metricKeyComponents.timestamp = linkFragments[1];\n        return metricKeyComponents;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#ArrayAccess#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns all the fragments of the metricLink.", "call_func_name": ["com.vmware.xenon.common.UriUtils.getLastPathSegment", "java.lang.String.split", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.util.Arrays.toString", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object[]"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "223", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/StatsUtil.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.StatsUtil.getResourceId", "methodParameterType": "String#", "methodParameterName": "metricLink#", "methodBody": "public static String getResourceId(String metricLink) {\n        MetricKeyComponents metricKeyComponents = getMetricLinkFragments(metricLink);\n        return metricKeyComponents.resourceId;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the resource id for given metric link.", "call_func_name": ["com.vmware.photon.controller.model.tasks.monitoring.StatsUtil.getMetricLinkFragments"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"com.vmware.photon.controller.model.tasks.monitoring.StatsUtil.getMetricLinkFragments": "Returns all the fragments of the metricLink."}]}, {"index": "224", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/StatsUtil.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.StatsUtil.computeIntervalBeginMicros", "methodParameterType": "long#long#", "methodParameterName": "timestampMicros#bucketDurationMillis#", "methodBody": "public static long computeIntervalBeginMicros(long timestampMicros, long bucketDurationMillis) {\n        long bucketDurationMicros = TimeUnit.MILLISECONDS.toMicros(bucketDurationMillis);\n        timestampMicros -= (timestampMicros % bucketDurationMicros);\n        return timestampMicros;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Computes the beginning of the rollup interval.", "call_func_name": ["java.util.concurrent.TimeUnit.toMicros"], "call_func_parameter": [["long"]], "passed_comments": "/"}, {"index": "225", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/StatsUtil.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.StatsUtil.computeIntervalEndMicros", "methodParameterType": "long#long#", "methodParameterName": "timestampMicros#bucketDurationMillis#", "methodBody": "public static long computeIntervalEndMicros(long timestampMicros, long bucketDurationMillis) {\n        timestampMicros = computeIntervalBeginMicros(timestampMicros, bucketDurationMillis);\n        return (timestampMicros + TimeUnit.MILLISECONDS.toMicros(bucketDurationMillis));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Computes the end of the rollup interval.", "call_func_name": ["com.vmware.photon.controller.model.tasks.monitoring.StatsUtil.computeIntervalBeginMicros", "java.util.concurrent.TimeUnit.toMicros"], "call_func_parameter": [["long", "long"], ["long"]], "passed_comments": [{"com.vmware.photon.controller.model.tasks.monitoring.StatsUtil.computeIntervalBeginMicros": "Computes the beginning of the rollup interval."}]}, {"index": "226", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.initializeQuery", "methodParameterType": "SingleResourceStatsAggregationTaskState#", "methodParameterName": "currentState#", "methodBody": "private void initializeQuery(SingleResourceStatsAggregationTaskState currentState) {\n        int resultLimit = Integer.getInteger(STATS_QUERY_RESULT_LIMIT, DEFAULT_QUERY_RESULT_LIMIT);\n        QueryTask queryTask = QueryTask.Builder.createDirectTask()\n                .setQuery(currentState.query)\n                .setResultLimit(resultLimit)\n                .build();\n        QueryUtils.startQueryTask(this, queryTask, ServiceTypeCluster.DISCOVERY_SERVICE)\n                .whenComplete((resultTask, queryEx) -> {\n                    if (queryEx != null) {\n                        sendSelfFailurePatch(currentState, queryEx.getMessage());\n                        return;\n                    }\n\n                    SingleResourceStatsAggregationTaskState patchBody = new SingleResourceStatsAggregationTaskState();\n                    if (resultTask.results.nextPageLink == null) {\n                        patchBody.hasResources = false;\n                        patchBody.taskInfo = TaskUtils.createTaskState(TaskStage.STARTED);\n                        patchBody.taskStage = StatsAggregationStage.PUBLISH_METRICS;\n                    } else {\n                        patchBody.hasResources = currentState.hasResources;\n                        patchBody.taskInfo = TaskUtils.createTaskState(TaskStage.STARTED);\n                        patchBody.taskStage = StatsAggregationStage.PROCESS_RESOURCES;\n                        patchBody.queryResultLink = resultTask.results.nextPageLink;\n                    }\n                    sendSelfPatch(patchBody);\n                });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initialize query from the task state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "227", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.getResources", "methodParameterType": "SingleResourceStatsAggregationTaskState#", "methodParameterName": "currentState#", "methodBody": "private void getResources(SingleResourceStatsAggregationTaskState currentState) {\n        sendRequest(Operation\n                .createGet(UriUtils.extendUri(ClusterUtil.getClusterUri(getHost(),\n                        ServiceTypeCluster.DISCOVERY_SERVICE), currentState.queryResultLink))\n                .setCompletion(\n                        (getOp, getEx) -> {\n                            if (getEx != null) {\n                                sendSelfFailurePatch(currentState, getEx.getMessage());\n                                return;\n                            }\n                            QueryTask queryTask = getOp.getBody(QueryTask.class);\n                            if (queryTask.results.documentCount == 0) {\n                                // set to false when no resources are found.\n                                currentState.hasResources = false;\n                                currentState.taskStage = StatsAggregationStage.PUBLISH_METRICS;\n                                sendSelfPatch(currentState);\n                                return;\n                            }\n                            getInMemoryMetrics(currentState, queryTask);\n                        }));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Gets resources for the given query, fetch raw metrics and compute partial aggregations as one step", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "228", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.getInMemoryMetrics", "methodParameterType": "SingleResourceStatsAggregationTaskState#QueryTask#", "methodParameterName": "currentState#resourceQueryTask#", "methodBody": "private void getInMemoryMetrics(SingleResourceStatsAggregationTaskState currentState,\n            QueryTask resourceQueryTask) {\n        // Lookup in-memory metrics: /<resource-id><bucket> - /compute123(Hourly)\n        List<Operation> operations = new ArrayList<>();\n        for (String resourceLink : resourceQueryTask.results.documentLinks) {\n            String resourceId = UriUtils.getLastPathSegment(resourceLink);\n            List<String> rollupKeys = buildRollupKeys(resourceId);\n            for (String rollupKey : rollupKeys) {\n                String link = UriUtils\n                        .buildUriPath(InMemoryResourceMetricService.FACTORY_LINK, rollupKey);\n                operations.add(Operation.createGet(this, link));\n            }\n        }\n\n        OperationJoin.create(operations.stream())\n                .setCompletion((ops, exs) -> {\n                    // List of metrics we didn't find in memory and need to be queried from disk.\n                    Map<String, Set<String>> metricsToBeQueried = new HashMap<>();\n\n                    /*Nested map to store in memory stats\n                    {\n                        ...\n                        \"CPUUtilization(Hourly)\" : {\n                            \"1478040373000\" : [\n                                \"TimeBin1\",\n                                \"TimeBin2\"\n                            ],\n                            \"1478040505000\" : [\n                                \"TimeBin3\",\n                                \"TimeBin4\"\n                            ]\n                        }\n                        ...\n                    }*/\n                    Map<String, SortedMap<Long, List<TimeBin>>> inMemoryStats = new HashMap<>();\n\n                    for (Operation operation : ops.values()) {\n                        if (operation.getStatusCode() != Operation.STATUS_CODE_OK) {\n                            URI uri = operation.getUri();\n                            Throwable ex = exs.get(operation.getId());\n                            String msg = (ex == null) ? String.valueOf(operation.getStatusCode())\n                                    : ex.getMessage();\n                            logFine(() -> String.format(\"In-memory metric lookup failed: %s with\"\n                                    + \" error %s\", uri, msg));\n                            processFailedOperations(currentState, metricsToBeQueried, uri);\n                            continue;\n                        }\n\n                        InMemoryResourceMetric metric = operation\n                                .getBody(InMemoryResourceMetric.class);\n\n                        processInMemoryMetrics(currentState, metricsToBeQueried, inMemoryStats,\n                                metric);\n                    }\n                    getRawMetrics(currentState, resourceQueryTask, metricsToBeQueried,\n                            inMemoryStats);\n                })\n                .sendWith(this);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Get in-memory metrics.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "229", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.processInMemoryMetrics", "methodParameterType": "SingleResourceStatsAggregationTaskState#Map<String,Set<String>>#Map<String,SortedMap<Long,List<TimeBin>>>#InMemoryResourceMetric#", "methodParameterName": "currentState#metricsToBeQueried#inMemoryStats#metric#", "methodBody": "private void processInMemoryMetrics(SingleResourceStatsAggregationTaskState currentState,\n            Map<String, Set<String>> metricsToBeQueried,\n            Map<String, SortedMap<Long, List<TimeBin>>> inMemoryStats,\n            InMemoryResourceMetric metric) {\n        String metricKey = UriUtils.getLastPathSegment(metric.documentSelfLink);\n        String resourceId = stripRollupKey(metricKey);\n\n        for (Entry<String, Long> metricEntry : currentState.lastRollupTimeForMetric\n                .entrySet()) {\n            String rawMetricKey = stripRollupKey(metricEntry.getKey());\n\n            TimeSeriesStats timeSeriesStats = metric.timeSeriesStats.get(rawMetricKey);\n\n            // if there is no in-memory metric for this key then we don't have any\n            // raw metrics; move on to the next metric\n            if (timeSeriesStats == null) {\n                continue;\n            }\n\n            // TODO VSYM-3190 - Change normalized interval boundary to beginning of the rollup period\n            // Currently, xenon's time interval boundary 1 hour before than photon\n            // model's aggregate metrics.\n            Long earliestBinId = TimeUnit.MILLISECONDS.toMicros(timeSeriesStats.bins.firstKey());\n            earliestBinId += TimeUnit.MILLISECONDS.toMicros(timeSeriesStats.binDurationMillis);\n\n            Long lastRollupTime = metricEntry.getValue();\n\n            // Check if we have any last rollup time or if rollup time is older than what we\n            // have in memory.\n            if (lastRollupTime == null || lastRollupTime < earliestBinId) {\n                Set<String> metricList = metricsToBeQueried.get(resourceId);\n                if (metricList == null) {\n                    metricList = new HashSet<>();\n                    metricsToBeQueried.put(resourceId, metricList);\n                }\n                metricList.add(rawMetricKey);\n                continue;\n            }\n            processInMemoryTimeBins(currentState, inMemoryStats, metricEntry, timeSeriesStats);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Process in-memory metrics.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "230", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.processInMemoryTimeBins", "methodParameterType": "SingleResourceStatsAggregationTaskState#Map<String,SortedMap<Long,List<TimeBin>>>#Entry<String,Long>#TimeSeriesStats#", "methodParameterName": "currentState#inMemoryStats#metricEntry#timeSeriesStats#", "methodBody": "private void processInMemoryTimeBins(SingleResourceStatsAggregationTaskState currentState,\n            Map<String, SortedMap<Long, List<TimeBin>>> inMemoryStats,\n            Entry<String, Long> metricEntry,\n            TimeSeriesStats timeSeriesStats) {\n        String metricKeyWithRollUp = metricEntry.getKey();\n        String rawMetricKey = stripRollupKey(metricEntry.getKey());\n        Long lastRollupTime = metricEntry.getValue();\n\n        for (Entry<Long, TimeBin> binEntry : timeSeriesStats.bins.entrySet()) {\n            // TODO VSYM-3190 - Change normalized interval boundary to beginning of the rollup period\n            // Currently, xenon's time interval boundary 1 hour before than\n            // photon model's aggregate metrics.\n            Long binId = TimeUnit.MILLISECONDS.toMicros(binEntry.getKey());\n            binId += TimeUnit.MILLISECONDS.toMicros(timeSeriesStats.binDurationMillis);\n\n            if (binId < lastRollupTime) {\n                continue;\n            }\n\n            SortedMap<Long, List<TimeBin>> bins = inMemoryStats.get(metricKeyWithRollUp);\n\n            if (bins == null) {\n                bins = new TreeMap<>();\n            }\n\n            List<TimeBin> binList = bins.get(binId);\n            if (binList == null) {\n                binList = new ArrayList<>();\n                bins.put(binId, binList);\n                inMemoryStats.put(metricKeyWithRollUp, bins);\n            }\n\n            TimeBin bin = binEntry.getValue();\n            if (currentState.latestValueOnly.contains(rawMetricKey)) {\n                // For latest value, we create a new time bin since we are only interested\n                // in the latest data point.\n                TimeBin latest = new TimeBin();\n                latest.avg = latest.min = latest.max = latest.sum = bin.latest;\n                latest.count = 1;\n                bins.get(binId).add(latest);\n            } else {\n                bins.get(binId).add(bin);\n            }\n\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#Assignment#Assignment#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)Assignment)Assignment)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Process in-memory time bins. This method buckets bins from time series stats appropriately in the inMemoryStats data structure.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "231", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.processFailedOperations", "methodParameterType": "SingleResourceStatsAggregationTaskState#Map<String,Set<String>>#URI#", "methodParameterName": "currentState#metricsToBeQueried#uri#", "methodBody": "private void processFailedOperations(SingleResourceStatsAggregationTaskState currentState,\n            Map<String, Set<String>> metricsToBeQueried, URI uri) {\n        String metricKey = UriUtils.getLastPathSegment(uri);\n        String resourceId = stripRollupKey(metricKey);\n        Set<String> metricKeys = new HashSet<>();\n        for (Entry<String, Long> metricEntry : currentState.lastRollupTimeForMetric.entrySet()) {\n            metricKeys.add(stripRollupKey(metricEntry.getKey()));\n        }\n        metricsToBeQueried.put(resourceId, metricKeys);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Process failed operation uris and adds to the list of metrics to be queried.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "232", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.getLatestMetrics", "methodParameterType": "List<ResourceMetrics>#String#", "methodParameterName": "metrics#metricKeyWithInterval#", "methodBody": "private Collection<ResourceMetrics> getLatestMetrics(List<ResourceMetrics> metrics,\n            String metricKeyWithInterval) {\n        if (metrics.isEmpty()) {\n            return Collections.emptyList();\n        }\n\n        // Metric link to map of latest value per bin. For example:\n        // /monitoring/metrics/<resource-id>_<key1> -> 1474070400000000, <latest-value-of-key1-in-this-time-bucket>\n        // /monitoring/metrics/<resource-id>_<key2> -> 1474070400000000, <latest-value-of-key2-in-this-time-bucket>\n        Map<String, Map<Long, ResourceMetrics>> metricsByLatestValuePerInterval = new HashMap<>();\n        for (ResourceMetrics metric : metrics) {\n            String metricKey = stripRollupKey(metricKeyWithInterval);\n            Map<Long, ResourceMetrics> metricsByIntervalEndTime = metricsByLatestValuePerInterval\n                    .get(metricKey);\n            Double value = metric.entries.get(metricKey);\n            if (value == null) {\n                continue;\n            }\n            // TODO VSYM-3190 - Change normalized interval boundary to beginning of the rollup period\n            long binId = StatsUtil.computeIntervalEndMicros(\n                    metric.timestampMicrosUtc, lookupBinSize(metricKeyWithInterval));\n            if (metricsByIntervalEndTime == null) {\n                metricsByIntervalEndTime = new HashMap<>();\n                metricsByIntervalEndTime.put(binId, metric);\n                metricsByLatestValuePerInterval.put(metricKey, metricsByIntervalEndTime);\n                continue;\n            }\n\n            ResourceMetrics existingMetric = metricsByIntervalEndTime.get(binId);\n            Double existingValue = null;\n            if (existingMetric != null) {\n                existingValue = existingMetric.entries.get(metricKey);\n            }\n            if (existingValue == null\n                    || existingMetric.timestampMicrosUtc < metric.timestampMicrosUtc) {\n                metricsByIntervalEndTime.put(binId, metric);\n            }\n        }\n\n        // Gather all latest values\n        List<ResourceMetrics> result = new ArrayList<>();\n        for (Map<Long, ResourceMetrics> metricsByIntervalEndTime : metricsByLatestValuePerInterval\n                .values()) {\n            result.addAll(metricsByIntervalEndTime.values());\n        }\n\n        return result;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ContinueStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the latest metrics from the raw metrics list. Since the list contains all raw metrics across multiple resource we iterate on the list and pick the latest metric for each resource per bin depending on the metric key. TODO VSYM-2481: Add custom mock stats adapter based test for this.", "call_func_name": ["java.util.List.isEmpty", "java.util.Collections.emptyList", "java.util.HashMap.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.stripRollupKey", "java.util.Map.get", "java.lang.Long.longValue", "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.lookupBinSize", "com.vmware.photon.controller.model.tasks.monitoring.StatsUtil.computeIntervalEndMicros", "java.lang.Long.valueOf", "java.util.Map.put", "java.util.ArrayList.<init>", "java.util.Map.values", "java.util.Collection.iterator", "java.util.List.addAll"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["long", "long"], ["long"], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], ["java.util.Collection"]], "passed_comments": [{"com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.stripRollupKey": "Returns the raw metric key by stripping the rollup metric key suffix."}, {"com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.lookupBinSize": "Lookup the size of the time bin based on the metric key"}, {"com.vmware.photon.controller.model.tasks.monitoring.StatsUtil.computeIntervalEndMicros": "Computes the end of the rollup interval."}]}, {"index": "233", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.publishMetrics", "methodParameterType": "SingleResourceStatsAggregationTaskState#", "methodParameterName": "currentState#", "methodBody": "private void publishMetrics(SingleResourceStatsAggregationTaskState currentState) {\n        long expirationTime = Utils.getNowMicrosUtc() + TimeUnit.DAYS.toMicros(EXPIRATION_INTERVAL);\n        List<Operation> operations = new ArrayList<>();\n        Set<String> publishedKeys = new HashSet<>();\n\n        if (!currentState.hasResources) {\n            // reset the metrics to default, when no stats endpoint is available for a resource\n            operations = setDefaultMetricValue(currentState, operations, publishedKeys);\n        } else {\n            if (currentState.aggregatedTimeBinMap == null) {\n                addLastRollupTimeForMissingKeys(currentState, publishedKeys, operations);\n            } else {\n                for (Entry<String, Map<Long, TimeBin>> aggregateEntries : currentState.aggregatedTimeBinMap\n                        .entrySet()) {\n                    Map<Long, TimeBin> aggrValue = aggregateEntries.getValue();\n                    List<Long> keys = new ArrayList<>();\n                    keys.addAll(aggrValue.keySet());\n                    // create list of operations sorted by the timebin\n                    Collections.sort(keys);\n                    Long latestTimeKey = null;\n                    for (Long timeKey : keys) {\n                        ResourceMetrics resourceMetrics = new ResourceMetrics();\n                        resourceMetrics.entries = new HashMap<>();\n                        resourceMetrics.entries.put(aggregateEntries.getKey(),\n                                aggrValue.get(timeKey).avg);\n                        resourceMetrics.timestampMicrosUtc = timeKey;\n                        resourceMetrics.documentSelfLink = StatsUtil\n                                .getMetricKey(currentState.resourceLink, Utils.getNowMicrosUtc());\n                        resourceMetrics.documentExpirationTimeMicros = expirationTime;\n\n                        operations.add(Operation.createPost(UriUtils.buildUri(\n                                ClusterUtil.getClusterUri(getHost(),\n                                        ServiceTypeCluster.METRIC_SERVICE),\n                                ResourceMetricsService.FACTORY_LINK))\n                                .setBody(resourceMetrics));\n                        publishedKeys.add(aggregateEntries.getKey());\n                        latestTimeKey = timeKey;\n                    }\n                    // update the last update time as a stat\n                    ServiceStats.ServiceStat lastUpdateStat = new ServiceStats.ServiceStat();\n                    lastUpdateStat.name = aggregateEntries.getKey();\n                    lastUpdateStat.latestValue = latestTimeKey;\n\n                    URI inMemoryStatsUri = UriUtils.buildStatsUri(UriUtils.extendUri(\n                            ClusterUtil.getClusterUri(getHost(),\n                                    ServiceTypeCluster.DISCOVERY_SERVICE),\n                            currentState.resourceLink));\n                    operations.add(Operation.createPost(inMemoryStatsUri).setBody(lastUpdateStat));\n                }\n                addLastRollupTimeForMissingKeys(currentState, publishedKeys, operations);\n            }\n        }\n\n        if (operations.isEmpty()) {\n            // nothing to persist, just finish the task\n            sendSelfPatch(currentState, TaskStage.FINISHED, null);\n            return;\n        }\n\n        batchPublishMetrics(currentState, operations, 0);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NullLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Publish aggregate metric values", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "234", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.setDefaultMetricValue", "methodParameterType": "SingleResourceStatsAggregationTaskState#List<Operation>#Set<String>#", "methodParameterName": "currentState#operations#publishedKeys#", "methodBody": "private List<Operation> setDefaultMetricValue(\n            SingleResourceStatsAggregationTaskState currentState,\n            List<Operation> operations, Set<String> publishedKeys) {\n\n        Map<String, Long> lastRollTimeMetric = currentState.lastRollupTimeForMetric;\n        for (Entry<String, Long> aggregateEntries : lastRollTimeMetric.entrySet()) {\n            // value is null when project is newly created and raw metrics are not yet generated.\n            // upon stats aggregation value is set to 0. As project resources don't exist,\n            // only newly created projects will have aggregate-metrics services generated .\n\n            Long aggregateMetricLastRollUpTime = aggregateEntries.getValue() == null ? 0L\n                    : aggregateEntries.getValue();\n\n            ResourceMetrics resourceMetrics = new ResourceMetrics();\n            resourceMetrics.entries = new HashMap<>();\n            resourceMetrics.entries.put(aggregateEntries.getKey(), 0.0);\n            resourceMetrics.timestampMicrosUtc = aggregateMetricLastRollUpTime;\n            resourceMetrics.documentSelfLink = StatsUtil.getMetricKey(currentState.resourceLink, Utils.getNowMicrosUtc());\n\n            operations.add(Operation\n                    .createPost(UriUtils.buildUri(\n                            ClusterUtil.getClusterUri(getHost(),\n                                    ServiceTypeCluster.METRIC_SERVICE),\n                            ResourceMetricsService.FACTORY_LINK))\n                    .setBody(resourceMetrics));\n            publishedKeys.add(aggregateEntries.getKey());\n\n            ServiceStats.ServiceStat lastUpdateStat = new ServiceStats.ServiceStat();\n            lastUpdateStat.name = aggregateEntries.getKey();\n            lastUpdateStat.latestValue = aggregateMetricLastRollUpTime;\n            URI inMemoryStatsUri = UriUtils.buildStatsUri(UriUtils.extendUri(\n                    ClusterUtil.getClusterUri(getHost(),\n                            ServiceTypeCluster.DISCOVERY_SERVICE),\n                    currentState.resourceLink));\n            operations.add(Operation.createPost(inMemoryStatsUri).setBody(lastUpdateStat));\n        }\n        return operations;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#NumberLiteral#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets metric constants related to a resource to '0' value. Metric constants like 'EstimatedCharges', 'Cost', 'CurrentBurnRatePerHour', 'AverageBurnRatePerHour' stored in 'lastRollupTimeForMetric' map attribute will be set to 0 when project is newly created or has all endpoints removed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "235", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.buildRollupKeys", "methodParameterType": "String#", "methodParameterName": "baseKey#", "methodBody": "private List<String> buildRollupKeys(String baseKey) {\n        List<String> returnList = new ArrayList<>();\n        returnList.add(baseKey + StatsConstants.HOUR_SUFFIX);\n        // TODO VSYM-3109: Re-enable this once we fix daily rollup performance.\n        // returnList.add(baseKey + StatsConstants.DAILY_SUFFIX);\n        return returnList;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Build the keys used to represent rolled up data. We currently support hourly and daily rollups.", "call_func_name": ["java.util.ArrayList.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.List.add"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "236", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.stripRollupKey", "methodParameterType": "String#", "methodParameterName": "rollupKey#", "methodBody": "private String stripRollupKey(String rollupKey) {\n        if (rollupKey.contains(StatsConstants.HOUR_SUFFIX)) {\n            return rollupKey.replace(StatsConstants.HOUR_SUFFIX, \"\");\n        }\n        return rollupKey.replace(StatsConstants.DAILY_SUFFIX, \"\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the raw metric key by stripping the rollup metric key suffix.", "call_func_name": ["java.lang.String.contains", "java.lang.String.replace"], "call_func_parameter": [["java.lang.CharSequence"], ["java.lang.CharSequence", "java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "237", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.lookupBinSize", "methodParameterType": "String#", "methodParameterName": "metricKey#", "methodBody": "private int lookupBinSize(String metricKey) {\n        if (metricKey.contains(StatsConstants.HOUR_SUFFIX)) {\n            return StatsConstants.BUCKET_SIZE_HOURS_IN_MILLIS;\n        }\n        return StatsConstants.BUCKET_SIZE_DAYS_IN_MILLIS;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Lookup the size of the time bin based on the metric key", "call_func_name": ["java.lang.String.contains"], "call_func_parameter": [["java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "238", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.updateBin", "methodParameterType": "TimeBin#double#Set<AggregationType>#", "methodParameterName": "inputBin#value#aggregationTypes#", "methodBody": "private TimeBin updateBin(TimeBin inputBin, double value,\n            Set<AggregationType> aggregationTypes) {\n        if (aggregationTypes.contains(AggregationType.MAX)) {\n            if (inputBin.max == null || inputBin.max < value) {\n                inputBin.max = value;\n            }\n        }\n\n        if (aggregationTypes.contains(AggregationType.MIN)) {\n            if (inputBin.min == null || inputBin.min > value) {\n                inputBin.min = value;\n            }\n        }\n\n        if (aggregationTypes.contains(AggregationType.AVG)) {\n            if (inputBin.avg == null) {\n                inputBin.avg = value;\n            } else {\n                inputBin.avg = ((inputBin.avg * inputBin.count) + value) / (inputBin.count + 1);\n            }\n        }\n\n        if (aggregationTypes.contains(AggregationType.SUM)) {\n            if (inputBin.sum == null) {\n                inputBin.sum = value;\n            } else {\n                inputBin.sum += value;\n            }\n        }\n        inputBin.count++;\n        return inputBin;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#PostfixExpression#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PostfixExpression)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Update time bin with raw value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "239", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsAggregationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsAggregationTaskService.updateBin", "methodParameterType": "TimeBin#TimeBin#Set<AggregationType>#", "methodParameterName": "currentBin#value#aggregationTypes#", "methodBody": "private TimeBin updateBin(TimeBin currentBin, TimeBin value,\n            Set<AggregationType> aggregationTypes) {\n        if (aggregationTypes.contains(AggregationType.MAX)) {\n            if (currentBin.max == null || currentBin.max < value.max) {\n                currentBin.max = value.max;\n            }\n        }\n\n        if (aggregationTypes.contains(AggregationType.MIN)) {\n            if (currentBin.min == null || currentBin.min > value.min) {\n                currentBin.min = value.min;\n            }\n        }\n\n        if (aggregationTypes.contains(AggregationType.AVG)) {\n            if (currentBin.avg == null) {\n                currentBin.avg = value.avg;\n            } else {\n                currentBin.avg = ((currentBin.avg * currentBin.count) + (value.avg * value.count)) /\n                        (currentBin.count + value.count);\n            }\n        }\n\n        if (aggregationTypes.contains(AggregationType.SUM)) {\n            if (currentBin.sum == null) {\n                currentBin.sum = value.sum;\n            } else {\n                currentBin.sum += value.sum;\n            }\n        }\n        currentBin.count += value.count;\n        return currentBin;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Update time bin based on given time bin value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "240", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsCollectionTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsCollectionTaskService.populateLastCollectionTimeForMetricsInStatsRequest", "methodParameterType": "SingleResourceStatsCollectionTaskState#ComputeStatsRequest#URI#List<String>#", "methodParameterName": "currentState#computeStatsRequest#patchUri#tenantLinks#", "methodBody": "private void populateLastCollectionTimeForMetricsInStatsRequest(\n            SingleResourceStatsCollectionTaskState currentState,\n            ComputeStatsRequest computeStatsRequest, URI patchUri, List<String> tenantLinks) {\n        URI computeStatsUri = UriUtils\n                .buildStatsUri(UriUtils.extendUri(ClusterUtil.getClusterUri(getHost(),\n                        ServiceTypeCluster.DISCOVERY_SERVICE), currentState.computeLink));\n        Operation.createGet(computeStatsUri)\n                .setCompletion((o, e) -> {\n                    if (e != null) {\n                        logSevere(() -> String.format(\"Could not get the last collection time from\"\n                                        + \" in memory stats: %s\", Utils.toString(e)));\n                        // get the value from the persisted store.\n                        populateLastCollectionTimeFromPersistenceStore(currentState,\n                                computeStatsRequest, patchUri, tenantLinks);\n                        return;\n                    }\n                    ServiceStats serviceStats = o.getBody(ServiceStats.class);\n                    String statsAdapterLink = getAdapterLinkFromURI(patchUri);\n                    String lastSuccessfulRunMetricKey = getLastCollectionMetricKeyForAdapterLink(\n                            statsAdapterLink, true);\n                    if (serviceStats.entries.containsKey(lastSuccessfulRunMetricKey)) {\n                        ServiceStat lastRunStat = serviceStats.entries\n                                .get(lastSuccessfulRunMetricKey);\n                        computeStatsRequest.lastCollectionTimeMicrosUtc =\n                                lastRunStat.sourceTimeMicrosUtc;\n                        sendStatsRequestToAdapter(currentState, patchUri, computeStatsRequest);\n                    } else {\n                        populateLastCollectionTimeFromPersistenceStore(currentState,\n                                computeStatsRequest, patchUri, tenantLinks);\n                    }\n                })\n                .sendWith(this);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Gets the last collection for a compute for a given adapter URI. As a first step, the in memory stats for the compute are queried and if the metric for the last collection time is found, then the timestamp for that is returned. Else, the ResoureMetric table is queried and the latest version of the metric is used to determine the last collection time for the stats.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "241", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsCollectionTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsCollectionTaskService.populateLastCollectionTimeFromPersistenceStore", "methodParameterType": "SingleResourceStatsCollectionTaskState#ComputeStatsRequest#URI#List<String>#", "methodParameterName": "currentState#computeStatsRequest#patchUri#tenantLinks#", "methodBody": "private void populateLastCollectionTimeFromPersistenceStore(\n            SingleResourceStatsCollectionTaskState currentState,\n            ComputeStatsRequest computeStatsRequest, URI patchUri, List<String> tenantLinks) {\n        String statsAdapterLink = getAdapterLinkFromURI(patchUri);\n        String lastSuccessfulRunMetricKey = getLastCollectionMetricKeyForAdapterLink(\n                statsAdapterLink, false);\n        Query.Builder builder = Query.Builder.create();\n        builder.addKindFieldClause(ResourceMetrics.class);\n        builder.addFieldClause(ServiceDocument.FIELD_NAME_SELF_LINK,\n                UriUtils.buildUriPath(ResourceMetricsService.FACTORY_LINK, UriUtils.getLastPathSegment(currentState.computeLink)),\n                MatchType.PREFIX);\n        builder.addRangeClause( QuerySpecification.buildCompositeFieldName(ResourceMetrics.FIELD_NAME_ENTRIES, lastSuccessfulRunMetricKey),\n                NumericRange.createDoubleRange(Double.MIN_VALUE, Double.MAX_VALUE, true, true));\n        QueryTask task = QueryTask.Builder.createDirectTask()\n                .addOption(QueryOption.SORT)\n                .orderDescending(ServiceDocument.FIELD_NAME_SELF_LINK, TypeName.STRING)\n                .addOption(QueryOption.TOP_RESULTS)\n                // No-op in photon-model. Required for special handling of immutable documents.\n                // This will prevent Lucene from holding the full result set in memory.\n                .addOption(QueryOption.INCLUDE_ALL_VERSIONS)\n                .setResultLimit(1)\n                .addOption(QueryOption.EXPAND_CONTENT)\n                .setQuery(builder.build()).build();\n        task.tenantLinks = tenantLinks;\n        QueryUtils.startQueryTask(this, task, ServiceTypeCluster.METRIC_SERVICE)\n                .whenComplete((responseTask, e) -> {\n                    if (e != null) {\n                        logSevere(\n                                \"Could not get the last collection time from persisted metrics: %s\",\n                                Utils.toString(e));\n                        // Still continue calling into the adapter if the last known time for\n                        // successful collection is not known\n                        sendStatsRequestToAdapter(currentState,\n                                patchUri, computeStatsRequest);\n                        return;\n                    }\n                    // If the persisted metric can be found, use the value of the last successful\n                    // collection time otherwise do not set any value for the last collection time\n                    // while sending the request to the adapter.\n                    if (responseTask.results.documentCount > 0) {\n                        Object rawMetricObj = responseTask.results.documents\n                                .get(responseTask.results.documentLinks.get(0));\n                        ResourceMetrics rawMetrics = Utils.fromJson(rawMetricObj,\n                                ResourceMetrics.class);\n                        computeStatsRequest.lastCollectionTimeMicrosUtc =\n                                rawMetrics.timestampMicrosUtc;\n                    }\n                    sendStatsRequestToAdapter(currentState, patchUri, computeStatsRequest);\n                });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#BooleanLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Queries the metric for the last successful run and sets that value in the compute stats request. This value is used to determine the window size for which the stats collection happens from the provider.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "242", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsCollectionTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsCollectionTaskService.sendStatsRequestToAdapter", "methodParameterType": "SingleResourceStatsCollectionTaskState#URI#Object#", "methodParameterName": "currentState#patchUri#patchBody#", "methodBody": "private void sendStatsRequestToAdapter(SingleResourceStatsCollectionTaskState currentState,\n            URI patchUri, Object patchBody) {\n        sendRequest(Operation.createPatch(patchUri)\n                .setBody(patchBody)\n                .setCompletion((patchOp, patchEx) -> {\n                    if (patchEx != null) {\n                        TaskUtils.sendFailurePatch(this, currentState, patchEx);\n                    }\n                }));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sends the Stats request to the Stats adapter", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "243", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsCollectionTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsCollectionTaskService.getLastCollectionMetricKeyForAdapterLink", "methodParameterType": "String#boolean#", "methodParameterName": "statsAdapterLink#appendBucketSuffix#", "methodBody": "public String getLastCollectionMetricKeyForAdapterLink(String statsAdapterLink,\n            boolean appendBucketSuffix) {\n        String lastSuccessfulRunMetricKey = UriUtils.getLastPathSegment(statsAdapterLink) + StatsUtil.SEPARATOR\n                + PhotonModelConstants.LAST_SUCCESSFUL_STATS_COLLECTION_TIME;\n        if (appendBucketSuffix) {\n            lastSuccessfulRunMetricKey = lastSuccessfulRunMetricKey + StatsConstants.MIN_SUFFIX;\n        }\n        return lastSuccessfulRunMetricKey;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Forms the key to be used for looking up the last collection time for a given stats adapter.", "call_func_name": ["java.lang.StringBuilder.<init>", "com.vmware.xenon.common.UriUtils.getLastPathSegment", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "244", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/monitoring/SingleResourceStatsCollectionTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.monitoring.SingleResourceStatsCollectionTaskService.getAdapterLinkFromURI", "methodParameterType": "URI#", "methodParameterName": "patchUri#", "methodBody": "private String getAdapterLinkFromURI(URI patchUri) {\n        return patchUri.getPath();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the path from the patchUri.", "call_func_name": ["java.net.URI.getPath"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "245", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ResourceAllocationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ResourceAllocationTaskService.doQueryComputeResources", "methodParameterType": "ComputeDescriptionService.ComputeDescription#ResourceAllocationTaskState#Collection<String>#", "methodParameterName": "desc#currentState#computeDescriptionLinks#", "methodBody": "private void doQueryComputeResources(\n            ComputeDescriptionService.ComputeDescription desc,\n            ResourceAllocationTaskState currentState,\n            Collection<String> computeDescriptionLinks) {\n\n        if (currentState.computeType == null) {\n            throw new IllegalArgumentException(\"computeType not set\");\n        }\n\n        String kind = computeDescriptionLinks == null ? Utils\n                .buildKind(ComputeDescriptionService.ComputeDescription.class)\n                : Utils.buildKind(ComputeService.ComputeState.class);\n\n        QueryTask.Query kindClause = new QueryTask.Query().setTermPropertyName(\n                ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(kind);\n\n        QueryTask q = new QueryTask();\n        q.querySpec = new QueryTask.QuerySpecification();\n        q.querySpec.query.addBooleanClause(kindClause);\n        q.tenantLinks = currentState.tenantLinks;\n\n        if (computeDescriptionLinks == null) {\n            q.taskInfo.isDirect = true;\n            QueryTask.Query hostTypeClause = new QueryTask.Query()\n                    .setTermPropertyName(\n                            QueryTask.QuerySpecification\n                                    .buildCollectionItemName(\n                                            ComputeDescriptionService.ComputeDescription.FIELD_NAME_SUPPORTED_CHILDREN))\n                    .setTermMatchValue(currentState.computeType);\n            q.querySpec.query.addBooleanClause(hostTypeClause);\n\n            if (desc.zoneId != null && !desc.zoneId.isEmpty()) {\n                // we want to make sure the computes we want to alloc are in the\n                // same zone as the\n                // parent\n                QueryTask.Query zoneIdClause = new QueryTask.Query()\n                        .setTermPropertyName(\n                                ComputeDescriptionService.ComputeDescription.FIELD_NAME_ZONE_ID)\n                        .setTermMatchValue(desc.zoneId);\n                q.querySpec.query.addBooleanClause(zoneIdClause);\n            }\n        } else {\n            // we do not want the host query task to be auto deleted too soon\n            // and it does\n            // not need to complete in-line (the POST can return before the\n            // query is done)\n            q.taskInfo.isDirect = false;\n            q.documentExpirationTimeMicros = currentState.documentExpirationTimeMicros;\n\n            // we want compute resources only in the same resource pool as this\n            // task\n            QueryTask.Query resourcePoolClause = new QueryTask.Query()\n                    .setTermPropertyName(\n                            ComputeService.ComputeState.FIELD_NAME_RESOURCE_POOL_LINK)\n                    .setTermMatchValue(currentState.resourcePoolLink);\n            q.querySpec.query.addBooleanClause(resourcePoolClause);\n\n            // when querying the compute hosts, we want one that has one of the\n            // descriptions during\n            // the first query\n            QueryTask.Query descriptionLinkClause = new QueryTask.Query();\n\n            for (String cdLink : computeDescriptionLinks) {\n                QueryTask.Query cdClause = new QueryTask.Query()\n                        .setTermPropertyName(\n                                ComputeService.ComputeState.FIELD_NAME_DESCRIPTION_LINK)\n                        .setTermMatchValue(cdLink);\n\n                cdClause.occurance = Occurance.SHOULD_OCCUR;\n                descriptionLinkClause.addBooleanClause(cdClause);\n                if (computeDescriptionLinks.size() == 1) {\n                    // if we only have one compute host description, then all\n                    // compute hosts must be\n                    // using it\n                    descriptionLinkClause = cdClause;\n                    descriptionLinkClause.occurance = Occurance.MUST_OCCUR;\n                }\n            }\n\n            q.querySpec.query.addBooleanClause(descriptionLinkClause);\n        }\n\n        Operation.CompletionHandler c = (o, ex) -> {\n            if (ex != null) {\n                sendFailureSelfPatch(ex);\n                return;\n            }\n            this.processQueryResponse(o, currentState, desc,\n                    computeDescriptionLinks);\n        };\n\n        Operation postQuery = Operation\n                .createPost(this, ServiceUriPaths.CORE_LOCAL_QUERY_TASKS).setBody(q)\n                .setCompletion(c);\n\n        sendRequest(postQuery);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#TypeLiteral#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeLiteral)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Perform a two stage query: Find all compute descriptions that meet our criteria for parent hosts, then find all compute hosts that use any of those descriptions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "246", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/ResourceAllocationTaskService.java", "methodName": "com.vmware.photon.controller.model.tasks.ResourceAllocationTaskService.createDiskResources", "methodParameterType": "ResourceAllocationTaskState#ComputeDescription#String#String#String#List<String>#", "methodParameterName": "currentState#cd#parentLink#computeResourceId#name#networkLinks#", "methodBody": "private void createDiskResources(ResourceAllocationTaskState currentState,\n            ComputeDescription cd,\n            String parentLink, String computeResourceId, String name,\n            List<String> networkLinks) {\n\n        if (cd.diskDescLinks == null || cd.diskDescLinks.isEmpty()) {\n            createComputeResource(currentState, cd, parentLink, computeResourceId, name,\n                    new ArrayList<>(), networkLinks);\n            return;\n        }\n\n        DeferredResult<List<String>> result = DeferredResult.allOf(\n                cd.diskDescLinks.stream()\n                        .map(link -> {\n                            Operation op = Operation.createGet(this, link);\n                            return this.sendWithDeferredResult(op, DiskState.class);\n                        })\n                        .map(dr -> dr.thenCompose(d -> {\n                            String link = d.documentSelfLink;\n                            // create a new disk based off the template but use a\n                            // unique ID\n                            d.id = UUID.randomUUID().toString();\n                            d.documentSelfLink = null;\n                            d.tenantLinks = currentState.tenantLinks;\n                            if (d.customProperties == null) {\n                                d.customProperties = new HashMap<>();\n                            }\n                            d.descriptionLink = link;\n\n                            return this.sendWithDeferredResult(\n                                    Operation.createPost(this, DiskService.FACTORY_LINK).setBody(d),\n                                    DiskState.class);\n                        }))\n                        .map(dsr -> dsr\n                                .thenApply(ds -> ds.documentSelfLink))\n                        .collect(Collectors.toList()));\n\n        result.whenComplete((diskLinks, e) -> {\n            if (e != null) {\n                logWarning(() -> String.format(\"Failure creating disk: %s\", e.toString()));\n                this.sendFailureSelfPatch(e);\n                return;\n            }\n            // we have created all the disks. Now create the compute host\n            // resource\n            createComputeResource(currentState, cd, parentLink, computeResourceId, name,\n                    diskLinks, networkLinks);\n        });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create disks to attach to the compute resource. Use the disk description links to figure out what type of disks to create.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "247", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/helpers/ResourcePoolQueryHelper.java", "methodName": "com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.ResourcePoolQueryHelper", "methodParameterType": "ServiceHost#", "methodParameterName": "host#", "methodBody": "private ResourcePoolQueryHelper(ServiceHost host) {\n        this.host = host;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "248", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/helpers/ResourcePoolQueryHelper.java", "methodName": "com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.setAdditionalQueryClausesProvider", "methodParameterType": "Consumer<Query.Builder>#", "methodParameterName": "provider#", "methodBody": "public void setAdditionalQueryClausesProvider(Consumer<Query.Builder> provider) {\n        this.additionalQueryClausesProvider = provider;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Allows clients to dynamically add query clauses for narrowing down the list of returned computes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "249", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/helpers/ResourcePoolQueryHelper.java", "methodName": "com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.setAdditionalResourcePoolQueryClausesProvider", "methodParameterType": "Consumer<Query.Builder>#", "methodParameterName": "provider#", "methodBody": "public void setAdditionalResourcePoolQueryClausesProvider(Consumer<Query.Builder> provider) {\n        this.additionalResourcePoolQueryClausesProvider = provider;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Allows clients to dynamically add query clauses for narrowing down the list of returned ResourcePools.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "250", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/helpers/ResourcePoolQueryHelper.java", "methodName": "com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.setExpandComputes", "methodParameterType": "boolean#", "methodParameterName": "expandComputes#", "methodBody": "public void setExpandComputes(boolean expandComputes) {\n        this.expandComputes = expandComputes;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Whether to expand  {@link ComputeState} documents or not. If {@code false}, values in {@link QueryResult#computesByLink} are {@code null}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "251", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/helpers/ResourcePoolQueryHelper.java", "methodName": "com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.query", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DeferredResult<QueryResult> query() {\n\n        this.result = new QueryResult();\n\n        // start by retrieving the requested resource pools\n        return retrieveResourcePools()\n                .thenCompose(ignore -> executeRpQueries())\n                .thenCompose(ignore -> findComputesWithoutPool())\n                .thenCompose(this::handleMissingComputes)\n                .handle((ignore, exc) -> exc != null ? QueryResult.forError(exc) : this.result);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#ConditionalExpression#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ConditionalExpression)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Perform the actual retrieval and returns to the client DeferredResult with actual QueryResult.", "call_func_name": ["com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.retrieveResourcePools", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.thenCompose", "java.util.function.BiFunction.apply", "com.vmware.xenon.common.DeferredResult.handle"], "call_func_parameter": [[""], ["com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper"], ["java.util.function.Function"], ["com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper"], ["java.util.function.BiFunction"]], "passed_comments": [{"com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.retrieveResourcePools": "Retrieves the requested resource pools documents."}]}, {"index": "252", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/helpers/ResourcePoolQueryHelper.java", "methodName": "com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.query", "methodParameterType": "Consumer<QueryResult>#", "methodParameterName": "completionHandler#", "methodBody": "public void query(Consumer<QueryResult> completionHandler) {\n        query().thenAccept(completionHandler);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Perform the actual retrieval and notifies the client through the given completionHandler.", "call_func_name": ["com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.query", "com.vmware.xenon.common.DeferredResult.thenAccept"], "call_func_parameter": [[""], ["java.util.function.Consumer"]], "passed_comments": [{"com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.query": "Perform the actual retrieval and returns to the client DeferredResult with actual QueryResult."}, {"com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.query": "Perform the actual retrieval and notifies the client through the given completionHandler."}]}, {"index": "253", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/helpers/ResourcePoolQueryHelper.java", "methodName": "com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.retrieveResourcePools", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private DeferredResult<Void> retrieveResourcePools() {\n        Query.Builder queryBuilder = Query.Builder.create()\n                .addKindFieldClause(ResourcePoolState.class);\n        if (this.resourcePoolLinks != null && !this.resourcePoolLinks.isEmpty()) {\n            queryBuilder.addInClause(ServiceDocument.FIELD_NAME_SELF_LINK, this.resourcePoolLinks);\n        } else if (this.additionalResourcePoolQueryClausesProvider != null) {\n            this.additionalResourcePoolQueryClausesProvider.accept(queryBuilder);\n        }\n\n        return new QueryByPages<>(this.host, queryBuilder.build(), ResourcePoolState.class, null)\n                .setMaxPageSize(PAGE_SIZE)\n                .queryDocuments(rp -> storeResourcePool(rp));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleType#ParameterizedType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#NullLiteral#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(NullLiteral)NullLiteral)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the requested resource pools documents.", "call_func_name": ["java.util.Collection.isEmpty", "java.util.function.Consumer.accept", "java.util.function.Consumer.accept"], "call_func_parameter": [[""], ["java.lang.Object"], ["com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper"]], "passed_comments": "/"}, {"index": "254", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/helpers/ResourcePoolQueryHelper.java", "methodName": "com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.executeRpQueries", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private DeferredResult<Void> executeRpQueries() {\n        List<DeferredResult<Void>> rpQueryDRs = new ArrayList<>(this.result.resourcesPools.size());\n        Map<String, Map<String, ComputeState>> computeMapByRpLink = new ConcurrentHashMap<>();\n        for (ResourcePoolData rpData : this.result.resourcesPools.values()) {\n            String rpLink = rpData.resourcePoolState.documentSelfLink;\n            Query rpQuery = rpData.resourcePoolState.query;\n\n            Query.Builder queryBuilder = Query.Builder.create().addClause(rpQuery);\n            if (this.computeLinks != null && !this.computeLinks.isEmpty()) {\n                queryBuilder.addInClause(ServiceDocument.FIELD_NAME_SELF_LINK, this.computeLinks);\n            } else if (this.additionalQueryClausesProvider != null) {\n                this.additionalQueryClausesProvider.accept(queryBuilder);\n            }\n\n            QueryByPages<ComputeState> computeQuery =\n                    new QueryByPages<>(this.host, queryBuilder.build(), ComputeState.class, null)\n                            .setMaxPageSize(PAGE_SIZE);\n            DeferredResult<Map<String, ComputeState>> rpQueryDR;\n            if (this.expandComputes) {\n                rpQueryDR = computeQuery\n                        .collectDocuments(Collectors.toMap(cs -> cs.documentSelfLink, cs -> cs));\n            } else {\n                // manually collect links since Collectors.toMap() does not allow null values\n                Map<String, ComputeState> computesMap = new HashMap<>();\n                rpQueryDR = computeQuery\n                        .queryLinks(csLink -> computesMap.put(csLink, null))\n                        .thenApply(ignore -> computesMap);\n            }\n\n            rpQueryDRs.add(rpQueryDR\n                    .thenAccept(computesMap -> computeMapByRpLink.put(rpLink, computesMap)));\n        }\n\n        return DeferredResult.allOf(rpQueryDRs)\n                .thenAccept(ignore -> computeMapByRpLink.forEach(this::storeComputes))\n                .thenApply(ignore -> (Void)null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#NullLiteral#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#SimpleName#VariableDeclarationFragment#SimpleName#LambdaExpression#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#LambdaExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#NullLiteral#CastExpression#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(NullLiteral)NullLiteral)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(SimpleName)SimpleName)LambdaExpression)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(SimpleName)SimpleName)LambdaExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)CastExpression)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Executes the resource pool queries in parallel and then collects the result.", "call_func_name": ["java.util.Map.size", "java.util.ArrayList.<init>", "java.util.concurrent.ConcurrentHashMap.<init>", "java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Collection.isEmpty", "java.util.function.Consumer.accept", "java.util.function.Function.apply", "java.util.stream.Collectors.toMap", "java.util.HashMap.<init>", "java.util.function.Consumer.accept", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.thenApply", "java.util.function.Consumer.accept", "com.vmware.xenon.common.DeferredResult.thenAccept", "java.util.List.add", "com.vmware.xenon.common.DeferredResult.allOf", "java.util.function.Consumer.accept"], "call_func_parameter": [[""], ["int"], [""], [""], [""], [""], [""], [""], ["java.lang.Object"], [""], ["java.util.function.Function", "java.util.function.Function"], [""], ["java.util.Map"], ["java.util.Map"], ["java.util.function.Function"], ["java.util.Map", "java.lang.String"], ["java.util.function.Consumer"], ["java.lang.Object"], ["java.util.List"], ["com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper", "java.util.Map"]], "passed_comments": "/"}, {"index": "255", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/helpers/ResourcePoolQueryHelper.java", "methodName": "com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.findComputesWithoutPool", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private DeferredResult<Collection<String>> findComputesWithoutPool() {\n        if (this.resourcePoolLinks != null && !this.resourcePoolLinks.isEmpty()) {\n            return DeferredResult.completed(Collections.emptyList());\n        }\n\n        if (this.computeLinks != null && !this.computeLinks.isEmpty()) {\n            // remove RPs without computes\n            this.result.resourcesPools = this.result.resourcesPools.entrySet().stream()\n                    .filter(e -> !e.getValue().computeStateLinks.isEmpty())\n                    .collect(Collectors.toMap(e -> e.getKey(), e -> e.getValue()));\n\n            return DeferredResult.completed(this.computeLinks);\n        }\n\n        // query for all computes (without expanding the documents)\n        Query.Builder queryBuilder = Query.Builder.create()\n                .addKindFieldClause(ComputeState.class);\n        if (this.additionalQueryClausesProvider != null) {\n            this.additionalQueryClausesProvider.accept(queryBuilder);\n        }\n\n        return new QueryByPages<>(this.host, queryBuilder.build(), ComputeState.class, null)\n                .setMaxPageSize(PAGE_SIZE)\n                .collectLinks(Collectors.toCollection(ArrayList::new));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#ParameterizedType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#NullLiteral#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#CreationReference#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(PrefixExpression(MethodInvocation(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(NullLiteral)NullLiteral)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CreationReference(SimpleType(SimpleName)SimpleName)SimpleType)CreationReference)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Finds computes that are not part of any resource pool. - If we have input resource pool(s), don't do anything. - If we have input computeLinks, check them. - Otherwise, get all computes and check which are missing in the already collected result.", "call_func_name": ["java.util.Collection.isEmpty", "java.util.Collections.emptyList", "com.vmware.xenon.common.DeferredResult.completed", "java.util.Map.entrySet", "java.util.Set.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Collectors.toMap", "java.util.stream.Stream.collect", "java.util.function.Consumer.accept", "java.util.function.Supplier.get", "java.util.stream.Collectors.toCollection"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], [""], [""], ["java.util.function.Predicate"], [""], ["java.util.function.Function", "java.util.function.Function"], ["java.util.stream.Collector"], ["java.lang.Object"], [""], ["java.util.function.Supplier"]], "passed_comments": "/"}, {"index": "256", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/helpers/ResourcePoolQueryHelper.java", "methodName": "com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.handleMissingComputes", "methodParameterType": "Collection<String>#", "methodParameterName": "allComputeLinks#", "methodBody": "private DeferredResult<Void> handleMissingComputes(Collection<String> allComputeLinks) {\n        Collection<String> missingComputeLinks = new HashSet<>(allComputeLinks);\n        missingComputeLinks.removeAll(this.result.computesByLink.keySet());\n        if (missingComputeLinks.isEmpty()) {\n            return DeferredResult.completed(null);\n        }\n\n        Query query = Query.Builder.create()\n                .addKindFieldClause(ComputeState.class)\n                .addInClause(ServiceDocument.FIELD_NAME_SELF_LINK, missingComputeLinks)\n                .build();\n        return new QueryByPages<>(this.host, query, ComputeState.class, null)\n                .setMaxPageSize(PAGE_SIZE)\n                .collectDocuments(Collectors.toMap(cs -> cs.documentSelfLink, cs -> cs))\n                .thenAccept(computesMap -> storeComputes(null, computesMap));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#ParameterizedType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleType#TypeLiteral#NullLiteral#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#SimpleName#VariableDeclarationFragment#SimpleName#LambdaExpression#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(NullLiteral)NullLiteral)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(SimpleName)SimpleName)LambdaExpression)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "With the given compute links, finds which ones are not already retrieved as part of a resource pool, and loads the corresponding ComputeState documents into the result.", "call_func_name": ["java.util.HashSet.<init>", "java.util.Map.keySet", "java.util.Collection.removeAll", "java.util.Collection.isEmpty", "com.vmware.xenon.common.DeferredResult.completed", "java.util.function.Function.apply", "java.util.stream.Collectors.toMap", "java.util.function.Consumer.accept", "com.vmware.xenon.common.DeferredResult.thenAccept"], "call_func_parameter": [["java.util.Collection"], [""], ["java.util.Collection"], [""], ["java.lang.Object"], [""], ["java.util.function.Function", "java.util.function.Function"], ["com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "257", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/helpers/ResourcePoolQueryHelper.java", "methodName": "com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.storeResourcePool", "methodParameterType": "ResourcePoolState#", "methodParameterName": "rp#", "methodBody": "private void storeResourcePool(ResourcePoolState rp) {\n        ResourcePoolData rpData = new ResourcePoolData();\n        rpData.resourcePoolState = rp;\n        rpData.computeStateLinks = new HashSet<>();\n        this.result.resourcesPools.put(rp.documentSelfLink, rpData);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Stores the retrieved resource pool states into the QueryResult instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "258", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/tasks/helpers/ResourcePoolQueryHelper.java", "methodName": "com.vmware.photon.controller.model.tasks.helpers.ResourcePoolQueryHelper.storeComputes", "methodParameterType": "String#Map<String,ComputeState>#", "methodParameterName": "rpLink#computes#", "methodBody": "private void storeComputes(String rpLink, Map<String, ComputeState> computes) {\n        if (rpLink != null) {\n            ResourcePoolData rpData = this.result.resourcesPools.get(rpLink);\n            rpData.computeStateLinks.addAll(computes.keySet());\n        }\n\n        for (Map.Entry<String, ComputeState> computeEntry : computes.entrySet()) {\n            String computeLink = computeEntry.getKey();\n            ComputeState compute = computeEntry.getValue();\n\n            this.result.computesByLink.put(computeLink, compute);\n\n            // make sure rpLinksByComputeLink has an empty item even for computes with no rp link\n            Set<String> rpLinks = this.result.rpLinksByComputeLink.get(computeLink);\n            if (rpLinks == null) {\n                rpLinks = new HashSet<String>();\n                this.result.rpLinksByComputeLink.put(computeLink, rpLinks);\n            }\n\n            if (rpLink != null) {\n                rpLinks.add(rpLink);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Stores the retrieved compute states into the QueryResult instance. The rpLink may be null in case the given computes do not fall into any resource pool.", "call_func_name": ["java.util.Map.get", "java.util.Map.keySet", "java.util.Set.addAll", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Map.put", "java.util.HashSet.<init>", "java.util.Set.add"], "call_func_parameter": [["java.lang.Object"], [""], ["java.util.Collection"], [""], [""], [""], [""], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "259", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/query/QueryUtils.java", "methodName": "com.vmware.photon.controller.model.query.QueryUtils.startQueryTask", "methodParameterType": "Service#QueryTask#ServiceTypeCluster#", "methodParameterName": "service#queryTask#cluster#", "methodBody": "public static DeferredResult<QueryTask> startQueryTask(Service service, QueryTask queryTask,\n            ServiceTypeCluster cluster) {\n        // We don't want any unbounded queries. By default, we cap the query results to 10000.\n        if (queryTask.querySpec.resultLimit == null) {\n            service.getHost().log(Level.WARNING,\n                    \"No result limit set on the query: %s. Defaulting to %d\",\n                    Utils.toJson(queryTask), MAX_RESULT_LIMIT);\n            queryTask.querySpec.options.add(QueryOption.TOP_RESULTS);\n            queryTask.querySpec.resultLimit = MAX_RESULT_LIMIT;\n        }\n        if (queryTask.documentExpirationTimeMicros == 0) {\n            queryTask.documentExpirationTimeMicros = Utils.getNowMicrosUtc()\n                    + QueryUtils.TEN_MINUTES_IN_MICROS;\n        }\n\n        return service.sendWithDeferredResult(Operation\n                .createPost(UriUtils.buildUri(\n                        ClusterUtil.getClusterUri(service.getHost(), cluster),\n                        ServiceUriPaths.CORE_LOCAL_QUERY_TASKS))\n                .setBody(queryTask).setConnectionSharing(true), QueryTask.class);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Executes the given query task on a Cluster.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "260", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/query/QueryUtils.java", "methodName": "com.vmware.photon.controller.model.query.QueryUtils.startQueryTask", "methodParameterType": "Service#QueryTask#", "methodParameterName": "service#queryTask#", "methodBody": "public static DeferredResult<QueryTask> startQueryTask(Service service, QueryTask queryTask) {\n        return startQueryTask(service, queryTask, null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Executes the given query task.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "261", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/query/QueryUtils.java", "methodName": "com.vmware.photon.controller.model.query.QueryUtils.addEndpointLink", "methodParameterType": "Query.Builder#Class<? extends ServiceDocument>#String#", "methodParameterName": "qBuilder#stateClass#endpointLink#", "methodBody": "public static Query.Builder addEndpointLink(\n            Query.Builder qBuilder,\n            Class<? extends ServiceDocument> stateClass,\n            String endpointLink) {\n\n        if (endpointLink == null || endpointLink.isEmpty()) {\n            return qBuilder;\n        }\n\n        if (PhotonModelUtils.ENDPOINT_LINK_EXPLICIT_SUPPORT.contains(stateClass)) {\n            return qBuilder.addFieldClause(\n                    PhotonModelConstants.FIELD_NAME_ENDPOINT_LINK,\n                    endpointLink);\n        }\n\n        if (PhotonModelUtils.ENDPOINT_LINK_CUSTOM_PROP_SUPPORT.contains(stateClass)) {\n            return qBuilder.addCompositeFieldClause(\n                    ResourceState.FIELD_NAME_CUSTOM_PROPERTIES,\n                    PhotonModelConstants.CUSTOM_PROP_ENDPOINT_LINK,\n                    endpointLink);\n        }\n\n        return qBuilder;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add  {@code endpointLink} constraint to passed query builder depending on document class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "262", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/query/QueryUtils.java", "methodName": "com.vmware.photon.controller.model.query.QueryUtils.addTenantLinks", "methodParameterType": "Query.Builder#List<String>#", "methodParameterName": "qBuilder#tenantLinks#", "methodBody": "public static Query.Builder addTenantLinks(Query.Builder qBuilder, List<String> tenantLinks) {\n        if (tenantLinks != null) {\n            // all given tenant links must be present in the document\n            tenantLinks.forEach(link -> qBuilder\n                    .addCollectionItemClause(ResourceState.FIELD_NAME_TENANT_LINKS, link));\n        }\n        return qBuilder;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add  {@code tenantLinks} constraint to passed query builder, if present.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "263", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/query/QueryUtils.java", "methodName": "com.vmware.photon.controller.model.query.QueryUtils.queryForReferrers", "methodParameterType": "String#Class<? extends ServiceDocument>#String#", "methodParameterName": "referredDocumentSelfLink#referrerClass#referrerLinkFieldName#", "methodBody": "public static Query queryForReferrers(\n            String referredDocumentSelfLink,\n            Class<? extends ServiceDocument> referrerClass,\n            String referrerLinkFieldName) {\n\n        return Query.Builder.create()\n                .addKindFieldClause(referrerClass)\n                .addFieldClause(referrerLinkFieldName, referredDocumentSelfLink)\n                .build();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Query for all \"referrer\" documents which refer a \"referred\" document.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "264", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/query/QueryStrategy.java", "methodName": "com.vmware.photon.controller.model.query.QueryStrategy.queryDocuments", "methodParameterType": "Consumer<T>#", "methodParameterName": "documentConsumer#", "methodBody": "DeferredResult<Void> queryDocuments(Consumer<T> documentConsumer);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Query for all documents which satisfy passed query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "265", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/query/QueryStrategy.java", "methodName": "com.vmware.photon.controller.model.query.QueryStrategy.queryLinks", "methodParameterType": "Consumer<String>#", "methodParameterName": "linkConsumer#", "methodBody": "DeferredResult<Void> queryLinks(Consumer<String> linkConsumer);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Query for all document links which satisfy passed query.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "266", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/query/QueryStrategy.java", "methodName": "com.vmware.photon.controller.model.query.QueryStrategy.collectDocuments", "methodParameterType": "Collector<T,A,R>#", "methodParameterName": "collector#", "methodBody": "<R, A> DeferredResult<R> collectDocuments(Collector<T, A, R> collector);", "AST": "Javadoc#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Performs a mutable reduction operation on the elements of this query using a {@code Collector}. The method is inspired by  {@code Stream#collect(Collector)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "267", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/query/QueryStrategy.java", "methodName": "com.vmware.photon.controller.model.query.QueryStrategy.collectLinks", "methodParameterType": "Collector<String,A,R>#", "methodParameterName": "collector#", "methodBody": "<R, A> DeferredResult<R> collectLinks(Collector<String, A, R> collector);", "AST": "Javadoc#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Performs a mutable reduction operation on the elements of this query using a {@code Collector}. The method is inspired by  {@code Stream#collect(Collector)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "268", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapterapi/ResourceRequest.java", "methodName": "com.vmware.photon.controller.model.adapterapi.ResourceRequest.buildUri", "methodParameterType": "String#", "methodParameterName": "resourceLink#", "methodBody": "public URI buildUri(String resourceLink) {\n        return UriUtils.buildUri(this.resourceReference, resourceLink);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A method build URI to a given resource by it's relative link.", "call_func_name": ["com.vmware.xenon.common.UriUtils.buildUri"], "call_func_parameter": [["java.net.URI", "java.lang.String[]"]], "passed_comments": "/"}, {"index": "269", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapterapi/ResourceRequest.java", "methodName": "com.vmware.photon.controller.model.adapterapi.ResourceRequest.resourceLink", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String resourceLink() {\n        return this.resourceReference.getPath();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the link to the resourceReference.", "call_func_name": ["java.net.URI.getPath"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "270", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapterapi/ResourceRequest.java", "methodName": "com.vmware.photon.controller.model.adapterapi.ResourceRequest.taskLink", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String taskLink() {\n        return this.taskReference.getPath();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the link to the calling Task.", "call_func_name": ["java.net.URI.getPath"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "271", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapterapi/ComputeEnumerateResourceRequest.java", "methodName": "com.vmware.photon.controller.model.adapterapi.ComputeEnumerateResourceRequest.getEnumKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEnumKey() {\n        return \"endpoint:[\" + this.endpointLink + \"],pool:[\" + this.resourcePoolLink + \"]\";\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#StringLiteral#ThisExpression#SimpleName#FieldAccess#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a key to uniquely identify enumeration for endpoint and resource pool instance.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "272", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/SubnetValidator.java", "methodName": "com.vmware.photon.controller.model.util.SubnetValidator.isValidIPAddress", "methodParameterType": "String#IPVersion#", "methodParameterName": "ipAddress#ipVersion#", "methodBody": "public static boolean isValidIPAddress(String ipAddress, IPVersion ipVersion) {\n        if (StringUtil.isNullOrEmpty(ipAddress)) {\n            throw new LocalizableValidationException(\"IP address must be specified\",\n                    \"subnet.range.ip.must.be.specified\");\n        }\n        switch (ipVersion) {\n        case IPv6:\n            return InetAddressValidator.getInstance().isValidInet6Address(ipAddress);\n        case IPv4:\n        default:\n            return InetAddressValidator.getInstance().isValidInet4Address(ipAddress);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SwitchCase#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase)SwitchCase(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Method to validate an IP address", "call_func_name": ["io.netty.util.internal.StringUtil.isNullOrEmpty", "com.vmware.xenon.common.LocalizableValidationException.<init>", "com.vmware.photon.controller.model.support.IPVersion.ordinal", "org.apache.commons.validator.routines.InetAddressValidator.getInstance", "org.apache.commons.validator.routines.InetAddressValidator.isValidInet6Address", "org.apache.commons.validator.routines.InetAddressValidator.isValidInet4Address"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.Object[]"], [""], [""], ["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "273", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/SubnetValidator.java", "methodName": "com.vmware.photon.controller.model.util.SubnetValidator.isStartIPGreaterThanEndIP", "methodParameterType": "String#String#IPVersion#", "methodParameterName": "startAddress#endAddress#ipVersion#", "methodBody": "public static boolean isStartIPGreaterThanEndIP(String startAddress,\n            String endAddress,\n            IPVersion ipVersion) {\n        boolean isStartIPGreaterThanEndIP = false;\n        if (startAddress != null && endAddress != null) {\n            if (IPVersion.IPv4.equals(ipVersion)) {\n                try {\n                    isStartIPGreaterThanEndIP = (IpHelper.ipStringToLong(startAddress) - IpHelper\n                            .ipStringToLong(endAddress)) > 0;\n                } catch (IllegalArgumentException e) {\n                }\n            } else {\n                throw new UnsupportedOperationException(\n                        \"Support for IPv6 IP address is not yet implemented\");\n            }\n        }\n        return isStartIPGreaterThanEndIP;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Method to compare two IP addresses and check if one is greater than the other. Assuming the IP addresses are valid", "call_func_name": ["com.vmware.photon.controller.model.support.IPVersion.equals", "com.vmware.photon.controller.model.util.IpHelper.ipStringToLong", "java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.vmware.photon.controller.model.util.IpHelper.ipStringToLong": "Convert an ip string to long."}]}, {"index": "274", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/SubnetValidator.java", "methodName": "com.vmware.photon.controller.model.util.SubnetValidator.isIpInValidRange", "methodParameterType": "String#String#IPVersion#", "methodParameterName": "ipAddress#cidr#ipVersion#", "methodBody": "public static boolean isIpInValidRange(String ipAddress,\n            String cidr, IPVersion ipVersion) {\n\n        if (!IPVersion.IPv4.equals(ipVersion)) {\n            throw new UnsupportedOperationException(\n                    \"Support for IPv6 IP address is not yet implemented\");\n        }\n\n        SubnetUtils utils = new SubnetUtils(cidr);\n\n        if (!utils.getInfo().getAddress().equals(utils.getInfo().getNetworkAddress())) {\n            String err = String.format(\"Invalid CIDR: %s. Host identifier of the\"\n                    + \" CIDR contains non zero bits.\", cidr);\n            throw new RuntimeException(err);\n        }\n\n        return utils.getInfo().isInRange(ipAddress);\n\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If the ip is in the same network as the cidr, it returns true", "call_func_name": ["com.vmware.photon.controller.model.support.IPVersion.equals", "java.lang.UnsupportedOperationException.<init>", "org.apache.commons.net.util.SubnetUtils.<init>", "org.apache.commons.net.util.SubnetUtils.getInfo", "java.lang.String.equals", "java.lang.String.format", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "275", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/SubnetValidator.java", "methodName": "com.vmware.photon.controller.model.util.SubnetValidator.isIpInBetween", "methodParameterType": "String#String#IPVersion#String#", "methodParameterName": "startAddress#endAddress#ipVersion#ipAddress#", "methodBody": "public static boolean isIpInBetween(String startAddress,\n            String endAddress,\n            IPVersion ipVersion,\n            String ipAddress) {\n        if (!IPVersion.IPv4.equals(ipVersion)) {\n            throw new UnsupportedOperationException(\n                    \"Support for IPv6 IP address is not yet implemented\");\n        }\n\n        boolean isIpGreaterThanStart = false;\n        boolean isIpLessThanEnd = false;\n\n        if ((IpHelper.ipStringToLong(endAddress) - IpHelper.ipStringToLong(ipAddress))\n                >= 0) {\n            isIpLessThanEnd = true;\n        }\n\n        if ((IpHelper.ipStringToLong(ipAddress) - IpHelper.ipStringToLong(startAddress))\n                >= 0) {\n            isIpGreaterThanStart = true;\n        }\n\n        return (isIpGreaterThanStart && isIpLessThanEnd);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the ip lies between the start and end address. Or if the ip is equal to either start or end address.", "call_func_name": ["com.vmware.photon.controller.model.support.IPVersion.equals", "java.lang.UnsupportedOperationException.<init>", "com.vmware.photon.controller.model.util.IpHelper.ipStringToLong"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.vmware.photon.controller.model.util.IpHelper.ipStringToLong": "Convert an ip string to long."}]}, {"index": "276", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/AssertUtil.java", "methodName": "com.vmware.photon.controller.model.util.AssertUtil.assertNotNull", "methodParameterType": "Object#String#", "methodParameterName": "obj#errorMessage#", "methodBody": "public static void assertNotNull(Object obj, String errorMessage) {\n        if (obj == null) {\n            throw new IllegalArgumentException(errorMessage);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Assert that the specified argument is not  {@code null} otherwise throwing{@link IllegalArgumentException} with the specified {@code errorMessage}. <p> {@code AssertUtil.assertNotNull(someArg, \"'someArg' must be set.\");}", "call_func_name": ["java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "277", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/AssertUtil.java", "methodName": "com.vmware.photon.controller.model.util.AssertUtil.assertTrue", "methodParameterType": "boolean#String#", "methodParameterName": "expression#errorMessage#", "methodBody": "public static void assertTrue(boolean expression, String errorMessage) {\n        if (!expression) {\n            throw new IllegalArgumentException(errorMessage);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#PrefixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Assert that provided  {@code expression} is {@code true} otherwise throwing an{@link IllegalArgumentException} with the specified {@code errorMessage}. <p> {@code AssertUtil.assertTrue(arr.length>0, \"'arr' shall not be empty.\");}", "call_func_name": ["java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "278", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/AssertUtil.java", "methodName": "com.vmware.photon.controller.model.util.AssertUtil.assertFalse", "methodParameterType": "boolean#String#", "methodParameterName": "expression#errorMessage#", "methodBody": "public static void assertFalse(boolean expression, String errorMessage) {\n        if (expression) {\n            throw new IllegalArgumentException(errorMessage);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Assert that provided  {@code expression} is {@code false} otherwise throwing an{@link IllegalArgumentException} with the specified {@code errorMessage}. <p> {@code AssertUtil.assertFalse(arr.length>0, \"'arr' shall be empty.\");}", "call_func_name": ["java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "279", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/StartServicesHelper.java", "methodName": "com.vmware.photon.controller.model.util.StartServicesHelper.getServiceLinks", "methodParameterType": "ServiceMetadata[]#", "methodParameterName": "servicesMetadata#", "methodBody": "public static String[] getServiceLinks(ServiceMetadata[] servicesMetadata) {\n        return Arrays.stream(servicesMetadata)\n                .map(ServiceMetadata::getLink)\n                .toArray(String[]::new);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#CreationReference#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(CreationReference(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)CreationReference)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Use this method to get the set of service links.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "280", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/StartServicesHelper.java", "methodName": "com.vmware.photon.controller.model.util.StartServicesHelper.startServices", "methodParameterType": "ServiceHost#ServiceMetadata[]#", "methodParameterName": "host#servicesMetadata#", "methodBody": "public static DeferredResult<Void> startServices(ServiceHost host, ServiceMetadata[]\n            servicesMetadata) {\n\n        return startServices(host, tryAddPrivilegedService(host), servicesMetadata);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Use this method to start the set of services asynchronously.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "281", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/StartServicesHelper.java", "methodName": "com.vmware.photon.controller.model.util.StartServicesHelper.startServices", "methodParameterType": "ServiceHost#Consumer<Class<? extends Service>>#ServiceMetadata[]#", "methodParameterName": "host#addPrivilegedService#servicesMetadata#", "methodBody": "public static DeferredResult<Void> startServices(\n            ServiceHost host,\n            Consumer<Class<? extends Service>> addPrivilegedService,\n            ServiceMetadata[] servicesMetadata) {\n\n        return DeferredResult\n                .allOf(Arrays.stream(servicesMetadata)\n                        .map(sm -> sm.start(host, addPrivilegedService))\n                        .collect(Collectors.toList()))\n                .thenApply(startOps -> (Void) null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#NullLiteral#CastExpression#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)CastExpression)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Use this method to start the set of services asynchronously.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "282", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/StartServicesHelper.java", "methodName": "com.vmware.photon.controller.model.util.StartServicesHelper.allOf", "methodParameterType": "DeferredResult<List<Operation>>#", "methodParameterName": "drs#", "methodBody": "@SafeVarargs\n    public static DeferredResult<List<Operation>> allOf(DeferredResult<List<Operation>> ... drs) {\n        return allOf(Arrays.asList(drs));\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper method to execute multiple DeferredResult<List<Operation>>'s and return the combined list of their ops.", "call_func_name": ["com.vmware.xenon.common.DeferredResult.allOf", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.thenApply"], "call_func_parameter": [["java.util.List"], [""], ["java.util.function.Function"]], "passed_comments": "/"}, {"index": "283", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/StartServicesHelper.java", "methodName": "com.vmware.photon.controller.model.util.StartServicesHelper.allOf", "methodParameterType": "List<DeferredResult<List<Operation>>>#", "methodParameterName": "drs#", "methodBody": "public static DeferredResult<List<Operation>> allOf(List<DeferredResult<List<Operation>>> drs) {\n        return DeferredResult\n                .allOf(drs)\n                .thenApply(opsLists -> opsLists\n                        .stream()\n                        .flatMap(List::stream)\n                        .collect(Collectors.toList()));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper method to execute multiple DeferredResult<List<Operation>>'s and return the combined list of their ops.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "284", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/StartServicesHelper.java", "methodName": "com.vmware.photon.controller.model.util.StartServicesHelper.startServicesSynchronously", "methodParameterType": "ServiceHost#ServiceMetadata[]#", "methodParameterName": "host#servicesMetadata#", "methodBody": "public static void startServicesSynchronously(\n            ServiceHost host,\n            ServiceMetadata[] servicesMetadata) {\n\n        startServicesSynchronously(host, tryAddPrivilegedService(host), servicesMetadata);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Use this method to start the set of services synchronously.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "285", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/StartServicesHelper.java", "methodName": "com.vmware.photon.controller.model.util.StartServicesHelper.startServicesSynchronously", "methodParameterType": "ServiceHost#Consumer<Class<? extends Service>>#ServiceMetadata[]#", "methodParameterName": "host#addPrivilegedService#servicesMetadata#", "methodBody": "public static void startServicesSynchronously(\n            ServiceHost host,\n            Consumer<Class<? extends Service>> addPrivilegedService,\n            ServiceMetadata[] servicesMetadata) {\n        PhotonModelUtils.waitToComplete(startServices(host, addPrivilegedService, servicesMetadata));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Use this method to start the set of services synchronously.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "286", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/StartServicesHelper.java", "methodName": "com.vmware.photon.controller.model.util.StartServicesHelper.tryAddPrivilegedService", "methodParameterType": "ServiceHost#", "methodParameterName": "host#", "methodBody": "private static Consumer<Class<? extends Service>> tryAddPrivilegedService(ServiceHost host) {\n\n        final String addPrivilegedServiceName = \"addPrivilegedService\";\n\n        Consumer<Class<? extends Service>> addPrivilegedService = null;\n\n        for (Class<?> hostClass : ClassUtils.hierarchy(host.getClass())) {\n            try {\n                Method addPrivilegedServiceMethod = hostClass.getMethod(\n                        addPrivilegedServiceName, Class.class);\n\n                addPrivilegedService = (Class<? extends Service> serviceClass) -> {\n                    try {\n                        addPrivilegedServiceMethod.invoke(host, serviceClass);\n\n                        host.log(Level.INFO,\n                                \"Auto starting of '%s' as Privileged by '%s': SUCCESS\",\n                                serviceClass.getSimpleName(),\n                                host.getClass().getSimpleName());\n\n                    } catch (Exception exc) {\n                        host.log(Level.INFO,\n                                \"Auto starting of '%s' as Privileged by '%s': FAILED\",\n                                serviceClass.getSimpleName(),\n                                host.getClass().getSimpleName());\n                    }\n                };\n            } catch (NoSuchMethodException exc) {\n                // Continue traversing ServiceHost class hierarchy\n            }\n        }\n\n        if (addPrivilegedService == null) {\n            // since this is used by tests ONLY log with FINE level\n            host.log(Level.FINE, \"Auto starting of services as Privileged is not supported by '%s'\",\n                    host.getClass().getSimpleName());\n        }\n\n        return addPrivilegedService;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#EnhancedForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(LambdaExpression(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The following method is introduced to prevent touching tests to start services as Privileged. It follows 'convention over configuration' principle. Passing any host that has <b>public</b>  {@code addPrivilegedService} method (such as {@code VerificationHost}) will automatically use it if  {@link ServiceMetadata#requirePrivileged}. <p> In production code the EXPLICIT  {@code addPrivilegedService} handler should be passed tostart the service.", "call_func_name": ["java.lang.Object.getClass", "org.apache.commons.lang3.ClassUtils.hierarchy", "java.lang.Iterable.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Class.getMethod", "java.util.function.Consumer.accept", "java.lang.Class.getSimpleName", "com.vmware.xenon.common.ServiceHost.log"], "call_func_parameter": [[""], ["java.lang.Class"], [""], [""], [""], ["java.lang.String", "java.lang.Class[]"], ["java.lang.reflect.Method", "com.vmware.xenon.common.ServiceHost"], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "287", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/ClusterUtil.java", "methodName": "com.vmware.photon.controller.model.util.ClusterUtil.getClusterUri", "methodParameterType": "ServiceHost#ServiceTypeCluster#", "methodParameterName": "host#cluster#", "methodBody": "public static URI getClusterUri(ServiceHost host, ServiceTypeCluster cluster) {\n        // If cluster is null, return the host URI.\n        if (cluster == null) {\n            return host.getUri();\n        }\n\n        String uriString = cluster.getUri();\n        if (uriString == null || uriString.isEmpty()) {\n            // If the clusterUri is not passed as a parameter, return host URI.\n            return host.getUri();\n        }\n\n        URI clusterUri = null;\n        try {\n            clusterUri = new URI(uriString);\n        } catch (URISyntaxException e) {\n            throw new IllegalStateException(e.getLocalizedMessage());\n        }\n        return clusterUri;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the cluster URI, if set. If not set, returns the host URI.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "288", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/IpHelper.java", "methodName": "com.vmware.photon.controller.model.util.IpHelper.ipToLong", "methodParameterType": "Inet4Address#", "methodParameterName": "ip#", "methodBody": "public static long ipToLong(Inet4Address ip) {\n        byte[] octets = ip.getAddress();\n        long result = 0;\n\n        for (byte octet : octets) {\n            result <<= 8;\n            result |= octet & 0xff;\n        }\n        return result;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convert an Inet4Address to host byte order long.", "call_func_name": ["java.net.Inet4Address.getAddress"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "289", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/IpHelper.java", "methodName": "com.vmware.photon.controller.model.util.IpHelper.longToIp", "methodParameterType": "long#", "methodParameterName": "ip#", "methodBody": "public static InetAddress longToIp(long ip) {\n        try {\n            return InetAddress.getByAddress(longToNetworkByteOrderArray(ip));\n        } catch (UnknownHostException e) {\n            throw new IllegalArgumentException(\"Invalid IP \" + ip);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Convert an host byte order long to InetAddress.", "call_func_name": ["com.vmware.photon.controller.model.util.IpHelper.longToNetworkByteOrderArray", "java.net.InetAddress.getByAddress", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["long"], ["byte[]"], [""], ["java.lang.String"], ["long"], [""], ["java.lang.String"]], "passed_comments": [{"com.vmware.photon.controller.model.util.IpHelper.longToNetworkByteOrderArray": "Convert an host byte order long to byte array in network byte order."}]}, {"index": "290", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/IpHelper.java", "methodName": "com.vmware.photon.controller.model.util.IpHelper.longToIpString", "methodParameterType": "long#", "methodParameterName": "ip#", "methodBody": "public static String longToIpString(long ip) {\n        InetAddress ipAddress = longToIp(ip);\n        return ipAddress.getHostAddress();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convert an ip in long format to an ip string.", "call_func_name": ["com.vmware.photon.controller.model.util.IpHelper.longToIp", "java.net.InetAddress.getHostAddress"], "call_func_parameter": [["long"], [""]], "passed_comments": [{"com.vmware.photon.controller.model.util.IpHelper.longToIp": "Convert an host byte order long to InetAddress."}]}, {"index": "291", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/IpHelper.java", "methodName": "com.vmware.photon.controller.model.util.IpHelper.ipStringToLong", "methodParameterType": "String#", "methodParameterName": "ip#", "methodBody": "public static long ipStringToLong(String ip) {\n        try {\n            int networkAddress = ByteBuffer\n                    .wrap(InetAddress.getByName(ip).getAddress())\n                    .getInt();\n            // Convert signed int to unsigned long.\n            return networkAddress & 0x00000000ffffffffL;\n        } catch (UnknownHostException ex) {\n            throw new IllegalArgumentException(ip + \" is not an IPv4 address\", ex);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Convert an ip string to long.", "call_func_name": ["java.net.InetAddress.getByName", "java.net.InetAddress.getAddress", "java.nio.ByteBuffer.wrap", "java.nio.ByteBuffer.getInt", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["byte[]"], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "292", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/IpHelper.java", "methodName": "com.vmware.photon.controller.model.util.IpHelper.longToNetworkByteOrderArray", "methodParameterType": "long#", "methodParameterName": "addr#", "methodBody": "public static byte[] longToNetworkByteOrderArray(long addr) {\n        return new byte[] { (byte) (addr >>> 24), (byte) (addr >>> 16), (byte) (addr >>> 8),\n                (byte) addr };\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#PrimitiveType#SimpleName#CastExpression#ArrayInitializer#ArrayCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(ArrayInitializer(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)ArrayInitializer)ArrayCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convert an host byte order long to byte array in network byte order.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "293", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/IpHelper.java", "methodName": "com.vmware.photon.controller.model.util.IpHelper.calculateCidrFromIpV4Range", "methodParameterType": "long#long#", "methodParameterName": "ipLow#ipHigh#", "methodBody": "public static String calculateCidrFromIpV4Range(long ipLow, long ipHigh) {\n\n        AssertUtil.assertTrue(ipLow <= ipHigh,\n                String.format(\"ipLow should be less than or equal to ipHigh, ipLow=%s, ipHigh=%s\",\n                        ipLow, ipHigh));\n\n        int inverseSubnetMask = (int) (ipHigh - ipLow);\n        int subnetMask = ~inverseSubnetMask;\n\n        AssertUtil.assertTrue(\n                (inverseSubnetMask == 0) || ((inverseSubnetMask & (inverseSubnetMask + 1)) == 0),\n                String.format(\n                        \"inverseSubnetMask should be 0 or \" +\n                                \"inverseSubnetMask + 1 should be a power of 2, \" +\n                                \"ipLow=%s, ipHigh=%s, inverseSubnetMask=%s[%s], subnetMask=%s\",\n                        Long.toBinaryString(ipLow),\n                        Long.toBinaryString(ipHigh),\n                        inverseSubnetMask,\n                        Long.toBinaryString(inverseSubnetMask),\n                        Long.toBinaryString(subnetMask)));\n\n        AssertUtil.assertTrue((ipLow & subnetMask) == ipLow,\n                String.format(\n                        \"ipLow & subnetMask should equal ipLow, ipLow = %s, ipHigh= %s, subnetMask= %s\",\n                        Long.toBinaryString(ipLow),\n                        Long.toBinaryString(ipHigh),\n                        Long.toBinaryString(subnetMask)));\n\n        int cidr = (32 - Integer.numberOfTrailingZeros(subnetMask));\n        InetAddress subnetAddress = longToIp(ipLow);\n        return subnetAddress.getHostAddress() + \"/\" + cidr;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#PrefixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Calculate the CIDR from a given ip range. Valid ranges are the ones that can be covered with a single CIDR and that is validated by making sure that the inverseSubnet+1 is a power of 2.", "call_func_name": ["java.lang.Long.valueOf", "java.lang.String.format", "com.vmware.photon.controller.model.util.AssertUtil.assertTrue", "java.lang.Long.toBinaryString", "java.lang.Integer.valueOf", "java.lang.Integer.numberOfTrailingZeros", "com.vmware.photon.controller.model.util.IpHelper.longToIp", "java.lang.StringBuilder.<init>", "java.net.InetAddress.getHostAddress", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [["long"], ["java.lang.String", "java.lang.Object[]"], ["boolean", "java.lang.String"], ["long"], ["int"], ["int"], ["long"], [""], [""], ["java.lang.String"], ["int"], [""]], "passed_comments": [{"com.vmware.photon.controller.model.util.AssertUtil.assertTrue": "Assert that provided  {@code expression} is {@code true} otherwise throwing an{@link IllegalArgumentException} with the specified {@code errorMessage}. <p> {@code AssertUtil.assertTrue(arr.length>0, \"'arr' shall not be empty.\");}"}, {"com.vmware.photon.controller.model.util.IpHelper.longToIp": "Convert an host byte order long to InetAddress."}]}, {"index": "294", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/IpHelper.java", "methodName": "com.vmware.photon.controller.model.util.IpHelper.calculateNetmaskFromCidr", "methodParameterType": "String#", "methodParameterName": "cidr#", "methodBody": "public static InetAddress calculateNetmaskFromCidr(String cidr) {\n        String[] cidrParts = cidr.split(\"/\");\n        AssertUtil.assertTrue(cidrParts.length == 2, \"Invalid cidr: \" + cidr);\n\n        int prefix = Integer.parseInt(cidrParts[1]);\n        AssertUtil.assertTrue(prefix > 0 && prefix <= 32, \"Invalid prefix: \" + prefix);\n        int mask = 0xffffffff << (32 - prefix);\n\n        int value = mask;\n        byte[] bytes = new byte[] {\n                (byte) (value >> 24),\n                (byte) (value >> 16 & 0xff),\n                (byte) (value >> 8 & 0xff),\n                (byte) (value & 0xff)\n        };\n\n        try {\n            return InetAddress.getByAddress(bytes);\n        } catch (UnknownHostException e) {\n            throw new IllegalArgumentException(\"Invalid cidr \" + cidr);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#ArrayInitializer#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(ArrayInitializer(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)ArrayInitializer)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Calculates the netmask from a given CIDR.", "call_func_name": ["java.lang.String.split", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.vmware.photon.controller.model.util.AssertUtil.assertTrue", "java.lang.Integer.parseInt", "java.lang.StringBuilder.append", "java.net.InetAddress.getByAddress", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["boolean", "java.lang.String"], ["java.lang.String"], ["int"], ["byte[]"], ["java.lang.String"]], "passed_comments": [{"com.vmware.photon.controller.model.util.AssertUtil.assertTrue": "Assert that provided  {@code expression} is {@code true} otherwise throwing an{@link IllegalArgumentException} with the specified {@code errorMessage}. <p> {@code AssertUtil.assertTrue(arr.length>0, \"'arr' shall not be empty.\");}"}]}, {"index": "295", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/IpHelper.java", "methodName": "com.vmware.photon.controller.model.util.IpHelper.calculateNetmaskStringFromCidr", "methodParameterType": "String#", "methodParameterName": "cidr#", "methodBody": "public static String calculateNetmaskStringFromCidr(String cidr) {\n        InetAddress netmask = calculateNetmaskFromCidr(cidr);\n        return netmask.getHostAddress();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Calculates the netmask from a given CIDR.", "call_func_name": ["com.vmware.photon.controller.model.util.IpHelper.calculateNetmaskFromCidr", "java.net.InetAddress.getHostAddress"], "call_func_parameter": [["java.lang.String"], [""]], "passed_comments": [{"com.vmware.photon.controller.model.util.IpHelper.calculateNetmaskFromCidr": "Calculates the netmask from a given CIDR."}]}, {"index": "296", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/util/IpHelper.java", "methodName": "com.vmware.photon.controller.model.util.IpHelper.safeLongToInt", "methodParameterType": "long#", "methodParameterName": "l#", "methodBody": "public static int safeLongToInt(long l) {\n        if (l < Integer.MIN_VALUE || l > Integer.MAX_VALUE) {\n            throw new IllegalArgumentException(l\n                    + \" cannot be cast to int without changing its value.\");\n        }\n        return (int) l;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts a long to int only if the long value is small enough to fit into an int.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], ["long"], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "297", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/RouterService.java", "methodName": "com.vmware.photon.controller.model.resources.RouterService.validateState", "methodParameterType": "RouterState#", "methodParameterName": "routerState#", "methodBody": "private void validateState(RouterState routerState) {\n        Utils.validateState(getStateDescription(), routerState);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Common validation login.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "298", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/IPAddressService.java", "methodName": "com.vmware.photon.controller.model.resources.IPAddressService.processInput", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "private IPAddressState processInput(Operation op) {\n        if (!op.hasBody()) {\n            throw (new IllegalArgumentException(\"body is required\"));\n        }\n        IPAddressState state = op.getBody(IPAddressState.class);\n        validateState(state);\n        return state;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ParenthesizedExpression#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ParenthesizedExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ParenthesizedExpression)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param op operation", "call_func_name": ["com.vmware.xenon.common.Operation.hasBody", "java.lang.IllegalArgumentException.<init>", "com.vmware.xenon.common.Operation.getBody"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "299", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/IPAddressService.java", "methodName": "com.vmware.photon.controller.model.resources.IPAddressService.validateState", "methodParameterType": "IPAddressState#", "methodParameterName": "state#", "methodBody": "private void validateState(IPAddressState state) {\n        // Verify values based on the document description\n        Utils.validateState(getStateDescription(), state);\n\n        if (state.ipVersion == null) {\n            state.ipVersion = DEFAULT_IP_VERSION;\n        }\n\n        if (!SubnetValidator.isValidIPAddress(state.ipAddress, state.ipVersion)) {\n            throw new LocalizableValidationException(String.format(\"Invalid IP address: %s\",\n                    state.ipAddress),\n                    \"ip.address.invalid\", state.ipAddress);\n        }\n\n        validateIPAddressStatusWithConnectedResource(state);\n\n        logFine(\"Completed validation of IPAddressState: \" + state);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Validation upon creation of an IP address object. - valid IP address No need to validate that the IP is within the range.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "300", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/IPAddressService.java", "methodName": "com.vmware.photon.controller.model.resources.IPAddressService.validateIPAddressStatusTransition", "methodParameterType": "IPAddressState#IPAddressState#", "methodParameterName": "currentState#desiredState#", "methodBody": "private void validateIPAddressStatusTransition(IPAddressState currentState,\n            IPAddressState desiredState) {\n        AssertUtil.assertTrue(IPAddressStatus\n                        .isValidTransition(currentState.ipAddressStatus, desiredState.ipAddressStatus),\n                String.format(\"Invalid IP address status transition from [%s] to [%s]\",\n                        currentState.ipAddressStatus, desiredState.ipAddressStatus));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param currentState current IP address", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "301", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/IPAddressService.java", "methodName": "com.vmware.photon.controller.model.resources.IPAddressService.validateIPAddressStatusWithConnectedResource", "methodParameterType": "IPAddressState#", "methodParameterName": "ipAddressState#", "methodBody": "private void validateIPAddressStatusWithConnectedResource(IPAddressState ipAddressState) {\n        AssertUtil.assertFalse(ipAddressState.ipAddressStatus == IPAddressStatus.ALLOCATED\n                        && StringUtil.isNullOrEmpty(ipAddressState.connectedResourceLink),\n                \"ConnectedResourceLink is required if IP address status is ALLOCATED\");\n        AssertUtil.assertFalse((ipAddressState.ipAddressStatus == IPAddressStatus.RELEASED\n                        || ipAddressState.ipAddressStatus == IPAddressStatus.AVAILABLE)\n                        && !StringUtil.isNullOrEmpty(ipAddressState.connectedResourceLink),\n                \"ConnectedResourceLink must be null if IP address status is RELEASED\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ParenthesizedExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Validate connectedResourceLink is set if IP address is ALLOCATED and not set otherwise", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "302", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/TagFactoryService.java", "methodName": "com.vmware.photon.controller.model.resources.TagFactoryService.buildDefaultChildSelfLink", "methodParameterType": "ServiceDocument#", "methodParameterName": "document#", "methodBody": "@Override\n    protected String buildDefaultChildSelfLink(ServiceDocument document) {\n        TagState initState = (TagState) document;\n        if (initState.key != null && initState.value != null) {\n            return generateId(initState);\n        }\n        if (initState.documentSelfLink != null) {\n            return initState.documentSelfLink;\n        }\n        return super.buildDefaultChildSelfLink();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SuperMethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Override the buildDefaultChildSelfLink method to set the documentSelfLink. We don't want to have multiple tags with the same values, so we build the documentSelfLink ourselves taking into account all fields in the TagState", "call_func_name": ["com.vmware.xenon.common.FactoryService.buildDefaultChildSelfLink"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "303", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/FirewallService.java", "methodName": "com.vmware.photon.controller.model.resources.FirewallService.validateRules", "methodParameterType": "List<FirewallState.Allow>#", "methodParameterName": "rules#", "methodBody": "public static void validateRules(List<FirewallState.Allow> rules) {\n        for (FirewallState.Allow rule : rules) {\n            validateRuleName(rule.name);\n            // validate protocol and convert to lower case\n            rule.protocol = validateProtocol(rule.protocol);\n\n            // IP range must be in CIDR notation\n            // creating new SubnetUtils to validate\n            new SubnetUtils(rule.ipRange);\n            validatePorts(rule.ports);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Ensure that the allow rules conform to standard firewall practices.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.vmware.photon.controller.model.resources.FirewallService.validateRuleName", "com.vmware.photon.controller.model.resources.FirewallService.validateProtocol", "org.apache.commons.net.util.SubnetUtils.<init>", "com.vmware.photon.controller.model.resources.FirewallService.validatePorts"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.util.List"]], "passed_comments": "/"}, {"index": "304", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/util/PhotonModelUtils.java", "methodName": "com.vmware.photon.controller.model.resources.util.PhotonModelUtils.mergeLists", "methodParameterType": "List<String>#List<String>#", "methodParameterName": "source#patch#", "methodBody": "public static Pair<List<String>, Boolean> mergeLists(List<String> source, List<String> patch) {\n        if (patch == null) {\n            return new ImmutablePair<>(source, Boolean.FALSE);\n        }\n        boolean hasChanged = false;\n        List<String> result = source;\n        if (result == null) {\n            result = patch;\n            hasChanged = true;\n        } else {\n            for (String newValue : patch) {\n                if (!result.contains(newValue)) {\n                    result.add(newValue);\n                    hasChanged = true;\n                }\n            }\n        }\n        return new ImmutablePair<>(result, Boolean.valueOf(hasChanged));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Merges two lists of strings, filtering duplicate elements from the second one (the patch). Also keeping track if change of source list has been modified.", "call_func_name": ["org.apache.commons.lang3.tuple.ImmutablePair.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.List.contains", "java.util.List.add", "java.lang.Boolean.valueOf"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["boolean"]], "passed_comments": "/"}, {"index": "305", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/util/PhotonModelUtils.java", "methodName": "com.vmware.photon.controller.model.resources.util.PhotonModelUtils.waitToComplete", "methodParameterType": "DeferredResult<T>#", "methodParameterName": "dr#", "methodBody": "public static <T> T waitToComplete(DeferredResult<T> dr) {\n        return ((CompletableFuture<T>) dr.toCompletionStage()).join();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Wait\\Block for  {@link DeferredResult} to complete.<p> <b>Note</b>: Use with care, for example within tests.", "call_func_name": ["com.vmware.xenon.common.DeferredResult.toCompletionStage", "java.util.concurrent.CompletableFuture.join"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "306", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SecurityGroupService.java", "methodName": "com.vmware.photon.controller.model.resources.SecurityGroupService.validateRules", "methodParameterType": "List<Rule>#", "methodParameterName": "rules#", "methodBody": "private static void validateRules(List<Rule> rules) {\n        for (Rule rule : rules) {\n\n            validateRuleName(rule.name);\n\n            Protocol ruleProtocol = Protocol.validateProtocol(rule.protocol);\n\n            // IP range must be in CIDR notation or \"*\".\n            // creating new SubnetUtils to validate\n            if (!ANY.equals(rule.ipRangeCidr)) {\n                new SubnetUtils(rule.ipRangeCidr);\n            }\n            // port validation has no meaning for ICMP protocol\n            if (!Protocol.ICMPv4.equals(ruleProtocol) &&\n                    !Protocol.ICMPv6.equals(ruleProtocol)) {\n                validatePorts(rule.ports);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Ensure that the rules conform to standard security group practices.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.vmware.photon.controller.model.resources.SecurityGroupService.validateRuleName", "java.lang.String.equals", "org.apache.commons.net.util.SubnetUtils.<init>", "com.vmware.photon.controller.model.resources.SecurityGroupService.validatePorts"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.vmware.photon.controller.model.resources.SecurityGroupService.validatePorts": "Validate ports"}]}, {"index": "307", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SecurityGroupService.java", "methodName": "com.vmware.photon.controller.model.resources.SecurityGroupService.validatePorts", "methodParameterType": "String#", "methodParameterName": "ports#", "methodBody": "private static void validatePorts(String ports) {\n        if (ports == null) {\n            throw new IllegalArgumentException(\n                    \"minimum of one port is required, \"\n                            + \"none supplied\");\n        }\n        String[] pp = ports.split(\"-\");\n        if (pp.length > 2) {\n            // invalid port range\n            throw new IllegalArgumentException(\n                    \"invalid allow rule port range supplied \" + ports);\n        }\n        int previousPort = 0;\n        if (pp.length > 0) {\n            for (String aPp : pp) {\n                try {\n                    int iPort = Integer.parseInt(aPp);\n                    if (iPort < 0 || iPort > 65535) {\n                        throw new IllegalArgumentException(\n                                \"port numbers must be between 0 and 65535 but was \"\n                                        + iPort);\n                    }\n                    if (previousPort > 0 && previousPort > iPort) {\n                        throw new IllegalArgumentException(\n                                \"from port is greater than to port \" + iPort);\n                    }\n                    previousPort = iPort;\n                } catch (NumberFormatException e) {\n                    throw new IllegalArgumentException(\"Not a valid port: \" + aPp);\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Validate ports", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.lang.String.split", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.Integer.parseInt", "java.lang.StringBuilder.append"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["int"]], "passed_comments": "/"}, {"index": "308", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/ResourceUtils.java", "methodName": "com.vmware.photon.controller.model.resources.ResourceUtils.handlePatch", "methodParameterType": "Operation#T#ServiceDocumentDescription#Class<T>#Function<Operation,Boolean>#", "methodParameterName": "op#currentState#description#stateClass#customPatchHandler#", "methodBody": "public static <T extends ResourceState> void handlePatch(Operation op, T currentState,\n            ServiceDocumentDescription description, Class<T> stateClass,\n            Function<Operation, Boolean> customPatchHandler) {\n        try {\n            boolean hasStateChanged;\n\n            // apply standard patch merging\n            EnumSet<Utils.MergeResult> mergeResult = Utils.mergeWithStateAdvanced(description,\n                    currentState, stateClass, op);\n            hasStateChanged = mergeResult.contains(Utils.MergeResult.STATE_CHANGED);\n\n            if (!mergeResult.contains(Utils.MergeResult.SPECIAL_MERGE)) {\n                T patchBody = op.getBody(stateClass);\n\n                // apply ResourceState-specific merging\n                hasStateChanged |= ResourceUtils.mergeResourceStateWithPatch(currentState,\n                        patchBody);\n\n                // handle NULL_LINK_VALUE links\n                hasStateChanged |= nullifyLinkFields(description, currentState, patchBody);\n            }\n\n            // apply custom patch handler, if any\n            if (customPatchHandler != null) {\n                hasStateChanged |= customPatchHandler.apply(op);\n            }\n\n            if (!hasStateChanged) {\n                op.setStatusCode(Operation.STATUS_CODE_NOT_MODIFIED);\n            } else {\n                op.setBody(currentState);\n            }\n            op.complete();\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            op.fail(e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "This method handles merging of state for patch requests. It first checks to see if the patch body is for updating collections. If not it invokes the mergeWithState() method. Finally, users can specify a custom callback method to perform service specific merge operations. <p> If no changes are made to the current state, a response code  {@code NOT_MODIFIED} is returnedwith no body. If changes are made, the response body contains the full updated state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "309", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/ResourceUtils.java", "methodName": "com.vmware.photon.controller.model.resources.ResourceUtils.mergeResourceStateWithPatch", "methodParameterType": "ResourceState#ResourceState#", "methodParameterName": "source#patch#", "methodBody": "private static boolean mergeResourceStateWithPatch(ResourceState source,\n            ResourceState patch) {\n        boolean isChanged = false;\n\n        // tenantLinks requires special handling so that although it is a list, duplicate items\n        // are not allowed (i.e. it should behave as a set)\n        if (patch.tenantLinks != null && !patch.tenantLinks.isEmpty()) {\n            if (source.tenantLinks == null || source.tenantLinks.isEmpty()) {\n                source.tenantLinks = patch.tenantLinks;\n                isChanged = true;\n            } else {\n                for (String e : patch.tenantLinks) {\n                    if (!source.tenantLinks.contains(e)) {\n                        source.tenantLinks.add(e);\n                        isChanged = true;\n                    }\n                }\n            }\n        }\n\n        return isChanged;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(IfStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Updates the state of the service based on the input patch.", "call_func_name": ["java.util.List.isEmpty", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.List.contains", "java.util.List.add"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "310", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/ResourceUtils.java", "methodName": "com.vmware.photon.controller.model.resources.ResourceUtils.nullifyLinkFields", "methodParameterType": "ServiceDocumentDescription#T#T#", "methodParameterName": "desc#currentState#patchBody#", "methodBody": "private static <T extends ResourceState> boolean nullifyLinkFields(\n            ServiceDocumentDescription desc, T currentState, T patchBody) {\n        boolean modified = false;\n        for (PropertyDescription prop : desc.propertyDescriptions.values()) {\n            if (prop.usageOptions != null &&\n                    prop.usageOptions.contains(PropertyUsageOption.AUTO_MERGE_IF_NOT_NULL) &&\n                    prop.usageOptions.contains(PropertyUsageOption.LINK)) {\n                Object patchValue = ReflectionUtils.getPropertyValue(prop, patchBody);\n                if (NULL_LINK_VALUE.equals(patchValue)) {\n                    Object currentValue = ReflectionUtils.getPropertyValue(prop, currentState);\n                    modified |= currentValue != null;\n                    ReflectionUtils.setPropertyValue(prop, currentState, null);\n                }\n            }\n        }\n        return modified;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Nullifies link fields if the patch body contains NULL_LINK_VALUE links.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "311", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SubnetRangeService.java", "methodName": "com.vmware.photon.controller.model.resources.SubnetRangeService.handleCreate", "methodParameterType": "Operation#", "methodParameterName": "create#", "methodBody": "@Override\n    public void handleCreate(Operation create) {\n        try {\n\n            SubnetRangeState subnetRangeState = getOperationBody(create);\n            validateAll(subnetRangeState)\n                    .whenCompleteNotify(create);\n        } catch (Throwable t) {\n            create.fail(t);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Comes in here for a http post for a new document", "call_func_name": ["com.vmware.photon.controller.model.resources.SubnetRangeService.getOperationBody", "com.vmware.xenon.common.DeferredResult.whenCompleteNotify", "com.vmware.xenon.common.Operation.fail"], "call_func_parameter": [["com.vmware.xenon.common.Operation"], ["com.vmware.xenon.common.Operation"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "312", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SubnetRangeService.java", "methodName": "com.vmware.photon.controller.model.resources.SubnetRangeService.handlePut", "methodParameterType": "Operation#", "methodParameterName": "put#", "methodBody": "@Override\n    public void handlePut(Operation put) {\n        try {\n            SubnetRangeState subnetRangeState = getOperationBody(put);\n            subnetRangeState.copyTenantLinks(getState(put));\n\n            validateAll(subnetRangeState)\n                    .thenAccept((ignored) -> setState(put, subnetRangeState))\n                    .whenCompleteNotify(put);\n        } catch (Throwable t) {\n            put.fail(t);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Comes in here for a http put on an existing doc", "call_func_name": ["com.vmware.photon.controller.model.resources.SubnetRangeService.getOperationBody", "com.vmware.photon.controller.model.resources.SubnetRangeService.getState", "com.vmware.xenon.common.DeferredResult.thenAccept", "com.vmware.xenon.common.DeferredResult.whenCompleteNotify", "com.vmware.xenon.common.Operation.fail"], "call_func_parameter": [["com.vmware.xenon.common.Operation"], ["com.vmware.xenon.common.Operation"], ["java.util.function.Consumer"], ["com.vmware.xenon.common.Operation"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "313", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SubnetRangeService.java", "methodName": "com.vmware.photon.controller.model.resources.SubnetRangeService.handlePatch", "methodParameterType": "Operation#", "methodParameterName": "patch#", "methodBody": "@Override\n    public void handlePatch(Operation patch) {\n        checkHasBody(patch);\n\n        try {\n            SubnetRangeState currentState = getState(patch);\n\n            // Merge the patch values to current state\n            // In order to validate the merged result\n            EnumSet<Utils.MergeResult> mergeResult =\n                    Utils.mergeWithStateAdvanced(getStateDescription(), currentState,\n                            SubnetRangeState.class, patch);\n\n            boolean hasStateChanged = mergeResult.contains(Utils.MergeResult.STATE_CHANGED);\n\n            if (hasStateChanged) {\n                validateAll(currentState)\n                        .thenAccept((ignored) -> setState(patch, currentState))\n                        .whenCompleteNotify(patch);\n            } else {\n                patch.setStatusCode(Operation.STATUS_CODE_NOT_MODIFIED);\n                patch.complete();\n            }\n\n        } catch (Exception e) {\n            this.logSevere(String.format(\"SubnetRangeService: failed to perform patch [%s]\",\n                    e.getMessage()));\n            patch.fail(e);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Comes in here for a http patch on an existing doc For patch only the values being changed are sent. getState() method fills in the missing values from the existing doc.", "call_func_name": ["com.vmware.photon.controller.model.resources.SubnetRangeService.checkHasBody", "com.vmware.photon.controller.model.resources.SubnetRangeService.getState", "com.vmware.photon.controller.model.resources.SubnetRangeService.getStateDescription", "com.vmware.xenon.common.Utils.mergeWithStateAdvanced", "java.util.EnumSet.contains", "com.vmware.xenon.common.DeferredResult.thenAccept", "com.vmware.xenon.common.DeferredResult.whenCompleteNotify", "com.vmware.xenon.common.Operation.setStatusCode", "com.vmware.xenon.common.Operation.complete", "java.lang.Exception.getMessage", "java.lang.String.format", "com.vmware.photon.controller.model.resources.SubnetRangeService.logSevere", "com.vmware.xenon.common.Operation.fail"], "call_func_parameter": [["com.vmware.xenon.common.Operation"], ["com.vmware.xenon.common.Operation"], [""], ["com.vmware.xenon.common.ServiceDocumentDescription", "com.vmware.xenon.common.ServiceDocument", "java.lang.Class", "com.vmware.xenon.common.Operation"], ["java.lang.Object"], ["java.util.function.Consumer"], ["com.vmware.xenon.common.Operation"], ["int"], [""], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "314", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SubnetRangeService.java", "methodName": "com.vmware.photon.controller.model.resources.SubnetRangeService.validateAll", "methodParameterType": "SubnetRangeState#", "methodParameterName": "subnetRangeState#", "methodBody": "private DeferredResult<Void> validateAll(SubnetRangeState subnetRangeState) {\n\n        validateState(subnetRangeState);\n\n        return DeferredResult\n                .allOf(\n                        validateIps(subnetRangeState),\n                        validateNoRangeOverlap(subnetRangeState)\n                );\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Do all validations on the ip address before the data is committed. In case of any validation error an exception is raised.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "315", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SubnetRangeService.java", "methodName": "com.vmware.photon.controller.model.resources.SubnetRangeService.validateIps", "methodParameterType": "SubnetRangeState#", "methodParameterName": "subnetRangeState#", "methodBody": "private DeferredResult<Void> validateIps(SubnetRangeState subnetRangeState) {\n        if (subnetRangeState.subnetLink != null) {\n            return getSubnetState(subnetRangeState.subnetLink)\n                    .thenAccept((op) -> {\n                        SubnetState subnetState = op.getBody(SubnetState.class);\n                        validateIpInRange(subnetRangeState, subnetState);\n                    });\n        }\n        return DeferredResult.completed(null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a Deferred result if start IP address and end IP address are within the network specfied  by the subnet CIDR. If not an exception is raised in the method this calls.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "316", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SubnetRangeService.java", "methodName": "com.vmware.photon.controller.model.resources.SubnetRangeService.validateNoRangeOverlap", "methodParameterType": "SubnetRangeState#", "methodParameterName": "subnetRangeState#", "methodBody": "private DeferredResult<Void> validateNoRangeOverlap(SubnetRangeState subnetRangeState) {\n        if (subnetRangeState.subnetLink != null) {\n            return getSubnetRangesInSubnet(subnetRangeState.subnetLink)\n                    .thenAccept((subnetRangeList) -> {\n                        validateIpsOutsideDefinedRanges(\n                                subnetRangeState.documentSelfLink,\n                                subnetRangeState.startIPAddress,\n                                subnetRangeState.endIPAddress,\n                                subnetRangeList);\n                    });\n        }\n        return DeferredResult.completed(null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a Deferred result if there is no overlap of the current ip range with the pre existing ip ranges. Else exception is raised (in the method this calls).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "317", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SubnetRangeService.java", "methodName": "com.vmware.photon.controller.model.resources.SubnetRangeService.validateState", "methodParameterType": "SubnetRangeState#", "methodParameterName": "state#", "methodBody": "private void validateState(SubnetRangeState state) {\n        Utils.validateState(getStateDescription(), state);\n\n        if (!SubnetValidator.isValidIPAddress(state.startIPAddress, state.ipVersion)) {\n            throw new LocalizableValidationException(\n                    String.format(\"Invalid start IP address: %s\",\n                            state.startIPAddress),\n                    \"subnet.range.ip.invalid.start\",\n                    state.startIPAddress);\n        }\n\n        if (!SubnetValidator.isValidIPAddress(state.endIPAddress, state.ipVersion)) {\n            throw new LocalizableValidationException(\n                    String.format(\"Invalid end IP address: %s\",\n                            state.endIPAddress),\n                    \"subnet.range.ip.invalid.start\",\n                    state.endIPAddress);\n        }\n\n        if (SubnetValidator\n                .isStartIPGreaterThanEndIP(state.startIPAddress, state.endIPAddress,\n                        state.ipVersion)) {\n            throw new LocalizableValidationException(\n                    \"Subnet range is invalid. Start IP address must be smaller than end IP address\",\n                    \"subnet.range.ip.start.must.be.smaller\");\n\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleType#StringLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Validate: - valid start IP address - valid end IP address - valid range", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "318", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SubnetRangeService.java", "methodName": "com.vmware.photon.controller.model.resources.SubnetRangeService.validateIpInRange", "methodParameterType": "SubnetRangeState#SubnetState#", "methodParameterName": "subnetRangeState#subnetstate#", "methodBody": "private void validateIpInRange(SubnetRangeState subnetRangeState, SubnetState subnetstate) {\n\n        if (!SubnetValidator\n                .isIpInValidRange(\n                        subnetRangeState.startIPAddress,\n                        subnetstate.subnetCIDR,\n                        subnetRangeState.ipVersion)) {\n            throw new LocalizableValidationException(\n                    String.format(\"Start IP address %s is invalid. It lies outside the \"\n                                    + \"IP range specified by the CIDR: %s\",\n                            subnetRangeState.startIPAddress,\n                            subnetstate.subnetCIDR),\n                    \"subnet.range.ip.outside.range.start\",\n                    subnetRangeState.startIPAddress,\n                    subnetstate.subnetCIDR);\n        }\n\n        if (!SubnetValidator\n                .isIpInValidRange(\n                        subnetRangeState.endIPAddress,\n                        subnetstate.subnetCIDR,\n                        subnetRangeState.ipVersion)) {\n            throw new LocalizableValidationException(\n                    String.format(\"End IP address %s is invalid. It lies outside the \"\n                                    + \"IP range specified by the CIDR: %s\",\n                            subnetRangeState.endIPAddress,\n                            subnetstate.subnetCIDR),\n                    \"subnet.range.ip.outside.range.start\",\n                    subnetRangeState.endIPAddress,\n                    subnetstate.subnetCIDR);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Validate that the start and end IP addresses are inside the network specified by the CIDR. If it's outside, an exception is raised.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "319", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SubnetRangeService.java", "methodName": "com.vmware.photon.controller.model.resources.SubnetRangeService.validateIpsOutsideDefinedRanges", "methodParameterType": "String#String#String#List<SubnetRangeState>#", "methodParameterName": "documentSelfLink#startIp#endIp#subnetRangeStates#", "methodBody": "private void validateIpsOutsideDefinedRanges(String documentSelfLink, String startIp,\n            String endIp,\n            List<SubnetRangeState>\n                    subnetRangeStates) {\n        String ipUnderTest;\n\n        for (SubnetRangeState subnetRangeState : subnetRangeStates) {\n            String selfLink = subnetRangeState.documentSelfLink;\n\n            //For create self link is empty. Check against all pre existing subnet ranges\n            //For updates or patches, don't check against self\n            if (selfLink == null || !selfLink.equals(documentSelfLink)) {\n\n                String ipBegin = subnetRangeState.startIPAddress;\n                String ipEnd = subnetRangeState.endIPAddress;\n                IPVersion ipVersion = subnetRangeState.ipVersion;\n\n                ipUnderTest = startIp;\n                throwExceptionIfIpOverlap(ipBegin, ipEnd, ipVersion, ipUnderTest);\n\n                ipUnderTest = endIp;\n                throwExceptionIfIpOverlap(ipBegin, ipEnd, ipVersion, ipUnderTest);\n            }\n\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "We don't want ip ranges to overlap. So we check the newly created ip range, with the pre existing ip ranges and make sure there is no over lap. If there is an overlap, raise exception.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.equals", "com.vmware.photon.controller.model.resources.SubnetRangeService.throwExceptionIfIpOverlap"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.String", "com.vmware.photon.controller.model.support.IPVersion", "java.lang.String"]], "passed_comments": "/"}, {"index": "320", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SubnetRangeService.java", "methodName": "com.vmware.photon.controller.model.resources.SubnetRangeService.getSubnetState", "methodParameterType": "String#", "methodParameterName": "link#", "methodBody": "private <T> DeferredResult<Operation> getSubnetState(String link) {\n        AssertUtil.assertNotEmpty(link, \"Cannot fetch subnet details with an empty subnet link\");\n        URI uri = UriUtils.buildUri(getHost(), link);\n        return sendWithDeferredResult(Operation.createGet(uri));\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fetch subnet state by document link.", "call_func_name": ["com.vmware.photon.controller.model.util.AssertUtil.assertNotEmpty", "com.vmware.photon.controller.model.resources.SubnetRangeService.getHost", "com.vmware.xenon.common.UriUtils.buildUri", "com.vmware.xenon.common.Operation.createGet", "com.vmware.photon.controller.model.resources.SubnetRangeService.sendWithDeferredResult"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], ["com.vmware.xenon.common.ServiceHost", "java.lang.String"], ["java.net.URI"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "321", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/SubnetRangeService.java", "methodName": "com.vmware.photon.controller.model.resources.SubnetRangeService.getSubnetRangesInSubnet", "methodParameterType": "String#", "methodParameterName": "subnetLink#", "methodBody": "private DeferredResult<List<SubnetRangeState>> getSubnetRangesInSubnet(String subnetLink) {\n        Query.Builder qBuilder = Query.Builder.create()\n                .addKindFieldClause(SubnetRangeState.class)\n                .addFieldClause(FIELD_NAME_SUBNET_LINK, subnetLink);\n\n        QueryTop<SubnetRangeState> queryTop = new QueryUtils.QueryTop<>(\n                this.getHost(),\n                qBuilder.build(),\n                SubnetRangeState.class,\n                null\n        );\n\n        return queryTop.collectDocuments(Collectors.toList());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#NullLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(NullLiteral)NullLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fetch all pre existing subnet ranges", "call_func_name": ["com.vmware.photon.controller.model.resources.SubnetRangeService.getHost", "java.util.stream.Collectors.toList"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "322", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/ResourcePoolService.java", "methodName": "com.vmware.photon.controller.model.resources.ResourcePoolService.generateResourcePoolQuery", "methodParameterType": "ResourcePoolState#", "methodParameterName": "initState#", "methodBody": "private Query generateResourcePoolQuery(ResourcePoolState initState) {\n        Query query = Query.Builder.create()\n                .addKindFieldClause(ComputeState.class)\n                .addFieldClause(ComputeState.FIELD_NAME_RESOURCE_POOL_LINK, getSelfLink())\n                .build();\n\n        return query;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates a query that finds all computes which resource pool link points to this resource pool. Applicable to non-elastic pools only.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "323", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/ImageService.java", "methodName": "com.vmware.photon.controller.model.resources.ImageService.checkForValid", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "private boolean checkForValid(Operation op) {\n        if (checkForBody(op)) {\n            try {\n                ImageState imageState = op.getBody(ImageState.class);\n\n                Utils.validateState(getStateDescription(), imageState);\n\n                if (!imageState.isPrivateImage() && !imageState.isPublicImage()) {\n                    throw new IllegalArgumentException(\n                            \"Either \" + ImageState.class.getSimpleName()\n                                    + \".\" + ImageState.FIELD_NAME_ENDPOINT_TYPE +\n                                    \" or \" + ImageState.class.getSimpleName()\n                                    + \".\" + ImageState.FIELD_NAME_ENDPOINT_LINK +\n                                    \" must be set.\");\n                }\n                if (imageState.isPrivateImage() && imageState.isPublicImage()) {\n                    throw new IllegalArgumentException(\n                            \"Both \" + ImageState.class.getSimpleName()\n                                    + \".\" + ImageState.FIELD_NAME_ENDPOINT_TYPE +\n                                    \" and \" + ImageState.class.getSimpleName()\n                                    + \".\" + ImageState.FIELD_NAME_ENDPOINT_LINK +\n                                    \" cannot be set.\");\n                }\n\n                return true;\n\n            } catch (Throwable t) {\n                op.fail(t);\n                return false;\n            }\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Common validation login.", "call_func_name": ["com.vmware.photon.controller.model.resources.ImageService.checkForBody", "com.vmware.xenon.common.Operation.getBody", "com.vmware.photon.controller.model.resources.ImageService.getStateDescription", "com.vmware.xenon.common.Utils.validateState", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getSimpleName", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "com.vmware.xenon.common.Operation.fail"], "call_func_parameter": [["com.vmware.xenon.common.Operation"], ["java.lang.Class"], [""], ["com.vmware.xenon.common.ServiceDocumentDescription", "com.vmware.xenon.common.ServiceDocument"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "324", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/ResourceState.java", "methodName": "com.vmware.photon.controller.model.resources.ResourceState.copyTenantLinks", "methodParameterType": "ResourceState#", "methodParameterName": "currentState#", "methodBody": "public void copyTenantLinks(ResourceState currentState) {\n        ResourceState.copyTenantLinks(currentState, this);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Utility method to keep the tenant links when overwriting the whole resource state document using PUT operation. In case currentState is null or does not have tenantLinks this method does nothing.", "call_func_name": ["com.vmware.photon.controller.model.resources.ResourceState.copyTenantLinks"], "call_func_parameter": [["com.vmware.photon.controller.model.resources.ResourceState", "com.vmware.photon.controller.model.resources.ResourceState"]], "passed_comments": [{"com.vmware.photon.controller.model.resources.ResourceState.copyTenantLinks": "Utility method to keep the tenant links when overwriting the whole resource state document using PUT operation. In case currentState is null or does not have tenantLinks this method does nothing."}]}, {"index": "325", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/resources/ResourceState.java", "methodName": "com.vmware.photon.controller.model.resources.ResourceState.copyTenantLinks", "methodParameterType": "ResourceState#ResourceState#", "methodParameterName": "currentState#newState#", "methodBody": "public static void copyTenantLinks(ResourceState currentState, ResourceState newState) {\n        if (newState == null) {\n            throw new IllegalArgumentException(\"new state cannot be null\");\n        }\n        if (currentState == null || currentState.tenantLinks == null\n                || currentState.tenantLinks.isEmpty()) {\n            return;\n        }\n        if (newState.tenantLinks == null || newState.tenantLinks.isEmpty()) {\n            newState.tenantLinks = new ArrayList<>(currentState.tenantLinks);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Utility method to keep the tenant links when overwriting the whole resource state document using PUT operation. In case currentState is null or does not have tenantLinks this method does nothing.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.util.List.isEmpty", "java.util.ArrayList.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.util.Collection"]], "passed_comments": "/"}, {"index": "326", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/service/SslTrustCertificateFactoryService.java", "methodName": "com.vmware.photon.controller.model.security.service.SslTrustCertificateFactoryService.handlePost", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "@Override\n    public void handlePost(Operation op) {\n        if (op.isSynchronize()) {\n            op.complete();\n            return;\n        }\n        if (op.hasBody()) {\n            SslTrustCertificateState body = (SslTrustCertificateState) op.getBody(this.stateType);\n            if (body == null) {\n                op.fail(new IllegalArgumentException(\"structured body is required\"));\n                return;\n            }\n\n            if (body.documentSourceLink != null) {\n                op.fail(new IllegalArgumentException(\"clone request not supported\"));\n                return;\n            }\n\n            body.documentSelfLink = generateSelfLink(body);\n            op.setBody(body);\n            op.complete();\n        } else {\n            op.fail(new IllegalArgumentException(\"body is required\"));\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Override the handlePost method to set the documentSelfLink. We don't want to have multiple certificate states with the same certificate, so we build the documentSelfLink ourselves", "call_func_name": ["com.vmware.xenon.common.Operation.isSynchronize", "com.vmware.xenon.common.Operation.complete", "com.vmware.xenon.common.Operation.hasBody", "com.vmware.xenon.common.Operation.getBody", "java.lang.IllegalArgumentException.<init>", "com.vmware.xenon.common.Operation.fail", "com.vmware.xenon.common.Operation.setBody"], "call_func_parameter": [[""], [""], [""], ["java.lang.Class"], ["java.lang.String"], ["java.lang.Throwable"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "327", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/SslTrustCertificateServiceUtils.java", "methodName": "com.vmware.photon.controller.model.security.ssl.SslTrustCertificateServiceUtils.subscribe", "methodParameterType": "ServiceHost#Consumer<Operation>#", "methodParameterName": "host#consumer#", "methodBody": "static void subscribe(ServiceHost host, Consumer<Operation> consumer) {\n        QueryTask task = getQueryTask();\n        Operation.createPost(host, ServiceUriPaths.CORE_LOCAL_QUERY_TASKS)\n                .setBody(task)\n                .setReferer(host.getUri())\n                .setCompletion((o, e) -> {\n                    if (e != null && o.getStatusCode() != Operation.STATUS_CODE_CONFLICT) {\n                        host.log(Level.SEVERE, Utils.toString(e));\n                        return;\n                    }\n\n                    String taskUriPath = UriUtils.buildUriPath(\n                            ServiceUriPaths.CORE_LOCAL_QUERY_TASKS, task.documentSelfLink);\n                    Operation subscribePost = Operation.createPost(host, taskUriPath)\n                            .setReferer(host.getUri())\n                            .setCompletion((op, ex) -> {\n                                if (ex != null) {\n                                    host.log(Level.SEVERE, Utils.toString(ex));\n                                }\n                            });\n\n                    host.log(Level.INFO, \"Subscribing to a continuous task: %s\", taskUriPath);\n                    host.startSubscriptionService(subscribePost, consumer,\n                            ServiceSubscriber.create(false));\n                }).sendWith(host);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Subscribes a consumer to the given continuous query.", "call_func_name": ["com.vmware.photon.controller.model.security.ssl.SslTrustCertificateServiceUtils.getQueryTask", "com.vmware.xenon.common.Operation.createPost", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.ServiceHost.getUri", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.xenon.common.Operation.sendWith"], "call_func_parameter": [[""], ["com.vmware.xenon.common.ServiceHost", "java.lang.String"], ["java.lang.Object"], [""], ["java.net.URI"], ["com.vmware.xenon.common.ServiceRequestSender"]], "passed_comments": "/"}, {"index": "328", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/DelegatingX509TrustManager.java", "methodName": "com.vmware.photon.controller.model.security.ssl.DelegatingX509TrustManager.putDelegate", "methodParameterType": "Object#X509TrustManager#", "methodParameterName": "key#newDelegate#", "methodBody": "public void putDelegate(Object key, X509TrustManager newDelegate) {\n        this.delegates.put(key, newDelegate);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a delegate identified by the given unique key (can be used to remove it later)", "call_func_name": ["java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "329", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/DelegatingX509TrustManager.java", "methodName": "com.vmware.photon.controller.model.security.ssl.DelegatingX509TrustManager.getDelegate", "methodParameterType": "Object#", "methodParameterName": "key#", "methodBody": "public X509TrustManager getDelegate(Object key) {\n        return this.delegates.get(key);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a delegate identified by the given unique key", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "330", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/DelegatingX509TrustManager.java", "methodName": "com.vmware.photon.controller.model.security.ssl.DelegatingX509TrustManager.removeDelegate", "methodParameterType": "Object#", "methodParameterName": "key#", "methodBody": "public X509TrustManager removeDelegate(Object key) {\n        return this.delegates.remove(key);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Remove a previously added delegate", "call_func_name": ["java.util.Map.remove"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "331", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/ServerX509TrustManager.java", "methodName": "com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.create", "methodParameterType": "ServiceHost#", "methodParameterName": "host#", "methodBody": "public static synchronized ServerX509TrustManager create(ServiceHost host) {\n        if (INSTANCE == null) {\n            INSTANCE = new ServerX509TrustManager(host);\n            INSTANCE.start();\n        }\n        return INSTANCE;\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method initializes if not already initialized and start the instance (load certificates and subscribes for certificate changes)", "call_func_name": ["com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.<init>", "com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.start"], "call_func_parameter": [["com.vmware.xenon.common.ServiceHost"], [""]], "passed_comments": [{"com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.start": "Start the active subscription notifications of this trust manager and load the initial state of ssl trust certificates."}]}, {"index": "332", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/ServerX509TrustManager.java", "methodName": "com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.init", "methodParameterType": "ServiceHost#", "methodParameterName": "host#", "methodBody": "public static synchronized ServerX509TrustManager init(ServiceHost host) {\n        if (INSTANCE == null) {\n            INSTANCE = new ServerX509TrustManager(host);\n        }\n        return INSTANCE;\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method only initialize the ServerX509TrustManager, does not start it. The method is intended to be use only on server start.", "call_func_name": ["com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.<init>"], "call_func_parameter": [["com.vmware.xenon.common.ServiceHost"]], "passed_comments": "/"}, {"index": "333", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/ServerX509TrustManager.java", "methodName": "com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.getInstance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ServerX509TrustManager getInstance() {\n        return INSTANCE;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return instance if created/initialized beforehand or {@code null}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "334", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/ServerX509TrustManager.java", "methodName": "com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.invalidate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static synchronized void invalidate() {\n        INSTANCE = null;\n    }", "AST": "Javadoc#Modifier#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Invalidate the instance, if created/initialized", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "335", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/ServerX509TrustManager.java", "methodName": "com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.start", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void start() {\n        try {\n            loadSslTrustCertServices();\n            subscribeForSslTrustCertNotifications();\n        } catch (Exception e) {\n            this.host.log(Level.SEVERE,\n                    \"Failure while subscribing for ssl certificate notifications: \"\n                            + Utils.toString(e));\n        } finally {\n            schedulePeriodicCertificatesReload();\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Start the active subscription notifications of this trust manager and load the initial state of ssl trust certificates.", "call_func_name": ["com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.loadSslTrustCertServices", "com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.subscribeForSslTrustCertNotifications", "com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.schedulePeriodicCertificatesReload", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.vmware.xenon.common.Utils.toString", "java.lang.StringBuilder.toString", "com.vmware.xenon.common.ServiceHost.log"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], ["java.lang.Throwable"], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Object[]"]], "passed_comments": [{"com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.schedulePeriodicCertificatesReload": "Periodically reload all certificates in case we missed something.. e.g. replicated certificates from other xenon nodes"}]}, {"index": "336", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/ServerX509TrustManager.java", "methodName": "com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager.schedulePeriodicCertificatesReload", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void schedulePeriodicCertificatesReload() {\n        long nextDelay = (this.reloadCounter.get() > this.reloadCounterThreshold)\n                ? this.maintenanceInterval\n                : this.maintenanceIntervalInitial;\n\n        if (this.host.isStopping()) {\n            return;\n        }\n        this.host.schedule(() -> {\n            try {\n                this.host.log(Level.INFO, \"Host \" + this.host.getPublicUri()\n                        + \": reloading all certificates\");\n                loadSslTrustCertServices();\n\n                this.reloadCounter.updateAndGet((r) -> (r > this.reloadCounterThreshold) ? r\n                        : r +\n                                1);\n\n                schedulePeriodicCertificatesReload();\n            } catch (Exception e) {\n                this.host.log(Level.WARNING, \"%s\", e.getMessage());\n                this.host.log(Level.FINE, \"%s\", Utils.toString(e));\n\n                schedulePeriodicCertificatesReload();\n            }\n        }, nextDelay, TimeUnit.MICROSECONDS);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#InfixExpression#ParenthesizedExpression#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#ThisExpression#SimpleName#FieldAccess#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ConditionalExpression#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)ParenthesizedExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ConditionalExpression)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)LambdaExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Periodically reload all certificates in case we missed something.. e.g. replicated certificates from other xenon nodes", "call_func_name": ["java.util.concurrent.atomic.AtomicInteger.get", "com.vmware.xenon.common.ServiceHost.isStopping", "java.lang.Runnable.run", "com.vmware.xenon.common.ServiceHost.schedule"], "call_func_parameter": [[""], [""], ["com.vmware.photon.controller.model.security.ssl.ServerX509TrustManager"], ["java.lang.Runnable", "long", "java.util.concurrent.TimeUnit"]], "passed_comments": "/"}, {"index": "337", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/X509TrustManagerResolver.java", "methodName": "com.vmware.photon.controller.model.security.ssl.X509TrustManagerResolver.getCertificate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public X509Certificate getCertificate() {\n        if (this.connectionCertificates.isEmpty()) {\n            throw new IllegalStateException(\n                    \"checkServerTrusted was not called or was not successful.\");\n        }\n        return this.connectionCertificates.get(0);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the Server Trust Certificate from the chain.", "call_func_name": ["java.util.List.isEmpty", "java.lang.IllegalStateException.<init>", "java.util.List.get"], "call_func_parameter": [[""], ["java.lang.String"], ["int"]], "passed_comments": "/"}, {"index": "338", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/X509TrustManagerResolver.java", "methodName": "com.vmware.photon.controller.model.security.ssl.X509TrustManagerResolver.getCertificateException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CertificateException getCertificateException() {\n        return this.certificateException;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return {@link CertificateException} in case the certificate is not trusted", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "339", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/ssl/X509TrustManagerResolver.java", "methodName": "com.vmware.photon.controller.model.security.ssl.X509TrustManagerResolver.getCertificateInfoServiceErrorResponse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CertificateInfoServiceErrorResponse getCertificateInfoServiceErrorResponse() {\n        if (this.connectionCertificates.isEmpty()) {\n            return null;\n        }\n        X509Certificate[] chain = getCertificateChain();\n        String certificate = CertificateUtil.toPEMformat(chain);\n        Map<String, String> certProps = CertificateUtil.getCertificateInfoProperties(chain[0]);\n        CertificateInfo certificateInfo = CertificateInfo.of(certificate, certProps);\n\n        CertificateException certException = getCertificateException();\n\n        return CertificateInfoServiceErrorResponse.create(\n                certificateInfo,\n                Operation.STATUS_CODE_UNAVAILABLE,\n                CertificateInfoServiceErrorResponse.ERROR_CODE_UNTRUSTED_CERTIFICATE,\n                certException.getCause());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return {@link CertificateInfoServiceErrorResponse} for the untrusted certificate or {@code null} if the resolver was not called or the certificate is trusted", "call_func_name": ["java.util.List.isEmpty", "com.vmware.photon.controller.model.security.ssl.X509TrustManagerResolver.getCertificateChain", "com.vmware.photon.controller.model.security.util.CertificateUtil.toPEMformat", "com.vmware.photon.controller.model.security.util.CertificateUtil.getCertificateInfoProperties", "com.vmware.photon.controller.model.support.CertificateInfo.of", "com.vmware.photon.controller.model.security.ssl.X509TrustManagerResolver.getCertificateException", "java.security.cert.CertificateException.getCause", "com.vmware.photon.controller.model.support.CertificateInfoServiceErrorResponse.create"], "call_func_parameter": [[""], [""], ["java.security.cert.X509Certificate[]"], ["java.security.cert.X509Certificate"], ["java.lang.String", "java.util.Map"], [""], [""], ["com.vmware.photon.controller.model.support.CertificateInfo", "int", "int", "java.lang.Throwable"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.toPEMformat": "Serialize Certificate chain in PEM format"}, {"com.vmware.photon.controller.model.security.util.CertificateUtil.getCertificateInfoProperties": "Extracts  {@link X509Certificate} properties from the given {@code cert}"}, {"com.vmware.photon.controller.model.security.ssl.X509TrustManagerResolver.getCertificateException": "@return {@link CertificateException} in case the certificate is not trusted"}]}, {"index": "340", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/EncryptionUtils.java", "methodName": "com.vmware.photon.controller.model.security.util.EncryptionUtils.initEncryptionService", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void initEncryptionService() {\n        File encryptionKey = getEncryptionFile();\n        if (encryptionKey == null) {\n            encryptionService = null;\n        } else {\n            encryptionService = new EncryptorService(encryptionKey);\n            try {\n                encryptionService.encrypt(ENCRYPTION_PREFIX);\n            } catch (Exception e) {\n                throw new LocalizableValidationException(e, \"Error validating the encryption key!\",\n                        \"common.encryption.file.validation\");\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Initializes (or re-initializes) the  {@link EncryptorService} by reading the configuredencryption key file.", "call_func_name": ["com.vmware.photon.controller.model.security.util.EncryptionUtils.getEncryptionFile", "com.vmware.photon.controller.model.security.util.EncryptorService.<init>", "com.vmware.photon.controller.model.security.util.EncryptorService.encrypt", "com.vmware.xenon.common.LocalizableValidationException.<init>"], "call_func_parameter": [[""], ["java.io.File"], ["java.lang.String"], ["java.lang.Throwable", "java.lang.String", "java.lang.String", "java.lang.Object[]"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.EncryptorService.encrypt": "Encrypts the provided string."}]}, {"index": "341", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/EncryptionUtils.java", "methodName": "com.vmware.photon.controller.model.security.util.EncryptionUtils.encrypt", "methodParameterType": "String#", "methodParameterName": "input#", "methodBody": "public static String encrypt(String input) {\n        if (encryptionService == null || input == null || input.length() == 0\n                || input.startsWith(ENCRYPTION_PREFIX)) {\n            return input;\n        }\n        return ENCRYPTION_PREFIX + encryptionService.encrypt(input);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encrypts the provided string.", "call_func_name": ["java.lang.String.length", "java.lang.String.startsWith", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.vmware.photon.controller.model.security.util.EncryptorService.encrypt", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.EncryptorService.encrypt": "Encrypts the provided string."}]}, {"index": "342", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/EncryptionUtils.java", "methodName": "com.vmware.photon.controller.model.security.util.EncryptionUtils.decrypt", "methodParameterType": "String#", "methodParameterName": "input#", "methodBody": "public static String decrypt(String input) {\n        if (encryptionService == null || input == null || !input.startsWith(ENCRYPTION_PREFIX)) {\n            return input;\n        }\n        return encryptionService.decrypt(input.replaceFirst(ENCRYPTION_PREFIX, \"\"));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decrypts the provided string.", "call_func_name": ["java.lang.String.startsWith", "java.lang.String.replaceFirst", "com.vmware.photon.controller.model.security.util.EncryptorService.decrypt"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.EncryptorService.decrypt": "Decrypts the provided string."}]}, {"index": "343", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/KeyUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.KeyUtil.decodeCertificate", "methodParameterType": "String#", "methodParameterName": "certificate#", "methodBody": "public static X509Certificate decodeCertificate(String certificate)\n            throws CertificateException {\n\n        certificate = certificate != null ? certificate.trim() : null;\n        if (certificate != null && (certificate = certificate.trim()).length() > 0) {\n            if (!certificate.startsWith(\"-----BEGIN\")) {\n                String cert_begin = \"-----BEGIN CERTIFICATE-----\\n\";\n                String end_cert = \"\\n-----END CERTIFICATE-----\";\n                certificate = String.format(\"%s%s%s\", cert_begin, certificate, end_cert);\n            }\n            return decodeCertificate(certificate.getBytes());\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decodes certificate", "call_func_name": ["java.lang.String.trim", "java.lang.String.length", "java.lang.String.startsWith", "java.lang.String.format", "java.lang.String.getBytes", "com.vmware.photon.controller.model.security.util.KeyUtil.decodeCertificate"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Object[]"], [""], ["byte[]"]], "passed_comments": "/"}, {"index": "344", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/EncryptorService.java", "methodName": "com.vmware.photon.controller.model.security.util.EncryptorService.EncryptorService", "methodParameterType": "byte[]#", "methodParameterName": "encryptionKeyBytes#", "methodBody": "public EncryptorService(byte[] encryptionKeyBytes) {\n        AssertUtil.assertNotNull(encryptionKeyBytes, \"encryptionKeyBytes\");\n        this.keyBytes = encryptionKeyBytes.clone();\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link EncryptorService} instance from the provided encryption key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "345", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/EncryptorService.java", "methodName": "com.vmware.photon.controller.model.security.util.EncryptorService.EncryptorService", "methodParameterType": "File#", "methodParameterName": "encryptionKeyFile#", "methodBody": "public EncryptorService(File encryptionKeyFile) {\n        AssertUtil.assertNotNull(encryptionKeyFile, \"encryptionKeyFile\");\n        try {\n            this.keyBytes = Files.readAllBytes(Paths.get(encryptionKeyFile.toURI()));\n        } catch (IOException e) {\n            throw new LocalizableValidationException(e, \"Invalid encryption key file!\",\n                    \"common.ecryptor.file.invalid\");\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link EncryptorService} instance from the provided encryption key file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "346", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/EncryptorService.java", "methodName": "com.vmware.photon.controller.model.security.util.EncryptorService.encrypt", "methodParameterType": "String#", "methodParameterName": "input#", "methodBody": "public String encrypt(String input) {\n        if (input == null || input.length() == 0) {\n            return input;\n        }\n        byte[] inputBytes = input.getBytes(UTF_8);\n        byte[] outputBytes = encrypt(inputBytes);\n        return new String(outputBytes, UTF_8);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encrypts the provided string.", "call_func_name": ["java.lang.String.length", "java.lang.String.getBytes", "com.vmware.photon.controller.model.security.util.EncryptorService.encrypt", "java.lang.String.<init>"], "call_func_parameter": [[""], ["java.nio.charset.Charset"], ["byte[]"], ["byte[]", "java.nio.charset.Charset"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.EncryptorService.encrypt": "Encrypts the provided byte array."}]}, {"index": "347", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/EncryptorService.java", "methodName": "com.vmware.photon.controller.model.security.util.EncryptorService.encrypt", "methodParameterType": "byte[]#", "methodParameterName": "input#", "methodBody": "public byte[] encrypt(final byte[] input) {\n        if (input == null || input.length == 0) {\n            return input;\n        }\n\n        try {\n            BufferedBlockCipher cipher = getCipher(true);\n            byte[] output = new byte[cipher.getOutputSize(input.length)];\n\n            int length = cipher.processBytes(input, 0, input.length, output, 0);\n            length += cipher.doFinal(output, length);\n\n            return Base64.getEncoder().encode(Arrays.copyOfRange(output, 0, length));\n        } catch (Exception e) {\n            throw new LocalizableValidationException(e, \"Encryption error!\",\n                    \"common.ecryption.error\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Encrypts the provided byte array.", "call_func_name": ["com.vmware.photon.controller.model.security.util.EncryptorService.getCipher", "org.bouncycastle.crypto.BufferedBlockCipher.getOutputSize", "org.bouncycastle.crypto.BufferedBlockCipher.processBytes", "org.bouncycastle.crypto.BufferedBlockCipher.doFinal", "java.util.Base64.getEncoder", "java.util.Arrays.copyOfRange", "com.vmware.xenon.common.LocalizableValidationException.<init>"], "call_func_parameter": [["boolean"], ["int"], ["byte[]", "int", "int", "byte[]", "int"], ["byte[]", "int"], [""], ["byte[]", "int", "int"], ["java.lang.Throwable", "java.lang.String", "java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "348", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/EncryptorService.java", "methodName": "com.vmware.photon.controller.model.security.util.EncryptorService.decrypt", "methodParameterType": "String#", "methodParameterName": "input#", "methodBody": "public String decrypt(String input) {\n        if (input == null || input.length() == 0) {\n            return input;\n        }\n\n        byte[] inputBytes = input.getBytes(UTF_8);\n        byte[] outputBytes = decrypt(inputBytes);\n        return new String(outputBytes, UTF_8);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decrypts the provided string.", "call_func_name": ["java.lang.String.length", "java.lang.String.getBytes", "com.vmware.photon.controller.model.security.util.EncryptorService.decrypt", "java.lang.String.<init>"], "call_func_parameter": [[""], ["java.nio.charset.Charset"], ["byte[]"], ["byte[]", "java.nio.charset.Charset"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.EncryptorService.decrypt": "Decrypts the provided byte array."}]}, {"index": "349", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/EncryptorService.java", "methodName": "com.vmware.photon.controller.model.security.util.EncryptorService.decrypt", "methodParameterType": "byte[]#", "methodParameterName": "input#", "methodBody": "public byte[] decrypt(final byte[] input) {\n        if (input == null || input.length == 0) {\n            return input;\n        }\n\n        try {\n            BufferedBlockCipher cipher = getCipher(false);\n            byte[] bytes = Base64.getDecoder().decode(input);\n            byte[] output = new byte[cipher.getOutputSize(bytes.length)];\n\n            int length = cipher.processBytes(bytes, 0, bytes.length, output, 0);\n            length += cipher.doFinal(output, length);\n\n            return Arrays.copyOfRange(output, 0, length);\n        } catch (Exception e) {\n            throw new LocalizableValidationException(e, \"Decryption error!\",\n                    \"common.dercyption.error\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Decrypts the provided byte array.", "call_func_name": ["com.vmware.photon.controller.model.security.util.EncryptorService.getCipher", "java.util.Base64.getDecoder", "org.bouncycastle.crypto.BufferedBlockCipher.getOutputSize", "org.bouncycastle.crypto.BufferedBlockCipher.processBytes", "org.bouncycastle.crypto.BufferedBlockCipher.doFinal", "java.util.Arrays.copyOfRange", "com.vmware.xenon.common.LocalizableValidationException.<init>"], "call_func_parameter": [["boolean"], [""], ["int"], ["byte[]", "int", "int", "byte[]", "int"], ["byte[]", "int"], ["byte[]", "int", "int"], ["java.lang.Throwable", "java.lang.String", "java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "350", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/EncryptorService.java", "methodName": "com.vmware.photon.controller.model.security.util.EncryptorService.generateKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static byte[] generateKey() {\n\n        byte[] keyData = new byte[KEY_LENGTH];\n        secureRandom.nextBytes(keyData);\n\n        byte[] ivData = new byte[IV_LENGTH];\n        secureRandom.nextBytes(ivData);\n\n        byte[] key = new byte[IV_LENGTH + KEY_LENGTH];\n        System.arraycopy(ivData, 0, key, 0, IV_LENGTH);\n        System.arraycopy(keyData, 0, key, IV_LENGTH, KEY_LENGTH);\n        return key;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#InfixExpression#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates a new symmetric encryption key.", "call_func_name": ["java.security.SecureRandom.nextBytes", "java.lang.System.arraycopy"], "call_func_parameter": [["byte[]"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": "/"}, {"index": "351", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.createCertificateChain", "methodParameterType": "String#", "methodParameterName": "certChainPEM#", "methodBody": "public static X509Certificate[] createCertificateChain(String certChainPEM) {\n        AssertUtil.assertNotNull(certChainPEM, \"certChainPEM should not be null.\");\n\n        List<X509Certificate> chain = new ArrayList<>();\n        try (PEMParser parser = new PEMParser(new StringReader(certChainPEM))) {\n\n            JcaX509CertificateConverter converter = new JcaX509CertificateConverter();\n            X509CertificateHolder certificateHolder;\n            while ((certificateHolder = (X509CertificateHolder) parser.readObject()) != null) {\n                chain.add(converter.getCertificate(certificateHolder));\n            }\n        } catch (IOException | CertificateException e) {\n            throw new RuntimeException(\"Failed to create certificate: \" + certChainPEM, e);\n        }\n\n        if (chain.isEmpty()) {\n            throw new RuntimeException(\"A valid certificate was not found: \" + certChainPEM);\n        }\n\n        return chain.toArray(new X509Certificate[chain.size()]);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ParenthesizedExpression#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ParenthesizedExpression(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility method to decode a certificate chain PEM encoded string value to an array of X509Certificate certificate instances.", "call_func_name": ["com.vmware.photon.controller.model.util.AssertUtil.assertNotNull", "java.util.ArrayList.<init>", "java.io.StringReader.<init>", "org.bouncycastle.openssl.PEMParser.<init>", "org.bouncycastle.cert.jcajce.JcaX509CertificateConverter.<init>", "org.bouncycastle.openssl.PEMParser.readObject", "org.bouncycastle.cert.jcajce.JcaX509CertificateConverter.getCertificate", "java.util.List.add", "org.bouncycastle.openssl.PEMParser.close", "java.lang.Throwable.addSuppressed", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.RuntimeException.<init>", "java.util.List.isEmpty", "java.lang.RuntimeException.<init>", "java.util.List.size", "java.util.List.toArray"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["java.lang.String"], ["java.io.Reader"], [""], [""], ["org.bouncycastle.cert.X509CertificateHolder"], ["java.lang.Object"], [""], ["java.lang.Throwable"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"], [""], ["java.lang.String"], [""], ["java.lang.Object[]"]], "passed_comments": [{"com.vmware.photon.controller.model.util.AssertUtil.assertNotNull": "Assert that the specified argument is not  {@code null} otherwise throwing{@link IllegalArgumentException} with the specified {@code errorMessage}. <p> {@code AssertUtil.assertNotNull(someArg, \"'someArg' must be set.\");}"}]}, {"index": "352", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.createCertificate", "methodParameterType": "String#", "methodParameterName": "certPEM#", "methodBody": "public static X509Certificate createCertificate(String certPEM) {\n        X509Certificate[] createCertificateChain = createCertificateChain(certPEM);\n        AssertUtil.assertTrue(createCertificateChain.length == 1,\n                \"Expected exactly one certificate in PEM: \" + certPEM);\n\n        return createCertificateChain[0];\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility method to decode a certificate PEM encoded string value to X509Certificate type certificate instance. <p> The difference between this method and  {@link #createCertificateChain(String)} is that thisexpects exactly one PEM encoded certificate. Use when the PEM represents a distinguished private or public key. For general purpose, where the expectation is to have one or more PEM encoded certificates, certificate chain, use  {@link #createCertificateChain(String)}.", "call_func_name": ["com.vmware.photon.controller.model.security.util.CertificateUtil.createCertificateChain", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.vmware.photon.controller.model.util.AssertUtil.assertTrue"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["boolean", "java.lang.String"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.createCertificateChain": "Utility method to decode a certificate chain PEM encoded string value to an array of X509Certificate certificate instances."}, {"com.vmware.photon.controller.model.util.AssertUtil.assertTrue": "Assert that provided  {@code expression} is {@code true} otherwise throwing an{@link IllegalArgumentException} with the specified {@code errorMessage}. <p> {@code AssertUtil.assertTrue(arr.length>0, \"'arr' shall not be empty.\");}"}]}, {"index": "353", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.createKeyPair", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public static KeyPair createKeyPair(String key) {\n        AssertUtil.assertNotNull(key, \"key\");\n        String decryptedKey = EncryptionUtils.decrypt(key);\n        try (PEMParser parser = new PEMParser(new StringReader(decryptedKey))) {\n\n            JcaPEMKeyConverter converter = new JcaPEMKeyConverter();\n            PEMKeyPair keyPair = (PEMKeyPair) parser.readObject();\n            if (keyPair == null) {\n                throw new RuntimeException(\"A valid key pair was not found\");\n            }\n            return converter.getKeyPair(keyPair);\n\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to create key pair\", e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Utility method to decode a PEM encoded private key string to a PrivateKey instance", "call_func_name": ["com.vmware.photon.controller.model.util.AssertUtil.assertNotNull", "com.vmware.photon.controller.model.security.util.EncryptionUtils.decrypt", "java.io.StringReader.<init>", "org.bouncycastle.openssl.PEMParser.<init>", "org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter.<init>", "org.bouncycastle.openssl.PEMParser.readObject", "java.lang.RuntimeException.<init>", "org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter.getKeyPair", "org.bouncycastle.openssl.PEMParser.close", "java.lang.Throwable.addSuppressed", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.io.Reader"], [""], [""], ["java.lang.String"], ["org.bouncycastle.openssl.PEMKeyPair"], [""], ["java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.vmware.photon.controller.model.util.AssertUtil.assertNotNull": "Assert that the specified argument is not  {@code null} otherwise throwing{@link IllegalArgumentException} with the specified {@code errorMessage}. <p> {@code AssertUtil.assertNotNull(someArg, \"'someArg' must be set.\");}"}, {"com.vmware.photon.controller.model.security.util.EncryptionUtils.decrypt": "Decrypts the provided string."}]}, {"index": "354", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.createEmptyKeyStore", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static KeyStore createEmptyKeyStore() {\n        try {\n            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n            keyStore.load(null); // initialize empty keystore\n            return keyStore;\n\n        } catch (KeyStoreException | NoSuchAlgorithmException\n                | CertificateException | IOException e) {\n            throw new RuntimeException(\"Failed to create empty keystore\", e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create an empty key store", "call_func_name": ["java.security.KeyStore.getDefaultType", "java.security.KeyStore.getInstance", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "355", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.setCertificateEntry", "methodParameterType": "KeyStore#String#String#", "methodParameterName": "trustStore#alias#trustedCert#", "methodBody": "public static void setCertificateEntry(KeyStore trustStore, String alias, String trustedCert) {\n\n        X509Certificate[] certificates = CertificateUtil.createCertificateChain(trustedCert);\n\n        for (X509Certificate certificate : certificates) {\n            String certAlias = alias + \"_\"\n                    + CertificateUtil.getCommonName(certificate.getSubjectDN());\n            try {\n                trustStore.setCertificateEntry(certAlias, certificate);\n            } catch (KeyStoreException e) {\n                throw new RuntimeException(\"Failed to set certificate entry\", e);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Set a certificate entry in a trust store", "call_func_name": ["com.vmware.photon.controller.model.security.util.CertificateUtil.createCertificateChain", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.security.cert.X509Certificate.getSubjectDN", "com.vmware.photon.controller.model.security.util.CertificateUtil.getCommonName", "java.lang.StringBuilder.toString", "java.security.KeyStore.setCertificateEntry", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["java.security.Principal"], [""], ["java.lang.String", "java.security.cert.Certificate"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.createCertificateChain": "Utility method to decode a certificate chain PEM encoded string value to an array of X509Certificate certificate instances."}, {"com.vmware.photon.controller.model.security.util.CertificateUtil.getCommonName": "Extracts the Certificate Principal Common Name (CN)."}]}, {"index": "356", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.setKeyEntry", "methodParameterType": "KeyStore#String#String#String#", "methodParameterName": "keyStore#alias#clientKey#clientCert#", "methodBody": "private static void setKeyEntry(KeyStore keyStore, String alias,\n            String clientKey, String clientCert) {\n\n        X509Certificate[] clientCertificates = CertificateUtil.createCertificateChain(clientCert);\n        PrivateKey key = CertificateUtil.createKeyPair(clientKey).getPrivate();\n\n        try {\n            keyStore.setKeyEntry(alias, key, EMPTY, clientCertificates);\n\n        } catch (KeyStoreException e) {\n            throw new RuntimeException(\"Failed to set key entry\", e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Set a key entry in a key store", "call_func_name": ["com.vmware.photon.controller.model.security.util.CertificateUtil.createCertificateChain", "com.vmware.photon.controller.model.security.util.CertificateUtil.createKeyPair", "java.security.KeyPair.getPrivate", "java.security.KeyStore.setKeyEntry", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String", "java.security.Key", "char[]", "java.security.cert.Certificate[]"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.createCertificateChain": "Utility method to decode a certificate chain PEM encoded string value to an array of X509Certificate certificate instances."}, {"com.vmware.photon.controller.model.security.util.CertificateUtil.createKeyPair": "Utility method to decode a PEM encoded private key string to a PrivateKey instance"}]}, {"index": "357", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.getTrustManagers", "methodParameterType": "String#String#", "methodParameterName": "alias#trustedCert#", "methodBody": "public static TrustManager[] getTrustManagers(String alias,\n            String trustedCert) {\n        if (trustedCert == null) {\n            return null;\n        }\n\n        KeyStore trustStore = createEmptyKeyStore();\n\n        setCertificateEntry(trustStore, alias, trustedCert);\n\n        return getTrustManagers(trustStore);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a TrustManager for the given PEM encoded certificate", "call_func_name": ["com.vmware.photon.controller.model.security.util.CertificateUtil.createEmptyKeyStore", "com.vmware.photon.controller.model.security.util.CertificateUtil.setCertificateEntry", "com.vmware.photon.controller.model.security.util.CertificateUtil.getTrustManagers"], "call_func_parameter": [[""], ["java.security.KeyStore", "java.lang.String", "java.lang.String"], ["java.security.KeyStore"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.createEmptyKeyStore": "Create an empty key store"}, {"com.vmware.photon.controller.model.security.util.CertificateUtil.setCertificateEntry": "Set a certificate entry in a trust store"}, {"com.vmware.photon.controller.model.security.util.CertificateUtil.getTrustManagers": "Create a TrustManager using the given trust store"}]}, {"index": "358", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.getTrustManagers", "methodParameterType": "KeyStore#", "methodParameterName": "trustStore#", "methodBody": "public static TrustManager[] getTrustManagers(KeyStore trustStore) {\n        try {\n            TrustManagerFactory tmf = TrustManagerFactory\n                    .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n\n            tmf.init(trustStore);\n            return tmf.getTrustManagers();\n\n        } catch (NoSuchAlgorithmException | KeyStoreException e) {\n            throw new RuntimeException(\n                    \"Failed to create a TrustManager from a trust store\", e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create a TrustManager using the given trust store", "call_func_name": ["javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm", "javax.net.ssl.TrustManagerFactory.getInstance", "javax.net.ssl.TrustManagerFactory.init", "javax.net.ssl.TrustManagerFactory.getTrustManagers", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.security.KeyStore"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "359", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.getKeyManagers", "methodParameterType": "String#String#String#", "methodParameterName": "alias#clientKey#clientCert#", "methodBody": "public static KeyManager[] getKeyManagers(String alias, String clientKey,\n            String clientCert) {\n\n        if (clientCert == null) {\n            return null;\n        }\n\n        KeyStore keyStore = createEmptyKeyStore();\n        setKeyEntry(keyStore, alias, clientKey, clientCert);\n\n        return getKeyManagers(keyStore);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get a KeyManager configured with the given private key and certificate", "call_func_name": ["com.vmware.photon.controller.model.security.util.CertificateUtil.createEmptyKeyStore", "com.vmware.photon.controller.model.security.util.CertificateUtil.setKeyEntry", "com.vmware.photon.controller.model.security.util.CertificateUtil.getKeyManagers"], "call_func_parameter": [[""], ["java.security.KeyStore", "java.lang.String", "java.lang.String", "java.lang.String"], ["java.security.KeyStore"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.createEmptyKeyStore": "Create an empty key store"}, {"com.vmware.photon.controller.model.security.util.CertificateUtil.setKeyEntry": "Set a key entry in a key store"}, {"com.vmware.photon.controller.model.security.util.CertificateUtil.getKeyManagers": "Get a KeyManager based on the given key store"}]}, {"index": "360", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.getKeyManagers", "methodParameterType": "KeyStore#", "methodParameterName": "keyStore#", "methodBody": "public static KeyManager[] getKeyManagers(KeyStore keyStore) {\n        try {\n            KeyManagerFactory kmf = KeyManagerFactory\n                    .getInstance(KeyManagerFactory.getDefaultAlgorithm());\n\n            kmf.init(keyStore, EMPTY);\n            return kmf.getKeyManagers();\n\n        } catch (KeyStoreException | NoSuchAlgorithmException\n                | UnrecoverableKeyException e) {\n            throw new RuntimeException(\n                    \"Failed to create a KeyManager from a key store\", e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Get a KeyManager based on the given key store", "call_func_name": ["javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm", "javax.net.ssl.KeyManagerFactory.getInstance", "javax.net.ssl.KeyManagerFactory.init", "javax.net.ssl.KeyManagerFactory.getKeyManagers", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.security.KeyStore", "char[]"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "361", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.createSSLContext", "methodParameterType": "String#String#String#", "methodParameterName": "trustedCert#clientKey#clientCert#", "methodBody": "public static SSLContext createSSLContext(String trustedCert,\n            String clientKey, String clientCert) {\n\n        try {\n            SSLContext ctx = SSLContext.getInstance(\"TLS\");\n            ctx.init(\n                    CertificateUtil.getKeyManagers(\"client\", clientKey, clientCert),\n                    CertificateUtil.getTrustManagers(\"server\", trustedCert), null);\n\n            return ctx;\n\n        } catch (NoSuchAlgorithmException | KeyManagementException e) {\n            throw new RuntimeException(\"Failed to create SSLContext\", e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create a SSLContext for a given trusted certificate and client key and certificate", "call_func_name": ["javax.net.ssl.SSLContext.getInstance", "com.vmware.photon.controller.model.security.util.CertificateUtil.getKeyManagers", "com.vmware.photon.controller.model.security.util.CertificateUtil.getTrustManagers", "javax.net.ssl.SSLContext.init", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["javax.net.ssl.KeyManager[]", "javax.net.ssl.TrustManager[]", "java.security.SecureRandom"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.getKeyManagers": "Get a KeyManager configured with the given private key and certificate"}, {"com.vmware.photon.controller.model.security.util.CertificateUtil.getTrustManagers": "Create a TrustManager for the given PEM encoded certificate"}]}, {"index": "362", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.createSSLContext", "methodParameterType": "TrustManager#KeyManager#", "methodParameterName": "trustManager#keyManager#", "methodBody": "public static SSLContext createSSLContext(TrustManager trustManager,\n            KeyManager keyManager) {\n\n        try {\n            SSLContext ctx = SSLContext.getInstance(\"TLS\");\n            ctx.init(new KeyManager[] { keyManager },\n                    new TrustManager[] { trustManager }, null);\n\n            return ctx;\n\n        } catch (NoSuchAlgorithmException | KeyManagementException e) {\n            throw new RuntimeException(\"Failed to create SSLContext\", e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create an SSLContext for the given TrustManager and KeyManager", "call_func_name": ["javax.net.ssl.SSLContext.getInstance", "javax.net.ssl.SSLContext.init", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"], ["javax.net.ssl.KeyManager[]", "javax.net.ssl.TrustManager[]", "java.security.SecureRandom"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "363", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.getCommonName", "methodParameterType": "Principal#", "methodParameterName": "certPrincipal#", "methodBody": "public static String getCommonName(Principal certPrincipal) {\n        if (certPrincipal == null || certPrincipal.getName() == null\n                || certPrincipal.getName().isEmpty()) {\n            return null;\n        }\n        String attr = getAttributeFromDN(certPrincipal.getName(), \"CN\");\n        if (attr == null) {\n            Utils.logWarning(\"DN %s doesn't contain attribute 'CN'\", certPrincipal.getName());\n            attr = certPrincipal.getName();\n        }\n        return attr;\n\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts the Certificate Principal Common Name (CN).", "call_func_name": ["java.security.Principal.getName", "java.lang.String.isEmpty", "com.vmware.photon.controller.model.security.util.CertificateUtil.getAttributeFromDN", "com.vmware.xenon.common.Utils.logWarning"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Object[]"]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.getAttributeFromDN": "Extracts from DN a given attribute."}]}, {"index": "364", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.getAttributeFromDN", "methodParameterType": "String#String#", "methodParameterName": "dn#attribute#", "methodBody": "public static String getAttributeFromDN(String dn, String attribute) {\n        try {\n            LdapName subjectDn = new LdapName(dn);\n\n            for (Rdn rdn : subjectDn.getRdns()) {\n                if (rdn.getType().equals(attribute)) {\n                    return rdn.getValue().toString();\n                }\n            }\n        } catch (InvalidNameException e) {\n            throw new IllegalArgumentException(e);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts from DN a given attribute.", "call_func_name": ["javax.naming.ldap.LdapName.<init>", "javax.naming.ldap.LdapName.getRdns", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "javax.naming.ldap.Rdn.getType", "java.lang.String.equals", "javax.naming.ldap.Rdn.getValue", "java.lang.Object.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "365", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.toPEMformat", "methodParameterType": "X509Certificate#", "methodParameterName": "certificate#", "methodBody": "public static String toPEMformat(X509Certificate certificate) {\n        StringWriter sw = new StringWriter();\n        JcaPEMWriter pemWriter = new JcaPEMWriter(sw);\n        try {\n            pemWriter.writeObject(certificate);\n            pemWriter.close();\n\n            return sw.toString();\n\n        } catch (IOException x) {\n            throw new RuntimeException(\"Failed to serialize certificate\", x);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Serialize Certificate in PEM format", "call_func_name": ["java.io.StringWriter.<init>", "org.bouncycastle.openssl.jcajce.JcaPEMWriter.<init>", "org.bouncycastle.openssl.jcajce.JcaPEMWriter.writeObject", "org.bouncycastle.openssl.jcajce.JcaPEMWriter.close", "java.io.StringWriter.toString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["java.io.Writer"], ["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "366", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.toPEMformat", "methodParameterType": "X509Certificate[]#", "methodParameterName": "certificateChain#", "methodBody": "public static String toPEMformat(X509Certificate[] certificateChain) {\n        StringWriter sw = new StringWriter();\n        for (X509Certificate certificate : certificateChain) {\n            sw.append(toPEMformat(certificate));\n        }\n        return sw.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serialize Certificate chain in PEM format", "call_func_name": ["java.io.StringWriter.<init>", "com.vmware.photon.controller.model.security.util.CertificateUtil.toPEMformat", "java.io.StringWriter.append", "java.io.StringWriter.toString"], "call_func_parameter": [[""], ["java.security.cert.X509Certificate"], ["java.lang.CharSequence"], [""]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.toPEMformat": "Serialize Certificate in PEM format"}, {"com.vmware.photon.controller.model.security.util.CertificateUtil.toPEMformat": "Serialize Certificate chain in PEM format"}]}, {"index": "367", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.computeCertificateThumbprint", "methodParameterType": "X509Certificate#", "methodParameterName": "cert#", "methodBody": "public static String computeCertificateThumbprint(X509Certificate cert) {\n        return computeCertificateThumbprint(cert, ThumbprintAlgorithm.DEFAULT);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the  {@link ThumbprintAlgorithm#DEFAULT} thumbprint of a X.509 certificate.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "368", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.computeCertificateThumbprint", "methodParameterType": "X509Certificate#ThumbprintAlgorithm#", "methodParameterName": "cert#thumbprintAlgorithm#", "methodBody": "public static String computeCertificateThumbprint(X509Certificate cert,\n            ThumbprintAlgorithm thumbprintAlgorithm) {\n        if (cert == null) {\n            throw new LocalizableValidationException(\"certificate must not be null.\",\n                    \"security.certificate.null.error\");\n        }\n        byte[] digest;\n        try {\n            MessageDigest md = MessageDigest.getInstance(thumbprintAlgorithm.getAlgorithmName());\n            digest = md.digest(cert.getEncoded());\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(e);\n        } catch (CertificateEncodingException e) {\n            throw new IllegalArgumentException(e);\n        }\n\n        StringBuilder thumbprint = new StringBuilder();\n        for (int i = 0, len = digest.length; i < len; ++i) {\n            if (i > 0) {\n                thumbprint.append(':');\n            }\n            byte b = digest[i];\n            thumbprint.append(HEX.charAt((b & 0xF0) >> 4));\n            thumbprint.append(HEX.charAt(b & 0x0F));\n        }\n        return thumbprint.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#Dimension#ArrayType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PrefixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve thumbprint of a X.509 certificate as specified in  {@link ThumbprintAlgorithm}parameter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "369", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.getCertificateInfoProperties", "methodParameterType": "X509Certificate#", "methodParameterName": "cert#", "methodBody": "public static Map<String, String> getCertificateInfoProperties(X509Certificate cert) {\n        Map<String, String> certificateInfo = new HashMap<>();\n        certificateInfo.put(COMMON_NAME_KEY, CertificateUtil.getCommonName(cert.getSubjectDN()));\n        certificateInfo.put(ISSUER_NAME_KEY, CertificateUtil.getCommonName(cert.getIssuerDN()));\n        certificateInfo.put(SERIAL_KEY, getSerialNumber(cert));\n        certificateInfo.put(FINGERPRINT_KEY, CertificateUtil.computeCertificateThumbprint(cert));\n        certificateInfo.put(VALID_SINCE_KEY, Long.toString(cert.getNotBefore().getTime()));\n        certificateInfo.put(VALID_TO_KEY, Long.toString(cert.getNotAfter().getTime()));\n        return certificateInfo;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts  {@link X509Certificate} properties from the given {@code cert}", "call_func_name": ["java.util.HashMap.<init>", "java.security.cert.X509Certificate.getSubjectDN", "com.vmware.photon.controller.model.security.util.CertificateUtil.getCommonName", "java.util.Map.put", "java.security.cert.X509Certificate.getIssuerDN", "com.vmware.photon.controller.model.security.util.CertificateUtil.getSerialNumber", "com.vmware.photon.controller.model.security.util.CertificateUtil.computeCertificateThumbprint", "java.security.cert.X509Certificate.getNotBefore", "java.util.Date.getTime", "java.lang.Long.toString", "java.security.cert.X509Certificate.getNotAfter"], "call_func_parameter": [[""], [""], ["java.security.Principal"], ["java.lang.Object", "java.lang.Object"], [""], ["java.security.cert.X509Certificate"], ["java.security.cert.X509Certificate"], [""], [""], ["long"], [""]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.getCommonName": "Extracts the Certificate Principal Common Name (CN)."}, {"com.vmware.photon.controller.model.security.util.CertificateUtil.computeCertificateThumbprint": "Retrieve the  {@link ThumbprintAlgorithm#DEFAULT} thumbprint of a X.509 certificate."}]}, {"index": "370", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.generateSignedForClient", "methodParameterType": "String#X509Certificate#PrivateKey#", "methodParameterName": "fqdn#issuerCertificate#issuerPrivateKey#", "methodBody": "public static CertChainKeyPair generateSignedForClient(\n            String fqdn, X509Certificate issuerCertificate,\n            PrivateKey issuerPrivateKey) {\n        try {\n            return generateCertificateAndSign(fqdn, issuerCertificate,\n                    issuerPrivateKey,\n                    getClientExtensions());\n        } catch (CertIOException | CertificateException | OperatorCreationException e) {\n            throw new RuntimeException(String.format(\n                    \"Failed to generate client certificate, reason: %s\",\n                    e.getMessage()), e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Generates a signed certificate and a private key for client auth.", "call_func_name": ["com.vmware.photon.controller.model.security.util.CertificateUtil.getClientExtensions", "com.vmware.photon.controller.model.security.util.CertificateUtil.generateCertificateAndSign", "java.lang.Exception.getMessage", "java.lang.String.format", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String", "java.security.cert.X509Certificate", "java.security.PrivateKey", "java.util.List"], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "371", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.generateSigned", "methodParameterType": "String#X509Certificate#PrivateKey#", "methodParameterName": "fqdn#issuerCertificate#issuerPrivateKey#", "methodBody": "public static CertChainKeyPair generateSigned(\n            String fqdn, X509Certificate issuerCertificate,\n            PrivateKey issuerPrivateKey) {\n        try {\n            return generateCertificateAndSign(fqdn, issuerCertificate,\n                    issuerPrivateKey,\n                    getServerExtensions(issuerCertificate));\n        } catch (CertificateException | OperatorCreationException | NoSuchAlgorithmException\n                | IOException e) {\n            throw new RuntimeException(String.format(\n                    \"Failed to generate server certificate, reason: %s\",\n                    e.getMessage()), e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Generates a signed certificate and a private key.", "call_func_name": ["com.vmware.photon.controller.model.security.util.CertificateUtil.getServerExtensions", "com.vmware.photon.controller.model.security.util.CertificateUtil.generateCertificateAndSign", "java.lang.Exception.getMessage", "java.lang.String.format", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.security.cert.X509Certificate"], ["java.lang.String", "java.security.cert.X509Certificate", "java.security.PrivateKey", "java.util.List"], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "372", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.generatePureFingerPrint", "methodParameterType": "X509Certificate[]#", "methodParameterName": "certificateChain#", "methodBody": "public static String generatePureFingerPrint(X509Certificate[] certificateChain) {\n        return generatePureFingerPrint(certificateChain[0]);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns certificate thumbprint with no colon characters and lower-cased for the first certificate in the chain.", "call_func_name": ["com.vmware.photon.controller.model.security.util.CertificateUtil.computeCertificateThumbprint", "java.lang.String.replaceAll", "java.lang.String.toLowerCase"], "call_func_parameter": [["java.security.cert.X509Certificate"], ["java.lang.String", "java.lang.String"], [""]], "passed_comments": [{"com.vmware.photon.controller.model.security.util.CertificateUtil.computeCertificateThumbprint": "Retrieve the  {@link ThumbprintAlgorithm#DEFAULT} thumbprint of a X.509 certificate."}]}, {"index": "373", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.generatePureFingerPrint", "methodParameterType": "X509Certificate#", "methodParameterName": "certificate#", "methodBody": "public static String generatePureFingerPrint(X509Certificate certificate) {\n        String thumbprint = computeCertificateThumbprint(certificate);\n        return thumbprint.replaceAll(\":\", \"\").toLowerCase();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns certificate thumbprint with no colon characters and lower-cased.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "374", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/security/util/CertificateUtil.java", "methodName": "com.vmware.photon.controller.model.security.util.CertificateUtil.convertToSunImpl", "methodParameterType": "PrivateKey#", "methodParameterName": "key#", "methodBody": "private static PrivateKey convertToSunImpl(PrivateKey key) {\n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(key.getEncoded());\n        KeyFactory kf;\n        try {\n            kf = KeyFactory.getInstance(KeyUtil.RSA_ALGORITHM);\n            return kf.generatePrivate(spec);\n        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper method for converting the bouncycastle implementation of a private key to a sun implementation.", "call_func_name": ["java.security.PrivateKey.getEncoded", "java.security.spec.PKCS8EncodedKeySpec.<init>", "java.security.KeyFactory.getInstance", "java.security.KeyFactory.generatePrivate", "java.security.GeneralSecurityException.printStackTrace"], "call_func_parameter": [[""], ["byte[]"], ["java.lang.String"], ["java.security.spec.KeySpec"], [""]], "passed_comments": "/"}, {"index": "375", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapters/util/Pair.java", "methodName": "com.vmware.photon.controller.model.adapters.util.Pair.of", "methodParameterType": "L#R#", "methodParameterName": "left#right#", "methodBody": "public static <L, R> Pair<L, R> of(final L left, final R right) {\n        return new Pair<L, R>(left, right);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Obtains an immutable pair of from two objects inferring the generic types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "376", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapters/util/Pair.java", "methodName": "com.vmware.photon.controller.model.adapters.util.Pair.equals", "methodParameterType": "Object#", "methodParameterName": "obj#", "methodBody": "@Override\n    public boolean equals(final Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Pair<?, ?>)) {\n            return false;\n        }\n        Pair<?, ?> other = (Pair<?, ?>) obj;\n        return Objects.equals(this.left, other.left)\n                && Objects.equals(this.right, other.right);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThisExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#WildcardType#WildcardType#ParameterizedType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#WildcardType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#WildcardType#WildcardType#ParameterizedType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(ThisExpression)ThisExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType(WildcardType)WildcardType)ParameterizedType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Compares this pair to another based on the two elements.</p>", "call_func_name": ["java.util.Objects.equals"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "377", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapters/util/Pair.java", "methodName": "com.vmware.photon.controller.model.adapters.util.Pair.hashCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public int hashCode() {\n        return Objects.hash(this.left, this.right);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Returns a suitable hash code.", "call_func_name": ["java.util.Objects.hash"], "call_func_parameter": [["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "378", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapters/util/Pair.java", "methodName": "com.vmware.photon.controller.model.adapters.util.Pair.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String toString() {\n        return String.format(\"%s[left=%s, right=%s]\",\n                getClass().getSimpleName(), this.left, this.right);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Returns a String representation of this pair.</p>", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getSimpleName", "java.lang.String.format"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "379", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapters/registry/operations/ResourceOperationUtils.java", "methodName": "com.vmware.photon.controller.model.adapters.registry.operations.ResourceOperationUtils.lookUpByEndpointType", "methodParameterType": "ServiceHost#URI#String#ResourceType#String#", "methodParameterName": "host#refererURI#endpointType#resourceType#operation#", "methodBody": "public static DeferredResult<ResourceOperationSpec> lookUpByEndpointType(\n            ServiceHost host,\n            URI refererURI,\n            String endpointType,\n            ResourceType resourceType,\n            String operation) {\n\n        return lookUp(host, refererURI, endpointType, resourceType, operation)\n                .thenApply(specs -> specs.isEmpty() ? null : specs.iterator().next());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#NullLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ConditionalExpression#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Lookup for  {@link ResourceOperationSpec} by given {@code endpointType},  {@code resourceType}and  {@code operation}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "380", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapters/registry/operations/ResourceOperationUtils.java", "methodName": "com.vmware.photon.controller.model.adapters.registry.operations.ResourceOperationUtils.lookUpByEndpointLink", "methodParameterType": "ServiceHost#URI#String#ResourceType#String#", "methodParameterName": "host#refererURI#endpointLink#resourceType#operation#", "methodBody": "public static DeferredResult<ResourceOperationSpec> lookUpByEndpointLink(\n            ServiceHost host,\n            URI refererURI,\n            String endpointLink,\n            ResourceType resourceType,\n            String operation) {\n\n        return host.sendWithDeferredResult(Operation.createGet(host, endpointLink)\n                .setReferer(refererURI))\n                .thenCompose(o -> lookUpByEndpointType(host, refererURI,\n                        (o.getBody(EndpointState.class)).endpointType,\n                        resourceType, operation));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ParenthesizedExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Lookup for  {@link ResourceOperationSpec} by given {@code endpointLink},  {@code resourceType}and  {@code operation}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "381", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapters/registry/operations/ResourceOperationUtils.java", "methodName": "com.vmware.photon.controller.model.adapters.registry.operations.ResourceOperationUtils.lookupByResourceState", "methodParameterType": "ServiceHost#URI#T#String#", "methodParameterName": "host#refererURI#resourceState#operation#", "methodBody": "public static <T extends ResourceState> DeferredResult<List<ResourceOperationSpec>> lookupByResourceState(\n            ServiceHost host,\n            URI refererURI,\n            T resourceState,\n            String operation) {\n        AssertUtil.assertNotNull(resourceState, \"'resourceState' must be set.\");\n        String endpointLink;\n        ResourceType resourceType;\n        if (resourceState instanceof ComputeState) {\n            ComputeState compute = (ComputeState) resourceState;\n            endpointLink = compute.endpointLink;\n            resourceType = ResourceType.COMPUTE;\n        } else if (resourceState instanceof NetworkState) {\n            NetworkState network = (NetworkState) resourceState;\n            endpointLink = network.endpointLink;\n            resourceType = ResourceType.NETWORK;\n        } else {\n            throw new IllegalArgumentException(\"Unsupported resource state: \"\n                    + resourceState.getClass().getName());\n        }\n        AssertUtil.assertNotNull(endpointLink, \"'endpointLink' must be set.\");\n\n        return host.sendWithDeferredResult(\n                Operation.createGet(host, endpointLink).setReferer(refererURI),\n                EndpointState.class)\n                .thenCompose(ep -> lookUp(\n                        host, refererURI, (ep).endpointType, resourceType, operation));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#ParenthesizedExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Lookup for  {@link ResourceOperationSpec} by given {@code resourceState} and {@code operation}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "382", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapters/registry/operations/ResourceOperationUtils.java", "methodName": "com.vmware.photon.controller.model.adapters.registry.operations.ResourceOperationUtils.isAvailable", "methodParameterType": "ResourceState#ResourceOperationSpec#", "methodParameterName": "resourceState#spec#", "methodBody": "public static boolean isAvailable(ResourceState resourceState, ResourceOperationSpec spec) {\n        AssertUtil.assertNotNull(spec, \"'spec' must be set.\");\n        if (spec.targetCriteria == null) {\n            return true;\n        }\n\n        ScriptEngine engine = new ScriptEngineManager().getEngineByName(SCRIPT_ENGINE_NAME_JS);\n\n        if (resourceState != null) {\n            // Clone original object to avoid changing props of original object from vulnerable\n            // targetCriteria\n            ResourceState clone = Utils.cloneObject(resourceState);\n            engine.getBindings(ScriptContext.ENGINE_SCOPE).put(SCRIPT_CONTEXT_RESOURCE, clone);\n        }\n        try {\n            Object res = engine.eval(spec.targetCriteria);\n            if (res instanceof Boolean) {\n                return ((Boolean) res).booleanValue();\n            } else {\n                Utils.log(ResourceOperationUtils.class, \"isAvailable\",\n                        Level.WARNING,\n                        \"Expect boolean result when evaluate targetCriteria \\\"%s\\\" of \"\n                                + \"endpointType: %s, resourceType: %s, operation: %s, \"\n                                + \"adapterReference: %s. Result: %s\",\n                        spec.targetCriteria,\n                        spec.endpointType, spec.resourceType, spec.operation,\n                        spec.adapterReference, res);\n            }\n        } catch (ScriptException e) {\n            Utils.log(ResourceOperationUtils.class, \"isAvailable\",\n                    Level.SEVERE,\n                    \"Cannot evaluate targetCriteria '%s' of \"\n                            + \"endpointType: %s, resourceType: %s, operation: %s, \"\n                            + \"adapterReference: %s. Cause: %s\",\n                    spec.targetCriteria,\n                    spec.endpointType, spec.resourceType, spec.operation, spec.adapterReference,\n                    Utils.toString(e));\n\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#StringLiteral#SimpleName#SimpleName#QualifiedName#StringLiteral#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Evaluates provided  {@code spec}'s target criteria against the specified  {@code resourceState}and returns if the  {@link ResourceOperationSpec} is applicable for the given{@link ResourceState}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "383", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapters/registry/operations/ResourceOperationUtils.java", "methodName": "com.vmware.photon.controller.model.adapters.registry.operations.ResourceOperationUtils.registerResourceOperation", "methodParameterType": "Service#CompletionHandler#ResourceOperationSpec#", "methodParameterName": "service#handler#specs#", "methodBody": "public static void registerResourceOperation(Service service, CompletionHandler handler,\n            ResourceOperationSpec... specs) {\n        if (specs == null || specs.length == 0) {\n            service.getHost().log(Level.FINE,\n                    \"No ResourceOperationSpec to register by %s\",\n                    service.getSelfLink());\n            handler.handle(null, null);\n            return;\n        }\n\n        service.getHost().registerForServiceAvailability((op, ex) -> {\n            if (ex != null) {\n                service.getHost().log(Level.SEVERE, Utils.toString(ex));\n                handler.handle(op, ex);\n            } else {\n                List<Operation> operations = Arrays.stream(specs)\n                        .map(spec -> createOperation(service, spec))\n                        .collect(Collectors.toList());\n\n                JoinedCompletionHandler jh = (ops, err) -> {\n                    if (err != null) {\n                        service.getHost().log(Level.SEVERE, \"Error: %s\", Utils.toString(err));\n                        handler.handle(ops.values().iterator().next(),\n                                err.values().iterator().next());\n                    } else {\n                        service.getHost().log(Level.FINE,\n                                \"Successfully registered operations.\");\n                        handler.handle(null, null);\n                    }\n                };\n                OperationJoin.create(operations).setCompletion(jh).sendWith(service);\n            }\n        }, ResourceOperationSpecService.FACTORY_LINK);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#NullLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "A generic utility method to register any Day 2 Operation service/adapter with the framework as a ResourceOperationSpecService. It accepts a list of  {@code specs} which a service canhandle as input and submits them to the ResourceOperationSpecService's Factory. This call should generally be part of handleStart method of the adapter/service, preferably near the end after any service specification configuration settings.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "384", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapters/registry/operations/ResourceOperationUtils.java", "methodName": "com.vmware.photon.controller.model.adapters.registry.operations.ResourceOperationUtils.lookUp", "methodParameterType": "ServiceHost#URI#String#ResourceType#String#", "methodParameterName": "host#refererURI#endpointType#resourceType#operation#", "methodBody": "private static DeferredResult<List<ResourceOperationSpec>> lookUp(\n            ServiceHost host,\n            URI refererURI,\n            String endpointType,\n            ResourceType resourceType,\n            String operation) {\n\n        Query.Builder builder = Query.Builder.create()\n                .addKindFieldClause(ResourceOperationSpec.class)\n                .addFieldClause(\n                        ResourceOperationSpec.FIELD_NAME_ENDPOINT_TYPE,\n                        endpointType)\n                .addFieldClause(\n                        ResourceOperationSpec.FIELD_NAME_RESOURCE_TYPE,\n                        resourceType);\n        if (operation != null) {\n            builder.addFieldClause(\n                    ResourceOperationSpec.FIELD_NAME_OPERATION,\n                    operation);\n        }\n        Query query = builder.build();\n\n        QueryTop<ResourceOperationSpec> top = new QueryTop<>(\n                host, query, ResourceOperationSpec.class, null);\n        if (operation != null) {\n            // resource operation spec id and selfLink are built from the endpoint type, resource\n            // type and operation id, so the query result is guaranteed to return at most 1 element\n            top.setMaxResultsLimit(1);\n        }\n        top.setReferer(refererURI);\n        return top.collectDocuments(Collectors.toList());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#NullLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(NullLiteral)NullLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Lookup for  {@link ResourceOperationSpec}s by given  {@code endpointType},  {@code resourceType}and optionally  {@code operation}<p> If operation not specified then return all resource operation specs for the given {@code endpointType} and {@code resourceType}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "385", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapters/registry/operations/ResourceOperationSpecFactoryService.java", "methodName": "com.vmware.photon.controller.model.adapters.registry.operations.ResourceOperationSpecFactoryService.buildDefaultChildSelfLink", "methodParameterType": "ServiceDocument#", "methodParameterName": "document#", "methodBody": "@Override\n    protected String buildDefaultChildSelfLink(ServiceDocument document) {\n        ResourceOperationSpec initState = (ResourceOperationSpec) document;\n        if (initState.operation != null\n                && initState.resourceType != null\n                && initState.endpointType != null) {\n            return generateId(initState);\n        }\n        if (initState.documentSelfLink != null) {\n            return initState.documentSelfLink;\n        }\n        return super.buildDefaultChildSelfLink();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SuperMethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Override the buildDefaultChildSelfLink method to set the documentSelfLink. document identifier is combination of operation and endpoint type", "call_func_name": ["com.vmware.xenon.common.FactoryService.buildDefaultChildSelfLink"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "386", "file": "/root/repos/repos30/admiral/photon/src/main/java/com/vmware/photon/controller/model/adapters/registry/PhotonModelAdaptersRegistryFactoryService.java", "methodName": "com.vmware.photon.controller.model.adapters.registry.PhotonModelAdaptersRegistryFactoryService.buildDefaultChildSelfLink", "methodParameterType": "ServiceDocument#", "methodParameterName": "document#", "methodBody": "@Override\n    protected String buildDefaultChildSelfLink(ServiceDocument document) {\n        PhotonModelAdapterConfig initState = (PhotonModelAdapterConfig) document;\n        if (initState.id != null) {\n            return initState.id;\n        }\n        if (initState.documentSelfLink != null) {\n            return initState.documentSelfLink;\n        }\n        return super.buildDefaultChildSelfLink();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SuperMethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Override the buildDefaultChildSelfLink method to set the documentSelfLink.", "call_func_name": ["com.vmware.xenon.common.FactoryService.buildDefaultChildSelfLink"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "387", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/HostConfigCertificateDistributionService.java", "methodName": "com.vmware.admiral.compute.HostConfigCertificateDistributionService.handleVicCertificate", "methodParameterType": "String#", "methodParameterName": "hostLink#", "methodBody": "protected void handleVicCertificate(String hostLink) {\n        if (isVic == null) {\n            ConfigurationUtil.getConfigProperty(this, ConfigurationUtil.VIC_MODE_PROPERTY,\n                    (vic) -> {\n                        isVic = Boolean.valueOf(vic);\n                        handleVicCertificate(hostLink);\n                    });\n            return;\n        }\n\n        if (!isVic) {\n            return;\n        }\n\n        if (harborUrl == null) {\n            ConfigurationUtil.getConfigProperty(this, Harbor.CONFIGURATION_URL_PROPERTY_NAME,\n                    (harborTabUrl) -> {\n                        if (harborTabUrl == null) {\n                            return;\n                        }\n\n                        this.harborUrl = harborTabUrl;\n                        handleVicCertificate(hostLink);\n                    });\n            return;\n        }\n\n        if (vicCertificateChain == null) {\n            URI certFileUri = getHost().getState().certificateFileReference;\n            if (certFileUri == null) {\n                return;\n            }\n\n            X509Certificate[] certChain = CertificateUtilExtended.fromFile(new File(certFileUri));\n            if (certChain != null) {\n                vicCertificateChain = CertificateUtilExtended.toPEMformat(certChain, getHost());\n            }\n        }\n\n        if (vicCertificateChain != null && harborUrl != null) {\n            uploadCertificate(hostLink, harborUrl, vicCertificateChain, null);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#PrefixExpression#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "When part of VIC product upload Admiral certificate to the respective Docker host to enable communication with Harbor. Admiral and Harbor certificates are the same.", "call_func_name": ["java.util.function.Consumer.accept", "com.vmware.admiral.common.util.ConfigurationUtil.getConfigProperty", "java.lang.Boolean.booleanValue", "com.vmware.admiral.compute.HostConfigCertificateDistributionService.getHost", "com.vmware.xenon.common.ServiceHost.getState", "java.io.File.<init>", "com.vmware.admiral.common.util.CertificateUtilExtended.fromFile", "com.vmware.admiral.common.util.CertificateUtilExtended.toPEMformat", "com.vmware.admiral.compute.HostConfigCertificateDistributionService.uploadCertificate"], "call_func_parameter": [["com.vmware.admiral.compute.HostConfigCertificateDistributionService", "java.lang.String"], ["com.vmware.xenon.common.Service", "java.lang.String", "java.util.function.Consumer"], [""], [""], [""], ["java.net.URI"], ["java.io.File"], ["java.security.cert.X509Certificate[]", "com.vmware.xenon.common.ServiceHost"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.util.List"]], "passed_comments": [{"com.vmware.admiral.common.util.ConfigurationUtil.getConfigProperty": "Retrieves the property value from the configuration properties service."}, {"com.vmware.admiral.common.util.ConfigurationUtil.getConfigProperty": "Retrieves the property value from the configuration properties service."}, {"com.vmware.admiral.common.util.CertificateUtilExtended.fromFile": "Serialize the content of a .crt file to X509 certificate chain"}, {"com.vmware.admiral.common.util.CertificateUtilExtended.toPEMformat": "PSC 6.5 SAML requirement due to Bouncycastle library conflicts."}]}, {"index": "388", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/HostPortProfileService.java", "methodName": "com.vmware.admiral.compute.container.HostPortProfileService.updatePortAllocationForContainer", "methodParameterType": "HostPortProfileState#HostPortProfileReservationRequest#", "methodParameterName": "state#request#", "methodBody": "private void updatePortAllocationForContainer(HostPortProfileState state, HostPortProfileReservationRequest request) {\n        Set<Long> previousPorts = getAllocatedPorts(state, request.containerLink);\n        // First remove all ports, this will remove ports that are not allocated anymore\n        releasePorts(state, request);\n        // Second mark ports allocated\n        allocateSpecificPorts(state, request);\n        logInfo(\"Updating port allocation from [%s] to [%s] for container [%s] and profile [%s]\",\n                previousPorts,\n                getAllocatedPorts(state, request.containerLink),\n                request.containerLink,\n                state.documentSelfLink);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Update container port allocation. Mark container ports as allocated and release ports that are not used anymore", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "389", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/HostPortProfileService.java", "methodName": "com.vmware.admiral.compute.container.HostPortProfileService.releasePorts", "methodParameterType": "HostPortProfileState#HostPortProfileReservationRequest#", "methodParameterName": "state#request#", "methodBody": "private void releasePorts(HostPortProfileState state, HostPortProfileReservationRequest request) {\n        logInfo(\"Releasing ports [%s] for container [%s] and profile [%s].\",\n                getAllocatedPorts(state, request.containerLink),\n                request.containerLink,\n                state.documentSelfLink);\n        // remove container host ports from reserved ports\n        state.reservedPorts.entrySet()\n                .removeIf(p -> request.containerLink.equals(p.getValue()));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Release all ports for HostPortProfileReservationRequest.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "390", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/HostPortProfileService.java", "methodName": "com.vmware.admiral.compute.container.HostPortProfileService.allocatePorts", "methodParameterType": "HostPortProfileState#HostPortProfileReservationRequest#", "methodParameterName": "state#request#", "methodBody": "private void allocatePorts(HostPortProfileState state,\n                               HostPortProfileReservationRequest request) {\n        allocateSpecificPorts(state, request);\n        allocateAdditionalPorts(state, request);\n\n        logInfo(\"Allocating ports [%s] for container [%s] and profile [%s].\",\n                getAllocatedPorts(state, request.containerLink),\n                request.containerLink,\n                state.documentSelfLink);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Allocate all ports for HostPortProfileReservationRequest.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "391", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/HostPortProfileService.java", "methodName": "com.vmware.admiral.compute.container.HostPortProfileService.allocateAdditionalPorts", "methodParameterType": "HostPortProfileState#HostPortProfileReservationRequest#", "methodParameterName": "state#request#", "methodBody": "private void allocateAdditionalPorts(HostPortProfileState state,\n                                         HostPortProfileReservationRequest request) {\n        long statIndex = state.startPort;\n\n        for (long i = 0; i < request.additionalHostPortCount; i++) {\n            Long allocatedPort = null;\n            for (long k = statIndex; k < state.endPort; k++) {\n                if (!state.reservedPorts.containsKey(k)) {\n                    allocatedPort = k;\n                    state.reservedPorts.put(allocatedPort, request.containerLink);\n                    // start from the next index for the next allocation\n                    statIndex = k + 1;\n                    break;\n                }\n            }\n            if (allocatedPort == null) {\n                LocalizableValidationException exception =\n                        new LocalizableValidationException(\n                                \"Unable to allocate hostPort. There are no available ports left.\",\n                                \"compute.host.port.unavailable\");\n                throw exception;\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#ForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ThrowStatement#Block#IfStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)ForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)IfStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Allocate a number of any available ports.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "392", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/HostPortProfileService.java", "methodName": "com.vmware.admiral.compute.container.HostPortProfileService.allocateSpecificPorts", "methodParameterType": "HostPortProfileState#HostPortProfileReservationRequest#", "methodParameterName": "state#request#", "methodBody": "private void allocateSpecificPorts(HostPortProfileState state,\n                                       HostPortProfileReservationRequest request) {\n        if (request.specificHostPorts == null) {\n            return;\n        }\n\n        request.specificHostPorts.forEach(p -> state.reservedPorts.put(p, request.containerLink));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Allocate specific ports.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "393", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/volume/VolumeUtil.java", "methodName": "com.vmware.admiral.compute.container.volume.VolumeUtil.parseVolumeHostDirectory", "methodParameterType": "String#", "methodParameterName": "volume#", "methodBody": "public static String parseVolumeHostDirectory(String volume) {\n\n        if (StringUtils.isEmpty(volume)) {\n            return volume;\n        }\n\n        if (!volume.contains(HOST_CONTAINER_DIR_DELIMITER)) {\n            return volume;\n        }\n\n        String[] hostContainerDir = volume.split(HOST_CONTAINER_DIR_DELIMITER);\n\n        if (hostContainerDir.length != 2) {\n            Utils.logWarning(\"Cannot parse volume '%s'\", volume);\n            throw new LocalizableValidationException(\"Invalid volume directory.\",\n                    \"compute.volumes.invalid.directory\");\n        }\n\n        return hostContainerDir[0];\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NumberLiteral#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses volume host directory only.", "call_func_name": ["org.apache.commons.lang3.StringUtils.isEmpty", "java.lang.String.contains", "java.lang.String.split", "com.vmware.xenon.common.Utils.logWarning", "com.vmware.xenon.common.LocalizableValidationException.<init>"], "call_func_parameter": [["java.lang.CharSequence"], ["java.lang.CharSequence"], ["java.lang.String"], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "394", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/volume/VolumeUtil.java", "methodName": "com.vmware.admiral.compute.container.volume.VolumeUtil.applyLocalNamedVolumeConstraints", "methodParameterType": "Collection<ComponentDescription>#", "methodParameterName": "componentDescriptions#", "methodBody": "public static void applyLocalNamedVolumeConstraints(\n            Collection<ComponentDescription> componentDescriptions) {\n\n        Map<String, ContainerVolumeDescription> volumes = filterDescriptions(\n                ContainerVolumeDescription.class, componentDescriptions);\n\n        List<String> localVolumes = volumes.values().stream()\n                .filter(v -> DEFAULT_VOLUME_DRIVER.equals(v.driver))\n                .map(v -> v.name)\n                .collect(Collectors.toList());\n\n        if (localVolumes.isEmpty()) {\n            return;\n        }\n\n        Map<String, ContainerDescription> containers = filterDescriptions(\n                ContainerDescription.class, componentDescriptions);\n\n        // sort containers by local volume: each set is a group of container names\n        // that share a particular local volume\n        List<Set<String>> localVolumeContainers = localVolumes.stream()\n                .map(v -> filterByVolume(v, containers.values()))\n                .filter(s -> !s.isEmpty())\n                .collect(Collectors.toList());\n\n        if (localVolumeContainers.isEmpty()) {\n            return;\n        }\n\n        /** Merge sets of containers sharing local volumes\n         *\n         *  C1  C2  C3  C4  C5  C6\n         *   \\  /\\  /   |    \\  /\n         *    L1  L2    L3    L4\n         *\n         *    Input: [C1, C2], [C2, C3], [C4], [C5, C6]\n         *    Output: [C1, C2, C3], [C4], [C5, C6]\n         */\n        localVolumeContainers = mergeSets(localVolumeContainers);\n\n        Map<String, List<ContainerVolumeDescription>> containerToVolumes =\n                containers.values().stream()\n                        .collect(Collectors.toMap(cd -> cd.name,\n                                cd -> filterVolumes(cd, volumes.values())));\n\n        Map<String, Integer> containerToDriverCount = containerToVolumes.entrySet().stream()\n                .collect(Collectors.toMap(e -> e.getKey(),\n                        e -> e.getValue().stream()\n                                .map(vd -> vd.driver)\n                                .collect(Collectors.toSet()).size()));\n\n        for (Set<String> s: localVolumeContainers) {\n            if (s.size() > 1) {\n                // find the container with highest number of required drivers\n                int max = s.stream()\n                        .map(cn -> containerToDriverCount.get(cn))\n                        .max((vc1, vc2) -> Integer.compare(vc1, vc2))\n                        .get();\n                Set<String> maxDrivers = s.stream()\n                        .filter(cn -> containerToDriverCount.get(cn) == max)\n                        .collect(Collectors.toSet());\n\n                String maxCont = maxDrivers.iterator().next();\n                s.remove(maxCont);\n                s.stream().forEach(cn -> addAffinity(maxCont, containers.get(cn)));\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#PrefixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Creates additional affinity rules between container descriptions which share local volumes. Each container group should be deployed on a single host.", "call_func_name": ["com.vmware.admiral.compute.container.volume.VolumeUtil.filterDescriptions", "java.util.Map.values", "java.util.Collection.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.List.isEmpty", "java.util.List.stream", "java.util.function.Function.apply", "com.vmware.admiral.compute.container.volume.VolumeUtil.mergeSets", "java.util.stream.Collectors.toMap", "java.util.Map.entrySet", "java.util.Set.stream", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Set.size", "java.util.Comparator.compare", "java.util.stream.Stream.max", "java.util.Optional.get", "java.lang.Integer.intValue", "java.util.function.Predicate.test", "java.util.stream.Collectors.toSet", "java.util.Set.iterator", "java.util.Set.remove", "java.util.function.Consumer.accept", "java.util.stream.Stream.forEach"], "call_func_parameter": [["java.lang.Class", "java.util.Collection"], [""], [""], [""], ["java.util.function.Predicate"], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"], [""], [""], ["java.util.Map"], ["java.util.List"], ["java.util.function.Function", "java.util.function.Function"], [""], [""], [""], [""], [""], [""], [""], ["java.util.Comparator"], [""], [""], ["java.util.Map", "int"], [""], [""], ["java.lang.Object"], ["java.lang.String", "java.util.Map"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "395", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/volume/ContainerVolumeService.java", "methodName": "com.vmware.admiral.compute.container.volume.ContainerVolumeService.getValidInputFrom", "methodParameterType": "Operation#boolean#", "methodParameterName": "op#isUpdate#", "methodBody": "private ContainerVolumeState getValidInputFrom(Operation op, boolean isUpdate) {\n        checkForBody(op);\n        ContainerVolumeState incomingState = op.getBody(ContainerVolumeState.class);\n        validateState(incomingState, isUpdate);\n        return incomingState;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns valid  {@link ContainerVolumeState} instance for the specified operation or throws anException if validation fails.", "call_func_name": ["com.vmware.admiral.compute.container.volume.ContainerVolumeService.checkForBody", "com.vmware.xenon.common.Operation.getBody"], "call_func_parameter": [["com.vmware.xenon.common.Operation"], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "396", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/volume/ContainerVolumeService.java", "methodName": "com.vmware.admiral.compute.container.volume.ContainerVolumeService.validateState", "methodParameterType": "ContainerVolumeState#boolean#", "methodParameterName": "state#isUpdate#", "methodBody": "public void validateState(ContainerVolumeState state, boolean isUpdate) {\n        if (!isUpdate) {\n            // check that all required fields are not null.\n            // Skip this step on updates (null = no update)\n            Utils.validateState(getStateDescription(), state);\n            if (DEFAULT_VOLUME_DRIVER.equals(state.driver)) {\n                VolumeUtil.validateLocalVolumeName(state.name);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Validates the specified  {@link ContainerVolumeState}. If the validation fails, an Exception will be thrown.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "397", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/volume/ContainerVolumeDescriptionService.java", "methodName": "com.vmware.admiral.compute.container.volume.ContainerVolumeDescriptionService.validateState", "methodParameterType": "ContainerVolumeDescription#boolean#", "methodParameterName": "state#isUpdate#", "methodBody": "public void validateState(ContainerVolumeDescription state, boolean isUpdate) {\n        if (!isUpdate) {\n            // check that all required fields are not null.\n            // Skip this step on updates (null = no update)\n            Utils.validateState(getStateDescription(), state);\n            if (DEFAULT_VOLUME_DRIVER.equals(state.driver)) {\n                VolumeUtil.validateLocalVolumeName(state.name);\n            }\n        }\n\n        if (state.instanceAdapterReference == null) {\n            state.instanceAdapterReference = UriUtils\n                    .buildUri(ManagementUriParts.ADAPTER_DOCKER_VOLUME);\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Validates the specified  {@link ContainerVolumeDescription}. If the validation fails, an Exception will be thrown.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "398", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/volume/ContainerVolumeDescriptionService.java", "methodName": "com.vmware.admiral.compute.container.volume.ContainerVolumeDescriptionService.getValidInputFrom", "methodParameterType": "Operation#boolean#", "methodParameterName": "op#isUpdate#", "methodBody": "private ContainerVolumeDescription getValidInputFrom(Operation op, boolean isUpdate) {\n        checkForBody(op);\n        ContainerVolumeDescription incomingState = op.getBody(ContainerVolumeDescription.class);\n        validateState(incomingState, isUpdate);\n        return incomingState;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns valid  {@link ContainerVolumeDescription} instance for the specified operation orthrows an Exception if validation fails.", "call_func_name": ["com.vmware.admiral.compute.container.volume.ContainerVolumeDescriptionService.checkForBody", "com.vmware.xenon.common.Operation.getBody"], "call_func_parameter": [["com.vmware.xenon.common.Operation"], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "399", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/network/ContainerNetworkService.java", "methodName": "com.vmware.admiral.compute.container.network.ContainerNetworkService.validateState", "methodParameterType": "ContainerNetworkState#ContainerNetworkState#", "methodParameterName": "state#currentState#", "methodBody": "private void validateState(ContainerNetworkState state, ContainerNetworkState currentState) {\n\n        // VIC supports IPv4 range notation when configured during the VCH creation,\n        // and Admiral discovers it during the data collection.\n        boolean rangeFormatAllowed;\n\n        if (currentState == null) {\n            // check that all required fields are not null.\n            // Skip this step on updates (null = no update)\n            Utils.validateState(getStateDescription(), state);\n            NetworkUtils.validateNetworkName(state.name);\n            rangeFormatAllowed = NetworkUtils.isRangeFormatAllowed(state.customProperties);\n        } else {\n            rangeFormatAllowed = NetworkUtils.isRangeFormatAllowed(currentState.customProperties);\n        }\n\n        if (state.ipam != null) {\n            if (state.ipam.config != null && state.ipam.config.length > 0) {\n                for (IpamConfig ipamConfig : state.ipam.config) {\n                    if (ipamConfig != null) {\n                        NetworkUtils.validateIpCidrNotation(ipamConfig.subnet);\n                        NetworkUtils.validateIpRangeNotation(ipamConfig.ipRange,\n                                rangeFormatAllowed);\n                        NetworkUtils.validateIpAddress(ipamConfig.gateway);\n                        if (ipamConfig.auxAddresses != null) {\n                            ipamConfig.auxAddresses.values().stream().forEach((address) -> {\n                                NetworkUtils.validateIpAddress(address);\n                            });\n                        }\n                    }\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Validates the specified  {@link ContainerNetworkState}. If the validation fails, an Exception will be thrown.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "400", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/network/ContainerNetworkService.java", "methodName": "com.vmware.admiral.compute.container.network.ContainerNetworkService.getValidInputFrom", "methodParameterType": "Operation#ContainerNetworkState#", "methodParameterName": "op#currentState#", "methodBody": "private ContainerNetworkState getValidInputFrom(Operation op,\n            ContainerNetworkState currentState) {\n        checkForBody(op);\n        ContainerNetworkState incomingState = op.getBody(ContainerNetworkState.class);\n        validateState(incomingState, currentState);\n        return incomingState;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns valid  {@link ContainerNetworkState} instance for the specified operation or throws anException if validation fails.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "401", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/network/ContainerNetworkDescriptionService.java", "methodName": "com.vmware.admiral.compute.container.network.ContainerNetworkDescriptionService.validateState", "methodParameterType": "ContainerNetworkDescription#ContainerNetworkDescription#", "methodParameterName": "state#currentState#", "methodBody": "private void validateState(ContainerNetworkDescription state,\n            ContainerNetworkDescription currentState) {\n\n        // VIC supports IPv4 range notation when configured during the VCH creation,\n        // and Admiral discovers it during the data collection.\n        boolean rangeFormatAllowed;\n\n        if (currentState == null) {\n            // check that all required fields are not null.\n            // Skip this step on updates (null = no update)\n            Utils.validateState(getStateDescription(), state);\n            NetworkUtils.validateNetworkName(state.name);\n            rangeFormatAllowed = NetworkUtils.isRangeFormatAllowed(state.customProperties);\n        } else {\n            rangeFormatAllowed = NetworkUtils.isRangeFormatAllowed(currentState.customProperties);\n        }\n\n        if (state.instanceAdapterReference == null) {\n            state.instanceAdapterReference = UriUtils\n                    .buildUri(ManagementUriParts.ADAPTER_DOCKER_NETWORK);\n        }\n\n        if (state.ipam != null) {\n            if (state.ipam.config != null && state.ipam.config.length > 0) {\n                for (IpamConfig ipamConfig : state.ipam.config) {\n                    if (ipamConfig != null) {\n                        NetworkUtils.validateIpCidrNotation(ipamConfig.subnet);\n                        NetworkUtils.validateIpRangeNotation(ipamConfig.ipRange,\n                                rangeFormatAllowed);\n                        NetworkUtils.validateIpAddress(ipamConfig.gateway);\n                        if (ipamConfig.auxAddresses != null) {\n                            ipamConfig.auxAddresses.values().stream().forEach((address) -> {\n                                NetworkUtils.validateIpAddress(address);\n                            });\n                        }\n                    }\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Validates the specified  {@link ContainerNetworkDescription}. If the validation fails, an Exception will be thrown.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "402", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/network/ContainerNetworkDescriptionService.java", "methodName": "com.vmware.admiral.compute.container.network.ContainerNetworkDescriptionService.getValidInputFrom", "methodParameterType": "Operation#ContainerNetworkDescription#", "methodParameterName": "op#currentState#", "methodBody": "private ContainerNetworkDescription getValidInputFrom(Operation op,\n            ContainerNetworkDescription currentState) {\n        checkForBody(op);\n        ContainerNetworkDescription incomingState = op.getBody(ContainerNetworkDescription.class);\n        validateState(incomingState, currentState);\n        return incomingState;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns valid  {@link ContainerNetworkDescription} instance for the specified operation orthrows an Exception if validation fails.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "403", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/ContainerStatsService.java", "methodName": "com.vmware.admiral.compute.container.ContainerStatsService.getContainerStateAndProcess", "methodParameterType": "Operation#String#", "methodParameterName": "op#id#", "methodBody": "private void getContainerStateAndProcess(Operation op, String id) {\n        final String containerLink = UriUtils.buildUriPath(ContainerFactoryService.SELF_LINK, id);\n\n        sendRequest(Operation\n                .createGet(UriUtils.buildUri(getHost(), containerLink))\n                .setCompletion((o, ex) -> {\n                    if (ex != null) {\n                        logWarning(\"Container '%s' not found\", containerLink);\n                        op.fail(Operation.STATUS_CODE_NOT_FOUND);\n                        return;\n                    }\n                    ServiceUtils.handleExceptions(op, () -> {\n                        ContainerState containerState = o.getBody(ContainerState.class);\n                        processInspect(containerState, () ->\n                                processStatsRequest(op, containerState));\n                    });\n                }));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "start processing the request - first fetch the ContainerState", "call_func_name": ["com.vmware.xenon.common.UriUtils.buildUriPath", "com.vmware.admiral.compute.container.ContainerStatsService.getHost", "com.vmware.xenon.common.UriUtils.buildUri", "com.vmware.xenon.common.Operation.createGet", "com.vmware.admiral.compute.container.ContainerStatsService.sendRequest"], "call_func_parameter": [["java.lang.String[]"], [""], ["com.vmware.xenon.common.ServiceHost", "java.lang.String"], ["java.net.URI"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "404", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/ContainerStatsService.java", "methodName": "com.vmware.admiral.compute.container.ContainerStatsService.processStatsRequest", "methodParameterType": "Operation#ContainerState#", "methodParameterName": "op#containerState#", "methodBody": "private void processStatsRequest(Operation op, ContainerState containerState) {\n        AdapterRequest request = new AdapterRequest();\n        request.resourceReference = UriUtils.buildUri(getHost(), containerState.documentSelfLink);\n        request.operationTypeId = ContainerOperationType.STATS.id;\n        request.serviceTaskCallback = ServiceTaskCallback.createEmpty();\n        sendRequest(Operation\n                .createPatch(this, containerState.adapterManagementReference.toString())\n                .setBodyNoCloning(request)\n                .setCompletion((o, ex) -> {\n                    if (ex != null) {\n                        // do not return, just log warning, previous /stats will be returned\n                        logWarning(\"Exception in stats request for container: %s. Error: %s\",\n                                containerState.documentSelfLink, Utils.toString(ex));\n                    }\n                    forwardStatsResponse(op, containerState);\n                }));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Request getting stats through the adapter and then return /stats as body response", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "405", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/ContainerStatsService.java", "methodName": "com.vmware.admiral.compute.container.ContainerStatsService.forwardStatsResponse", "methodParameterType": "Operation#ContainerState#", "methodParameterName": "op#containerState#", "methodBody": "private void forwardStatsResponse(Operation op, ContainerState containerState) {\n        sendRequest(Operation\n                .createGet(UriUtils.buildStatsUri(getHost(), containerState.documentSelfLink))\n                .setExpiration(op.getExpirationMicrosUtc())\n                .setCompletion((o, e) -> {\n                    op.setBodyNoCloning(o.getBodyRaw());\n                    op.setStatusCode(o.getStatusCode());\n                    op.transferResponseHeadersFrom(o);\n                    if (e != null) {\n                        op.fail(e);\n                    } else {\n                        op.complete();\n                    }\n                }));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Executes /stats request to the container state and copy its response to the GET operation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "406", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/ContainerHostDataCollectionService.java", "methodName": "com.vmware.admiral.compute.container.ContainerHostDataCollectionService.isUpdatedRecently", "methodParameterType": "ServiceDocument#", "methodParameterName": "d#", "methodBody": "static boolean isUpdatedRecently(ServiceDocument d) {\n        return d.documentUpdateTimeMicros > Utils\n                .fromNowMicrosUtc(-MAINTENANCE_INTERVAL_MICROS / 2);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns  {@code true} if the document has been updated recently. As time frame is taken a halfof the data collection interval.", "call_func_name": ["com.vmware.xenon.common.Utils.fromNowMicrosUtc"], "call_func_parameter": [["long"]], "passed_comments": "/"}, {"index": "407", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/ContainerHostDataCollectionService.java", "methodName": "com.vmware.admiral.compute.container.ContainerHostDataCollectionService.updatePlacements", "methodParameterType": "ResourcePoolService.ResourcePoolState#", "methodParameterName": "resourcePoolState#", "methodBody": "private void updatePlacements(ResourcePoolService.ResourcePoolState resourcePoolState) {\n        QueryTask queryTask = QueryUtil.buildPropertyQuery(\n                GroupResourcePlacementState.class,\n                GroupResourcePlacementState.FIELD_NAME_RESOURCE_POOL_LINK,\n                resourcePoolState.documentSelfLink);\n        QueryUtil.addExpandOption(queryTask);\n        ServiceDocumentQuery<GroupResourcePlacementState> query = new ServiceDocumentQuery<>(\n                getHost(), GroupResourcePlacementState.class);\n        List<GroupResourcePlacementState> placements = new ArrayList<>();\n        query.query(queryTask, (r) -> {\n            if (r.hasException()) {\n                logSevere(r.getException());\n            } else if (r.hasResult()) {\n                placements.add(r.getResult());\n            } else {\n                if (placements.isEmpty()) {\n                    return;\n                }\n\n                long diff = placements.stream()\n                        .map(q -> q.memoryLimit).reduce(0L, (a, b) -> a + b)\n                        - resourcePoolState.maxMemoryBytes;\n                if (diff <= 0) {\n                    return;\n                }\n\n                // Sort the placements by their \"normalized\" priority (priority divided by the sum\n                // of all priorities in the group). We do that because the priorities are relative\n                // within the group. E.g. Group A has two placements with priorities 1 and 2;\n                // group B has two placements with priorities 100 and 200 thus the normalized\n                // priorities will be: 0.33; 0.66 for A and 0.33 and 0.66 for B\n                Map<String, Integer> sumOfPrioritiesByGroup = placements\n                        .stream().collect(Collectors.groupingBy(\n                                ContainerHostDataCollectionService::getTenantAndGroupIdentifier,\n                                Collectors.summingInt(placement -> placement.priority)));\n\n                Comparator<GroupResourcePlacementState> comparator = (q1, q2) -> Double.compare(\n                                ((double) q2.priority) /\n                                        sumOfPrioritiesByGroup.get(getTenantAndGroupIdentifier(q2)),\n                                ((double) q1.priority) /\n                                        sumOfPrioritiesByGroup\n                                                .get(getTenantAndGroupIdentifier(q1)));\n\n                placements.sort(comparator);\n                Set<GroupResourcePlacementState> placementsToUpdate = new HashSet<>();\n                for (GroupResourcePlacementState placement : placements) {\n                    if (placement.availableMemory == 0 || placement.memoryLimit == 0) {\n                        continue;\n                    }\n\n                    placementsToUpdate.add(placement);\n                    if (diff > placement.availableMemory) {\n                        placement.memoryLimit -= placement.availableMemory;\n                        diff -= placement.availableMemory;\n                    } else {\n                        placement.memoryLimit -= diff;\n                        break;\n                    }\n                }\n\n                for (GroupResourcePlacementState placementToUpdate : placementsToUpdate) {\n                    sendRequest(Operation.createPut(this, placementToUpdate.documentSelfLink)\n                            .setAuthorizationContext(getSystemAuthorizationContext())\n                            .setBodyNoCloning(placementToUpdate));\n                }\n\n            }\n        });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#MethodInvocation#SimpleName#NumberLiteral#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#InfixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#MethodInvocation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#PrimitiveType#SimpleName#SimpleName#QualifiedName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#PrimitiveType#SimpleName#SimpleName#QualifiedName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#MethodInvocation#LambdaExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)LambdaExpression)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression)MethodInvocation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(CastExpression(PrimitiveType)PrimitiveType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)CastExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(InfixExpression(ParenthesizedExpression(CastExpression(PrimitiveType)PrimitiveType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)CastExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)MethodInvocation)LambdaExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Update the placements if we have more resources reserved than what's actually in the resource pool. Sort the placements by priority and decrease from their reservations", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "408", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/ContainerHostDataCollectionService.java", "methodName": "com.vmware.admiral.compute.container.ContainerHostDataCollectionService.getTenantAndGroupIdentifier", "methodParameterType": "GroupResourcePlacementState#", "methodParameterName": "placement#", "methodBody": "private static String getTenantAndGroupIdentifier(GroupResourcePlacementState placement) {\n        List<String> tenantAndGroupLinks = QueryUtil.getTenantAndGroupLinks(placement.tenantLinks);\n        return tenantAndGroupLinks != null ? String.join(\"/\", tenantAndGroupLinks) : \"\";\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#StringLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves a tenant+group string identifier for the given placement.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "409", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/ContainerHostDataCollectionService.java", "methodName": "com.vmware.admiral.compute.container.ContainerHostDataCollectionService.scheduleDataCollection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void scheduleDataCollection() {\n        getHost().schedule(() -> {\n            try {\n                updateHostInfoDataCollection(Operation.createGet(null));\n            } catch (Exception e) {\n                getHost().log(Level.WARNING, e.getMessage());\n                getHost().log(Level.FINE, Utils.toString(e));\n            } finally {\n                scheduled.set(false);\n            }\n        }, maintenanceIntervalInitial, TimeUnit.MICROSECONDS);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#LambdaExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)LambdaExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Trigger the data collection more often in the beginning. The reason is that in cluster after restart the node will not have the certificates loaded. In this case the first run will mark the existing docker host in DISABLED state. Speed up the first runs in order to mark the hosts as ON again", "call_func_name": ["com.vmware.admiral.compute.container.ContainerHostDataCollectionService.getHost", "java.lang.Runnable.run", "com.vmware.xenon.common.ServiceHost.schedule"], "call_func_parameter": [[""], ["com.vmware.admiral.compute.container.ContainerHostDataCollectionService"], ["java.lang.Runnable", "long", "java.util.concurrent.TimeUnit"]], "passed_comments": "/"}, {"index": "410", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/util/ContainerUtil.java", "methodName": "com.vmware.admiral.compute.container.util.ContainerUtil.isDiscoveredContainer", "methodParameterType": "ContainerState#", "methodParameterName": "containerState#", "methodBody": "public static boolean isDiscoveredContainer(ContainerState containerState) {\n\n        return containerState.descriptionLink != null\n                && containerState.descriptionLink.contains(UriUtils\n                .buildUriPath(\n                        SystemContainerDescriptions.DISCOVERED_DESCRIPTION_LINK));\n\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Method checks if ContainerState is mapped to ContainerDescription which is \"Discovered\". The only difference between this method and the one in SystemContainerDescriptions is that this one will return false if check is against system container.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "411", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/maintenance/ContainerStatsEvaluator.java", "methodName": "com.vmware.admiral.compute.container.maintenance.ContainerStatsEvaluator.calculateStatsValues", "methodParameterType": "String#", "methodParameterName": "statsJson#", "methodBody": "public static ContainerStats calculateStatsValues(String statsJson) {\n        ContainerStats state = new ContainerStats();\n        if (statsJson == null || statsJson.isEmpty()) {\n            return state;\n        }\n\n        Map<String, JsonElement> stats = parseStats(statsJson);\n\n        calculateCpuUsage(state, stats);\n\n        setMemoryUsage(state, stats);\n\n        setNetworkUsage(state, stats);\n\n        setContainerStopped(state, stats);\n\n        return state;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parse the json stats value and return ContainerStats state with the calculated values from the json field.", "call_func_name": ["com.vmware.admiral.compute.container.maintenance.ContainerStats.<init>", "java.lang.String.isEmpty", "com.vmware.admiral.compute.container.maintenance.ContainerStatsEvaluator.parseStats", "com.vmware.admiral.compute.container.maintenance.ContainerStatsEvaluator.calculateCpuUsage", "com.vmware.admiral.compute.container.maintenance.ContainerStatsEvaluator.setMemoryUsage", "com.vmware.admiral.compute.container.maintenance.ContainerStatsEvaluator.setNetworkUsage", "com.vmware.admiral.compute.container.maintenance.ContainerStatsEvaluator.setContainerStopped"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["com.vmware.admiral.compute.container.maintenance.ContainerStats", "java.util.Map"], ["com.vmware.admiral.compute.container.maintenance.ContainerStats", "java.util.Map"], ["com.vmware.admiral.compute.container.maintenance.ContainerStats", "java.util.Map"], ["com.vmware.admiral.compute.container.maintenance.ContainerStats", "java.util.Map"]], "passed_comments": "/"}, {"index": "412", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/PortBinding.java", "methodName": "com.vmware.admiral.compute.container.PortBinding.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        if (hostIp != null) {\n            sb.append(hostIp);\n            sb.append(\":\");\n        }\n\n        if (hostPort != null) {\n            sb.append(hostPort);\n        }\n\n        if (sb.length() > 0) {\n            sb.append(\":\");\n        }\n\n        sb.append(containerPort);\n        if (protocol != null) {\n            sb.append(\"/\");\n            sb.append(protocol.toString());\n        }\n        return sb.toString();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Format as a docker port mapping string (reverse of fromString)", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.length", "java.lang.String.toString", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""]], "passed_comments": "/"}, {"index": "413", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/CompositeComponentRegistry.java", "methodName": "com.vmware.admiral.compute.container.CompositeComponentRegistry.registerComponent", "methodParameterType": "String#String#Class<? extends ResourceState>#String#Class<? extends ResourceState>#", "methodParameterName": "resourceType#descriptionFactoryLink#descriptionClass#stateFactoryLink#stateClass#", "methodBody": "public static void registerComponent(String resourceType, String descriptionFactoryLink,\n            Class<? extends ResourceState> descriptionClass, String stateFactoryLink,\n            Class<? extends ResourceState> stateClass) {\n        registerComponent(resourceType, descriptionFactoryLink, descriptionClass, stateFactoryLink,\n                stateClass, stateClass);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Register new component meta data.", "call_func_name": ["com.vmware.admiral.compute.container.CompositeComponentRegistry.registerComponent"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.Class", "java.lang.String", "java.lang.Class", "java.lang.Class"]], "passed_comments": [{"com.vmware.admiral.compute.container.CompositeComponentRegistry.registerComponent": "Register new component meta data."}]}, {"index": "414", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/CompositeComponentRegistry.java", "methodName": "com.vmware.admiral.compute.container.CompositeComponentRegistry.registerComponent", "methodParameterType": "String#String#Class<? extends ResourceState>#String#Class<? extends ResourceState>#Class<? extends ResourceState>#", "methodParameterName": "resourceType#descriptionFactoryLink#descriptionClass#stateFactoryLink#stateClass#stateTemplateClass#", "methodBody": "public static void registerComponent(String resourceType, String descriptionFactoryLink,\n            Class<? extends ResourceState> descriptionClass, String stateFactoryLink,\n            Class<? extends ResourceState> stateClass,\n            Class<? extends ResourceState> stateTemplateClass) {\n\n        entries.add(new RegistryEntry(resourceType, descriptionFactoryLink, descriptionClass,\n                stateFactoryLink, stateClass, stateTemplateClass));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Register new component meta data.", "call_func_name": ["java.util.List.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "415", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/CompositeComponentRegistry.java", "methodName": "com.vmware.admiral.compute.container.CompositeComponentRegistry.metaByDescriptionLink", "methodParameterType": "String#", "methodParameterName": "descriptionLink#", "methodBody": "public static ComponentMeta metaByDescriptionLink(String descriptionLink) {\n        return getEntry(descriptionFactoryPrefix(descriptionLink)).componentMeta;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve meta data for a Component by component's description link.", "call_func_name": ["com.vmware.admiral.compute.container.CompositeComponentRegistry.descriptionFactoryPrefix", "com.vmware.admiral.compute.container.CompositeComponentRegistry.getEntry"], "call_func_parameter": [["java.lang.String"], ["java.util.function.Predicate"]], "passed_comments": "/"}, {"index": "416", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/CompositeComponentRegistry.java", "methodName": "com.vmware.admiral.compute.container.CompositeComponentRegistry.descriptionFactoryLinkByDescriptionLink", "methodParameterType": "String#", "methodParameterName": "descriptionLink#", "methodBody": "public static String descriptionFactoryLinkByDescriptionLink(String descriptionLink) {\n        return getEntry(descriptionFactoryPrefix(descriptionLink)).descriptionFactoryLink;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve factory link for a Component by component's description link.", "call_func_name": ["com.vmware.admiral.compute.container.CompositeComponentRegistry.descriptionFactoryPrefix", "com.vmware.admiral.compute.container.CompositeComponentRegistry.getEntry"], "call_func_parameter": [["java.lang.String"], ["java.util.function.Predicate"]], "passed_comments": "/"}, {"index": "417", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/CompositeComponentRegistry.java", "methodName": "com.vmware.admiral.compute.container.CompositeComponentRegistry.descriptionFactoryLinkByType", "methodParameterType": "String#", "methodParameterName": "type#", "methodBody": "public static String descriptionFactoryLinkByType(String type) {\n        return getEntry(equalsType(type)).descriptionFactoryLink;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve factory link for a Component by component's description link.", "call_func_name": ["com.vmware.admiral.compute.container.CompositeComponentRegistry.equalsType", "com.vmware.admiral.compute.container.CompositeComponentRegistry.getEntry"], "call_func_parameter": [["java.lang.String"], ["java.util.function.Predicate"]], "passed_comments": "/"}, {"index": "418", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/CompositeComponentRegistry.java", "methodName": "com.vmware.admiral.compute.container.CompositeComponentRegistry.metaByStateLink", "methodParameterType": "String#", "methodParameterName": "stateLink#", "methodBody": "public static ComponentMeta metaByStateLink(String stateLink) {\n        return getEntry(stateFactoryPrefix(stateLink)).componentMeta;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve meta data for a Component description by component's state(instance) Link.", "call_func_name": ["com.vmware.admiral.compute.container.CompositeComponentRegistry.stateFactoryPrefix", "com.vmware.admiral.compute.container.CompositeComponentRegistry.getEntry"], "call_func_parameter": [["java.lang.String"], ["java.util.function.Predicate"]], "passed_comments": "/"}, {"index": "419", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/CompositeComponentRegistry.java", "methodName": "com.vmware.admiral.compute.container.CompositeComponentRegistry.metaByType", "methodParameterType": "String#", "methodParameterName": "type#", "methodBody": "public static ComponentMeta metaByType(String type) {\n        return getEntry(equalsType(type)).componentMeta;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve meta data for a Component description by component's state(instance) Link.", "call_func_name": ["com.vmware.admiral.compute.container.CompositeComponentRegistry.equalsType", "com.vmware.admiral.compute.container.CompositeComponentRegistry.getEntry"], "call_func_parameter": [["java.lang.String"], ["java.util.function.Predicate"]], "passed_comments": "/"}, {"index": "420", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/CompositeComponentRegistry.java", "methodName": "com.vmware.admiral.compute.container.CompositeComponentRegistry.stateFactoryLinkByStateLink", "methodParameterType": "String#", "methodParameterName": "stateLink#", "methodBody": "public static String stateFactoryLinkByStateLink(String stateLink) {\n        return getEntry(stateFactoryPrefix(stateLink)).stateFactoryLink;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve factory link for a Component state by component's state(instance) Link.", "call_func_name": ["com.vmware.admiral.compute.container.CompositeComponentRegistry.stateFactoryPrefix", "com.vmware.admiral.compute.container.CompositeComponentRegistry.getEntry"], "call_func_parameter": [["java.lang.String"], ["java.util.function.Predicate"]], "passed_comments": "/"}, {"index": "421", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/HealthChecker.java", "methodName": "com.vmware.admiral.compute.container.HealthChecker.initialize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void initialize() {\n        this.bootstrap = new Bootstrap()\n                .group(new NioEventLoopGroup())\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<Channel>() {\n                    @Override\n                    protected void initChannel(Channel arg0) throws Exception {\n                        // Nothing to setup\n                    }\n                });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initialize Netty bootstrap", "call_func_name": ["io.netty.bootstrap.Bootstrap.<init>", "io.netty.channel.nio.NioEventLoopGroup.<init>", "io.netty.bootstrap.Bootstrap.group", "io.netty.bootstrap.Bootstrap.channel", "io.netty.bootstrap.Bootstrap.handler"], "call_func_parameter": [[""], [""], ["io.netty.channel.EventLoopGroup"], ["java.lang.Class"], ["io.netty.channel.ChannelHandler"]], "passed_comments": "/"}, {"index": "422", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/container/SystemContainerDescriptions.java", "methodName": "com.vmware.admiral.compute.container.SystemContainerDescriptions.buildCoreAgentContainerDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ContainerDescription buildCoreAgentContainerDescription() {\n        ContainerDescription cd = new ContainerDescription();\n        cd.documentSelfLink = AGENT_CONTAINER_DESCRIPTION_LINK;\n        cd.name = AGENT_CONTAINER_NAME;\n        cd.image = getAgentImageNameAndVersion();\n        cd.publishAll = true;\n\n        cd.volumes = AGENT_CONTAINER_VOLUMES;\n        cd.restartPolicy = \"always\";\n\n        return cd;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#StringLiteral#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a container description to be used for installing host agents containers.", "call_func_name": ["com.vmware.admiral.compute.container.SystemContainerDescriptions.getAgentImageNameAndVersion", "java.lang.Boolean.valueOf"], "call_func_parameter": [[""], ["boolean"]], "passed_comments": "/"}, {"index": "423", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/cluster/ClusterService.java", "methodName": "com.vmware.admiral.compute.cluster.ClusterService.propagatePublicAddressIfNeeded", "methodParameterType": "ClusterDto#ClusterDto#", "methodParameterName": "patchDto#wipDto#", "methodBody": "private DeferredResult<ClusterDto> propagatePublicAddressIfNeeded(ClusterDto patchDto,\n            ClusterDto wipDto) {\n        if (patchDto.publicAddress == null || !ClusterUtils.isSingleHostSupportedCluster(wipDto)) {\n            return DeferredResult.completed(wipDto);\n        }\n\n        String hostLink = null;\n        if (wipDto.nodeLinks != null && wipDto.nodeLinks.size() == 1) {\n            hostLink = wipDto.nodeLinks.iterator().next();\n        } else if (wipDto.nodes != null && wipDto.nodes.size() == 1) {\n            hostLink = wipDto.nodes.keySet().iterator().next();\n        }\n\n        if (hostLink == null) {\n            return DeferredResult.completed(wipDto);\n        }\n\n        ComputeState patchState = new ComputeState();\n        patchState.customProperties = new HashMap<>();\n        patchState.customProperties.put(ContainerHostService.HOST_PUBLIC_ADDRESS_PROP_NAME,\n                patchDto.publicAddress);\n\n        Operation patchOp = Operation.createPatch(getHost(), hostLink)\n                .setReferer(getSelfLink())\n                .setBody(patchState);\n\n        return getHost().sendWithDeferredResult(patchOp, ComputeState.class)\n                .thenApply((cs) -> {\n                    wipDto.publicAddress = patchDto.publicAddress;\n                    return wipDto;\n                });\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Propagates the  {@link ClusterDto#publicAddress} to the host of this cluster if and only ifthe cluster is a single-host cluster and there is a host in the cluster.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "424", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/cluster/ClusterService.java", "methodName": "com.vmware.admiral.compute.cluster.ClusterService.generatePlacementZoneAndPlacement", "methodParameterType": "ContainerHostSpec#Set<String>#", "methodParameterName": "hostSpec#generatedResourcesIds#", "methodBody": "private DeferredResult<Pair<ResourcePoolState, GroupResourcePlacementState>> generatePlacementZoneAndPlacement(\n            ContainerHostSpec hostSpec, Set<String> generatedResourcesIds) {\n        ComputeState hostState = hostSpec.hostState;\n        String clusterDetails = null;\n        String clusterName = null;\n        if (hostState.customProperties != null) {\n            clusterDetails = hostState.customProperties.remove(CLUSTER_DETAILS_CUSTOM_PROP);\n            clusterName = hostState.customProperties.remove(CLUSTER_NAME_CUSTOM_PROP);\n        }\n        Long clusterCreationTime = Instant.now().toEpochMilli();\n\n        // Honor predefined placement zone if any\n        if (ClusterUtils.hasPlacementZone(hostState)) {\n            return DeferredResult.completed(null);\n        }\n\n        // else, automatically generate placement zone\n        return PlacementZoneUtil\n                .generatePlacementZone(getHost(), hostState, clusterDetails, clusterName,\n                        clusterCreationTime)\n                .thenCompose((generatedZone) -> {\n                    // update placement zone in the compute state and generate placement\n                    hostState.resourcePoolLink = generatedZone.documentSelfLink;\n                    generatedResourcesIds.add(generatedZone.documentSelfLink);\n                    return PlacementZoneUtil.generatePlacement(getHost(), generatedZone)\n                            .thenApply((generatedPlacement) -> {\n                                generatedResourcesIds.add(generatedPlacement.documentSelfLink);\n                                return new Pair<>(generatedZone, generatedPlacement);\n                            });\n                });\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If needed, automatically generates placement zone and placement for the host specified. Stores the document links of the created documents in the provided set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "425", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/cluster/ClusterUtils.java", "methodName": "com.vmware.admiral.compute.cluster.ClusterUtils.isSingleHostSupportedCluster", "methodParameterType": "ClusterDto#", "methodParameterName": "cluster#", "methodBody": "public static boolean isSingleHostSupportedCluster(ClusterDto cluster) {\n        return cluster != null && cluster.type == ClusterType.VCH;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether the specified cluster supports only a single host (e.g. is a VCH cluster). Note that this is different from supporting multiple hosts but having only a single one added to the cluster. This method will return <code>true</code> if and only if the cluster has capacity for exactly one host regardless of the current state of the cluster (empty or has a single host).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "426", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/cluster/ClusterUtils.java", "methodName": "com.vmware.admiral.compute.cluster.ClusterUtils.filterByType", "methodParameterType": "ClusterDto#String#", "methodParameterName": "cluster#typeFilter#", "methodBody": "public static boolean filterByType(ClusterDto cluster, String typeFilter) {\n        if (typeFilter == null) {\n            return true;\n        }\n\n        boolean isFilterExclusive;\n        if (isFilterExclusive = typeFilter.startsWith(\"!\")) {\n            typeFilter = typeFilter.substring(1);\n        }\n        ClusterType filter = ClusterType.valueOf(typeFilter);\n\n        return isFilterExclusive ^ cluster.type == filter;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if the cluster is of the specified type. The type filter designates the cluster type. It can be preceded by \"!\" which indicates negation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "427", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/content/EnvDeserializer.java", "methodName": "com.vmware.admiral.compute.content.EnvDeserializer.EnvDeserializer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EnvDeserializer() {\n        super(FORMAT, ARG_NAMES);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param format", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "428", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/content/CompositeDescriptionContentService.java", "methodName": "com.vmware.admiral.compute.content.CompositeDescriptionContentService.updateComponentLinks", "methodParameterType": "Map<String,NestedState>#", "methodParameterName": "componentNestedStates#", "methodBody": "private DeferredResult<Void> updateComponentLinks(\n            Map<String, NestedState> componentNestedStates) {\n        Map<String, String> componentLinks = componentNestedStates.entrySet().stream().collect(\n                Collectors.toMap(e -> e.getKey(), e -> e.getValue().object.documentSelfLink));\n        List<DeferredResult<Void>> updateOps = componentNestedStates.values().stream()\n                .map(ns -> ns.updateComponentLinks(this, componentLinks)).collect(Collectors.toList());\n        return DeferredResult.allOf(updateOps).thenApply(ignore -> (Void) null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#FieldAccess#LambdaExpression#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#NullLiteral#CastExpression#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(FieldAccess(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess)LambdaExpression)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral)CastExpression)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Updates links that reference other components from the composition. If a link field contains the name of a component from the composition, it is replaced with the actual component link through a PATCH request.", "call_func_name": ["java.util.Map.entrySet", "java.util.Set.stream", "java.util.function.Function.apply", "java.util.stream.Collectors.toMap", "java.util.stream.Stream.collect", "java.util.Map.values", "java.util.Collection.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toList", "com.vmware.xenon.common.DeferredResult.allOf", "com.vmware.xenon.common.DeferredResult.thenApply"], "call_func_parameter": [[""], [""], [""], ["java.util.function.Function", "java.util.function.Function"], ["java.util.stream.Collector"], [""], [""], ["com.vmware.admiral.compute.content.CompositeDescriptionContentService", "java.util.Map"], ["java.util.function.Function"], [""], ["java.util.List"], ["java.util.function.Function"]], "passed_comments": "/"}, {"index": "429", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/content/NestedState.java", "methodName": "com.vmware.admiral.compute.content.NestedState.getLinkFields", "methodParameterType": "Class<?>#", "methodParameterName": "type#", "methodBody": "public static Map<String, Class<? extends ServiceDocument>> getLinkFields(Class<?> type) {\n\n        return serviceDocuments.entrySet().stream()\n                .filter(entry -> entry.getKey().isAssignableFrom(type))\n                .map(entry -> entry.getValue()).reduce((m1, m2) -> {\n                    Map<String, Class<? extends ServiceDocument>> all = new HashMap<>();\n                    all.putAll(m1);\n                    all.putAll(m2);\n                    return all;\n                }).orElse(null);\n\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the fields that are links and their respective types", "call_func_name": ["java.util.Map.entrySet", "java.util.Set.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.function.BinaryOperator.apply", "java.util.stream.Stream.reduce", "java.util.Optional.orElse"], "call_func_parameter": [[""], [""], ["java.lang.Class"], ["java.util.function.Predicate"], [""], ["java.util.function.Function"], [""], ["java.util.function.BinaryOperator"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "430", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/content/NestedState.java", "methodName": "com.vmware.admiral.compute.content.NestedState.sendRequest", "methodParameterType": "Service#Service.Action#String#", "methodParameterName": "sender#action#projectLink#", "methodBody": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public DeferredResult<Operation> sendRequest(Service sender, Service.Action action, String\n            projectLink) {\n\n        Map<String, Class<? extends ServiceDocument>> fields = getLinkFields(object.getClass());\n\n        List<DeferredResult<Void>> allChildren = new ArrayList<>();\n\n        if (fields != null) {\n            for (String fieldName : fields.keySet()) {\n                try {\n                    Field field = object.getClass().getField(fieldName);\n                    Object fieldValue = field.get(object);\n\n                    if (fieldValue == null) {\n                        continue;\n                    }\n\n                    //the field is a simple field\n                    if (fieldValue instanceof String) {\n                        String documentLink = (String) fieldValue;\n\n                        NestedState child = children.get(documentLink);\n\n                        DeferredResult<Operation> childPersistDeferredResult = child\n                                .sendRequest(sender, action);\n\n                        allChildren.add(childPersistDeferredResult\n                                .thenAccept(operation -> {\n                                    try {\n                                        ServiceDocument document = operation\n                                                .getBody(child.object.getClass());\n                                        field.set(object, document.documentSelfLink);\n                                        NestedState current = children.remove(documentLink);\n                                        children.put(document.documentSelfLink, current);\n                                    } catch (IllegalAccessException e) {\n                                    }\n                                }));\n                    }\n\n                    // The field is a collection\n                    if (Collection.class.isAssignableFrom(field.getType())) {\n\n                        List<DeferredResult<Pair<Integer, String>>> documentLinks = new ArrayList<>();\n\n                        Iterator<String> iterator = ((Collection<String>) fieldValue).iterator();\n                        int idx = 0;\n                        while (iterator.hasNext()) {\n                            String link = iterator.next();\n\n                            NestedState child = children.get(link);\n\n                            DeferredResult<Operation> childPersistDeferredResult = child\n                                    .sendRequest(sender, action);\n\n                            Integer index = idx;\n                            documentLinks.add(childPersistDeferredResult.thenApply(operation -> {\n                                ServiceDocument childDocument = operation\n                                        .getBody(child.object.getClass());\n                                NestedState current = children.remove(link);\n                                children.put(childDocument.documentSelfLink, current);\n\n                                // return a pair of index, selfLink to preserve the order\n                                return Pair.of(index, childDocument.documentSelfLink);\n                            }));\n                            ++idx;\n                        };\n\n                        allChildren.add(DeferredResult.allOf(documentLinks).thenAccept(links -> {\n                            // add the entries sorted in the original order in case the collection is a list\n                            List<String> sortedLinks = links.stream()\n                                    .sorted(Comparator.comparing(p -> p.left))\n                                    .map(p -> p.right)\n                                    .collect(Collectors.toList());\n                            ((Collection) fieldValue).clear();\n                            ((Collection) fieldValue).addAll(sortedLinks);\n                        }));\n                    }\n\n                } catch (NoSuchFieldException e) {\n                    //do nothing. This may happen as there are aliases\n                } catch (IllegalAccessException e) {\n                    //this shouldn't happen. All fields are public\n                }\n            }\n        }\n        String link = getLink(action);\n\n        return DeferredResult.allOf(allChildren)\n                .thenCompose(voids -> {\n                    Operation op = Operation.createPost(sender, link);\n                    op.setAction(action);\n                    op.setBody(object);\n                    if (projectLink != null && !projectLink.isEmpty()) {\n                        op.addRequestHeader(OperationUtil.PROJECT_ADMIRAL_HEADER, projectLink);\n                    }\n                    return sender.sendWithDeferredResult(op).thenApply(o -> {\n                        ServiceDocument createdDocument = o.getBody(ServiceDocument.class);\n                        object.documentSelfLink = createdDocument.documentSelfLink;\n                        return o;\n                    });\n                });\n    }", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#ExpressionStatement#Block#WhileStatement#EmptyStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ExpressionStatement)Block)WhileStatement(EmptyStatement)EmptyStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Send a request recursively through all objects in the hierarchy", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "431", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/content/NestedState.java", "methodName": "com.vmware.admiral.compute.content.NestedState.updateComponentLinks", "methodParameterType": "Service#Map<String,String>#", "methodParameterName": "sender#componentLinks#", "methodBody": "public DeferredResult<Void> updateComponentLinks(Service sender,\n            Map<String, String> componentLinks) {\n        ServiceDocumentDescription sdd = ServiceDocumentDescription.Builder.create()\n                .buildDescription(this.object.getClass());\n        Object patchBody = ReflectionUtils.instantiate(this.object.getClass());\n        boolean changed = false;\n        for (PropertyDescription pd : sdd.propertyDescriptions.values()) {\n            // handle a single link field\n            if (pd.usageOptions != null && pd.usageOptions.contains(PropertyUsageOption.LINK)\n                    && TypeName.STRING.equals(pd.typeName)) {\n                String currentLinkValue = (String) ReflectionUtils.getPropertyValue(pd,\n                        this.object);\n                if (componentLinks.containsKey(currentLinkValue)) {\n                    ReflectionUtils.setPropertyValue(pd, patchBody,\n                            componentLinks.get(currentLinkValue));\n                    changed = true;\n                }\n            }\n\n            // handle a collection of links\n            if (pd.usageOptions != null && pd.usageOptions.contains(PropertyUsageOption.LINKS)) {\n                Object currentValue = ReflectionUtils.getPropertyValue(pd, this.object);\n                if (currentValue == null || !Collection.class.isAssignableFrom(currentValue.getClass())) {\n                    continue;\n                }\n                @SuppressWarnings(\"unchecked\")\n                Collection<String> currentLinks = (Collection<String>)currentValue;\n                List<String> newLinks = new ArrayList<>();\n                boolean linkReplaced = false;\n                for (String link : currentLinks) {\n                    if (componentLinks.containsKey(link)) {\n                        linkReplaced = true;\n                        newLinks.add(componentLinks.get(link));\n                    } else {\n                        newLinks.add(link);\n                    }\n                }\n\n                if (linkReplaced) {\n                    ReflectionUtils.setPropertyValue(pd, patchBody, newLinks);\n                    changed = true;\n                }\n            }\n        }\n\n        // create a DR for the root document\n        List<DeferredResult<Void>> drs = new ArrayList<>();\n        drs.add(changed ? sender.sendWithDeferredResult(\n                Operation.createPatch(sender, this.object.documentSelfLink).setBody(patchBody))\n                .thenApply(ignore -> null) : DeferredResult.completed(null));\n\n        // recursively collect DRs for the nested documents\n        if (this.children != null) {\n            this.children.values()\n                    .forEach(ns -> drs.add(ns.updateComponentLinks(sender, componentLinks)));\n        }\n\n        return DeferredResult.allOf(drs).thenApply(ignore -> null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#NullLiteral#LambdaExpression#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#ConditionalExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#NullLiteral#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(NullLiteral)NullLiteral)LambdaExpression)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ConditionalExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(NullLiteral)NullLiteral)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Updates link fields that reference components by name by replacing them with the actual component self link. This is also recursively done for nested documents.", "call_func_name": ["java.lang.Object.getClass", "com.vmware.xenon.common.ReflectionUtils.instantiate", "java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.EnumSet.contains", "java.util.Map.containsKey", "java.util.Map.get", "java.lang.Class.isAssignableFrom", "java.util.ArrayList.<init>", "java.util.List.add", "com.vmware.xenon.common.Operation.createPatch", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.Service.sendWithDeferredResult", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.thenApply", "com.vmware.xenon.common.DeferredResult.completed", "java.util.function.Consumer.accept", "java.util.Collection.forEach", "com.vmware.xenon.common.DeferredResult.allOf"], "call_func_parameter": [[""], ["java.lang.Class"], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Class"], [""], ["java.lang.Object"], ["com.vmware.xenon.common.Service", "java.lang.String"], ["java.lang.Object"], ["com.vmware.xenon.common.Operation"], [""], ["java.util.function.Function"], ["java.lang.Object"], ["java.util.List", "com.vmware.xenon.common.Service", "java.util.Map"], ["java.util.function.Consumer"], ["java.util.List"]], "passed_comments": "/"}, {"index": "432", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/content/CompositeTemplateUtil.java", "methodName": "com.vmware.admiral.compute.content.CompositeTemplateUtil.getYamlType", "methodParameterType": "String#", "methodParameterName": "yaml#", "methodBody": "public static YamlType getYamlType(String yaml) throws IOException {\n        assertNotEmpty(yaml, \"yaml\");\n        boolean isMultiYaml = YamlMapper.isMultiYaml(yaml);\n        if (isMultiYaml) {\n            List<String> yamls = YamlMapper.splitYaml(yaml);\n            // Make the verification only with a single yaml in case of multi.\n            yaml = yamls.get(0);\n        }\n\n        CommonDescriptionEntity template;\n        try {\n            template = YamlMapper.objectMapper().readValue(yaml, CommonDescriptionEntity.class);\n        } catch (JsonProcessingException e) {\n            throw new LocalizableValidationException(\n                    \"Error processing YAML content: \" + e.getOriginalMessage(),\n                    \"compute.template.yaml.content.error\", e.getOriginalMessage());\n        }\n\n        if (!isNullOrEmpty(template.apiVersion) && !isNullOrEmpty(template.kind)) {\n            return YamlType.KUBERNETES_TEMPLATE;\n        } else {\n            if (isMultiYaml) {\n                throw new LocalizableValidationException(\n                        \"Multiple YAML definitions are not supported for Docker Compose and YAML Blueprint.\",\n                        \"compute.template.yaml.content.multiple.definitions\");\n            } else {\n                if (DOCKER_COMPOSE_VERSION_2.equals(template.version)\n                        && (!isNullOrEmpty(template.services))) {\n                    return YamlType.DOCKER_COMPOSE;\n                } else if (!isNullOrEmpty(template.components)) {\n                    return YamlType.COMPOSITE_TEMPLATE;\n                } else {\n                    return YamlType.UNKNOWN;\n                }\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#StringLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#IfStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(Block(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(ParenthesizedExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression)ParenthesizedExpression)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement)IfStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link YamlType} of the provided YAML.<p> //", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotEmpty", "com.vmware.admiral.common.util.YamlMapper.isMultiYaml", "com.vmware.admiral.common.util.YamlMapper.splitYaml", "java.util.List.get", "com.vmware.admiral.common.util.YamlMapper.objectMapper", "com.fasterxml.jackson.databind.ObjectMapper.readValue", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "com.fasterxml.jackson.core.JsonProcessingException.getOriginalMessage", "java.lang.StringBuilder.toString", "com.vmware.xenon.common.LocalizableValidationException.<init>", "com.vmware.admiral.compute.content.CompositeTemplateUtil.isNullOrEmpty", "java.lang.String.equals", "com.vmware.admiral.compute.content.CompositeTemplateUtil.isNullOrEmpty"], "call_func_parameter": [["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["int"], [""], ["java.lang.String", "java.lang.Class"], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.Object[]"], ["java.lang.String"], ["java.lang.Object"], ["java.util.Map"]], "passed_comments": [{"com.vmware.admiral.common.util.YamlMapper.isMultiYaml": "Check if the string contains multiple yaml definitions concatenated."}]}, {"index": "433", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/EpzComputeEnumerationTaskService.java", "methodName": "com.vmware.admiral.compute.EpzComputeEnumerationTaskService.triggerForResourcePool", "methodParameterType": "Service#String#", "methodParameterName": "sender#resourcePoolLink#", "methodBody": "public static void triggerForResourcePool(Service sender, String resourcePoolLink) {\n        EpzComputeEnumerationTaskState task = new EpzComputeEnumerationTaskState();\n        task.resourcePoolLink = resourcePoolLink;\n        task.documentSelfLink = extractRpId(task);\n\n        Operation.createPost(sender.getHost(), EpzComputeEnumerationTaskService.FACTORY_LINK)\n                .addPragmaDirective(Operation.PRAGMA_DIRECTIVE_FORCE_INDEX_UPDATE)\n                .setBody(task)\n                .setCompletion((o, e) -> {\n                    if (o.getStatusCode() == Operation.STATUS_CODE_NOT_MODIFIED) {\n                        sender.getHost().log(Level.FINE,\n                                \"Enumeration task already running for \" + resourcePoolLink);\n                        return;\n                    }\n\n                    if (e != null) {\n                        sender.getHost().log(Level.WARNING,\n                                \"Failed to start enumeration task for %s: %s\", resourcePoolLink,\n                                e.getMessage());\n                        return;\n                    }\n\n                    sender.getHost().log(Level.INFO,\n                            \"Started enumeration task for \" + resourcePoolLink);\n                }).sendWith(sender);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Triggers the enumeration task for the given resource pool. Makes sure no multiple tasks are run in parallel for the same resource pool.", "call_func_name": ["com.vmware.xenon.common.Service.getHost", "com.vmware.xenon.common.Operation.createPost", "com.vmware.xenon.common.Operation.addPragmaDirective", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.Operation.sendWith"], "call_func_parameter": [[""], ["com.vmware.xenon.common.ServiceHost", "java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["com.vmware.xenon.common.ServiceRequestSender"]], "passed_comments": "/"}, {"index": "434", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/EpzComputeEnumerationTaskService.java", "methodName": "com.vmware.admiral.compute.EpzComputeEnumerationTaskService.triggerForAllResourcePools", "methodParameterType": "Service#", "methodParameterName": "sender#", "methodBody": "public static void triggerForAllResourcePools(Service sender) {\n        // TODO pmitrov: add support for tenant links\n        Query rpQuery = Query.Builder.create().addKindFieldClause(ResourcePoolState.class).build();\n        new QueryByPages<ResourcePoolState>(sender.getHost(), rpQuery, ResourcePoolState.class, null)\n                .queryLinks(rpLink ->\n                        EpzComputeEnumerationTaskService.triggerForResourcePool(sender, rpLink))\n                .exceptionally(e -> {\n                    sender.getHost().log(Level.WARNING,\n                            \"Failed to start enumeration task for all resource pools: %s\",\n                            e.getMessage());\n                    return null;\n                });\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#NullLiteral#ClassInstanceCreation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(NullLiteral)NullLiteral)ClassInstanceCreation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Triggers an enumeration task for each resource pool. Makes sure no multiple tasks are run in parallel for the same resource pool.", "call_func_name": ["com.vmware.xenon.common.Service.getHost", "java.util.function.Consumer.accept", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.exceptionally"], "call_func_parameter": [[""], ["com.vmware.xenon.common.Service"], ["com.vmware.xenon.common.Service"], ["java.util.function.Function"]], "passed_comments": "/"}, {"index": "435", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/RegistryHostConfigService.java", "methodName": "com.vmware.admiral.compute.RegistryHostConfigService.validateHostAddress", "methodParameterType": "RegistryState#SslTrustCertificateState#", "methodParameterName": "state#sslTrust#", "methodBody": "private void validateHostAddress(RegistryState state, SslTrustCertificateState sslTrust) {\n\n        String hostname = UriUtilsExtended.extractHost(state.address);\n\n        X509Certificate certificate = null;\n\n        try {\n            certificate = KeyUtil.decodeCertificate(sslTrust.certificate);\n        } catch (CertificateException e1) {\n            throw new LocalizableValidationException(\n                    String.format(\"Invalid certificate provided from host: %s\", hostname),\n                    \"compute.registry.host.address.invalid.certificate\", hostname);\n        }\n\n        try {\n            new DefaultHostnameVerifier().verify(hostname, certificate);\n        } catch (SSLException e) {\n            String errorMessage = String.format(\n                    \"Registry hostname (%s) does not match certificates CN (%s).\",\n                    hostname, sslTrust.commonName);\n            throw new LocalizableValidationException(errorMessage,\n                    \"compute.registry.host.name.mismatch\", hostname, sslTrust.commonName);\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Validates that certificate CN equals the hostname specified by user. Docker daemon will be later instructed to find and trust this certificate only if these two matches. See: https://docs.docker.com/docker-trusted-registry/userguide/", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "436", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ContainerHostUtil.java", "methodName": "com.vmware.admiral.compute.ContainerHostUtil.isSchedulerHost", "methodParameterType": "ComputeState#", "methodParameterName": "computeState#", "methodBody": "public static boolean isSchedulerHost(ComputeState computeState) {\n        return ContainerHostUtil.isVicHost(computeState)\n                || ContainerHostUtil.isKubernetesHost(computeState);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if this host is a scheduler host (e.g. VIC, Kubernetes)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "437", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ContainerHostUtil.java", "methodName": "com.vmware.admiral.compute.ContainerHostUtil.isTreatedLikeSchedulerHost", "methodParameterType": "ComputeState#", "methodParameterName": "computeState#", "methodBody": "public static boolean isTreatedLikeSchedulerHost(ComputeState computeState) {\n        return getDeclaredContainerHostType(computeState) != ContainerHostType.DOCKER;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if this host should be treated as scheduler host. Note that a host may be a scheduler (e.g. VIC, Kubernetes) but it may be declared as plain docker host and in this case the host should be treated as a plain docker host", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "438", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ContainerHostUtil.java", "methodName": "com.vmware.admiral.compute.ContainerHostUtil.isVicHost", "methodParameterType": "ComputeState#", "methodParameterName": "computeState#", "methodBody": "public static boolean isVicHost(ComputeState computeState) {\n        boolean vic = false;\n\n        String driver = getDriver(computeState);\n        driver = driver != null ? driver.toLowerCase().trim() : \"\";\n        vic = driver.startsWith(VMWARE_VIC_DRIVER1) || driver.startsWith(VMWARE_VIC_DRIVER2);\n\n        return vic;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if docker is running on VMware Integrated Container host.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "439", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ContainerHostUtil.java", "methodName": "com.vmware.admiral.compute.ContainerHostUtil.getHostServerVersion", "methodParameterType": "ComputeState#", "methodParameterName": "computeState#", "methodBody": "public static String getHostServerVersion(ComputeState computeState) {\n        if (computeState != null && computeState.customProperties != null) {\n            return computeState.customProperties.get(PROPERTY_NAME_SERVER_VERSION);\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the server version that is reported on <code>docker info</code> command.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "440", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ContainerHostUtil.java", "methodName": "com.vmware.admiral.compute.ContainerHostUtil.verifyVchVersionIsSupported", "methodParameterType": "ServiceHost#String#", "methodParameterName": "serviceHost#vchVersion#", "methodBody": "public static DeferredResult<Void> verifyVchVersionIsSupported(ServiceHost serviceHost,\n            String vchVersion) {\n        if (!ConfigurationUtil.isEmbedded()) {\n            return DeferredResult.completed(null);\n        }\n\n        if (vchVersion == null || vchVersion.trim().isEmpty()) {\n            String error = String.format(VCH_VERSION_NOT_SUPPORTED_MESSAGE_FORMAT, \"unknown\");\n            return DeferredResult.failed(new LocalizableValidationException(error,\n                    VCH_VERSION_NOT_SUPPORTED_MESSAGE_CODE, \"unknown\"));\n        }\n\n        DeferredResult<Void> deferredResult = new DeferredResult<>();\n\n        ConfigurationUtil.getConfigProperty(serviceHost,\n                ConfigurationUtil.VCH_MIN_VERSION_INCLUSIVE_PROPERTY,\n                (minVersionInclusive) -> {\n                    ConfigurationUtil.getConfigProperty(serviceHost,\n                            ConfigurationUtil.VCH_MAX_VERSION_EXCLUSIVE_PROPERTY,\n                            (maxVersionExclusive) -> {\n                                if (isSupportedVchVersion(vchVersion, minVersionInclusive,\n                                        maxVersionExclusive)) {\n                                    deferredResult.complete(null);\n                                    return;\n                                }\n\n                                String error = String.format(\n                                        VCH_VERSION_NOT_SUPPORTED_MESSAGE_FORMAT, vchVersion);\n                                deferredResult.fail(new LocalizableValidationException(error,\n                                        VCH_VERSION_NOT_SUPPORTED_MESSAGE_CODE, vchVersion));\n                            });\n                });\n\n        return deferredResult;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Fetches the minimum (inclusive) and maximum (exclusive) supported versions for VCH and checks whether the version provided is supported. If it is, the returned  {@link DeferredResult} willbe completed. Otherwise, it will be failed. Applies to embedded mode only. If Admiral is not run in embedded mode, every VCH version will be accepted.", "call_func_name": ["com.vmware.admiral.common.util.ConfigurationUtil.isEmbedded", "com.vmware.xenon.common.DeferredResult.completed", "java.lang.String.trim", "java.lang.String.isEmpty", "java.lang.String.format", "com.vmware.xenon.common.LocalizableValidationException.<init>", "com.vmware.xenon.common.DeferredResult.failed", "com.vmware.xenon.common.DeferredResult.<init>", "java.util.function.Consumer.accept", "com.vmware.admiral.common.util.ConfigurationUtil.getConfigProperty"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "java.lang.String", "java.lang.Object[]"], ["java.lang.Throwable"], [""], ["com.vmware.xenon.common.ServiceHost", "java.lang.String", "com.vmware.xenon.common.DeferredResult"], ["com.vmware.xenon.common.ServiceHost", "java.lang.String", "java.util.function.Consumer"]], "passed_comments": [{"com.vmware.admiral.common.util.ConfigurationUtil.isEmbedded": "Returns whether Admiral is running on embedded mode or not based on the \"embedded\" configuration property."}, {"com.vmware.admiral.common.util.ConfigurationUtil.getConfigProperty": "Retrieves the property value from the configuration properties service."}]}, {"index": "441", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ContainerHostUtil.java", "methodName": "com.vmware.admiral.compute.ContainerHostUtil.isKubernetesHost", "methodParameterType": "ComputeState#", "methodParameterName": "computeState#", "methodBody": "public static boolean isKubernetesHost(ComputeState computeState) {\n        if (computeState == null || computeState.customProperties == null) {\n            return false;\n        }\n        String hostType = computeState.customProperties.get(\n                ContainerHostService.CONTAINER_HOST_TYPE_PROP_NAME);\n        return (hostType != null && hostType.equals(ContainerHostType.KUBERNETES.name()));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if host is running Kubernetes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "442", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ContainerHostUtil.java", "methodName": "com.vmware.admiral.compute.ContainerHostUtil.getDriver", "methodParameterType": "ComputeState#", "methodParameterName": "computeState#", "methodBody": "public static String getDriver(ComputeState computeState) {\n        if (computeState != null && computeState.customProperties != null) {\n            return computeState.customProperties.get(PROPERTY_NAME_DRIVER);\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets driver property value from host custom properties.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "443", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ContainerHostUtil.java", "methodName": "com.vmware.admiral.compute.ContainerHostUtil.getTrustAlias", "methodParameterType": "ComputeState#", "methodParameterName": "computeState#", "methodBody": "public static String getTrustAlias(ComputeState computeState) {\n        if (computeState != null && computeState.customProperties != null) {\n            return computeState.customProperties\n                    .get(ContainerHostService.SSL_TRUST_ALIAS_PROP_NAME);\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets trust alias property value from host custom properties.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "444", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ContainerHostUtil.java", "methodName": "com.vmware.admiral.compute.ContainerHostUtil.isTrustAliasMissing", "methodParameterType": "ComputeState#", "methodParameterName": "computeState#", "methodBody": "public static boolean isTrustAliasMissing(ComputeState computeState) {\n        URI hostUri = ContainerDescription.getDockerHostUri(computeState);\n        return UriUtils.HTTPS_SCHEME.equalsIgnoreCase(hostUri.getScheme())\n                && (getTrustAlias(computeState) == null);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the trust alias should be set and it is not (e.g. because the upgrade of an instance with hosts already configured)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "445", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ContainerHostUtil.java", "methodName": "com.vmware.admiral.compute.ContainerHostUtil.cleanupAutogeneratedResources", "methodParameterType": "Service#Collection<String>#", "methodParameterName": "requestorService#resourceLinks#", "methodBody": "public static void cleanupAutogeneratedResources(Service requestorService,\n            Collection<String> resourceLinks) {\n        AssertUtil.assertNotNull(requestorService, \"requestorService\");\n        AssertUtil.assertNotNull(resourceLinks, \"resourceLinks\");\n\n        ServiceHost serviceHost = requestorService.getHost();\n        for (String resourceLink : resourceLinks) {\n            serviceHost.log(Level.FINE, \"Cleanup for autogenerated resource %s\", resourceLink);\n            Operation.createDelete(serviceHost, resourceLink)\n                    .setReferer(requestorService.getUri())\n                    .setCompletion((o, e) -> {\n                        if (e != null) {\n                            serviceHost.log(Level.WARNING,\n                                    \"Failed cleanup for auto-generated resource %s: %s\",\n                                    resourceLink, Utils.toString(e));\n                        } else {\n                            serviceHost.log(Level.FINE,\n                                    \"Successful cleanup for auto-generated resource %s\",\n                                    resourceLink);\n                        }\n                    }).sendWith(serviceHost);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Deletes a auto-generated resources (placement zone, placement) that were created as part of a failed request to add a host.", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotNull", "com.vmware.xenon.common.Service.getHost", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.vmware.xenon.common.ServiceHost.log", "com.vmware.xenon.common.Operation.createDelete", "com.vmware.xenon.common.Service.getUri", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.xenon.common.Operation.sendWith"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], [""], [""], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Object[]"], ["com.vmware.xenon.common.ServiceHost", "java.lang.String"], [""], ["java.net.URI"], ["com.vmware.xenon.common.ServiceRequestSender"]], "passed_comments": "/"}, {"index": "446", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ContainerHostUtil.java", "methodName": "com.vmware.admiral.compute.ContainerHostUtil.getHostPublicAddress", "methodParameterType": "ServiceHost#ComputeState#Consumer<String>#", "methodParameterName": "serviceHost#computeHost#addressConsumer#", "methodBody": "public static void getHostPublicAddress(ServiceHost serviceHost, ComputeState computeHost,\n            Consumer<String> addressConsumer) {\n        AssertUtil.assertNotNull(serviceHost, \"serviceHost\");\n        AssertUtil.assertNotNull(computeHost, \"computeHost\");\n\n        ConfigurationUtil.getConfigProperty(serviceHost, FEATURE_TOGGLE_HOST_PUBLIC_ADDRESS,\n                (publicAddressEnabled) -> {\n                    // if the feature toggle is disabled, use the host address\n                    if (publicAddressEnabled == null || !Boolean.valueOf(publicAddressEnabled)) {\n                        addressConsumer.accept(computeHost.address);\n                        return;\n                    }\n\n                    // try to obtain and use the public address of the host. If it is not available,\n                    // fall back to the host address\n                    if (computeHost.customProperties == null) {\n                        addressConsumer.accept(computeHost.address);\n                        return;\n                    }\n\n                    String publicAddress = computeHost.customProperties\n                            .get(ContainerHostService.HOST_PUBLIC_ADDRESS_PROP_NAME);\n                    if (publicAddress == null || publicAddress.isEmpty()) {\n                        addressConsumer.accept(computeHost.address);\n                    } else {\n                        addressConsumer.accept(publicAddress);\n                    }\n                });\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Returns the public address of the host if the public address feature is enabled. Otherwise, returns the API (default) address of the host.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "447", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/pks/PKSEndpointService.java", "methodName": "com.vmware.admiral.compute.pks.PKSEndpointService.mergeTenantLinks", "methodParameterType": "List<String>#List<String>#", "methodParameterName": "oldTenantLinks#patchTenantLinks#", "methodBody": "List<String> mergeTenantLinks(List<String> oldTenantLinks, List<String> patchTenantLinks) {\n        // no pathed tenant links = keep original tenant links\n        if (patchTenantLinks == null) {\n            return oldTenantLinks;\n        }\n\n        // we are allowed to patch only the project links (i.e. to make group assignments).\n        // Clear all other links from the patch\n        List<String> projectLinks = patchTenantLinks.stream()\n                .filter(link -> {\n                    return TenantLinksUtil.isProjectLink(link)\n                            || TenantLinksUtil.isGroupLink(link);\n                }).collect(Collectors.toList());\n\n        if (oldTenantLinks == null) {\n            // no old tenant links = use patch links\n            return projectLinks;\n        }\n\n        // merge old non-project links with patch project links and return the result\n        List<String> otherLinks = oldTenantLinks.stream()\n                .filter(link -> {\n                    return TenantLinksUtil.isNotProjectLink(link)\n                            && TenantLinksUtil.isNotGroupLink(link);\n                }).collect(Collectors.toList());\n\n        otherLinks.addAll(projectLinks);\n        return otherLinks;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Takes all non-project links from the old tenant links and all project links from the patched tenant links, puts them together and returns the result.", "call_func_name": ["java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.List.addAll"], "call_func_parameter": [[""], [""], ["java.util.function.Predicate"], [""], ["java.util.stream.Collector"], ["java.util.Collection"]], "passed_comments": "/"}, {"index": "448", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/pks/PKSEndpointService.java", "methodName": "com.vmware.admiral.compute.pks.PKSEndpointService.deleteClustersForEndpoint", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private DeferredResult<Void> deleteClustersForEndpoint() {\n        String endpointLink = getSelfLink();\n        logInfo(\"deleting clusters for PKS endpoint %s\", endpointLink);\n        String query = String.format(\"%s=%s.%s eq '%s'&%s=%d\", URI_PARAM_ODATA_FILTER,\n                ClusterService.ClusterDto.FIELD_NAME_CUSTOM_PROPERTIES, PKS_ENDPOINT_PROP_NAME,\n                endpointLink, URI_PARAM_ODATA_LIMIT, DEFAULT_MAX_RESULT_LIMIT);\n        URI uri = UriUtils.buildUri(this.getHost(), ClusterService.SELF_LINK, query);\n\n        Operation getClusters = Operation.createGet(uri).setReferer(getSelfLink());\n        return getHost()\n                // get all PKS clusters for this Endpoint\n                .sendWithDeferredResult(getClusters, ServiceDocumentQueryResult.class)\n                .exceptionally(ex -> {\n                    logSevere(\"Error getting PKS clusters for endpoint %s, reason: %s\",\n                            getSelfLink(), Utils.toString(ex));\n                    throw ex instanceof CompletionException\n                            ? (CompletionException) ex\n                            : new CompletionException(ex);\n                })\n                // then delete all found clusters. Wait for the deletion operations to complete\n                // or fail. Ignore failures\n                .thenCompose(foundClusters -> {\n                    if (foundClusters == null\n                            || foundClusters.documentLinks == null\n                            || foundClusters.documentLinks.isEmpty()) {\n                        return DeferredResult.completed(null);\n                    }\n\n                    // Create and send a delete operation for each found cluster\n                    List<DeferredResult<Operation>> deleteOps = foundClusters.documentLinks.stream()\n                            .map(clusterLink -> {\n                                logInfo(\"Removing PKS cluster %s for %s\", clusterLink, endpointLink);\n                                Operation deleteCluser = Operation.createDelete(this, clusterLink)\n                                        .setReferer(getSelfLink());\n                                return getHost().sendWithDeferredResult(deleteCluser)\n                                        // ignore failures\n                                        .exceptionally(ex -> {\n                                            logWarning(\n                                                    \"Failed to cleanup cluster [%s] while deleting PKS endpoint [%s]: %s\",\n                                                    clusterLink, getSelfLink(), Utils.toString(ex));\n                                            // Stop propagation of the error so the endpoint can be\n                                            // successfully deleted\n                                            return null;\n                                        });\n                            }).collect(Collectors.toList());\n\n                    return DeferredResult.allOf(deleteOps);\n                }).thenAccept(ignore -> {\n                    // convert to DeferredResult<Void>\n                });\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ConditionalExpression#ThrowStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ThrowStatement(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ConditionalExpression)ThrowStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deletes from xenon all clusters for that endpoint. Uses OData query to find the clusters, because that information (the endpoint) is not directly exposed in the cluster DTO.", "call_func_name": ["com.vmware.admiral.compute.pks.PKSEndpointService.getSelfLink", "com.vmware.admiral.compute.pks.PKSEndpointService.logInfo", "java.lang.Integer.valueOf", "java.lang.String.format", "com.vmware.admiral.compute.pks.PKSEndpointService.getHost", "com.vmware.xenon.common.UriUtils.buildUri", "com.vmware.xenon.common.Operation.createGet", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.xenon.common.ServiceHost.sendWithDeferredResult", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.exceptionally", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.thenCompose", "java.util.function.Consumer.accept", "com.vmware.xenon.common.DeferredResult.thenAccept"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object[]"], ["int"], ["java.lang.String", "java.lang.Object[]"], [""], ["com.vmware.xenon.common.ServiceHost", "java.lang.String", "java.lang.String"], ["java.net.URI"], ["java.lang.String"], ["com.vmware.xenon.common.Operation", "java.lang.Class"], ["com.vmware.admiral.compute.pks.PKSEndpointService"], ["java.util.function.Function"], ["com.vmware.admiral.compute.pks.PKSEndpointService", "java.lang.String"], ["java.util.function.Function"], [""], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "449", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/PlacementCapacityUpdateTaskService.java", "methodName": "com.vmware.admiral.compute.PlacementCapacityUpdateTaskService.triggerForResourcePool", "methodParameterType": "Service#String#", "methodParameterName": "sender#resourcePoolLink#", "methodBody": "public static void triggerForResourcePool(Service sender, String resourcePoolLink) {\n        PlacementCapacityUpdateTaskState task = new PlacementCapacityUpdateTaskState();\n        task.resourcePoolLink = resourcePoolLink;\n        task.documentSelfLink = extractRpId(task);\n\n        Operation.createPost(sender.getHost(), PlacementCapacityUpdateTaskService.FACTORY_LINK)\n                .addPragmaDirective(Operation.PRAGMA_DIRECTIVE_FORCE_INDEX_UPDATE)\n                .setBody(task)\n                .setCompletion((o, e) -> {\n                    if (o.getStatusCode() == Operation.STATUS_CODE_NOT_MODIFIED) {\n                        sender.getHost().log(Level.FINE,\n                                \"Capacity update task already running for \" + resourcePoolLink);\n                        return;\n                    }\n\n                    if (e != null) {\n                        sender.getHost().log(Level.WARNING,\n                                \"Failed to start capacity update task for %s: %s\", resourcePoolLink,\n                                e.getMessage());\n                        return;\n                    }\n\n                    sender.getHost().log(Level.INFO,\n                            \"Started capacity update task for \" + resourcePoolLink);\n                }).sendWith(sender);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Triggers the capacity update task for the given resource pool. Makes sure no multiple tasks are run in parallel for the same resource pool.", "call_func_name": ["com.vmware.xenon.common.Service.getHost", "com.vmware.xenon.common.Operation.createPost", "com.vmware.xenon.common.Operation.addPragmaDirective", "com.vmware.xenon.common.Operation.setBody", "com.vmware.xenon.common.Operation.sendWith"], "call_func_parameter": [[""], ["com.vmware.xenon.common.ServiceHost", "java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["com.vmware.xenon.common.ServiceRequestSender"]], "passed_comments": "/"}, {"index": "450", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/PlacementCapacityUpdateTaskService.java", "methodName": "com.vmware.admiral.compute.PlacementCapacityUpdateTaskService.triggerForAllResourcePools", "methodParameterType": "Service#", "methodParameterName": "sender#", "methodBody": "public static void triggerForAllResourcePools(Service sender) {\n        // TODO pmitrov: add support for tenant links\n        Query rpQuery = Query.Builder.create().addKindFieldClause(ResourcePoolState.class).build();\n        new QueryByPages<ResourcePoolState>(sender.getHost(), rpQuery, ResourcePoolState.class, null)\n                .queryLinks(rpLink ->\n                        PlacementCapacityUpdateTaskService.triggerForResourcePool(sender, rpLink))\n                .exceptionally(e -> {\n                    sender.getHost().log(Level.WARNING,\n                            \"Failed to start capacity update task for all resource pools: %s\",\n                            e.getMessage());\n                    return null;\n                });\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#NullLiteral#ClassInstanceCreation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(NullLiteral)NullLiteral)ClassInstanceCreation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Triggers a capacity update task for each resource pool. Makes sure no multiple tasks are run in parallel for the same resource pool.", "call_func_name": ["com.vmware.xenon.common.Service.getHost", "java.util.function.Consumer.accept", "java.util.function.Function.apply", "com.vmware.xenon.common.DeferredResult.exceptionally"], "call_func_parameter": [[""], ["com.vmware.xenon.common.Service"], ["com.vmware.xenon.common.Service"], ["java.util.function.Function"]], "passed_comments": "/"}, {"index": "451", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/PlacementCapacityUpdateTaskService.java", "methodName": "com.vmware.admiral.compute.PlacementCapacityUpdateTaskService.PlacementCapacityUpdateTaskService", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PlacementCapacityUpdateTaskService() {\n        super(PlacementCapacityUpdateTaskState.class,\n                PlacementCapacityUpdateTaskState.SubStage.class, DISPLAY_NAME);\n        super.toggleOption(ServiceOption.REPLICATION, true);\n        super.toggleOption(ServiceOption.OWNER_SELECTION, true);\n        super.toggleOption(ServiceOption.IDEMPOTENT_POST, true);\n\n        // these are one-off tasks that are not needed upon completion\n        this.setSelfDelete(true);\n\n        this.setLogLevel(DEFAULT_LOG_LEVEL);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#QualifiedName#SimpleType#TypeLiteral#SimpleName#SuperConstructorInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#SuperMethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#SuperMethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#SuperMethodInvocation#ExpressionStatement#ThisExpression#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeLiteral(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "452", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/PlacementCapacityUpdateTaskService.java", "methodName": "com.vmware.admiral.compute.PlacementCapacityUpdateTaskService.getTenantAndGroupIdentifier", "methodParameterType": "GroupResourcePlacementState#", "methodParameterName": "placement#", "methodBody": "private static String getTenantAndGroupIdentifier(GroupResourcePlacementState placement) {\n        List<String> tenantAndGroupLinks = QueryUtil.getTenantAndGroupLinks(placement.tenantLinks);\n        return tenantAndGroupLinks != null ? String.join(\"/\", tenantAndGroupLinks) : \"\";\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#StringLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves a tenant+group string identifier for the given placement.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "453", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/BindingEvaluator.java", "methodName": "com.vmware.admiral.compute.BindingEvaluator.evaluateBindings", "methodParameterType": "CompositeTemplate#", "methodParameterName": "compositeTemplate#", "methodBody": "public static void evaluateBindings(CompositeTemplate compositeTemplate) {\n\n        if (compositeTemplate.bindings == null || compositeTemplate.bindings.isEmpty()) {\n            return;\n        }\n\n        Map<String, ComponentTemplate<?>> componentNameToTemplate = getComponentNameToDescription(\n                compositeTemplate);\n\n        Map<String, ComponentBinding> bindingByComponentName = getBindingByComponentName(\n                compositeTemplate.bindings);\n\n        for (Binding.ComponentBinding componentBinding : bindingByComponentName.values()) {\n            @SuppressWarnings(\"rawtypes\")\n            ComponentTemplate componentTemplate = componentNameToTemplate\n                    .get(componentBinding.componentName);\n\n            for (Binding binding : componentBinding.bindings) {\n                if (binding.isProvisioningTimeBinding()) {\n                    continue;\n                }\n\n                try {\n                    evaluateBinding(binding, componentBinding.componentName, componentTemplate,\n                            componentNameToTemplate,\n                            bindingByComponentName,\n                            new HashSet<>());\n                } catch (ReflectiveOperationException | IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ContinueStatement)ContinueStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Take a composite description evaluate the bindings and set the results in the Descriptions. Basically go through each binding and try to get the source value and set the target value. If the source value happens to be bound to another value recurse.", "call_func_name": ["java.util.List.isEmpty", "com.vmware.admiral.compute.BindingEvaluator.getComponentNameToDescription", "com.vmware.admiral.compute.BindingEvaluator.getBindingByComponentName", "java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Map.get", "java.util.List.iterator", "com.vmware.admiral.compute.content.Binding.isProvisioningTimeBinding", "java.util.HashSet.<init>", "com.vmware.admiral.compute.BindingEvaluator.evaluateBinding", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["com.vmware.admiral.compute.content.CompositeTemplate"], ["java.util.List"], [""], [""], [""], [""], ["java.lang.Object"], [""], [""], [""], ["com.vmware.admiral.compute.content.Binding", "java.lang.String", "com.vmware.admiral.compute.content.ComponentTemplate", "java.util.Map", "java.util.Map", "java.util.Set"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "454", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/BindingEvaluator.java", "methodName": "com.vmware.admiral.compute.BindingEvaluator.evaluateProvisioningTimeBindings", "methodParameterType": "NestedState#List<Binding>#Map<String,NestedState>#", "methodParameterName": "state#bindings#provisionedResources#", "methodBody": "public static NestedState evaluateProvisioningTimeBindings(\n            NestedState state,\n            List<Binding> bindings,\n            Map<String, NestedState> provisionedResources) {\n        NestedState result = state;\n        Map<String, Object> evaluatedBindingMap = new HashMap<>();\n        for (Binding binding : bindings) {\n            if (!binding.isProvisioningTimeBinding()) {\n                continue;\n            }\n            try {\n                evaluateProvisioningTimeBinding(binding, provisionedResources, evaluatedBindingMap);\n            } catch (ReflectiveOperationException | IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n        try {\n            final Map<String, Object> resultBindingMap = new HashMap<>();\n            sanitizeState(state, (normalizedState) -> {\n                try {\n                    resultBindingMap.putAll(TemplateSerializationUtils\n                            .serializeNestedState(normalizedState, objectMapper,\n                                    objectAsStringWriter));\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n\n            });\n\n            applyEvaluatedState(resultBindingMap, evaluatedBindingMap, bindings);\n            if (!evaluatedBindingMap.isEmpty()) {\n                result = TemplateSerializationUtils.deserializeServiceDocument(resultBindingMap,\n                        state.object.getClass());\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n        return result;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Applies the binding on a Component, after a dependent component is provisioned.", "call_func_name": ["java.util.HashMap.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.vmware.admiral.compute.content.Binding.isProvisioningTimeBinding", "com.vmware.admiral.compute.BindingEvaluator.evaluateProvisioningTimeBinding", "java.lang.RuntimeException.<init>", "java.util.function.Consumer.accept", "com.vmware.admiral.compute.BindingEvaluator.sanitizeState", "com.vmware.admiral.compute.BindingEvaluator.applyEvaluatedState", "java.util.Map.isEmpty", "java.lang.Object.getClass", "com.vmware.admiral.compute.TemplateSerializationUtils.deserializeServiceDocument"], "call_func_parameter": [[""], [""], [""], [""], [""], ["com.vmware.admiral.compute.content.Binding", "java.util.Map", "java.util.Map"], ["java.lang.Throwable"], ["java.util.Map"], ["com.vmware.admiral.compute.content.NestedState", "java.util.function.Consumer"], ["java.util.Map", "java.util.Map", "java.util.List"], [""], [""], ["java.util.Map", "java.lang.Class"]], "passed_comments": "/"}, {"index": "455", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/Composable.java", "methodName": "com.vmware.admiral.compute.Composable.retrieveCompositeComponentLink", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String retrieveCompositeComponentLink();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the link of the  {@link CompositeComponent}, which this resource is part of.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "456", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/Composable.java", "methodName": "com.vmware.admiral.compute.Composable.retrieveCompositeComponentLink", "methodParameterType": "ResourceState#", "methodParameterName": "resource#", "methodBody": "static String retrieveCompositeComponentLink(ResourceState resource) {\n        if (resource.customProperties != null) {\n            return resource.customProperties\n                    .get(ComputeConstants.FIELD_NAME_COMPOSITE_COMPONENT_LINK_KEY);\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A static helper method to extract  {@link CompositeComponent} link from{@link ResourceState#customProperties}, store under {@link ComputeConstants#FIELD_NAME_COMPOSITE_COMPONENT_LINK_KEY}. Returns  {@code null} if the key is missing.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "457", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ContainerHostService.java", "methodName": "com.vmware.admiral.compute.ContainerHostService.fetchSslTrustAliasProperty", "methodParameterType": "ContainerHostSpec#Runnable#", "methodParameterName": "hostSpec#callback#", "methodBody": "private void fetchSslTrustAliasProperty(ContainerHostSpec hostSpec, Runnable callback) {\n        if (DeploymentProfileConfig.getInstance().isTest()) {\n            logInfo(\"No ssl trust validation is performed in test mode...\");\n            callback.run();\n            return;\n        }\n\n        if (!hostSpec.isSecureScheme()) {\n            logInfo(\"Using non secure channel, skipping SSL validation for %s\", hostSpec.uri);\n            callback.run();\n            return;\n        }\n\n        SslCertificateResolver.execute(hostSpec.uri, (resolver, ex) -> {\n            if (ex != null) {\n                // if we cannot connect host to get its certificate move the state to unknown,\n                // later data collection will set the proper state when host is available\n                hostSpec.hostState.powerState = ComputeService.PowerState.UNKNOWN;\n                logWarning(\"Cannot connect to %s to get remote certificate for sslTrustAlias\",\n                        hostSpec.uri);\n                callback.run();\n                return;\n            }\n\n            X509Certificate[] certificateChain = resolver.getCertificateChain();\n            String s = CertificateUtil.generatePureFingerPrint(certificateChain);\n            if (hostSpec.hostState.customProperties == null) {\n                hostSpec.hostState.customProperties = new HashMap<>();\n            }\n            hostSpec.hostState.customProperties.put(SSL_TRUST_ALIAS_PROP_NAME, s);\n            callback.run();\n        });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Fetches server certificate and stores its fingerprint as custom property. It is then used as a hash key to get the client certificate when handshaking. If cannot establish connection sets host power state to unknown. It will be set to the correct one once the data collection passes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "458", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ElasticPlacementZoneService.java", "methodName": "com.vmware.admiral.compute.ElasticPlacementZoneService.setResourcePoolElasticity", "methodParameterType": "ElasticPlacementZoneState#Consumer<Throwable>#", "methodParameterName": "epz#callback#", "methodBody": "private void setResourcePoolElasticity(ElasticPlacementZoneState epz,\n            Consumer<Throwable> callback) {\n        Operation getRpOp = Operation.createGet(getHost(), epz.resourcePoolLink);\n        sendWithDeferredResult(getRpOp, ResourcePoolState.class)\n                .thenCompose(currentRpState -> {\n                    ResourcePoolState patchRpState = new ResourcePoolState();\n                    patchRpState.properties = EnumSet.of(ResourcePoolProperty.ELASTIC);\n                    patchRpState.query = generateRpQuery(epz, currentRpState);\n                    Operation patchRpOp = Operation\n                            .createPatch(getHost(), epz.resourcePoolLink)\n                            .setBody(patchRpState);\n                    return sendWithDeferredResult(patchRpOp);\n                })\n                .whenComplete((op, ex) -> callback.accept(ex));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configures the elasticity of the linked resource pool.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "459", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ElasticPlacementZoneService.java", "methodName": "com.vmware.admiral.compute.ElasticPlacementZoneService.removeResourcePoolElasticity", "methodParameterType": "ElasticPlacementZoneState#Consumer<Throwable>#", "methodParameterName": "epz#callback#", "methodBody": "private void removeResourcePoolElasticity(ElasticPlacementZoneState epz,\n            Consumer<Throwable> callback) {\n        // compose a collection update to remove the ELASTIC property\n        List<Object> propertiesToRemove = new ArrayList<>();\n        propertiesToRemove.add(ResourcePoolProperty.ELASTIC);\n        Map<String, Collection<Object>> itemsToRemove = new HashMap<>();\n        itemsToRemove.put(ResourcePoolState.FIELD_NAME_PROPERTIES, propertiesToRemove);\n\n        sendRequest(Operation\n                .createPatch(getHost(), epz.resourcePoolLink)\n                .setBody(ServiceStateCollectionUpdateRequest.create(null, itemsToRemove))\n                .setCompletion((op, ex) -> {\n                    if (op.getStatusCode() == Operation.STATUS_CODE_NOT_FOUND) {\n                        // the resource pool is already deleted, we're good\n                        callback.accept(null);\n                    } else {\n                        callback.accept(ex);\n                    }\n                }));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes the elasticity of the linked resource pool.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "460", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ElasticPlacementZoneService.java", "methodName": "com.vmware.admiral.compute.ElasticPlacementZoneService.setOrRemoveResourcePoolElasticity", "methodParameterType": "ElasticPlacementZoneState#Consumer<Throwable>#", "methodParameterName": "epz#callback#", "methodBody": "private void setOrRemoveResourcePoolElasticity(ElasticPlacementZoneState epz,\n            Consumer<Throwable> callback) {\n        if (epz.tagLinksToMatch != null && !epz.tagLinksToMatch.isEmpty()) {\n            setResourcePoolElasticity(epz, callback);\n        } else {\n            removeResourcePoolElasticity(epz, callback);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sets or removes the elasticity of the linked resource pool based on whether there are tags in the given EPZ state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "461", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/ElasticPlacementZoneService.java", "methodName": "com.vmware.admiral.compute.ElasticPlacementZoneService.generateRpQuery", "methodParameterType": "ElasticPlacementZoneState#ResourcePoolState#", "methodParameterName": "epz#rp#", "methodBody": "private static Query generateRpQuery(ElasticPlacementZoneState epz, ResourcePoolState rp) {\n        Query.Builder tagQueryBuilder = Query.Builder.create();\n        for (String tagLink : epz.tagLinksToMatch) {\n            // all tagLinksToMatch must be set on the compute\n            tagQueryBuilder.addCollectionItemClause(ResourceState.FIELD_NAME_TAG_LINKS, tagLink);\n        }\n\n        Query kindClause = Query.Builder.create().addKindFieldClause(ComputeState.class).build();\n        Query assignmentClause = Query.Builder.create()\n                .addClause(tagQueryBuilder.build().setOccurance(Occurance.SHOULD_OCCUR))\n                .addFieldClause(ComputeState.FIELD_NAME_RESOURCE_POOL_LINK, epz.resourcePoolLink,\n                        Occurance.SHOULD_OCCUR)\n                .build();\n        Query tenantClause = QueryUtil.addTenantClause(rp.tenantLinks);\n\n        Query epzQuery = Query.Builder.create()\n                .addClauses(kindClause, assignmentClause, tenantClause)\n                .build();\n        return epzQuery;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates a ComputeState query based on the tag links defined in the elastic placement zone and the configuration of the underlying resource pool. The query includes computes matched by tags and computes explicitly assigned to the RP: is of type ComputeState AND (compute RP ? (match endpoint AND compute type in VM_HOST, ZONE) : (compute type is VM_GUEST)) AND (match-tags OR explicitly-assigned) AND tenant links matches RP tenant links", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "462", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/kubernetes/maintenance/KubernetesMaintenance.java", "methodName": "com.vmware.admiral.compute.kubernetes.maintenance.KubernetesMaintenance.inspectEntityIfNeeded", "methodParameterType": "BaseKubernetesState#Operation#", "methodParameterName": "kubernetesState#post#", "methodBody": "private boolean inspectEntityIfNeeded(BaseKubernetesState kubernetesState, Operation post) {\n        long nowMicrosUtc = Utils.getSystemNowMicrosUtc();\n        long updatePeriod = isUpdatedRecently(kubernetesState, nowMicrosUtc)\n                ? MAINTENANCE_PERIOD_MICROS : MAINTENANCE_SLOW_DOWN_PERIOD_MICROS;\n\n        // check whether the update period has passed\n        if (lastInspectMaintenanceInMicros + updatePeriod < nowMicrosUtc) {\n            // schedule next period and request inspect\n            lastInspectMaintenanceInMicros = nowMicrosUtc;\n            requestEntityInspection(post, kubernetesState);\n            return true;\n        } else {\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Checks whether it is time to inspect this entity and sends an inspect request if needed", "call_func_name": ["com.vmware.xenon.common.Utils.getSystemNowMicrosUtc", "com.vmware.admiral.compute.kubernetes.maintenance.KubernetesMaintenance.isUpdatedRecently", "com.vmware.admiral.compute.kubernetes.maintenance.KubernetesMaintenance.requestEntityInspection"], "call_func_parameter": [[""], ["com.vmware.admiral.compute.kubernetes.service.BaseKubernetesState", "long"], ["com.vmware.xenon.common.Operation", "com.vmware.admiral.compute.kubernetes.service.BaseKubernetesState"]], "passed_comments": [{"com.vmware.admiral.compute.kubernetes.maintenance.KubernetesMaintenance.isUpdatedRecently": "@return whether the specified {@link BaseKubernetesState} has been updated in the previousMAINTENANCE_SLOW_DOWN_AGE_MICROS microseconds."}]}, {"index": "463", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/kubernetes/maintenance/KubernetesMaintenance.java", "methodName": "com.vmware.admiral.compute.kubernetes.maintenance.KubernetesMaintenance.isUpdatedRecently", "methodParameterType": "BaseKubernetesState#long#", "methodParameterName": "containerState#nowMicrosUtc#", "methodBody": "private boolean isUpdatedRecently(BaseKubernetesState containerState, long nowMicrosUtc) {\n        return containerState.documentUpdateTimeMicros\n                + MAINTENANCE_SLOW_DOWN_AGE_MICROS > nowMicrosUtc;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return whether the specified {@link BaseKubernetesState} has been updated in the previousMAINTENANCE_SLOW_DOWN_AGE_MICROS microseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "464", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/HostSpec.java", "methodName": "com.vmware.admiral.compute.HostSpec.isSecureScheme", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract boolean isSecureScheme();", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return true if communication is over a secure channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "465", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/compute/HostSpec.java", "methodName": "com.vmware.admiral.compute.HostSpec.getHostTenantLinks", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract List<String> getHostTenantLinks();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return tenant links for the host", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "466", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/image/service/ContainerImageService.java", "methodName": "com.vmware.admiral.image.service.ContainerImageService.handleSearchRequest", "methodParameterType": "Operation#", "methodParameterName": "op#", "methodBody": "private void handleSearchRequest(Operation op) {\n        URI registryAdapterUri = HostInitRegistryAdapterServiceConfig.registryAdapterReference;\n        AssertUtil.assertNotNull(registryAdapterUri, \"registryAdapterReference\");\n\n        // get the group parameter to build the registry query\n        // pass the rest of the query parameters as custom properties directly to the adapter\n        Map<String, String> queryParams = UriUtils.parseUriQueryParams(op.getUri());\n\n        String searchTerm = queryParams.get(SEARCH_QUERY_PROP_NAME);\n        AssertUtil.assertNotNullOrEmpty(searchTerm, SEARCH_QUERY_PROP_NAME);\n\n        String registryFilter = queryParams.get(REGISTRY_FILTER_QUERY_PARAM_NAME);\n        String rawTenantLinks = queryParams.remove(TENANT_LINKS_PARAM_NAME);\n\n        logFine(\"Searching container images for tenantLinks: \" + rawTenantLinks);\n\n        List<String> tenantLinks;\n        if (rawTenantLinks == null || rawTenantLinks.isEmpty()) {\n            tenantLinks = null;\n        } else {\n            tenantLinks = Arrays.asList(rawTenantLinks.split(TENANT_LINKS_SEPARATOR));\n        }\n\n        // query for registries and execute an adapter request for each one\n        BiConsumer<Collection<RegistryState>, Collection<Throwable>> registriesConsumer = (registries, failures) -> {\n            if (failures != null) {\n                op.fail(failures.iterator()\n                        .next());\n                return;\n            }\n\n            if (registries != null) {\n                handleSearchRequest(op, registryAdapterUri, queryParams, registries, rawTenantLinks);\n            }\n        };\n\n        // limit the number of adapter requests if the search term contains a registry hostname\n        // otherwise, query for registries and execute an adapter request for each one\n        DockerImage image = parseDockerImage(searchTerm);\n        if (image != null && image.getHost() != null && !image.getHost().isEmpty()) {\n            RegistryUtil.findRegistriesByHostname(getHost(), image.getHost(), tenantLinks,\n                    (registries, errors) -> {\n                        if (errors != null && !errors.isEmpty()) {\n                            op.fail(errors.iterator().next());\n                            return;\n                        }\n\n                        if (registries.isEmpty()) {\n                            // failed to find a matching registry, create adapter request for each\n                            // one\n                            RegistryUtil.findRegistries(getHost(), tenantLinks, registryFilter,\n                                    registriesConsumer);\n                            return;\n                        }\n\n                        queryParams.put(SEARCH_QUERY_PROP_NAME, image.getNamespaceAndRepo());\n                        registriesConsumer.accept(registries, null);\n                    });\n        } else {\n            RegistryUtil.findRegistries(getHost(), tenantLinks, registryFilter, registriesConsumer);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Perform an image search using the registry adapter The group query parameter is used to limit the registries to search to the ones visible the given group (including global groups) while the rest of the request parameters (search query, sort, etc.) are passed as custom properties directly to the adapter", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotNull", "com.vmware.xenon.common.Operation.getUri", "com.vmware.xenon.common.UriUtils.parseUriQueryParams", "java.util.Map.get", "com.vmware.admiral.common.util.AssertUtil.assertNotNullOrEmpty", "java.util.Map.remove", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.vmware.admiral.image.service.ContainerImageService.logFine", "java.lang.String.isEmpty", "java.lang.String.split", "java.util.Arrays.asList", "java.util.function.BiConsumer.accept", "com.vmware.admiral.image.service.ContainerImageService.parseDockerImage", "com.vmware.admiral.common.util.DockerImage.getHost", "com.vmware.admiral.image.service.ContainerImageService.getHost", "java.util.function.BiConsumer.accept", "com.vmware.admiral.common.util.RegistryUtil.findRegistriesByHostname", "com.vmware.admiral.common.util.RegistryUtil.findRegistries"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["java.net.URI"], ["java.lang.Object"], ["java.lang.String", "java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object[]"], [""], ["java.lang.String"], ["java.lang.Object[]"], ["com.vmware.admiral.image.service.ContainerImageService", "com.vmware.xenon.common.Operation", "java.net.URI", "java.util.Map", "java.lang.String"], ["java.lang.String"], [""], [""], ["com.vmware.admiral.image.service.ContainerImageService", "com.vmware.xenon.common.Operation", "java.util.List", "java.lang.String", "java.util.function.BiConsumer", "java.util.Map", "com.vmware.admiral.common.util.DockerImage"], ["com.vmware.xenon.common.ServiceHost", "java.lang.String", "java.util.Collection", "java.util.function.BiConsumer"], ["com.vmware.xenon.common.ServiceHost", "java.util.Collection", "java.lang.String", "java.util.function.BiConsumer"]], "passed_comments": [{"com.vmware.admiral.common.util.DockerImage.getHost": "@return the host"}, {"com.vmware.admiral.common.util.RegistryUtil.findRegistriesByHostname": "Retrieve the registries available to the given group for the given host (and global registries)"}, {"com.vmware.admiral.common.util.RegistryUtil.findRegistries": "Retrieve all the registries available to the given group (and global registries)"}]}, {"index": "467", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/image/service/FavoriteImageFactoryService.java", "methodName": "com.vmware.admiral.image.service.FavoriteImageFactoryService.completeOrFailOperationForImage", "methodParameterType": "Operation#", "methodParameterName": "post#", "methodBody": "private void completeOrFailOperationForImage(Operation post) {\n        FavoriteImage imageToFavorite = post.getBody(FavoriteImage.class);\n        AssertUtil.assertNotNullOrEmpty(imageToFavorite.name, \"imageToFavorite.name\");\n        AssertUtil.assertNotNullOrEmpty(imageToFavorite.registry, \"imageToFavorite.registry\");\n\n        QueryTask queryTask = QueryUtil.buildQuery(FavoriteImage.class, true);\n        Query nameClause = new Query()\n                .setTermPropertyName(FavoriteImage.FIELD_NAME_NAME)\n                .setTermMatchValue(imageToFavorite.name)\n                .setTermMatchType(MatchType.TERM)\n                .setOccurance(Occurance.MUST_OCCUR);\n        Query registryClause = new Query()\n                .setTermPropertyName(FavoriteImage.FIELD_NAME_REGISTRY)\n                .setTermMatchValue(imageToFavorite.registry)\n                .setTermMatchType(MatchType.TERM)\n                .setOccurance(Occurance.MUST_OCCUR);\n\n        queryTask.querySpec.query.addBooleanClause(nameClause);\n        queryTask.querySpec.query.addBooleanClause(registryClause);\n\n        if (imageToFavorite.tenantLinks != null && !imageToFavorite.tenantLinks.isEmpty()) {\n            Query tenantLinkClause = QueryUtil.addTenantClause(imageToFavorite.tenantLinks);\n            queryTask.querySpec.query.addBooleanClause(tenantLinkClause);\n        }\n\n        QueryUtil.addExpandOption(queryTask);\n\n        List<FavoriteImage> existingFavorites = new LinkedList<>();\n        new ServiceDocumentQuery<>(getHost(), FavoriteImage.class)\n                .query(queryTask, (r) -> {\n                    if (r.hasException()) {\n                        post.fail(r.getException());\n                    } else if (r.hasResult()) {\n                        existingFavorites.add(r.getResult());\n                    } else {\n                        if (existingFavorites.isEmpty()) {\n                            completeOrFailOperationForRegistry(post, imageToFavorite.registry);\n                        } else {\n                            //If the image is already added, add the existing image state to the POST body\n                            post.setStatusCode(Operation.STATUS_CODE_NOT_MODIFIED);\n                            post.setBody(existingFavorites.get(0));\n                            post.complete();\n                        }\n                    }\n                });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Completes the favorite image operation if the image trying to be added is not already present as favorite, fails otherwise.", "call_func_name": ["com.vmware.xenon.common.Operation.getBody", "com.vmware.admiral.common.util.AssertUtil.assertNotNullOrEmpty", "java.util.List.isEmpty", "com.vmware.admiral.common.util.QueryUtil.addTenantClause", "com.vmware.admiral.common.util.QueryUtil.addExpandOption", "java.util.LinkedList.<init>", "com.vmware.admiral.image.service.FavoriteImageFactoryService.getHost", "com.vmware.admiral.common.util.ServiceDocumentQuery.<init>", "com.vmware.admiral.common.util.ServiceDocumentQuery.query"], "call_func_parameter": [["java.lang.Class"], ["java.lang.String", "java.lang.String"], [""], ["java.util.List"], ["com.vmware.xenon.services.common.QueryTask"], [""], [""], ["com.vmware.xenon.common.ServiceHost", "java.lang.Class"], ["com.vmware.xenon.services.common.QueryTask", "java.util.function.Consumer"]], "passed_comments": [{"com.vmware.admiral.common.util.ServiceDocumentQuery.query": "Generic Query helper method. The result could be  {@link ServiceDocument}s if the query is defined as expanded or just String document links."}]}, {"index": "468", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/image/service/FavoriteImageFactoryService.java", "methodName": "com.vmware.admiral.image.service.FavoriteImageFactoryService.completeOrFailOperationForRegistry", "methodParameterType": "Operation#String#", "methodParameterName": "post#registryAddress#", "methodBody": "private void completeOrFailOperationForRegistry(Operation post, String registryAddress) {\n        QueryTask queryTask = QueryUtil.buildQuery(RegistryState.class, true);\n        Query searchClause = new Query()\n                .setTermPropertyName(RegistryState.FIELD_NAME_ADDRESS)\n                .setTermMatchValue(registryAddress)\n                .setTermMatchType(MatchType.TERM)\n                .setOccurance(Occurance.MUST_OCCUR);\n\n        queryTask.querySpec.query.addBooleanClause(searchClause);\n        QueryUtil.addExpandOption(queryTask);\n\n        List<RegistryState> registries = new LinkedList<>();\n        new ServiceDocumentQuery<>(getHost(), RegistryState.class)\n                .query(queryTask, (r) -> {\n                    if (r.hasException()) {\n                        post.fail(r.getException());\n                    } else if (r.hasResult()) {\n                        RegistryState registry = r.getResult();\n\n                        boolean registryInvalid = (Boolean.TRUE.equals(registry.disabled)) ||\n                                (registry.tenantLinks != null &&\n                                registry.tenantLinks\n                                        .stream()\n                                        .anyMatch(tenantLink -> TenantLinksUtil.isProjectLink(tenantLink) ||\n                                                TenantLinksUtil.isGroupLink(tenantLink)));\n                        if (registryInvalid) {\n                            post.setStatusCode(Operation.STATUS_CODE_BAD_REQUEST);\n                            post.fail(new RegistryNotValidException(\"The registry of the image \"\n                                    + \"is either project-specific or disabled.\"));\n                        } else {\n                            registries.add(registry);\n                        }\n                    } else {\n                        if (registries.isEmpty()) {\n                            post.setStatusCode(Operation.STATUS_CODE_BAD_REQUEST);\n                            post.fail(new RegistryNotValidException(\"The registry of the image \"\n                                    + \"does not exist\"));\n                        } else {\n                            super.handlePost(post);\n                        }\n                    }\n                });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ParenthesizedExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#LambdaExpression#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#StringLiteral#InfixExpression#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#StringLiteral#InfixExpression#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)LambdaExpression)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Checks whether the registry of the image trying to be added to favorites exists as active and global. If it does not, the operation should fail.", "call_func_name": ["com.vmware.admiral.common.util.QueryUtil.addExpandOption", "java.util.LinkedList.<init>", "com.vmware.admiral.image.service.FavoriteImageFactoryService.getHost", "com.vmware.admiral.common.util.ServiceDocumentQuery.<init>", "java.util.function.Consumer.accept", "com.vmware.admiral.common.util.ServiceDocumentQuery.query"], "call_func_parameter": [["com.vmware.xenon.services.common.QueryTask"], [""], [""], ["com.vmware.xenon.common.ServiceHost", "java.lang.Class"], ["com.vmware.admiral.image.service.FavoriteImageFactoryService", "com.vmware.xenon.common.Operation", "java.util.List"], ["com.vmware.xenon.services.common.QueryTask", "java.util.function.Consumer"]], "passed_comments": [{"com.vmware.admiral.common.util.ServiceDocumentQuery.query": "Generic Query helper method. The result could be  {@link ServiceDocument}s if the query is defined as expanded or just String document links."}]}, {"index": "469", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/image/service/FavoriteImagePopulateInEmbeddedService.java", "methodName": "com.vmware.admiral.image.service.FavoriteImagePopulateInEmbeddedService.createFavoriteImagesBasedOnFlagStatus", "methodParameterType": "Operation#List<String>#List<FavoriteImage>#", "methodParameterName": "post#tenantLinks#globalFavorites#", "methodBody": "private void createFavoriteImagesBasedOnFlagStatus(Operation post, List<String> tenantLinks,\n                                                       List<FavoriteImage> globalFavorites) {\n        sendRequest(Operation\n                .createGet(UriUtils.buildUri(getHost(),\n                        FavoriteImagePopulateFlagService.FAVORITE_IMAGE_POPULATE_FLAG_LINK))\n                .setCompletion((o, e) -> {\n                    if (e != null) {\n                        post.fail(e);\n                    }\n                    FavoriteImagePopulateFlag flag = o.getBody(FavoriteImagePopulateFlag.class);\n                    if (flag.shouldPopulateInEmbedded) {\n                        disableShouldPopulateInEmbeddedFlag(flag);\n                        createFavoriteImagesForTenants(tenantLinks, globalFavorites);\n                    } else {\n                        logInfo(\"Favorite images for specific tenants has already been run. \" +\n                                \"Not populating tenant specific favorite images\");\n                    }\n                    post.complete();\n                }));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#StringLiteral#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Retrieve shouldPopulateInEmbedded flag. If flag is set to true, update its state to false and replicate all global favorite image states for each tenant.", "call_func_name": ["com.vmware.admiral.image.service.FavoriteImagePopulateInEmbeddedService.getHost", "com.vmware.xenon.common.UriUtils.buildUri", "com.vmware.xenon.common.Operation.createGet", "com.vmware.admiral.image.service.FavoriteImagePopulateInEmbeddedService.sendRequest"], "call_func_parameter": [[""], ["com.vmware.xenon.common.ServiceHost", "java.lang.String"], ["java.net.URI"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "470", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/image/service/FavoriteImagePopulateInEmbeddedService.java", "methodName": "com.vmware.admiral.image.service.FavoriteImagePopulateInEmbeddedService.disableShouldPopulateInEmbeddedFlag", "methodParameterType": "FavoriteImagePopulateFlag#", "methodParameterName": "flag#", "methodBody": "private void disableShouldPopulateInEmbeddedFlag(FavoriteImagePopulateFlag flag) {\n        flag.shouldPopulateInEmbedded = Boolean.FALSE;\n        sendRequest(Operation\n                .createPut(UriUtils.buildUri(getHost(), flag.documentSelfLink))\n                .setBody(flag));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Change state of shouldPopulateInEmbedded flag to FALSE.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "471", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/image/service/FavoriteImagePopulateInEmbeddedService.java", "methodName": "com.vmware.admiral.image.service.FavoriteImagePopulateInEmbeddedService.createFavoriteImagesForTenants", "methodParameterType": "List<String>#List<FavoriteImage>#", "methodParameterName": "tenantLinks#globalFavorites#", "methodBody": "private void createFavoriteImagesForTenants(List<String> tenantLinks, List<FavoriteImage> globalFavorites) {\n        tenantLinks.forEach(tenantLink -> {\n            logInfo(String.format(\"Population of favorite images for %s - started\", tenantLink));\n            globalFavorites.forEach(image -> {\n                List<String> tenants = new ArrayList<>();\n                tenants.add(tenantLink);\n                FavoriteImage tenantedImage = new FavoriteImage();\n                tenantedImage.name = image.name;\n                tenantedImage.description = image.description;\n                tenantedImage.registry = image.registry;\n                tenantedImage.tenantLinks = tenants;\n\n                logInfo(String.format(\"Creating default favorite image state %s\", tenantedImage.name));\n                Operation createImageOperation = Operation\n                        .createPost(UriUtils.buildUri(getHost(),FavoriteImageFactoryService.SELF_LINK))\n                        .setBody(tenantedImage)\n                        .addRequestHeader(OperationUtil.PROJECT_ADMIRAL_HEADER, tenantLink);\n\n                sendRequest(createImageOperation);\n            });\n        });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Replicate the state of each global favorite image for each tenant.", "call_func_name": ["java.util.function.Consumer.accept", "java.util.List.forEach"], "call_func_parameter": [["com.vmware.admiral.image.service.FavoriteImagePopulateInEmbeddedService", "java.util.List"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "472", "file": "/root/repos/repos30/admiral/compute/src/main/java/com/vmware/admiral/host/ComputeInitialBootService.java", "methodName": "com.vmware.admiral.host.ComputeInitialBootService.updateShouldPopulateFlagState", "methodParameterType": "FavoriteImagePopulateFlag#", "methodParameterName": "flagState#", "methodBody": "private Operation updateShouldPopulateFlagState(FavoriteImagePopulateFlag flagState) {\n        return Operation.createPut(UriUtils.buildUri(getHost(),flagState.documentSelfLink))\n                .setReferer(getSelfLink())\n                .setBody(flagState);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Updates the state of the shouldPopulate flag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "473", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/services/closuredescription/ClosureDescriptionService.java", "methodName": "com.vmware.admiral.closures.services.closuredescription.ClosureDescriptionService.calculateCpuShares", "methodParameterType": "Integer#", "methodParameterName": "ramMB#", "methodBody": "private Integer calculateCpuShares(Integer ramMB) {\n        double memPercent = (float) ramMB / ClosureProps.MAX_MEMORY_MB_RES_CONSTRAINT;\n\n        int calculatedShares = (int) Math.round(memPercent * ClosureProps.DEFAULT_CPU_SHARES);\n\n        if (calculatedShares < ClosureProps.MIN_CPU_SHARES) {\n            calculatedShares = ClosureProps.MIN_CPU_SHARES;\n        }\n\n        return calculatedShares;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#PrimitiveType#SimpleName#CastExpression#SimpleName#SimpleName#QualifiedName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Calculate CPU shares proportionally based on memory reservation.", "call_func_name": ["java.lang.Integer.intValue", "java.lang.Math.round", "java.lang.Integer.valueOf"], "call_func_parameter": [[""], ["double"], ["int"]], "passed_comments": "/"}, {"index": "474", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/ExecutionDriver.java", "methodName": "com.vmware.admiral.closures.drivers.ExecutionDriver.executeClosure", "methodParameterType": "Closure#ClosureDescription#String#Consumer<Throwable>#", "methodParameterName": "closure#closureDescription#token#errorHandler#", "methodBody": "void executeClosure(Closure closure, ClosureDescription closureDescription, String token, Consumer<Throwable>\n            errorHandler);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Runs a closure using provided inputs according to the requested resource constraints.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "475", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/ExecutionDriver.java", "methodName": "com.vmware.admiral.closures.drivers.ExecutionDriver.cleanClosure", "methodParameterType": "Closure#Consumer<Throwable>#", "methodParameterName": "closure#errorHandler#", "methodBody": "void cleanClosure(Closure closure, Consumer<Throwable> errorHandler);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Clean by closure.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "476", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/ExecutionDriver.java", "methodName": "com.vmware.admiral.closures.drivers.ExecutionDriver.cleanImage", "methodParameterType": "String#String#Consumer<Throwable>#", "methodParameterName": "imageName#computeStateLink#errorHandler#", "methodBody": "void cleanImage(String imageName, String computeStateLink, Consumer<Throwable> errorHandler);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Clean docker image for specific compute state.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "477", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/ExecutionDriver.java", "methodName": "com.vmware.admiral.closures.drivers.ExecutionDriver.inspectImage", "methodParameterType": "String#String#Consumer<Throwable>#", "methodParameterName": "imageName#computeStateLink#errorHandler#", "methodBody": "void inspectImage(String imageName, String computeStateLink, Consumer<Throwable> errorHandler);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Inspect docker image with a specific name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "478", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/DriverRegistry.java", "methodName": "com.vmware.admiral.closures.drivers.DriverRegistry.register", "methodParameterType": "String#ExecutionDriver#", "methodParameterName": "runtime#driver#", "methodBody": "void register(String runtime, ExecutionDriver driver);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Register an execution driver.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "479", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/DriverRegistry.java", "methodName": "com.vmware.admiral.closures.drivers.DriverRegistry.getDriver", "methodParameterType": "String#", "methodParameterName": "runtime#", "methodBody": "ExecutionDriver getDriver(String runtime);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns appropriate execution driver according to provided runtime.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "480", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/DriverRegistry.java", "methodName": "com.vmware.admiral.closures.drivers.DriverRegistry.getDriver", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ExecutionDriver getDriver();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns arbitrary execution driver", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "481", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/DriverRegistry.java", "methodName": "com.vmware.admiral.closures.drivers.DriverRegistry.getSupportedRuntimes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, String> getSupportedRuntimes();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns supported runtime info..", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "482", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/DriverRegistry.java", "methodName": "com.vmware.admiral.closures.drivers.DriverRegistry.getImageVersion", "methodParameterType": "String#", "methodParameterName": "runtime#", "methodBody": "String getImageVersion(String runtime);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns current image version for a specific runtime", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "483", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/DriverRegistry.java", "methodName": "com.vmware.admiral.closures.drivers.DriverRegistry.getBaseImageVersion", "methodParameterType": "String#", "methodParameterName": "runtime#", "methodBody": "String getBaseImageVersion(String runtime);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns current base image version for a specific runtime", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "484", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/ClosureDockerClient.java", "methodName": "com.vmware.admiral.closures.drivers.ClosureDockerClient.removeContainer", "methodParameterType": "String#Consumer<Throwable>#", "methodParameterName": "containerId#errorHandler#", "methodBody": "void removeContainer(String containerId, Consumer<Throwable> errorHandler);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Removes container with Id.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "485", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/ClosureDockerClient.java", "methodName": "com.vmware.admiral.closures.drivers.ClosureDockerClient.createAndStartContainer", "methodParameterType": "Closure#ImageConfiguration#ContainerConfiguration#Consumer<Throwable>#", "methodParameterName": "closure#imageConfig#configuration#errorHandler#", "methodBody": "void createAndStartContainer(Closure closure, ImageConfiguration imageConfig,\n            ContainerConfiguration configuration, Consumer<Throwable> errorHandler);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates and starts the container according to the provided configuration properties.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "486", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/ClosureDockerClient.java", "methodName": "com.vmware.admiral.closures.drivers.ClosureDockerClient.cleanImage", "methodParameterType": "String#String#Consumer<Throwable>#", "methodParameterName": "imageName#computeStateLink#errorHandler#", "methodBody": "void cleanImage(String imageName, String computeStateLink, Consumer<Throwable> errorHandler);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Cleans docker image", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "487", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/drivers/ClosureDockerClient.java", "methodName": "com.vmware.admiral.closures.drivers.ClosureDockerClient.inspectImage", "methodParameterType": "String#String#Consumer<Throwable>#", "methodParameterName": "imageName#computeStateLink#errorHandler#", "methodBody": "void inspectImage(String imageName, String computeStateLink, Consumer<Throwable> errorHandler);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Inspects docker image.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "488", "file": "/root/repos/repos30/admiral/closures/closure-services/src/main/java/com/vmware/admiral/closures/util/ClosureUtils.java", "methodName": "com.vmware.admiral.closures.util.ClosureUtils.isAdditionalRuntimeSwitchedOn", "methodParameterType": "String#", "methodParameterName": "runtime#", "methodBody": "public static boolean isAdditionalRuntimeSwitchedOn(String runtime) {\n        String runtimeOn = ConfigurationUtil\n                .getProperty(ClosureProps.CLOSURE_RUNTIME_IMAGE_REGISTRY + runtime);\n        return !(runtimeOn == null || runtimeOn.isEmpty());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(PrefixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks for additional runtimes that are not provided out of the box. We need to provide registry to download the image from.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.vmware.admiral.common.util.ConfigurationUtil.getProperty", "java.lang.String.isEmpty"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String"], [""]], "passed_comments": [{"com.vmware.admiral.common.util.ConfigurationUtil.getProperty": "Retrieves the property value from a cache loaded with, a priori, the same configuration properties files values. The value of the property will be valid as long as: - It is not updated at runtime (the configuration state will be updated, this cache no). - (in cluster) All the nodes start with the same configuration properties files and their corresponding values."}]}, {"index": "489", "file": "/root/repos/repos30/admiral/closures/closure-drivers/src/main/resources/com/vmware/admiral/closures/drivers/client/docker/image/photon-closure-runner_java/app/com/vmware/admiral/closure/runtime/Context.java", "methodName": "com.vmware.admiral.closure.runtime.Context.getInputs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, Object> getInputs();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns inputs as json string", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "490", "file": "/root/repos/repos30/admiral/closures/closure-drivers/src/main/resources/com/vmware/admiral/closures/drivers/client/docker/image/photon-closure-runner_java/app/com/vmware/admiral/closure/runtime/Context.java", "methodName": "com.vmware.admiral.closure.runtime.Context.getOutputsAsString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOutputsAsString();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns outputs as json string", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "491", "file": "/root/repos/repos30/admiral/closures/closure-drivers/src/main/resources/com/vmware/admiral/closures/drivers/client/docker/image/photon-closure-runner_java/app/com/vmware/admiral/closure/runtime/Context.java", "methodName": "com.vmware.admiral.closure.runtime.Context.setOutput", "methodParameterType": "String#Object#", "methodParameterName": "key#value#", "methodBody": "public void setOutput(String key, Object value);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets an output parameter", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "492", "file": "/root/repos/repos30/admiral/closures/closure-drivers/src/main/resources/com/vmware/admiral/closures/drivers/client/docker/image/photon-closure-runner_java/app/com/vmware/admiral/closure/runtime/Context.java", "methodName": "com.vmware.admiral.closure.runtime.Context.execute", "methodParameterType": "String#String#String#Consumer<String>#", "methodParameterName": "link#operation#body#handler#", "methodBody": "public void execute(String link, String operation, String body, Consumer<String> handler) throws\n            Exception;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Execute HTTP requests to admiral itself", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "493", "file": "/root/repos/repos30/admiral/closures/closure-drivers/target/classes/com/vmware/admiral/closures/drivers/client/docker/image/photon-closure-runner_java/app/com/vmware/admiral/closure/runtime/Context.java", "methodName": "com.vmware.admiral.closure.runtime.Context.getInputs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, Object> getInputs();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns inputs as json string", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "494", "file": "/root/repos/repos30/admiral/closures/closure-drivers/target/classes/com/vmware/admiral/closures/drivers/client/docker/image/photon-closure-runner_java/app/com/vmware/admiral/closure/runtime/Context.java", "methodName": "com.vmware.admiral.closure.runtime.Context.getOutputsAsString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getOutputsAsString();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns outputs as json string", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "495", "file": "/root/repos/repos30/admiral/closures/closure-drivers/target/classes/com/vmware/admiral/closures/drivers/client/docker/image/photon-closure-runner_java/app/com/vmware/admiral/closure/runtime/Context.java", "methodName": "com.vmware.admiral.closure.runtime.Context.setOutput", "methodParameterType": "String#Object#", "methodParameterName": "key#value#", "methodBody": "public void setOutput(String key, Object value);", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets an output parameter", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "496", "file": "/root/repos/repos30/admiral/closures/closure-drivers/target/classes/com/vmware/admiral/closures/drivers/client/docker/image/photon-closure-runner_java/app/com/vmware/admiral/closure/runtime/Context.java", "methodName": "com.vmware.admiral.closure.runtime.Context.execute", "methodParameterType": "String#String#String#Consumer<String>#", "methodParameterName": "link#operation#body#handler#", "methodBody": "public void execute(String link, String operation, String body, Consumer<String> handler) throws\n            Exception;", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Execute HTTP requests to admiral itself", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "497", "file": "/root/repos/repos30/admiral/adapter/common/src/main/java/com/vmware/admiral/adapter/docker/util/DockerPortMapping.java", "methodName": "com.vmware.admiral.adapter.docker.util.DockerPortMapping.fromString", "methodParameterType": "String#", "methodParameterName": "portMappingStr#", "methodBody": "public static DockerPortMapping fromString(String portMappingStr) {\n        DockerPortMapping portMapping = new DockerPortMapping();\n        Matcher matcher = PORT_PATTERN.matcher(portMappingStr);\n        if (!matcher.matches()) {\n            throw new LocalizableValidationException(\"Invalid format for port mapping: \" + portMappingStr,\n                    \"adapter.docker.port.mapping.invalid\", portMappingStr);\n        }\n\n        portMapping.hostIp = matcher.group(1);\n        portMapping.hostPort = matcher.group(2);\n        portMapping.containerPort = matcher.group(3);\n\n        String protocolStr = matcher.group(5);\n        if (protocolStr != null) {\n            portMapping.protocol = Protocol.fromString(protocolStr);\n        } else {\n            portMapping.protocol = Protocol.TCP;\n        }\n\n        if (\"\".equals(portMapping.hostPort)) {\n            portMapping.hostPort = null;\n        }\n\n        return portMapping;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#StringLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parse a port string format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort", "call_func_name": ["com.vmware.admiral.adapter.docker.util.DockerPortMapping.<init>", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.vmware.xenon.common.LocalizableValidationException.<init>", "java.util.regex.Matcher.group", "java.lang.String.equals"], "call_func_parameter": [[""], ["java.lang.CharSequence"], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.Object[]"], ["int"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "498", "file": "/root/repos/repos30/admiral/adapter/common/src/main/java/com/vmware/admiral/adapter/docker/util/DockerPortMapping.java", "methodName": "com.vmware.admiral.adapter.docker.util.DockerPortMapping.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        if (hostIp != null && hostIp.trim().length() > 0) {\n            sb.append(hostIp.trim());\n            sb.append(\":\");\n        }\n\n        if (hostPort != null && hostPort.trim().length() > 0) {\n            sb.append(hostPort.trim());\n        }\n\n        if (sb.length() > 0) {\n            sb.append(\":\");\n        }\n\n        sb.append(containerPort.trim());\n        sb.append(\"/\");\n        sb.append(protocol.toString());\n        return sb.toString();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Format as a docker port mapping string (reverse of fromString)", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.String.trim", "java.lang.String.length", "java.lang.StringBuilder.append", "java.lang.StringBuilder.length", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "499", "file": "/root/repos/repos30/admiral/adapter/common/src/main/java/com/vmware/admiral/adapter/docker/util/DockerPortMapping.java", "methodName": "com.vmware.admiral.adapter.docker.util.DockerPortMapping.toMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, List<Map<String, String>>> toMap() {\n        Map<String, String> portDetails = new HashMap<>();\n        if (hostIp != null) {\n            portDetails.put(HOST_IP, hostIp);\n        }\n\n        if (hostPort != null) {\n            portDetails.put(HOST_PORT, hostPort);\n        }\n\n        List<Map<String, String>> list = new ArrayList<>(1);\n        list.add(portDetails);\n\n        Map<String, List<Map<String, String>>> portMap = new HashMap<>();\n        portMap.put(getContainerPortAndProtocol(), list);\n\n        return portMap;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convert the port mapping to the format expected by the API <pre> \"8282/tcp\": [ { \"HostIp\": \"0.0.0.0\", \"HostPort\": \"8282\" } ] </pre>", "call_func_name": ["java.util.HashMap.<init>", "java.util.Map.put", "java.util.ArrayList.<init>", "java.util.List.add", "com.vmware.admiral.adapter.docker.util.DockerPortMapping.getContainerPortAndProtocol"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"], ["int"], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "500", "file": "/root/repos/repos30/admiral/adapter/common/src/main/java/com/vmware/admiral/adapter/docker/util/DockerPortMapping.java", "methodName": "com.vmware.admiral.adapter.docker.util.DockerPortMapping.fromMap", "methodParameterType": "Map<String,List<Map<String,String>>>#", "methodParameterName": "map#", "methodBody": "public static List<DockerPortMapping> fromMap(Map<String, List<Map<String, String>>> map) {\n        return map.entrySet().stream()\n                .map((e) -> fromMap(e))\n                .filter((m) -> m != null)\n                .collect(Collectors.toList());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convert a map generated by the toMap() method back to a DockerPortMapping", "call_func_name": ["java.util.Map.entrySet", "java.util.Set.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], [""], ["java.util.function.Function"], [""], ["java.util.function.Predicate"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "501", "file": "/root/repos/repos30/admiral/adapter/common/src/main/java/com/vmware/admiral/adapter/docker/util/DockerPortMapping.java", "methodName": "com.vmware.admiral.adapter.docker.util.DockerPortMapping.fromMap", "methodParameterType": "Map.Entry<String,List<Map<String,String>>>#", "methodParameterName": "entry#", "methodBody": "public static DockerPortMapping fromMap(Map.Entry<String, List<Map<String, String>>> entry) {\n        DockerPortMapping portMapping = new DockerPortMapping();\n\n        if (entry.getValue() == null) {\n            // no host mapping\n            return null;\n        }\n\n        portMapping.containerPort = entry.getKey();\n        int protocolSeparatorIndex = portMapping.containerPort.indexOf(\"/\");\n        if (protocolSeparatorIndex != -1) {\n            portMapping.protocol = Protocol.fromString(portMapping.containerPort\n                    .substring(protocolSeparatorIndex + 1));\n            portMapping.containerPort = portMapping.containerPort.substring(0,\n                    protocolSeparatorIndex);\n        }\n\n        Map<String, String> hostMap = entry.getValue().get(0);\n        portMapping.hostIp = hostMap.get(HOST_IP);\n        portMapping.hostPort = hostMap.get(HOST_PORT);\n\n        return portMapping;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convert a map generated by the toMap() method back to a DockerPortMapping", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "502", "file": "/root/repos/repos30/admiral/adapter/common/src/main/java/com/vmware/admiral/adapter/docker/util/DockerPortMapping.java", "methodName": "com.vmware.admiral.adapter.docker.util.DockerPortMapping.withHostPort", "methodParameterType": "int#", "methodParameterName": "hostPort#", "methodBody": "public DockerPortMapping withHostPort(int hostPort) {\n        DockerPortMapping newMapping = new DockerPortMapping();\n\n        newMapping.protocol = protocol;\n        newMapping.containerPort = containerPort;\n        newMapping.hostIp = hostIp;\n        newMapping.hostPort = String.valueOf(hostPort);\n\n        return newMapping;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a copy of this mapping with the given host port", "call_func_name": ["com.vmware.admiral.adapter.docker.util.DockerPortMapping.<init>", "java.lang.String.valueOf"], "call_func_parameter": [[""], ["int"]], "passed_comments": "/"}, {"index": "503", "file": "/root/repos/repos30/admiral/adapter/common/src/main/java/com/vmware/admiral/adapter/docker/util/DockerPortMapping.java", "methodName": "com.vmware.admiral.adapter.docker.util.DockerPortMapping.getHostIp", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getHostIp() {\n        return hostIp;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the hostIp", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "504", "file": "/root/repos/repos30/admiral/adapter/common/src/main/java/com/vmware/admiral/adapter/docker/util/DockerPortMapping.java", "methodName": "com.vmware.admiral.adapter.docker.util.DockerPortMapping.getHostPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getHostPort() {\n        return hostPort;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the hostPort", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "505", "file": "/root/repos/repos30/admiral/adapter/common/src/main/java/com/vmware/admiral/adapter/docker/util/DockerPortMapping.java", "methodName": "com.vmware.admiral.adapter.docker.util.DockerPortMapping.getContainerPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getContainerPort() {\n        return containerPort;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the containerPort", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "506", "file": "/root/repos/repos30/admiral/adapter/common/src/main/java/com/vmware/admiral/adapter/docker/util/DockerPortMapping.java", "methodName": "com.vmware.admiral.adapter.docker.util.DockerPortMapping.getProtocol", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Protocol getProtocol() {\n        return protocol;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the protocol", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "507", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/ContainerStateMapper.java", "methodName": "com.vmware.admiral.adapter.docker.service.ContainerStateMapper.propertiesToContainerState", "methodParameterType": "ContainerState#Map<String,Object>#", "methodParameterName": "containerState#properties#", "methodBody": "public static void propertiesToContainerState(ContainerState containerState,\n            Map<String, Object> properties) {\n\n        AssertUtil.assertNotNull(containerState, \"containerState\");\n        AssertUtil.assertNotNull(properties, \"properties\");\n\n        containerState.id = (String) properties.get(DOCKER_CONTAINER_ID_PROP_NAME);\n        String name = (String) properties.get(DOCKER_CONTAINER_NAME_PROP_NAME);\n        if (name != null && name.startsWith(\"/\")) {\n            name = name.substring(1);\n        }\n        containerState.names = Collections.singletonList(name);\n\n        containerState.created = parseDate(properties.get(DOCKER_CONTAINER_CREATED_PROP_NAME));\n\n        mapStateProperties(containerState, getMap(properties, DOCKER_CONTAINER_STATE_PROP_NAME));\n\n        mapConfigProperties(containerState, getMap(properties, DOCKER_CONTAINER_CONFIG_PROP_NAME));\n\n        mapNetworkSettingsProperties(containerState,\n                getMap(properties, DOCKER_CONTAINER_NETWORK_SETTINGS_PROP_NAME));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Convert generic properties from the given map to modeled properties in the given ContainerState", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "508", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/ContainerStateMapper.java", "methodName": "com.vmware.admiral.adapter.docker.service.ContainerStateMapper.mapPowerState", "methodParameterType": "String#", "methodParameterName": "state#", "methodBody": "public static PowerState mapPowerState(String state) {\n        // docker states when listing all containers:\n        // created|restarting|running|removing|paused|exited|dead\n        state = state.toLowerCase();\n\n        switch (state) {\n        case \"running\":\n            return PowerState.RUNNING;\n        case \"paused\":\n            return PowerState.PAUSED;\n        case \"exited\":\n        case \"dead\":\n            return PowerState.STOPPED;\n        default:\n            return null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#StringLiteral#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#StringLiteral#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#StringLiteral#SwitchCase#StringLiteral#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SwitchCase#NullLiteral#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Map the result from listing all containers - State property to the PowerState enum. Returns  {@link PowerState} if state is mapped.", "call_func_name": ["java.lang.String.toLowerCase", "java.lang.String.hashCode", "java.lang.String.equals"], "call_func_parameter": [[""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "509", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/ContainerStateMapper.java", "methodName": "com.vmware.admiral.adapter.docker.service.ContainerStateMapper.mapStateProperties", "methodParameterType": "ContainerState#Map<String,Object>#", "methodParameterName": "containerState#state#", "methodBody": "private static void mapStateProperties(ContainerState containerState,\n            Map<String, Object> state) {\n        if (state == null) {\n            return;\n        }\n        containerState.started = parseDate(state.get(DOCKER_CONTAINER_STATE_STARTED_PROP_NAME));\n\n        mapPowerState(containerState, state);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Process properties in the State object", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "510", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/ContainerStateMapper.java", "methodName": "com.vmware.admiral.adapter.docker.service.ContainerStateMapper.mapConfigProperties", "methodParameterType": "ContainerState#Map<String,Object>#", "methodParameterName": "containerState#config#", "methodBody": "private static void mapConfigProperties(ContainerState containerState,\n            Map<String, Object> config) {\n        if (config == null) {\n            return;\n        }\n        @SuppressWarnings(\"unchecked\")\n        Collection<String> commandList = (Collection<String>) config\n                .get(DOCKER_CONTAINER_COMMAND_PROP_NAME);\n\n        if (commandList != null) {\n            containerState.command = commandList.toArray(new String[0]);\n        }\n\n        String image = (String) config.get(DOCKER_CONTAINER_IMAGE_PROP_NAME);\n        if (image != null) {\n            containerState.image = image;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        Collection<String> envList = (Collection<String>) config\n                .get(DOCKER_CONTAINER_ENV_PROP_NAME);\n        if (envList != null) {\n            containerState.env = envList.toArray(new String[0]);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Process properties in the Config object", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "511", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/ContainerStateMapper.java", "methodName": "com.vmware.admiral.adapter.docker.service.ContainerStateMapper.mapNetworkSettingsProperties", "methodParameterType": "ContainerState#Map<String,Object>#", "methodParameterName": "containerState#networkSettings#", "methodBody": "private static void mapNetworkSettingsProperties(ContainerState containerState,\n            Map<String, Object> networkSettings) {\n\n        mapPortBindingProperties(containerState, networkSettings);\n\n        mapNetworks(containerState,\n                getMap(networkSettings, DOCKER_CONTAINER_NETWORK_SETTINGS_NETWORKS_PROP_NAME));\n\n        /*\n         * related to https://bugzilla.eng.vmware.com/show_bug.cgi?id=1749340. The\n         * NetworkSettings.IPAddress is now deprecated in favor of the per-network defined addresses\n         * in NetworkSettings.Networks.<a-network>.IPAddress.\n         */\n        mapContainerIPAddress(containerState, networkSettings);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Process network settings like port bindings, IP addresses, connected networks", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "512", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/ContainerStateMapper.java", "methodName": "com.vmware.admiral.adapter.docker.service.ContainerStateMapper.mapNetworks", "methodParameterType": "ContainerState#Map<String,Object>#", "methodParameterName": "containerState#networks#", "methodBody": "private static void mapNetworks(ContainerState containerState, Map<String, Object> networks) {\n        if (containerState.networks == null) {\n            containerState.networks = new HashMap<>();\n        }\n\n        if (networks != null) {\n            networks.keySet()\n                    .forEach(networkName -> mapNetwork(containerState.networks, networkName,\n                            getMap(networks, networkName)));\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Process all networks a container is connected to", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "513", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/ContainerStateMapper.java", "methodName": "com.vmware.admiral.adapter.docker.service.ContainerStateMapper.mapNetwork", "methodParameterType": "Map<String,ServiceNetwork>#String#Map<String,Object>#", "methodParameterName": "networks#networkName#networkProps#", "methodBody": "private static void mapNetwork(Map<String, ServiceNetwork> networks, String networkName,\n            Map<String, Object> networkProps) {\n\n        ServiceNetwork network = new ServiceNetwork();\n        List<Object> aliasesList = getList(networkProps,\n                DOCKER_CONTAINER_NETWORK_ALIASES_PROP_NAME);\n        List<Object> linksList = getList(networkProps,\n                DOCKER_CONTAINER_NETWORK_LINKS_PROP_NAME);\n\n        network.name = networkName;\n        network.aliases = aliasesList == null ? null : aliasesList.toArray(new String[0]);\n        network.links = linksList == null ? null : linksList.toArray(new String[0]);\n        network.ipv4_address = (String) networkProps\n                .get(DOCKER_CONTAINER_NETWORK_IPV4_ADDRESS_PROP_NAME);\n        network.ipv6_address = (String) networkProps\n                .get(DOCKER_CONTAINER_NETWORK_IPV6_ADDRESS_PROP_NAME);\n\n        networks.put(networkName, network);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#InfixExpression#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#InfixExpression#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Process a single network a container is connected to", "call_func_name": ["com.vmware.admiral.compute.container.ServiceNetwork.<init>", "com.vmware.admiral.adapter.docker.service.ContainerStateMapper.getList", "java.util.List.toArray", "java.util.Map.get", "java.util.Map.put"], "call_func_parameter": [[""], ["java.util.Map", "java.lang.String"], ["java.lang.Object[]"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "514", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/ContainerStateMapper.java", "methodName": "com.vmware.admiral.adapter.docker.service.ContainerStateMapper.mapPortBindingProperties", "methodParameterType": "ContainerState#Map<String,Object>#", "methodParameterName": "containerState#networkSettings#", "methodBody": "private static void mapPortBindingProperties(ContainerState containerState,\n            Map<String, Object> networkSettings) {\n\n        if (networkSettings == null) {\n            return;\n        }\n\n        Map<String, List<Map<String, String>>> portMap = getMap(networkSettings,\n                DOCKER_CONTAINER_NETWORK_SETTINGS_PORTS_PROP_NAME);\n\n        if (containerState.ports == null) {\n            containerState.ports = new ArrayList<PortBinding>();\n        }\n        if (portMap != null) {\n            List<DockerPortMapping> portMappings = DockerPortMapping.fromMap(portMap);\n\n            containerState.ports = portMappings.stream()\n                    .map((m) -> PortBinding.fromDockerPortMapping(m))\n                    .collect(Collectors.toList());\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Process port binding properties", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "515", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/ContainerStateMapper.java", "methodName": "com.vmware.admiral.adapter.docker.service.ContainerStateMapper.mapContainerIPAddress", "methodParameterType": "ContainerState#Map<String,Object>#", "methodParameterName": "containerState#networkSettings#", "methodBody": "private static void mapContainerIPAddress(ContainerState containerState,\n            Map<String, Object> networkSettings) {\n\n        if (networkSettings == null) {\n            return;\n        }\n\n        Object ipAddress = networkSettings\n                .get(DOCKER_CONTAINER_NETWORK_SETTINGS_IP_ADDRESS_PROP_NAME);\n        if (ipAddress == null) {\n            return;\n        }\n\n        containerState.address = ipAddress.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Process the NetworkSettings.IpAddress", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "516", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/ContainerStateMapper.java", "methodName": "com.vmware.admiral.adapter.docker.service.ContainerStateMapper.parseDate", "methodParameterType": "Object#", "methodParameterName": "value#", "methodBody": "public static Long parseDate(Object value) {\n        if (value == null) {\n            return null;\n        }\n\n        String str = (String) value;\n        try {\n            // docker uses RFC3339Nano date format\n            return Instant.parse(str).toEpochMilli();\n        } catch (DateTimeParseException e) {\n            // workaround for VIC host until https://github.com/vmware/vic/issues/1874 is fixed\n            if (str.length() == 0) {\n                return null;\n            }\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss Z\");\n            try {\n                return sdf.parse(str).getTime();\n            } catch (ParseException e1) {\n                throw new LocalizableValidationException(e1, \"Invalid datetime '\" + str + \"'; \"\n                        + e1.getMessage(), \"adapter.container.mapper.invalid.date\", str);\n            }\n        }\n\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Convert a string to a Date object", "call_func_name": ["java.time.Instant.parse", "java.time.Instant.toEpochMilli", "java.lang.Long.valueOf", "java.lang.String.length", "java.text.SimpleDateFormat.<init>", "java.text.SimpleDateFormat.parse", "java.util.Date.getTime", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.text.ParseException.getMessage", "java.lang.StringBuilder.toString", "com.vmware.xenon.common.LocalizableValidationException.<init>"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["long"], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.Throwable", "java.lang.String", "java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "517", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/ContainerNetworkStateMapper.java", "methodName": "com.vmware.admiral.adapter.docker.service.ContainerNetworkStateMapper.propertiesToContainerNetworkState", "methodParameterType": "ContainerNetworkState#Map<String,Object>#", "methodParameterName": "networkState#properties#", "methodBody": "public static void propertiesToContainerNetworkState(ContainerNetworkState networkState,\n            Map<String, Object> properties) {\n\n        AssertUtil.assertNotNull(networkState, \"networkState\");\n        AssertUtil.assertNotNull(properties, \"properties\");\n\n        networkState.id = (String) properties.get(DOCKER_CONTAINER_NETWORK_ID_PROP_NAME);\n        networkState.name = (String) properties.get(DOCKER_CONTAINER_NETWORK_NAME_PROP_NAME);\n        networkState.driver = (String) properties.get(DOCKER_CONTAINER_NETWORK_DRIVER_PROP_NAME);\n\n        networkState.powerState = PowerState.CONNECTED;\n\n        networkState.options = getMap(properties, DOCKER_CONTAINER_NETWORK_OPTIONS_PROP_NAME);\n        Map<String, Object> ipamProperties = getMap(properties,\n                DOCKER_CONTAINER_NETWORK_IPAM_PROP_NAME);\n        mapIpamConfiguration(networkState, ipamProperties);\n\n        mapConnectedContainers(networkState,\n                getMap(properties, DOCKER_CONTAINER_NETWORK_CONTAINERS_PROP_NAME));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Convert generic properties from the given  {@link Map} to modeled properties in the given{@link ContainerNetworkState}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "518", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerAdapterService.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerAdapterService.processDownloadedImage", "methodParameterType": "RequestContext#File#Runnable#boolean#", "methodParameterName": "context#tempFile#imageCompletionAction#isTempFile#", "methodBody": "private void processDownloadedImage(RequestContext context, File tempFile,\n            Runnable imageCompletionAction, boolean isTempFile) {\n\n        Operation fileReadOp = Operation.createPatch(null)\n                .setContextId(context.request.getRequestId())\n                .setCompletion((o, ex) -> {\n                    if (ex != null) {\n                        fail(context.request, ex);\n                        return;\n                    }\n\n                    byte[] imageData = o.getBody(byte[].class);\n                    if (isTempFile && !tempFile.delete()) {\n                        this.logWarning(\"Failed to delete temp file: %s %s\", tempFile,\n                                context.request.getRequestTrackingLog());\n                    }\n\n                    processLoadImageData(context, imageData,\n                            context.containerDescription.imageReference.toString(),\n                            imageCompletionAction);\n                });\n\n        FileUtils.readFileAndComplete(fileReadOp, tempFile);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#PrimitiveType#Dimension#ArrayType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ThisExpression#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "read the temp file containing the downloaded image from the file system and proceed with imageCompletionAction", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "519", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerAdapterService.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerAdapterService.getOrAddMap", "methodParameterType": "CommandInput#String#", "methodParameterName": "commandInput#propName#", "methodBody": "private Map<String, Object> getOrAddMap(CommandInput commandInput, String propName) {\n        Map<String, Object> newMap = new HashMap<>();\n\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> oldMap = (Map<String, Object>) commandInput.getProperties()\n                .putIfAbsent(propName, newMap);\n\n        return oldMap == null ? newMap : oldMap;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "get a mapped value or add a new one if it's not mapped yet", "call_func_name": ["java.util.HashMap.<init>", "com.vmware.admiral.adapter.docker.service.CommandInput.getProperties", "java.util.Map.putIfAbsent"], "call_func_parameter": [[""], [""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.vmware.admiral.adapter.docker.service.CommandInput.getProperties": "@return the properties"}]}, {"index": "520", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerAdapterService.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerAdapterService.addLogConfiguration", "methodParameterType": "CommandInput#LogConfig#", "methodParameterName": "input#logConfig#", "methodBody": "private void addLogConfiguration(CommandInput input, LogConfig logConfig) {\n        Map<String, Object> hostConfig = getOrAddMap(input, DOCKER_CONTAINER_HOST_CONFIG_PROP_NAME);\n\n        Map<String, Object> logConfigMap = new HashMap<>();\n        logConfigMap.put(DOCKER_CONTAINER_LOG_CONFIG_PROP_TYPE_NAME, logConfig.type);\n        logConfigMap.put(DOCKER_CONTAINER_LOG_CONFIG_PROP_CONFIG_NAME, logConfig.config);\n\n        hostConfig.put(DOCKER_CONTAINER_LOG_CONFIG_PROP_NAME, logConfigMap);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Map log configurations.", "call_func_name": ["com.vmware.admiral.adapter.docker.service.DockerAdapterService.getOrAddMap", "java.util.HashMap.<init>", "java.util.Map.put"], "call_func_parameter": [["com.vmware.admiral.adapter.docker.service.CommandInput", "java.lang.String"], [""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.vmware.admiral.adapter.docker.service.DockerAdapterService.getOrAddMap": "get a mapped value or add a new one if it's not mapped yet"}]}, {"index": "521", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerAdapterService.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerAdapterService.addPortBindings", "methodParameterType": "CommandInput#List<PortBinding>#", "methodParameterName": "input#portBindings#", "methodBody": "private void addPortBindings(CommandInput input, List<PortBinding> portBindings) {\n        Map<String, Map<String, String>> exposedPortsMap = new HashMap<>();\n        input.withProperty(DOCKER_CONTAINER_EXPOSED_PORTS_PROP_NAME, exposedPortsMap);\n\n        Map<String, Object> hostConfig = getOrAddMap(input,\n                DOCKER_CONTAINER_HOST_CONFIG_PROP_NAME);\n\n        Map<String, List<Map<String, String>>> portBindingsMap = new HashMap<>();\n        hostConfig.put(DOCKER_CONTAINER_PORT_BINDINGS_PROP_NAME, portBindingsMap);\n\n        for (PortBinding portBinding : portBindings) {\n            DockerPortMapping mapping = DockerPortMapping.fromString(portBinding.toString());\n            Map<String, List<Map<String, String>>> portDetails = mapping.toMap();\n            portBindingsMap.putAll(portDetails);\n\n            exposedPortsMap.put(mapping.getContainerPortAndProtocol(), Collections.emptyMap());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Map port binding to ExposedPorts and PortBinding ExposedPorts are only used by the API adapter, as the docker CLI will add that itself", "call_func_name": ["java.util.HashMap.<init>", "com.vmware.admiral.adapter.docker.service.CommandInput.withProperty", "com.vmware.admiral.adapter.docker.service.DockerAdapterService.getOrAddMap", "java.util.Map.put", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.vmware.admiral.compute.container.PortBinding.toString", "com.vmware.admiral.adapter.docker.util.DockerPortMapping.fromString", "com.vmware.admiral.adapter.docker.util.DockerPortMapping.toMap", "java.util.Map.putAll", "com.vmware.admiral.adapter.docker.util.DockerPortMapping.getContainerPortAndProtocol", "java.util.Collections.emptyMap"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object"], ["com.vmware.admiral.adapter.docker.service.CommandInput", "java.lang.String"], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.util.Map"], [""], [""]], "passed_comments": [{"com.vmware.admiral.adapter.docker.service.DockerAdapterService.getOrAddMap": "get a mapped value or add a new one if it's not mapped yet"}, {"com.vmware.admiral.compute.container.PortBinding.toString": "Format as a docker port mapping string (reverse of fromString)"}, {"com.vmware.admiral.adapter.docker.util.DockerPortMapping.fromString": "Parse a port string format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort"}, {"com.vmware.admiral.adapter.docker.util.DockerPortMapping.toMap": "Convert the port mapping to the format expected by the API <pre> \"8282/tcp\": [ { \"HostIp\": \"0.0.0.0\", \"HostPort\": \"8282\" } ] </pre>"}]}, {"index": "522", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerAdapterService.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerAdapterService.prepareDeleteContainerFunction", "methodParameterType": "RequestContext#", "methodParameterName": "context#", "methodBody": "private Function<RetriableTask<Boolean>, DeferredResult<Boolean>> prepareDeleteContainerFunction(\n            RequestContext context) {\n        return (task) -> {\n            DeferredResult<Boolean> result = new DeferredResult<>();\n\n            CommandInput deleteCommandInput = new CommandInput(context.commandInput)\n                    .withProperty(DOCKER_CONTAINER_ID_PROP_NAME, context.containerState.id);\n            logFine(\"Deleting container [%s]\", context.containerState.id);\n            context.executor.removeContainer(deleteCommandInput, (o, ex) -> {\n                if (ex == null) {\n                    // Nothing to do, success completion will be\n                    // handled on the retriable task completion\n                    result.complete(true);\n                    return;\n                }\n\n                // there is no container to delete\n                if (o.getStatusCode() == Operation.STATUS_CODE_NOT_FOUND\n                        || ex.getMessage().contains(DELETE_CONTAINER_MISSING_ERROR)) {\n                    logWarning(\n                            \"Could not delete container [%s] of host [%s]: \"\n                                    + \"container not found. Skipping deletion.\",\n                            context.containerState.documentSelfLink,\n                            context.computeState.documentSelfLink);\n                    result.complete(false);\n                    return;\n                }\n\n                if (isRetriableFailure(o.getStatusCode())) {\n                    markRequestAsRetriedAfterFailure(context.request);\n                } else {\n                    task.preventRetries();\n                    logSevere(\n                            \"Failure deleting container [%s] of host [%s] (status code: %s)\",\n                            context.containerState.documentSelfLink,\n                            context.computeState.documentSelfLink,\n                            o.getStatusCode());\n                }\n\n                result.fail(DockerAdapterUtils.runtimeExceptionFromFailedDockerOperation(o, ex));\n            });\n\n            return result;\n        };\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#LambdaExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "the deferred result completion value indicates whether a container was or was not deleted", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "523", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/AbstractDockerAdapterService.java", "methodName": "com.vmware.admiral.adapter.docker.service.AbstractDockerAdapterService.processAuthentication", "methodParameterType": "BaseRequestContext#Runnable#", "methodParameterName": "context#callback#", "methodBody": "protected void processAuthentication(BaseRequestContext context, Runnable callback) {\n        DockerImage image = DockerImage.fromImageName(context.imageName);\n\n        if (image.getHost() == null) {\n            // if there is no registry host we assume the host is docker hub, so no authentication\n            // needed\n            callback.run();\n            return;\n        }\n\n        QueryTask registryQuery = QueryUtil.buildQuery(RegistryService.RegistryState.class, false);\n        if (context.tenantLinks != null) {\n            registryQuery.querySpec.query.addBooleanClause(QueryUtil.addTenantGroupAndUserClause(\n                    context.tenantLinks));\n        }\n        registryQuery.querySpec.query.addBooleanClause(createAnyPropertyClause(\n                String.format(\"*://%s\", image.getHost()),\n                RegistryService.RegistryState.FIELD_NAME_ADDRESS));\n\n        List<String> registryLinks = new ArrayList<>();\n        new ServiceDocumentQuery<>(getHost(), ContainerService.ContainerState.class).query(\n                registryQuery, (r) -> {\n                    if (r.hasException()) {\n                        fail(context.request, r.getException());\n                        return;\n                    } else if (r.hasResult()) {\n                        registryLinks.add(r.getDocumentSelfLink());\n                    } else {\n                        if (registryLinks.isEmpty()) {\n                            logWarning(\"Failed to find registry state with address '%s'.\",\n                                    image.getHost());\n                            callback.run();\n                            return;\n                        }\n\n                        fetchRegistryAuthState(registryLinks.get(0), context, callback);\n                    }\n                });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#TypeLiteral#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleType#TypeLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)TypeLiteral)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create X-Registry-Auth header value containing Base64-encoded authConfig object so that docker daemon can authenticate against registries that support basic authentication. For more info, see: https://docs.docker.com/engine/reference/api/docker_remote_api/#authentication", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "524", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerNetworkAdapterService.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerNetworkAdapterService.processNetworkRequest", "methodParameterType": "RequestContext#", "methodParameterName": "context#", "methodBody": "private void processNetworkRequest(RequestContext context) {\n        Operation getNetworkState = Operation\n                .createGet(context.request.getNetworkStateReference())\n                .setCompletion((o, ex) -> {\n                    if (ex != null) {\n                        fail(context.request, ex);\n                    } else {\n                        handleExceptions(context.request, context.operation, () -> {\n                            context.networkState = o\n                                    .getBody(ContainerNetworkState.class);\n                            processNetworkState(context);\n                        });\n                    }\n                });\n        handleExceptions(context.request, context.operation, () -> {\n            logFine(\"Fetching NetworkState: %s %s\",\n                    context.request.getRequestTrackingLog(),\n                    context.request.getNetworkStateReference());\n            sendRequest(getNetworkState);\n        });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Start processing the request. First fetches the  {@link ContainerNetworkState}. Will result in filling the  {@link RequestContext#networkState} property.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "525", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerNetworkAdapterService.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerNetworkAdapterService.processNetworkState", "methodParameterType": "RequestContext#", "methodParameterName": "context#", "methodBody": "private void processNetworkState(RequestContext context) {\n        if (context.networkState.originatingHostLink == null) {\n            fail(context.request,\n                    new IllegalArgumentException(\"originatingHostLink missing for network state \"\n                            + context.networkState.documentSelfLink));\n            return;\n        }\n\n        getContainerHost(\n                context.request,\n                context.operation,\n                UriUtils.buildUri(getHost(), context.networkState.originatingHostLink),\n                (computeState, commandInput) -> {\n                    context.commandInput = commandInput;\n                    context.executor = getCommandExecutor();\n                    handleExceptions(context.request, context.operation,\n                            () -> processOperation(context));\n                });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Process the  {@link ContainerNetworkState}. Will result in filling the {@link RequestContext#commandInput} and {@link RequestContext#executor} properties.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "526", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerNetworkAdapterService.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerNetworkAdapterService.processOperation", "methodParameterType": "RequestContext#", "methodParameterName": "context#", "methodBody": "private void processOperation(RequestContext context) {\n        try {\n            switch (context.request.getOperationType()) {\n            case CREATE:\n                processCreateNetwork(context, 0);\n                break;\n\n            case DELETE:\n                processDeleteNetwork(context);\n                break;\n\n            case INSPECT:\n                inspectAndUpdateNetwork(context);\n                break;\n\n            case LIST_NETWORKS:\n                processListNetworks(context);\n                break;\n\n            case CONNECT:\n                processConnectNetwork(context);\n                break;\n\n            case DISCONNECT:\n                processDisconnectNetwork(context);\n                break;\n\n            default:\n                fail(context.request, new IllegalArgumentException(\n                        \"Unexpected request type: \" + context.request.getOperationType()\n                                + context.request.getRequestTrackingLog()));\n            }\n        } catch (Throwable e) {\n            fail(context.request, e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SwitchStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(SwitchStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)MethodInvocation)ExpressionStatement)SwitchStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Process the operation. This method should be called after  {@link RequestContext#request}, {@link RequestContext#networkState},  {@link RequestContext#commandInput} and{@link RequestContext#executor} have been filled.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "527", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerAdapterUtils.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerAdapterUtils.filterVolumeBindings", "methodParameterType": "String[]#", "methodParameterName": "volumes#", "methodBody": "public static List<String> filterVolumeBindings(String[] volumes) {\n        List<String> volumeBindings = new ArrayList<>();\n        if (volumes != null) {\n            for (String volume : volumes) {\n                VolumeBinding binding = VolumeBinding.fromString(volume);\n                if (binding.getHostPart() != null) {\n                    volumeBindings.add(volume);\n                }\n            }\n        }\n        return volumeBindings;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Filter out volume bindings without host-src or volume name. Each volume binding is a string in the following form: [volume-name|host-src:]container-dest[:ro] Both host-src, and container-dest must be an absolute path.", "call_func_name": ["java.util.ArrayList.<init>", "com.vmware.admiral.compute.container.volume.VolumeBinding.fromString", "com.vmware.admiral.compute.container.volume.VolumeBinding.getHostPart", "java.util.List.add"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "528", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerAdapterUtils.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerAdapterUtils.normalizeDockerError", "methodParameterType": "String#", "methodParameterName": "error#", "methodBody": "public static String normalizeDockerError(String error) {\n        String errorDetailLine = \"{\\\"errorDetail\\\":\";\n        String[] splitError = error.split(\"\\n\");\n        StringBuilder errorToReturn = new StringBuilder();\n\n        for (String line : splitError) {\n            if (line.startsWith(errorDetailLine)) {\n                errorToReturn.append(line);\n                errorToReturn.append(\"\\n\");\n            }\n        }\n\n        String errorLines = errorToReturn.toString().trim();\n\n        // If no error information is extracted, the parameter format\n        // is unknown, we better return the original error in order not to lose data.\n        if (errorLines.isEmpty()) {\n            return error;\n        }\n        return errorLines;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sometimes docker error message can be large and cause serialization errors, this method will extract the lines which contains error information.", "call_func_name": ["java.lang.String.split", "java.lang.StringBuilder.<init>", "java.lang.String.startsWith", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.trim", "java.lang.String.isEmpty"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], [""], [""], [""]], "passed_comments": "/"}, {"index": "529", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerAdapterUtils.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerAdapterUtils.exceptionFromFailedDockerOperation", "methodParameterType": "Operation#Throwable#", "methodParameterName": "failedOperation#failure#", "methodBody": "public static Exception exceptionFromFailedDockerOperation(Operation failedOperation,\n            Throwable failure) {\n        String reason;\n        if (failedOperation != null && failedOperation.getBodyRaw() != null) {\n            reason = Utils.toJson(normalizeDockerError(failedOperation.getBody(String.class)));\n        } else {\n            reason = \"Unknown reason.\";\n        }\n\n        String failureMessage = (failure == null) ? \"Unknown failure\" : failure.getMessage();\n        String errMsg = String.format(\"%s; Reason: %s\", failureMessage, reason);\n        return new Exception(errMsg, failure);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Constructs an  {@link Exception} that contains the Docker failure response as a message andhas the original  {@link Throwable} as a cause.", "call_func_name": ["com.vmware.xenon.common.Operation.getBodyRaw", "com.vmware.xenon.common.Operation.getBody", "com.vmware.admiral.adapter.docker.service.DockerAdapterUtils.normalizeDockerError", "com.vmware.xenon.common.Utils.toJson", "java.lang.Throwable.getMessage", "java.lang.String.format", "java.lang.Exception.<init>"], "call_func_parameter": [[""], ["java.lang.Class"], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.vmware.admiral.adapter.docker.service.DockerAdapterUtils.normalizeDockerError": "Sometimes docker error message can be large and cause serialization errors, this method will extract the lines which contains error information."}]}, {"index": "530", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerAdapterUtils.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerAdapterUtils.runtimeExceptionFromFailedDockerOperation", "methodParameterType": "Operation#Throwable#", "methodParameterName": "failedOperation#failure#", "methodBody": "public static RuntimeException runtimeExceptionFromFailedDockerOperation(\n            Operation failedOperation, Throwable failure) {\n        Exception checkedException = exceptionFromFailedDockerOperation(failedOperation, failure);\n        return new RuntimeException(checkedException.getMessage(), checkedException.getCause());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Constructs a  {@link RuntimeException} that contains the Docker failure response as a messageand has the original  {@link Throwable} as a cause.", "call_func_name": ["com.vmware.admiral.adapter.docker.service.DockerAdapterUtils.exceptionFromFailedDockerOperation", "java.lang.Exception.getMessage", "java.lang.Exception.getCause", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["com.vmware.xenon.common.Operation", "java.lang.Throwable"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"com.vmware.admiral.adapter.docker.service.DockerAdapterUtils.exceptionFromFailedDockerOperation": "Constructs an  {@link Exception} that contains the Docker failure response as a message andhas the original  {@link Throwable} as a cause."}]}, {"index": "531", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerAdapterUtils.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerAdapterUtils.filterHostConfigEmptyPortBindings", "methodParameterType": "Map<String,Object>#", "methodParameterName": "inspectMap#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static void filterHostConfigEmptyPortBindings(Map<String, Object> inspectMap) {\n        if (inspectMap == null) {\n            return;\n        }\n\n        Map<String, Object> hostConfig = (Map<String, Object>) inspectMap\n                .get(DOCKER_CONTAINER_HOST_CONFIG_PROP_NAME);\n        if (hostConfig == null) {\n            return;\n        }\n\n        Map<String, List<Map<String, String>>> portBindings = (Map<String, List<Map<String, String>>>) hostConfig\n                .get(DOCKER_CONTAINER_PORT_BINDINGS_PROP_NAME);\n        if (portBindings == null) {\n            return;\n        }\n\n        Iterator<Entry<String, List<Map<String, String>>>> portBindingsIt = portBindings.entrySet()\n                .iterator();\n        while (portBindingsIt.hasNext()) {\n            List<Map<String, String>> portBindingValue = portBindingsIt.next().getValue();\n\n            if (portBindingValue == null) {\n                portBindingsIt.remove();\n                continue;\n            }\n\n            Iterator<Map<String, String>> portBindingValueIt = portBindingValue.listIterator();\n            while (portBindingValueIt.hasNext()) {\n                Map<String, String> portBinding = portBindingValueIt.next();\n                if (\"\".equals(portBinding.getOrDefault(\"HostIp\", \"\"))\n                        && \"\".equals(portBinding.getOrDefault(\"HostPort\", \"\"))) {\n                    portBindingValueIt.remove();\n                }\n            }\n\n            if (portBindingValue.isEmpty()) {\n                portBindingsIt.remove();\n            }\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Filters the empty port bindings from the host config section retrieved when inspecting a container deployed on a VCH and connected to a network which uses the \"external\" driver. See Github issue #228.", "call_func_name": ["java.util.Map.get", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.Iterator.remove", "java.util.List.listIterator", "java.util.Map.getOrDefault", "java.lang.String.equals", "java.util.List.isEmpty"], "call_func_parameter": [["java.lang.Object"], [""], [""], [""], [""], [""], [""], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "532", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/CommandInput.java", "methodName": "com.vmware.admiral.adapter.docker.service.CommandInput.CommandInput", "methodParameterType": "CommandInput#", "methodParameterName": "toCopy#", "methodBody": "public CommandInput(CommandInput toCopy) {\n        withDockerUri(toCopy.getDockerUri())\n                .withCredentials(toCopy.getCredentials())\n                .withProperties(toCopy.getProperties());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Copy Constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "533", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/CommandInput.java", "methodName": "com.vmware.admiral.adapter.docker.service.CommandInput.getDockerUri", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public URI getDockerUri() {\n        return dockerUri;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the dockerUri", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "534", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/CommandInput.java", "methodName": "com.vmware.admiral.adapter.docker.service.CommandInput.withDockerUri", "methodParameterType": "URI#", "methodParameterName": "dockerUri#", "methodBody": "public CommandInput withDockerUri(URI dockerUri) {\n        this.dockerUri = dockerUri;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param dockerUri the dockerUri to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "535", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/CommandInput.java", "methodName": "com.vmware.admiral.adapter.docker.service.CommandInput.getCredentials", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AuthCredentialsServiceState getCredentials() {\n        return credentials;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the credentials", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "536", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/CommandInput.java", "methodName": "com.vmware.admiral.adapter.docker.service.CommandInput.withCredentials", "methodParameterType": "AuthCredentialsServiceState#", "methodParameterName": "credentials#", "methodBody": "public CommandInput withCredentials(AuthCredentialsServiceState credentials) {\n        this.credentials = credentials;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param credentials the credentials to set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "537", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/CommandInput.java", "methodName": "com.vmware.admiral.adapter.docker.service.CommandInput.getProperties", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, Object> getProperties() {\n        return properties;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the properties", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "538", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerVolumeAdapterService.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerVolumeAdapterService.processVolumeRequest", "methodParameterType": "RequestContext#", "methodParameterName": "context#", "methodBody": "private void processVolumeRequest(RequestContext context) {\n        if (context.request.getOperationType() == DISCOVER_VMDK_DATASTORE) {\n            handleExceptions(context.request, context.operation, () -> {\n                processDiscoverVmdkDatastore(context);\n            });\n            return;\n        }\n\n        Operation getVolumeState = Operation.createGet(context.request.getVolumeStateReference())\n                .setCompletion((o, ex) -> {\n                    if (ex != null) {\n                        fail(context.request, ex);\n                    } else {\n                        handleExceptions(context.request, context.operation, () -> {\n                            context.volumeState = o.getBody(ContainerVolumeState.class);\n                            processVolumeState(context);\n                        });\n                    }\n                });\n        handleExceptions(context.request, context.operation, () -> {\n            logFine(\"Fetching VolumeState: %s %s\",\n                    context.request.getRequestTrackingLog(),\n                    context.request.getVolumeStateReference());\n            sendRequest(getVolumeState);\n        });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Start processing the request. First fetches the  {@link ContainerVolumeState}. Will result in filling the  {@link RequestContext#volumeState} property.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "539", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerVolumeAdapterService.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerVolumeAdapterService.processVolumeState", "methodParameterType": "RequestContext#", "methodParameterName": "context#", "methodBody": "private void processVolumeState(RequestContext context) {\n        if (context.volumeState.originatingHostLink == null) {\n            fail(context.request,\n                    new IllegalArgumentException(\"originatingHostLink missing for volumen state \"\n                            + context.volumeState.documentSelfLink));\n            return;\n        }\n\n        getContainerHost(\n                context.request,\n                context.operation,\n                UriUtils.buildUri(getHost(), context.volumeState.originatingHostLink),\n                (computeState, commandInput) -> {\n                    context.commandInput = commandInput;\n                    context.executor = getCommandExecutor();\n                    handleExceptions(context.request, context.operation,\n                            () -> processOperation(context));\n                });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Process the  {@link ContainerVolumeState}. Will result in filling the {@link RequestContext#commandInput} and {@link RequestContext#executor} properties.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "540", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/DockerVolumeAdapterService.java", "methodName": "com.vmware.admiral.adapter.docker.service.DockerVolumeAdapterService.processOperation", "methodParameterType": "RequestContext#", "methodParameterName": "context#", "methodBody": "private void processOperation(RequestContext context) {\n        try {\n            switch (context.request.getOperationType()) {\n            case CREATE:\n                processCreateVolume(context);\n                break;\n\n            case DELETE:\n                processDeleteVolume(context);\n                break;\n\n            case INSPECT:\n                inspectAndUpdateVolume(context);\n                break;\n\n            case LIST_VOLUMES:\n                processListVolume(context);\n                break;\n\n            default:\n                fail(context.request, new IllegalArgumentException(\"Unexpected request type: \"\n                        + context.request.getOperationType()\n                        + context.request.getRequestTrackingLog()));\n            }\n        } catch (Throwable e) {\n            fail(context.request, e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SwitchStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(SwitchStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)MethodInvocation)ExpressionStatement)SwitchStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Process the operation. This method should be called after  {@link RequestContext#request}, {@link RequestContext#volumeState},  {@link RequestContext#commandInput} and{@link RequestContext#executor} have been filled. For direct operations,{@link RequestContext#operation} must also be filled", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "541", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/ContainerVolumeStateMapper.java", "methodName": "com.vmware.admiral.adapter.docker.service.ContainerVolumeStateMapper.propertiesToContainerVolumeState", "methodParameterType": "ContainerVolumeState#Map<String,Object>#", "methodParameterName": "volumeState#properties#", "methodBody": "public static void propertiesToContainerVolumeState(ContainerVolumeState volumeState,\n            Map<String, Object> properties) {\n\n        AssertUtil.assertNotNull(volumeState, \"volumeState\");\n        AssertUtil.assertNotNull(properties, \"properties\");\n\n        volumeState.driver = (String) properties.get(DOCKER_VOLUME_DRIVER_PROP_NAME);\n        volumeState.mountpoint = (String) properties.get(DOCKER_VOLUME_MOUNTPOINT_PROP_NAME);\n        volumeState.scope = (String) properties.get(DOCKER_VOLUME_SCOPE_PROP_NAME);\n\n        mapDriverOptions(volumeState, properties);\n\n        mapVolumeStatus(volumeState, properties);\n\n        updateVolumeName(volumeState, properties);\n\n        volumeState.powerState = PowerState.CONNECTED;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Convert generic properties from the given  {@link Map} to modeled properties in the given{@link ContainerVolumeState}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "542", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/RemoteApiDockerAdapterCommandExecutorImpl.java", "methodName": "com.vmware.admiral.adapter.docker.service.RemoteApiDockerAdapterCommandExecutorImpl.createNetwork", "methodParameterType": "CommandInput#CompletionHandler#", "methodParameterName": "input#completionHandler#", "methodBody": "@Override\n    public void createNetwork(CommandInput input, CompletionHandler completionHandler) {\n        createOrUpdateTargetSsl(input);\n\n        URI uri = UriUtils.extendUri(input.getDockerUri(), \"/networks/create\");\n        logger.info(\"Create network: \" + uri);\n\n        sendPost(uri, input.getProperties(), ClientMode.DEFAULT, completionHandler);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/#create-a-network Mandatory properties for <code>input</code>: <li> {@link DockerAdapterCommandExecutor#DOCKER_CONTAINER_NETWORK_NAME_PROP_NAME}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "543", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/RemoteApiDockerAdapterCommandExecutorImpl.java", "methodName": "com.vmware.admiral.adapter.docker.service.RemoteApiDockerAdapterCommandExecutorImpl.removeNetwork", "methodParameterType": "CommandInput#CompletionHandler#", "methodParameterName": "input#completionHandler#", "methodBody": "@Override\n    public void removeNetwork(CommandInput input, CompletionHandler completionHandler) {\n        createOrUpdateTargetSsl(input);\n\n        String idEncoded = UriEncoder.encode(input\n                .getProperties().get(DOCKER_CONTAINER_NETWORK_ID_PROP_NAME).toString());\n\n        String path = String.format(\"/networks/%s\", idEncoded);\n\n        URI uri = UriUtils.extendUri(input.getDockerUri(), path);\n        logger.info(\"Remove network: \" + uri);\n        // TODO there is no force remove for networks. All connected containers must be disconnected\n        // or stopped for this to succeed\n\n        sendDelete(uri, completionHandler);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/#remove-a-network", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "544", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/RemoteApiDockerAdapterCommandExecutorImpl.java", "methodName": "com.vmware.admiral.adapter.docker.service.RemoteApiDockerAdapterCommandExecutorImpl.listNetworks", "methodParameterType": "CommandInput#CompletionHandler#", "methodParameterName": "input#completionHandler#", "methodBody": "@Override\n    public void listNetworks(CommandInput input, CompletionHandler completionHandler) {\n        createOrUpdateTargetSsl(input);\n        URI uri = UriUtils.extendUri(input.getDockerUri(), \"/networks\");\n        logger.info(\"List networks: \" + uri);\n\n        sendGet(uri, null, completionHandler);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/#/list-networks", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "545", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/RemoteApiDockerAdapterCommandExecutorImpl.java", "methodName": "com.vmware.admiral.adapter.docker.service.RemoteApiDockerAdapterCommandExecutorImpl.connectContainerToNetwork", "methodParameterType": "CommandInput#CompletionHandler#", "methodParameterName": "input#completionHandler#", "methodBody": "@Override\n    public void connectContainerToNetwork(CommandInput input, CompletionHandler completionHandler) {\n        createOrUpdateTargetSsl(input);\n\n        String idEncoded = UriEncoder.encode(input\n                .getProperties().get(DOCKER_CONTAINER_NETWORK_ID_PROP_NAME).toString());\n\n        String path = String.format(\"/networks/%s/connect\", idEncoded);\n        URI uri = UriUtils.extendUri(input.getDockerUri(), path);\n        logger.info(\"Connect container to network: \" + uri);\n\n        sendPost(uri, input.getProperties(), ClientMode.DEFAULT, completionHandler);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/#/connect-a-container-to-a-network", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "546", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/RemoteApiDockerAdapterCommandExecutorImpl.java", "methodName": "com.vmware.admiral.adapter.docker.service.RemoteApiDockerAdapterCommandExecutorImpl.createVolume", "methodParameterType": "CommandInput#CompletionHandler#", "methodParameterName": "input#completionHandler#", "methodBody": "@Override\n    public void createVolume(CommandInput input, CompletionHandler completionHandler) {\n        createOrUpdateTargetSsl(input);\n\n        URI uri = UriUtils.extendUri(input.getDockerUri(), \"/volumes/create\");\n        logger.info(\"Creating volume: \" + uri);\n\n        sendPost(uri, input.getProperties(), ClientMode.DEFAULT, completionHandler);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/ Section 3.4 Volumes - Create a volume Mandatory properties for <code>input</code>: <li> {@link DockerAdapterCommandExecutor#DOCKER_VOLUME_NAME_PROP_NAME}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "547", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/RemoteApiDockerAdapterCommandExecutorImpl.java", "methodName": "com.vmware.admiral.adapter.docker.service.RemoteApiDockerAdapterCommandExecutorImpl.removeVolume", "methodParameterType": "CommandInput#CompletionHandler#", "methodParameterName": "input#completionHandler#", "methodBody": "@Override\n    public void removeVolume(CommandInput input, CompletionHandler completionHandler) {\n        createOrUpdateTargetSsl(input);\n\n        String path = String.format(\"/volumes/%s\",\n                input.getProperties().get(DOCKER_VOLUME_NAME_PROP_NAME));\n        URI uri = UriUtils.extendUri(input.getDockerUri(), path);\n        logger.info(\"Removing volume: \" + uri);\n\n        sendDelete(uri, completionHandler);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/ Section 3.4 Volumes - Remove a volume", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "548", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/RemoteApiDockerAdapterCommandExecutorImpl.java", "methodName": "com.vmware.admiral.adapter.docker.service.RemoteApiDockerAdapterCommandExecutorImpl.listVolumes", "methodParameterType": "CommandInput#CompletionHandler#", "methodParameterName": "input#completionHandler#", "methodBody": "@Override\n    public void listVolumes(CommandInput input, CompletionHandler completionHandler) {\n        createOrUpdateTargetSsl(input);\n        URI uri = UriUtils.extendUri(input.getDockerUri(), \"/volumes\");\n        logger.info(\"Listing volumes: \" + uri);\n\n        sendGet(uri, null, completionHandler);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/ Section 3.4 Volumes - List volumes", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "549", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/RemoteApiDockerAdapterCommandExecutorImpl.java", "methodName": "com.vmware.admiral.adapter.docker.service.RemoteApiDockerAdapterCommandExecutorImpl.inspectVolume", "methodParameterType": "CommandInput#CompletionHandler#", "methodParameterName": "input#completionHandler#", "methodBody": "@Override\n    public void inspectVolume(CommandInput input, CompletionHandler completionHandler) {\n        createOrUpdateTargetSsl(input);\n\n        String path = String.format(\"/volumes/%s\", input\n                .getProperties().get(DOCKER_VOLUME_NAME_PROP_NAME));\n        URI uri = UriUtils.extendUri(input.getDockerUri(), path);\n        logger.info(\"Inspecting volume: \" + uri);\n\n        sendGet(uri, input.getProperties(), completionHandler);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "https://docs.docker.com/engine/reference/api/docker_remote_api_v1.24/ Section 3.4 Volumes - Inspect a volume", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "550", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/RemoteApiDockerAdapterCommandExecutorImpl.java", "methodName": "com.vmware.admiral.adapter.docker.service.RemoteApiDockerAdapterCommandExecutorImpl.prepareRequest", "methodParameterType": "Operation#boolean#", "methodParameterName": "op#longRunningRequest#", "methodBody": "protected void prepareRequest(Operation op, boolean longRunningRequest) {\n        op.setReferer(host.getPublicUri())\n                .addRequestHeader(Operation.REQUEST_AUTH_TOKEN_HEADER, \"\")\n                .forceRemote();\n\n        if (op.getExpirationMicrosUtc() == 0) {\n            long timeout = longRunningRequest ?\n                    TimeUnit.SECONDS.toMicros(DOCKER_IMAGE_REQUEST_TIMEOUT_SECONDS) :\n                    TimeUnit.SECONDS.toMicros(DOCKER_REQUEST_TIMEOUT_SECONDS);\n\n            op.setExpiration(ServiceUtils.getExpirationTimeFromNowInMicros(timeout));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Common settings on all outgoing requests to the docker server", "call_func_name": ["com.vmware.xenon.common.ServiceHost.getPublicUri", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.xenon.common.Operation.addRequestHeader", "com.vmware.xenon.common.Operation.forceRemote", "com.vmware.xenon.common.Operation.getExpirationMicrosUtc", "java.util.concurrent.TimeUnit.toMicros", "com.vmware.admiral.common.util.ServiceUtils.getExpirationTimeFromNowInMicros", "com.vmware.xenon.common.Operation.setExpiration"], "call_func_parameter": [[""], ["java.net.URI"], ["java.lang.String", "java.lang.String"], [""], [""], ["long"], ["long"], ["long"]], "passed_comments": [{"com.vmware.admiral.common.util.ServiceUtils.getExpirationTimeFromNowInMicros": "Adds the supplied argument to the value from {@link com.vmware.xenon.common.Utils#getSystemNowMicrosUtc()} and returns an absoluteexpiration time in the future"}]}, {"index": "551", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/RemoteApiDockerAdapterCommandExecutorImpl.java", "methodName": "com.vmware.admiral.adapter.docker.service.RemoteApiDockerAdapterCommandExecutorImpl.extendUriWithQuery", "methodParameterType": "URI#CommandInput#", "methodParameterName": "targetUri#input#", "methodBody": "private URI extendUriWithQuery(URI targetUri, CommandInput input) {\n        List<String> parameters = new ArrayList<>();\n        for (Map.Entry<String, Object> property : input.getProperties().entrySet()) {\n            parameters.add(property.getKey());\n            parameters.add(String.valueOf(property.getValue()));\n        }\n\n        return UriUtils.extendUriWithQuery(targetUri, parameters.toArray(new String[0]));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Constructs the URI query parameters with the set of input properties from the command.", "call_func_name": ["java.util.ArrayList.<init>", "com.vmware.admiral.adapter.docker.service.CommandInput.getProperties", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.List.add", "java.lang.String.valueOf", "java.util.List.toArray", "com.vmware.xenon.common.UriUtils.extendUriWithQuery"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object[]"], ["java.net.URI", "java.lang.String[]"]], "passed_comments": [{"com.vmware.admiral.adapter.docker.service.CommandInput.getProperties": "@return the properties"}]}, {"index": "552", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/service/RemoteApiDockerAdapterCommandExecutorImpl.java", "methodName": "com.vmware.admiral.adapter.docker.service.RemoteApiDockerAdapterCommandExecutorImpl.createOrUpdateTargetSsl", "methodParameterType": "CommandInput#", "methodParameterName": "input#", "methodBody": "private void createOrUpdateTargetSsl(CommandInput input) {\n        createOrUpdateTargetSsl(input,  keyManager, trustManager);\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Update the dynamic KeyManager and TrustManager with the client and server certs for the current request", "call_func_name": ["com.vmware.admiral.adapter.docker.service.RemoteApiDockerAdapterCommandExecutorImpl.createOrUpdateTargetSsl"], "call_func_parameter": [["com.vmware.admiral.adapter.docker.service.CommandInput", "com.vmware.admiral.common.util.DelegatingX509KeyManager", "com.vmware.admiral.common.util.ServerX509TrustManager"]], "passed_comments": "/"}, {"index": "553", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/util/CommandUtil.java", "methodName": "com.vmware.admiral.adapter.docker.util.CommandUtil.spread", "methodParameterType": "String[]#", "methodParameterName": "command#", "methodBody": "public static String[] spread(String[] command) {\n        if (command == null) {\n            return null;\n        }\n        List<String> result = new ArrayList<String>();\n        State state = State.DEFAULT;\n        boolean escape = false;\n        for (String part : command) {\n            StringBuilder sb = new StringBuilder();\n            List<String> parts = new ArrayList<String>();\n            int len = part.length();\n            for (int i = 0; i < len; i++) {\n                char c = part.charAt(i);\n                if (escape) {\n                    escape = false;\n                    sb.append(c);\n                } else {\n                    switch (state) {\n                    case SINGLE:\n                        switch (c) {\n                        case '\\\\':\n                            sb.append(c);\n                            escape = true;\n                            break;\n                        case '\\'':\n                            // skipping '' in the array string item\n                            state = State.DEFAULT;\n                            break;\n                        default:\n                            sb.append(c);\n                        }\n                        break;\n                    case DOUBLE:\n                        switch (c) {\n                        case '\\\\':\n                            sb.append(c);\n                            escape = true;\n                            break;\n                        case '\"':\n                            // skipping \"\" in the array string item\n                            state = State.DEFAULT;\n                            break;\n                        default:\n                            sb.append(c);\n                        }\n                        break;\n                    case DEFAULT:\n                        switch (c) {\n                        case '\\\\':\n                            sb.append(c);\n                            state = State.DEFAULT;\n                            escape = true;\n                            break;\n                        case '\\'':\n                            // skipping '' in the array string item\n                            state = State.SINGLE;\n                            break;\n                        case '\"':\n                            // skipping \"\" in the array string item\n                            state = State.DOUBLE;\n                            break;\n                        default:\n                            if (!Character.isWhitespace(c)) {\n                                sb.append(c);\n                            } else if (sb.length() != 0) {\n                                parts.add(sb.toString());\n                                sb = new StringBuilder();\n                            }\n                        }\n                        break;\n                    default:\n                        throw new IllegalStateException(\"Invalid state\");\n                    }\n                }\n            }\n            parts.add(sb.toString());\n            result.addAll(parts);\n        }\n        return result.toArray(new String[] {});\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SwitchCase#SimpleName#CharacterLiteral#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SwitchStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#CharacterLiteral#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SwitchStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#CharacterLiteral#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#BreakStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SwitchStatement#BreakStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchStatement(SimpleName)SimpleName(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)SwitchStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchStatement(SimpleName)SimpleName(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)SwitchStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchStatement(SimpleName)SimpleName(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)SwitchStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)IfStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Inspects the provided command array and splits entries with unquoted white space into separate items.", "call_func_name": ["java.util.ArrayList.<init>", "java.lang.StringBuilder.<init>", "java.lang.String.length", "java.lang.String.charAt", "java.lang.StringBuilder.append", "java.lang.Character.isWhitespace", "java.lang.StringBuilder.length", "java.lang.StringBuilder.toString", "java.util.List.add", "java.lang.IllegalStateException.<init>", "java.util.List.addAll", "java.util.List.toArray"], "call_func_parameter": [[""], [""], [""], ["int"], ["char"], ["char"], [""], [""], ["java.lang.Object"], ["java.lang.String"], ["java.util.Collection"], ["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "554", "file": "/root/repos/repos30/admiral/adapter/docker/src/main/java/com/vmware/admiral/adapter/docker/util/DockerStreamUtil.java", "methodName": "com.vmware.admiral.adapter.docker.util.DockerStreamUtil.decodeFullRawResponse", "methodParameterType": "byte[]#", "methodParameterName": "body#", "methodBody": "public static String decodeFullRawResponse(byte[] body) throws EOFException {\n        StringBuilder sb = new StringBuilder();\n\n        ByteArrayInputStream is = new ByteArrayInputStream(body);\n\n        while (is.available() > 0) {\n            final byte[] headerBytes = new byte[HEADER_SIZE];\n            int n = is.read(headerBytes, 0, HEADER_SIZE);\n\n            if (n != HEADER_SIZE) {\n                throw new EOFException(\"Cannot read header of size \" + HEADER_SIZE);\n            }\n\n            final ByteBuffer header = ByteBuffer.wrap(headerBytes);\n            header.position(FRAME_SIZE_OFFSET);\n            final int frameSize = header.getInt();\n\n            // Read frame\n            final byte[] frame = new byte[frameSize];\n            n = is.read(frame, 0, frameSize);\n\n            if (n != frameSize) {\n                throw new EOFException(\"Cannot read frame of size \" + frameSize);\n            }\n\n            sb.append(new String(frame));\n        }\n\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decodes a byte array as fetched by xenon client and from {@link com.vmware.xenon.common.Operation#getBodyRaw()}. Implemented by the algorithms Docker described in https://docs.docker.com/engine/reference/api/docker_remote_api_v1.21/#attach-to-a-container. Applicable for requests attaching to a container, executing a command and reading stream.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.io.ByteArrayInputStream.<init>", "java.io.ByteArrayInputStream.available", "java.io.ByteArrayInputStream.read", "java.io.EOFException.<init>", "java.nio.ByteBuffer.wrap", "java.nio.ByteBuffer.position", "java.nio.ByteBuffer.getInt", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.<init>"], "call_func_parameter": [[""], ["byte[]"], [""], ["byte[]", "int", "int"], ["java.lang.String"], ["byte[]"], ["int"], [""], ["java.lang.String"], ["int"], [""], ["byte[]"]], "passed_comments": "/"}, {"index": "555", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/pks/service/PKSAdapterService.java", "methodName": "com.vmware.admiral.adapter.pks.service.PKSAdapterService.login", "methodParameterType": "Endpoint#AuthCredentialsServiceState#", "methodParameterName": "endpoint#authCredentials#", "methodBody": "private DeferredResult<PKSContext> login(Endpoint endpoint,\n            AuthCredentialsServiceState authCredentials) {\n        if (authCredentials == null) {\n            return DeferredResult.completed(PKSContext.create(endpoint, null));\n        }\n        AuthCredentialsType authCredentialsType = AuthCredentialsType.valueOf(authCredentials.type);\n        if (AuthCredentialsType.Password == authCredentialsType) {\n            String username = authCredentials.userEmail;\n            String password = EncryptionUtils.decrypt(authCredentials.privateKey);\n\n            return getClient()\n                    .login(endpoint.uaaEndpoint, username, password)\n                    .thenApply(uaaTokenResponse -> PKSContext.create(endpoint, uaaTokenResponse));\n        }\n\n        throw new IllegalArgumentException(\"Credential type \" + authCredentialsType.name()\n                + \" is not supported\");\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Login in PKS and returns PKS context instance with token.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "556", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/pks/service/PKSAdapterService.java", "methodName": "com.vmware.admiral.adapter.pks.service.PKSAdapterService.buildFakeEndpoint", "methodParameterType": "RequestContext#", "methodParameterName": "ctx#", "methodBody": "private DeferredResult<Endpoint> buildFakeEndpoint(RequestContext ctx) {\n        Endpoint e = new Endpoint();\n        e.customProperties = new HashMap<>(2);\n        e.customProperties.put(VALIDATE_CONNECTION, \"true\");\n        e.name = \"test-connection\";\n        e.uaaEndpoint = ctx.request.customProperties.get(Endpoint.FIELD_NAME_UAA_ENDPOINT);\n        e.apiEndpoint = ctx.request.customProperties.get(Endpoint.FIELD_NAME_API_ENDPOINT);\n        e.authCredentialsLink = ctx.request.customProperties.get(PKSConstants.CREDENTIALS_LINK);\n        ctx.endpoint = e;\n        DeferredResult<Endpoint> result = new DeferredResult<>();\n        result.complete(e);\n        return result;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#StringLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct fake  {@link Endpoint} state used only to validate connection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "557", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/pks/service/PKSAdapterService.java", "methodName": "com.vmware.admiral.adapter.pks.service.PKSAdapterService.expireCachedTokens", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void expireCachedTokens() {\n        ConcurrentMap<String, PKSContext> map = pksContextCache.asMap();\n        long currentTime = System.currentTimeMillis();\n        LinkedList<String> expiredKeys = new LinkedList<>();\n        map.forEach((key, pksContext) -> {\n            if (currentTime - pksContext.expireMillisTime > REMOVE_TOKEN_BEFORE_EXPIRE_MILLIS) {\n                expiredKeys.add(key);\n                logInfo(\"Removing expired token for %s\", key);\n            }\n        });\n        expiredKeys.forEach(pksContextCache::invalidate);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Expire cached tokens.", "call_func_name": ["com.google.common.cache.Cache.asMap", "java.lang.System.currentTimeMillis", "java.util.LinkedList.<init>", "java.util.function.BiConsumer.accept", "java.util.concurrent.ConcurrentMap.forEach", "java.lang.Object.getClass", "java.util.function.Consumer.accept", "java.util.LinkedList.forEach"], "call_func_parameter": [[""], [""], [""], ["com.vmware.admiral.adapter.pks.service.PKSAdapterService", "long", "java.util.LinkedList"], ["java.util.function.BiConsumer"], [""], ["com.google.common.cache.Cache"], ["java.util.function.Consumer"]], "passed_comments": "/"}, {"index": "558", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/pks/PKSContext.java", "methodName": "com.vmware.admiral.adapter.pks.PKSContext.calculateExpireTime", "methodParameterType": "String#", "methodParameterName": "expiresIn#", "methodBody": "private static long calculateExpireTime(String expiresIn) {\n        long l = 0;\n        try {\n            l = Long.parseLong(expiresIn);\n        } catch (Exception e) {\n            Utils.logWarning(\"Invalid format for response token expires_in field: %s\", expiresIn);\n        }\n        return System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(l);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds expiration time in milliseconds.", "call_func_name": ["java.lang.Long.parseLong", "com.vmware.xenon.common.Utils.logWarning", "java.lang.System.currentTimeMillis", "java.util.concurrent.TimeUnit.toMillis"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.Object[]"], [""], ["long"]], "passed_comments": "/"}, {"index": "559", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/pks/PKSRemoteClientService.java", "methodName": "com.vmware.admiral.adapter.pks.PKSRemoteClientService.login", "methodParameterType": "String#String#String#", "methodParameterName": "uaaEndpoint#user#pass#", "methodBody": "public DeferredResult<UAATokenResponse> login(String uaaEndpoint, String user, String pass) {\n        final DeferredResult<UAATokenResponse> deferredResult = new DeferredResult<>();\n\n        try {\n            URI uri = URI.create(uaaEndpoint);\n            uri = UriUtils.buildUri(uri, \"oauth/token\");\n\n            HashMap<String, String> params = new HashMap<>();\n            params.put(UAA_GRANT_TYPE, UAA_GRANT_TYPE_PASSWORD);\n            params.put(UAA_RESPONSE_TYPE, UAA_RESPONSE_TYPE_TOKEN);\n            params.put(UAA_USERNAME, user);\n            params.put(UAA_PASSWORD, pass);\n            params.put(UAA_CLIENT_ID, UAA_CLIENT_ID_CLI);\n            params.put(UAA_CLIENT_SECRET, UAA_CLIENT_SECRET_CLI);\n\n            String body = encodeParameters(params);\n\n            Operation op = buildLoginOperation(uri)\n                    .setBodyNoCloning(body)\n                    .setCompletion((o, e) -> {\n                        if (e != null) {\n                            logger.severe(() -> String.format(\"Error getting token for %s from %s,\"\n                                    + \" reason: %s - %s\", user, uaaEndpoint,\n                                    e.getClass().getSimpleName(), e.getMessage()));\n                            deferredResult.fail(e);\n                            return;\n                        }\n\n                        try {\n                            UAATokenResponse response = o.getBody(UAATokenResponse.class);\n                            logger.fine(() -> String.format(\"Received token for %s from %s\",\n                                    user, uaaEndpoint));\n\n                            deferredResult.complete(response);\n                        } catch (Exception e1) {\n                            deferredResult.fail(e1);\n                        }\n                    });\n\n            serviceClient.sendRequest(op);\n        } catch (Exception e) {\n            logger.severe(() -> String.format(\"Error sending login request for %s to %s,\"\n                    + \" reason: %s\", user, uaaEndpoint, e.getMessage()));\n\n            deferredResult.fail(e);\n        }\n\n        return deferredResult;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Obtains token from UAA service.", "call_func_name": ["com.vmware.xenon.common.DeferredResult.<init>", "java.net.URI.create", "com.vmware.xenon.common.UriUtils.buildUri", "java.util.HashMap.<init>", "java.util.HashMap.put", "com.vmware.admiral.adapter.pks.PKSRemoteClientService.encodeParameters", "com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildLoginOperation", "com.vmware.xenon.common.Operation.setBodyNoCloning", "com.vmware.xenon.common.ServiceClient.sendRequest", "java.util.function.Supplier.get", "java.util.logging.Logger.severe", "com.vmware.xenon.common.DeferredResult.fail"], "call_func_parameter": [[""], ["java.lang.String"], ["java.net.URI", "java.lang.String[]"], [""], ["java.lang.Object", "java.lang.Object"], ["java.util.HashMap"], ["java.net.URI"], ["java.lang.Object"], ["com.vmware.xenon.common.Operation"], ["java.lang.String", "java.lang.String", "java.lang.Exception"], ["java.util.function.Supplier"], ["java.lang.Throwable"]], "passed_comments": [{"com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildLoginOperation": "Creates operation to obtain UAA token. In case of error (status code >= 400) xenon overwrites the operation body with own message and this the original response body is lost. Treat this special case by appending the original response to the message of the {@link ServiceErrorResponse} object."}]}, {"index": "560", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/pks/PKSRemoteClientService.java", "methodName": "com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildGetOperation", "methodParameterType": "URI#PKSContext#", "methodParameterName": "uri#ctx#", "methodBody": "private Operation buildGetOperation(URI uri, PKSContext ctx) {\n        return buildOperation(Operation.createGet(uri), ctx);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates <code>GET</code> operation initialized with authorization header.", "call_func_name": ["com.vmware.xenon.common.Operation.createGet", "com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildOperation"], "call_func_parameter": [["java.net.URI"], ["com.vmware.xenon.common.Operation", "com.vmware.admiral.adapter.pks.PKSContext"]], "passed_comments": [{"com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildOperation": "Creates operation initialized with authorization header."}]}, {"index": "561", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/pks/PKSRemoteClientService.java", "methodName": "com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildPostOperation", "methodParameterType": "URI#PKSContext#", "methodParameterName": "uri#ctx#", "methodBody": "private Operation buildPostOperation(URI uri, PKSContext ctx) {\n        return buildOperation(Operation.createPost(uri), ctx);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates <code>POST</code> operation initialized with authorization header.", "call_func_name": ["com.vmware.xenon.common.Operation.createPost", "com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildOperation"], "call_func_parameter": [["java.net.URI"], ["com.vmware.xenon.common.Operation", "com.vmware.admiral.adapter.pks.PKSContext"]], "passed_comments": [{"com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildOperation": "Creates operation initialized with authorization header."}]}, {"index": "562", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/pks/PKSRemoteClientService.java", "methodName": "com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildDeleteOperation", "methodParameterType": "URI#PKSContext#", "methodParameterName": "uri#ctx#", "methodBody": "private Operation buildDeleteOperation(URI uri, PKSContext ctx) {\n        return buildOperation(Operation.createDelete(uri), ctx);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates <code>DELETE</code> operation initialized with authorization header.", "call_func_name": ["com.vmware.xenon.common.Operation.createDelete", "com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildOperation"], "call_func_parameter": [["java.net.URI"], ["com.vmware.xenon.common.Operation", "com.vmware.admiral.adapter.pks.PKSContext"]], "passed_comments": [{"com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildOperation": "Creates operation initialized with authorization header."}]}, {"index": "563", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/pks/PKSRemoteClientService.java", "methodName": "com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildPatchOperation", "methodParameterType": "URI#PKSContext#", "methodParameterName": "uri#ctx#", "methodBody": "private Operation buildPatchOperation(URI uri, PKSContext ctx) {\n        return buildOperation(Operation.createPatch(uri), ctx);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates <code>PATCH</code> operation initialized with authorization header.", "call_func_name": ["com.vmware.xenon.common.Operation.createPatch", "com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildOperation"], "call_func_parameter": [["java.net.URI"], ["com.vmware.xenon.common.Operation", "com.vmware.admiral.adapter.pks.PKSContext"]], "passed_comments": [{"com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildOperation": "Creates operation initialized with authorization header."}]}, {"index": "564", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/pks/PKSRemoteClientService.java", "methodName": "com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildOperation", "methodParameterType": "Operation#PKSContext#", "methodParameterName": "op#ctx#", "methodBody": "private Operation buildOperation(Operation op, PKSContext ctx) {\n        return op.addRequestHeader(Operation.ACCEPT_HEADER, Operation.MEDIA_TYPE_APPLICATION_JSON)\n                .addRequestHeader(Operation.AUTHORIZATION_HEADER, \"Bearer \" + ctx.accessToken)\n                .addRequestHeader(Operation.REQUEST_AUTH_TOKEN_HEADER, \"\")\n                .setReferer(host.getPublicUri())\n                .forceRemote();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates operation initialized with authorization header.", "call_func_name": ["com.vmware.xenon.common.Operation.addRequestHeader", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.vmware.xenon.common.ServiceHost.getPublicUri", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.xenon.common.Operation.forceRemote"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.net.URI"], [""]], "passed_comments": "/"}, {"index": "565", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/pks/PKSRemoteClientService.java", "methodName": "com.vmware.admiral.adapter.pks.PKSRemoteClientService.buildLoginOperation", "methodParameterType": "URI#", "methodParameterName": "uri#", "methodBody": "private Operation buildLoginOperation(URI uri) {\n        Operation o = new Operation() {\n            @Override\n            public Operation setBodyNoCloning(Object b) {\n                if (b instanceof ServiceErrorResponse) {\n                    ((ServiceErrorResponse) b).message += \" original body: \" + super.getBodyRaw();\n                }\n                return super.setBodyNoCloning(b);\n            }\n        };\n\n        o.setUri(uri)\n                .setAction(Service.Action.POST)\n                .setContentType(Operation.MEDIA_TYPE_APPLICATION_X_WWW_FORM_ENCODED)\n                .addRequestHeader(Operation.ACCEPT_HEADER, Operation.MEDIA_TYPE_APPLICATION_JSON)\n                .addRequestHeader(Operation.REQUEST_AUTH_TOKEN_HEADER, \"\")\n                .setReferer(host.getPublicUri())\n                .forceRemote();\n\n        return o;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#StringLiteral#SimpleName#SuperMethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SuperMethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess(InfixExpression(StringLiteral)StringLiteral(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates operation to obtain UAA token. In case of error (status code >= 400) xenon overwrites the operation body with own message and this the original response body is lost. Treat this special case by appending the original response to the message of the {@link ServiceErrorResponse} object.", "call_func_name": ["com.vmware.xenon.common.Operation.setUri", "com.vmware.xenon.common.Operation.setContentType", "com.vmware.xenon.common.Operation.addRequestHeader", "com.vmware.xenon.common.ServiceHost.getPublicUri", "com.vmware.xenon.common.Operation.setReferer", "com.vmware.xenon.common.Operation.forceRemote"], "call_func_parameter": [["java.net.URI"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], [""], ["java.net.URI"], [""]], "passed_comments": "/"}, {"index": "566", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/kubernetes/KubernetesContainerStateMapper.java", "methodName": "com.vmware.admiral.adapter.kubernetes.KubernetesContainerStateMapper.getId", "methodParameterType": "String#", "methodParameterName": "id#", "methodBody": "public static String getId(String id) {\n        if (id.startsWith(\"docker://\")) {\n            return id.substring(\"docker://\".length());\n        }\n        return id;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Change kubernetes container id", "call_func_name": ["java.lang.String.startsWith", "java.lang.String.length", "java.lang.String.substring"], "call_func_parameter": [["java.lang.String"], [""], ["int"]], "passed_comments": "/"}, {"index": "567", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/kubernetes/KubernetesApiEndpointsUtil.java", "methodName": "com.vmware.admiral.adapter.kubernetes.KubernetesApiEndpointsUtil.getEntityEndpoint", "methodParameterType": "String#", "methodParameterName": "entityType#", "methodBody": "public static String getEntityEndpoint(String entityType) {\n        if (entityType == null || entityType.isEmpty()) {\n            return null;\n        }\n\n        String endpoint = exclusionsMap.get(entityType);\n        if (endpoint != null) {\n            return UriUtils.URI_PATH_CHAR + endpoint;\n        }\n\n        return pluralize(UriUtils.URI_PATH_CHAR + entityType.toLowerCase());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "With a few exceptions, the API endpoint for a specific Kubernetes entity matches the lower case plural form of the entity kind.", "call_func_name": ["java.lang.String.isEmpty", "java.util.Map.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.toLowerCase", "com.vmware.admiral.adapter.kubernetes.KubernetesApiEndpointsUtil.pluralize"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"]], "passed_comments": [{"com.vmware.admiral.adapter.kubernetes.KubernetesApiEndpointsUtil.pluralize": "Tries to construct the plural form of a given singular word. The following basic rules are applied: <ul> <li>if the singular ends with \"s\" or \"x\" append \"es\"</li> <li>if the singular ends with \"y\" after a consonant, remove the \"y\" and append \"ies\"</li> <li>in all other cases append \"s\"</li> </ul> This method does not cover some of the more advanced plural rules of the English language like f -> ves, o -> oes and irregular plurals. However, it should be just fine to construct most of the Kubernetes paths. For paths that cannot be constructed with this method, add an entry to the  {@link #exclusionsMap}."}]}, {"index": "568", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/kubernetes/KubernetesApiEndpointsUtil.java", "methodName": "com.vmware.admiral.adapter.kubernetes.KubernetesApiEndpointsUtil.initExclusiionsMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private static Map<String, String> initExclusiionsMap() {\n        Map<String, String> exclusions = new HashMap<>();\n        exclusions.put(KubernetesUtil.ENDPOINTS_TYPE, \"endpoints\");\n        return exclusions;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Build the map of exclusions to the general lowercase -> pluralize rule.", "call_func_name": ["java.util.HashMap.<init>", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "569", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/kubernetes/KubernetesApiEndpointsUtil.java", "methodName": "com.vmware.admiral.adapter.kubernetes.KubernetesApiEndpointsUtil.pluralize", "methodParameterType": "String#", "methodParameterName": "singular#", "methodBody": "private static String pluralize(String singular) {\n        int lastCharIndex = singular.length() - 1;\n        StringBuilder sb = new StringBuilder(singular);\n\n        if (sb.codePointAt(lastCharIndex) == 's'\n                || sb.codePointAt(lastCharIndex) == 'x') {\n\n            sb.append(\"es\");\n\n        } else if (sb.codePointAt(lastCharIndex) == 'y'\n                && isConsonant(sb.codePointAt(lastCharIndex - 1))) {\n\n            sb.setLength(lastCharIndex); // remove the trailing \"y\"\n            sb.append(\"ies\");\n\n        } else {\n            sb.append(\"s\");\n        }\n\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tries to construct the plural form of a given singular word. The following basic rules are applied: <ul> <li>if the singular ends with \"s\" or \"x\" append \"es\"</li> <li>if the singular ends with \"y\" after a consonant, remove the \"y\" and append \"ies\"</li> <li>in all other cases append \"s\"</li> </ul> This method does not cover some of the more advanced plural rules of the English language like f -> ves, o -> oes and irregular plurals. However, it should be just fine to construct most of the Kubernetes paths. For paths that cannot be constructed with this method, add an entry to the  {@link #exclusionsMap}.", "call_func_name": ["java.lang.String.length", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.codePointAt", "java.lang.StringBuilder.append", "com.vmware.admiral.adapter.kubernetes.KubernetesApiEndpointsUtil.isConsonant", "java.lang.StringBuilder.setLength", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], ["java.lang.String"], ["int"], ["int"], [""]], "passed_comments": "/"}, {"index": "570", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/kubernetes/ApiUtil.java", "methodName": "com.vmware.admiral.adapter.kubernetes.ApiUtil.getApiVersionPrefix", "methodParameterType": "String#", "methodParameterName": "apiVersion#", "methodBody": "public static String getApiVersionPrefix(String apiVersion) {\n        if (apiVersion == null) {\n            return null;\n        }\n\n        if (isCoreGroupVersion(apiVersion)) {\n            return UriUtils.buildUriPath(API_PREFIX_LEGACY, apiVersion);\n        }\n\n        return UriUtils.buildUriPath(API_PREFIX, apiVersion);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "API calls to legacy API groups use the legacy API prefix \"api\". Calls to the other versioned APIs use the new prefix \"apis\".", "call_func_name": ["com.vmware.admiral.adapter.kubernetes.ApiUtil.isCoreGroupVersion", "com.vmware.xenon.common.UriUtils.buildUriPath"], "call_func_parameter": [["java.lang.String"], ["java.lang.String[]"]], "passed_comments": [{"com.vmware.admiral.adapter.kubernetes.ApiUtil.isCoreGroupVersion": "Checks if this apiVersion string denotes a core (legacy) group. The only legacy group is \"v1\"."}]}, {"index": "571", "file": "/root/repos/repos30/admiral/adapter/kubernetes/src/main/java/com/vmware/admiral/adapter/kubernetes/ApiUtil.java", "methodName": "com.vmware.admiral.adapter.kubernetes.ApiUtil.isCoreGroupVersion", "methodParameterType": "String#", "methodParameterName": "apiVersion#", "methodBody": "public static boolean isCoreGroupVersion(String apiVersion) {\n        return API_VERSION_V1.equals(apiVersion);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if this apiVersion string denotes a core (legacy) group. The only legacy group is \"v1\".", "call_func_name": ["java.lang.String.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "572", "file": "/root/repos/repos30/admiral/adapter/registry/src/main/java/com/vmware/admiral/adapter/registry/service/RegistrySearchResponse.java", "methodName": "com.vmware.admiral.adapter.registry.service.RegistrySearchResponse.merge", "methodParameterType": "RegistrySearchResponse#", "methodParameterName": "other#", "methodBody": "public void merge(RegistrySearchResponse other) {\n        AssertUtil.assertNotNull(other, \"other\");\n\n        // pagination won't make sense so don't deal with pageSize and numPages\n\n        if (other.results != null) {\n            numResults += other.numResults;\n\n            if (results == null) {\n                results = new ArrayList<Result>();\n            }\n            results.addAll(other.results);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Add results from another response into this one", "call_func_name": ["com.vmware.admiral.common.util.AssertUtil.assertNotNull", "java.util.ArrayList.<init>", "java.util.List.addAll"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], [""], ["java.util.Collection"]], "passed_comments": "/"}, {"index": "573", "file": "/root/repos/repos30/admiral/adapter/registry/src/main/java/com/vmware/admiral/adapter/registry/service/RegistryAdapterService.java", "methodName": "com.vmware.admiral.adapter.registry.service.RegistryAdapterService.ensureNamespaceExists", "methodParameterType": "Result#", "methodParameterName": "result#", "methodBody": "private void ensureNamespaceExists(Result result) {\n        DockerImage image = DockerImage.fromImageName(result.name);\n        if (image.getNamespace() == null) {\n            result.name = String.format(\"%s/%s\", DEFAULT_NAMESPACE, image.getRepository());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Ensures that an image name has a namespace prefix. An image pushed to a V1 registry without namespace prefix is processed in the following way: <registry_name>/<repository_name> -> <registry_name>/library/<repository_name> Results from V1 queries, however, do not contain the default prefix. This could be a problem later when we instantiate containers based on these images. An image pushed to a V2 registry does not get the default prefix.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "574", "file": "/root/repos/repos30/admiral/adapter/registry/src/main/java/com/vmware/admiral/adapter/registry/service/RegistryAdapterService.java", "methodName": "com.vmware.admiral.adapter.registry.service.RegistryAdapterService.getToken", "methodParameterType": "TokenServiceResponse#", "methodParameterName": "r#", "methodBody": "private String getToken(TokenServiceResponse r) {\n        if (r != null) {\n            if (r.token != null && !r.token.isEmpty()) {\n                return r.token;\n            } else if (r.access_token != null && !r.access_token.isEmpty()) {\n                return r.access_token;\n            }\n        }\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get token or access_token from token response instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "575", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/RequestBrokerService.java", "methodName": "com.vmware.admiral.request.RequestBrokerService.createNewIfNotExist", "methodParameterType": "String#Runnable#", "methodParameterName": "taskLink#callback#", "methodBody": "private void createNewIfNotExist(String taskLink, Runnable callback) {\n        sendRequest(Operation\n                .createGet(this, taskLink)\n                .setCompletion((o, e) -> {\n                    if (o.getStatusCode() == Operation.STATUS_CODE_NOT_FOUND) {\n                        callback.run();\n                        return;\n                    }\n                    if (e != null) {\n                        failTask(\"Fail: \" + e.getMessage(), e);\n                        return;\n                    }\n                    logInfo(\"Task %s is already started.\", taskLink);\n                }));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Calls given callback if document does not exist. This utility method is used to create new task only if it has not been created yet.", "call_func_name": ["com.vmware.xenon.common.Operation.createGet", "com.vmware.admiral.request.RequestBrokerService.sendRequest"], "call_func_parameter": [["com.vmware.xenon.common.Service", "java.lang.String"], ["com.vmware.xenon.common.Operation"]], "passed_comments": "/"}, {"index": "576", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/ClusteringTaskService.java", "methodName": "com.vmware.admiral.request.ClusteringTaskService.sortResourcesByImportance", "methodParameterType": "Set<ResourceState>#", "methodParameterName": "resourcesStates#", "methodBody": "private List<ResourceState> sortResourcesByImportance(\n            Set<ResourceState> resourcesStates) {\n\n        List<ResourceState> sortedResources = resourcesStates.stream()\n                .sorted((l, r) -> powerState(l) - powerState(r))\n                .collect(Collectors.toList());\n\n        return sortedResources;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "\"Sort\" the resources in a list by their status from most important to least important. The idea is to easily identify the resources to be deleted if we are to decrease the resource count", "call_func_name": ["java.util.Set.stream", "java.util.Comparator.compare", "java.util.stream.Stream.sorted", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], ["java.util.Comparator"], [""], ["java.util.stream.Collector"]], "passed_comments": "/"}, {"index": "577", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/ClusteringTaskService.java", "methodName": "com.vmware.admiral.request.ClusteringTaskService.retrieveResources", "methodParameterType": "ClusteringTaskState#Consumer<Set<ResourceState>>#", "methodParameterName": "state#callbackFunction#", "methodBody": "private void retrieveResources(ClusteringTaskState state,\n            Consumer<Set<ResourceState>> callbackFunction) {\n        try {\n            Class<? extends ResourceState> stateClass = getStateClass(state.resourceType);\n            ServiceDocumentQuery<? extends ResourceState> query = new ServiceDocumentQuery<>(\n                    getHost(), stateClass);\n\n            QueryTask queryTask = QueryUtil.buildPropertyQuery(stateClass,\n                    ContainerState.FIELD_NAME_DESCRIPTION_LINK, state.resourceDescriptionLink);\n\n            if (state.contextId != null) {\n                queryTask.querySpec.query.addBooleanClause(new QueryTask.Query()\n                        .setTermPropertyName(getCompositeComponentLinkFieldName(stateClass))\n                        .setTermMatchValue(getCompositeComponentId(stateClass, state.contextId)));\n            }\n\n            queryTask.querySpec.options = EnumSet.of(QueryOption.EXPAND_CONTENT);\n\n            Set<ResourceState> resourcesStates = new HashSet<>();\n            query.query(queryTask, (r) -> {\n                if (r.hasException()) {\n                    logWarning(\"Exception during retrieving of resources. Error: [%s]\",\n                            Utils.toString(r.getException()));\n                } else if (r.hasResult()) {\n                    resourcesStates.add(r.getResult());\n                } else {\n                    callbackFunction.accept(resourcesStates);\n                }\n            });\n\n        } catch (Throwable e) {\n            throw new IllegalArgumentException(e);\n        }\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieves all compositions (group of templates) and their resources by provided type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "578", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/compute/ComputeRemovalTaskService.java", "methodName": "com.vmware.admiral.request.compute.ComputeRemovalTaskService.queryContainerHostsAutoGeneratedZonesLinks", "methodParameterType": "ComputeRemovalTaskState#Consumer<List<String>>#", "methodParameterName": "state#completionHandler#", "methodBody": "private void queryContainerHostsAutoGeneratedZonesLinks(ComputeRemovalTaskState state,\n            Consumer<List<String>> completionHandler) {\n        QueryTask queryTask = QueryUtil.buildPropertyQuery(ComputeState.class,\n                QuerySpecification.buildCompositeFieldName(\n                        ComputeState.FIELD_NAME_CUSTOM_PROPERTIES,\n                        ComputeConstants.AUTOGENERATED_PLACEMENT_ZONE_PROP_NAME),\n                Boolean.toString(true),\n                QuerySpecification.buildCompositeFieldName(\n                        ComputeState.FIELD_NAME_CUSTOM_PROPERTIES,\n                        ComputeConstants.COMPUTE_CONTAINER_HOST_PROP_NAME),\n                Boolean.toString(true));\n        QueryUtil.addListValueClause(queryTask, ComputeState.FIELD_NAME_SELF_LINK,\n                state.resourceLinks);\n        QueryUtil.addExpandOption(queryTask);\n\n        HashSet<String> generatedPzLinks = new HashSet<>();\n        new ServiceDocumentQuery<ComputeState>(getHost(), ComputeState.class).query(queryTask,\n                (r) -> {\n                    if (r.hasException()) {\n                        // Do not fail the removal because of a failed query\n                        logWarning(\"Failed to query for auto-generated placement zones: %s\",\n                                Utils.toString(r.getException()));\n                        completionHandler.accept(null);\n                    } else if (r.hasResult()) {\n                        ComputeState hostState = r.getResult();\n                        if (hostState.resourcePoolLink != null) {\n                            generatedPzLinks.add(hostState.resourcePoolLink);\n                        }\n                    } else {\n                        completionHandler.accept(new ArrayList<>(generatedPzLinks));\n                    }\n                });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds a list of the document links of all auto-generated placement zones for the container hosts that are being removed. On success, the <code>completionHandler</code> is called with the built list as an argument. On failure the completionHandler is called with a <code>null</code> argument (the removal task is never failed).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "579", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/composition/CompositionGraph.java", "methodName": "com.vmware.admiral.request.composition.CompositionGraph.calculateGraph", "methodParameterType": "ServiceHost#CompositeDescriptionExpanded#", "methodParameterName": "host#compositeDescription#", "methodBody": "public List<ResourceNode> calculateGraph(ServiceHost host,\n            CompositeDescriptionExpanded compositeDescription) {\n        AssertUtil.assertNotEmpty(compositeDescription.componentDescriptions, \"serviceDocuments\");\n\n        populateResourceNodesByName(compositeDescription.componentDescriptions);\n        calculateResourceDependsOnNodes(host, compositeDescription);\n        addNamedVolumeConstraints(compositeDescription.componentDescriptions);\n        calculateResourceNodeDependents();\n\n        // Store dependOn ResourceNodes by ResourceNode name.\n        final HashMap<String, Set<String>> dependsOn = new HashMap<>(\n                compositeDescription.componentDescriptions.size());\n\n        // First level nodes are the ones that don't depends on any other task.\n        final Queue<ResourceNode> queue = calculateQueueWithFirstLevelNodes(dependsOn);\n\n        // At least one node that has no dependency is needed to start\n        if (queue.isEmpty()) {\n            throw new LocalizableValidationException(\"Cyclic dependency detected.\", \"request.composition.cyclic.dependency\");\n        }\n\n        // Store all nodes that are currently processed to check for cyclic dependencies\n        final List<ResourceNode> processed = new ArrayList<>(\n                compositeDescription.componentDescriptions.size());\n\n        topologicalSortProcessingByBreathFirstSearch(queue, dependsOn, processed);\n\n        if (processed.size() != resourceNodesByName().size()) {\n            throw new LocalizableValidationException(\"Cyclic dependency detected after processing.\",\n                    \"request.composition.cyclic.dependency.processing\");\n        }\n\n        return processed;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Calculate the dependency order of the  {@link ContainerDescription}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "580", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/composition/CompositionGraph.java", "methodName": "com.vmware.admiral.request.composition.CompositionGraph.calculateGraph", "methodParameterType": "CompositeDescriptionExpanded#", "methodParameterName": "compositeDescription#", "methodBody": "public List<ResourceNode> calculateGraph(\n            final CompositeDescriptionExpanded compositeDescription)\n            throws IllegalArgumentException {\n\n        return calculateGraph(null, compositeDescription);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Calculate the dependency order of the  {@link ContainerDescription}s.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "581", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/pks/PKSClusterProvisioningTaskService.java", "methodName": "com.vmware.admiral.request.pks.PKSClusterProvisioningTaskService.isConnectionException", "methodParameterType": "Throwable#", "methodParameterName": "e#", "methodBody": "private boolean isConnectionException(Throwable e) {\n        return e instanceof IOException || e.getCause() instanceof IOException;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if exception is about unable to connect to remote server - e.g. UnknownHostException, ConnectException, NoRouteToHostException, etc.", "call_func_name": ["java.lang.Throwable.getCause"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "582", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/pks/PKSClusterProvisioningTaskService.java", "methodName": "com.vmware.admiral.request.pks.PKSClusterProvisioningTaskService.isLocalizableValidationException", "methodParameterType": "Throwable#", "methodParameterName": "e#", "methodBody": "private boolean isLocalizableValidationException(Throwable e) {\n        return e instanceof LocalizableValidationException\n                || e.getCause() instanceof LocalizableValidationException;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check if exception is about failure to import ssl certificate and not about core xenon failures", "call_func_name": ["java.lang.Throwable.getCause"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "583", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/allocation/filter/AffinityConstraint.java", "methodName": "com.vmware.admiral.request.allocation.filter.AffinityConstraint.fromString", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "public static AffinityConstraint fromString(String str) {\n        AffinityConstraint constraint = new AffinityConstraint();\n        final boolean anti_affinity = str.startsWith(ANTI_AFFINITY_PREFIX);\n        if (anti_affinity) {\n            str = str.replaceFirst(ANTI_AFFINITY_PREFIX, \"\");\n            constraint.antiAffinity = true;\n        }\n        if (str.endsWith(SOFT.getValue())) {\n            constraint.name = str.substring(0, str.length() - SOFT.getValue().length());\n            constraint.type = SOFT;\n        } else if (str.endsWith(HARD.getValue())) {\n            constraint.name = str.substring(0, str.length() - HARD.getValue().length());\n            constraint.type = HARD;\n        } else {\n            constraint.name = str;\n            constraint.type = HARD;\n        }\n\n        return constraint;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses an  {@code AffinityConstraint} instance from the given string representation.", "call_func_name": ["com.vmware.admiral.request.allocation.filter.AffinityConstraint.<init>", "java.lang.String.startsWith", "java.lang.String.replaceFirst", "java.lang.String.endsWith", "java.lang.String.length", "java.lang.String.substring"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["int", "int"]], "passed_comments": "/"}, {"index": "584", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/allocation/filter/AffinityFilters.java", "methodName": "com.vmware.admiral.request.allocation.filter.AffinityFilters.getUniqueDependencies", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<String> getUniqueDependencies() {\n        final Map<String, AffinityConstraint> constraints = new HashMap<>();\n        for (final AffinityFilter filter : filters) {\n            if (filter.hasEffectOnDependency()) {\n                mergeUniqueConstraints(constraints, filter.getAffinityConstraints());\n            }\n        }\n\n        return constraints.values().stream().map((c) -> c.name).collect(Collectors.toSet());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#QualifiedName#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get all unique constraints not taking into consideration the affinity flag or the type. The soft constraints will be overridden in case there are hard constraints with the same name.", "call_func_name": ["java.util.HashMap.<init>", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.vmware.admiral.request.allocation.filter.AffinityFilter.hasEffectOnDependency", "com.vmware.admiral.request.allocation.filter.AffinityFilter.getAffinityConstraints", "com.vmware.admiral.request.allocation.filter.AffinityFilters.mergeUniqueConstraints", "java.util.Map.values", "java.util.Collection.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toSet", "java.util.stream.Stream.collect"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.util.Map", "java.util.Map"], [""], [""], [""], ["java.util.function.Function"], [""], ["java.util.stream.Collector"]], "passed_comments": [{"com.vmware.admiral.request.allocation.filter.AffinityFilter.hasEffectOnDependency": "flag whether this filter has an effect on dependency order or just on host placement"}, {"com.vmware.admiral.request.allocation.filter.AffinityFilter.getAffinityConstraints": "Get all container names that the current selection filter will based the criteria on."}]}, {"index": "585", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/allocation/filter/HostSelectionFilter.java", "methodName": "com.vmware.admiral.request.allocation.filter.HostSelectionFilter.filter", "methodParameterType": "T#Map<String,HostSelection>#HostSelectionFilterCompletion#", "methodParameterName": "state#hostSelectionMap#callback#", "methodBody": "void filter(T state, Map<String, HostSelection> hostSelectionMap,\n            HostSelectionFilterCompletion callback);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Filter the list of compute host links based on the affinity rules.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "586", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/allocation/filter/AffinityFilter.java", "methodName": "com.vmware.admiral.request.allocation.filter.AffinityFilter.isActive", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isActive();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Indicates if a given filter is active.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "587", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/allocation/filter/AffinityFilter.java", "methodName": "com.vmware.admiral.request.allocation.filter.AffinityFilter.getAffinityConstraints", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, AffinityConstraint> getAffinityConstraints();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get all container names that the current selection filter will based the criteria on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "588", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/allocation/filter/AffinityFilter.java", "methodName": "com.vmware.admiral.request.allocation.filter.AffinityFilter.hasEffectOnDependency", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default boolean hasEffectOnDependency() {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "flag whether this filter has an effect on dependency order or just on host placement", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "589", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/allocation/filter/ImplicitDependencyFilter.java", "methodName": "com.vmware.admiral.request.allocation.filter.ImplicitDependencyFilter.isActive", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isActive();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Indicates if a given filter is active.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "590", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/allocation/filter/ImplicitDependencyFilter.java", "methodName": "com.vmware.admiral.request.allocation.filter.ImplicitDependencyFilter.apply", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void apply();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get all container names that the current selection filter will based the criteria on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "591", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/ContainerAllocationTaskService.java", "methodName": "com.vmware.admiral.request.ContainerAllocationTaskService.getMinParam", "methodParameterType": "long#Number#", "methodParameterName": "placementLimit#descLimit#", "methodBody": "public static Long getMinParam(long placementLimit, Number descLimit) {\n        // get the defined one. placementLimit will probably be changed to Long\n        if (descLimit == null) {\n            return placementLimit;\n        } else if (placementLimit == 0) { // 0 means no limit, so get the other one\n            return descLimit.longValue();\n        } else if (descLimit.longValue() == 0) {\n            return placementLimit;\n        } else {\n            return Math.min(placementLimit, descLimit.longValue());\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Returns the minimum. Handles nulls and treats 0 as no limit", "call_func_name": ["java.lang.Long.valueOf", "java.lang.Number.longValue", "java.lang.Math.min"], "call_func_parameter": [["long"], [""], ["long", "long"]], "passed_comments": "/"}, {"index": "592", "file": "/root/repos/repos30/admiral/request/src/main/java/com/vmware/admiral/request/ContainerAllocationTaskService.java", "methodName": "com.vmware.admiral.request.ContainerAllocationTaskService.mapVolumes", "methodParameterType": "ContainerDescription#HostSelection#", "methodParameterName": "cd#hostSelection#", "methodBody": "private static String[] mapVolumes(ContainerDescription cd, HostSelection hostSelection) {\n\n        if (cd.volumes == null || cd.volumes.length == 0) {\n            return null;\n        }\n\n        return Arrays.stream(cd.volumes).map((v) -> hostSelection\n                .mapNames(new String[] { v })[0])\n                .filter(Objects::nonNull).toArray(String[]::new);\n\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#MethodInvocation#NumberLiteral#ArrayAccess#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#CreationReference#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(CreationReference(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType)CreationReference)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Takes volumes from ContainerDescription in format [/host-directory:/container-directory] or [namedVolume:/container-directory] and puts the suffix for host part of the volume name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "593", "file": "/root/repos/repos30/admiral/tiller/client/common/src/main/java/com/vmware/admiral/tiller/client/TillerClientProviderUtil.java", "methodName": "com.vmware.admiral.tiller.client.TillerClientProviderUtil.getTillerClientProvider", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static TillerClientProvider getTillerClientProvider() {\n        return getTillerClientProvider(null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return a {@link TillerClientProvider} instance", "call_func_name": ["com.vmware.admiral.tiller.client.TillerClientProviderUtil.getTillerClientProvider"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"com.vmware.admiral.tiller.client.TillerClientProviderUtil.getTillerClientProvider": "@param preferredProviderClassName the class name, canonical class name or simple class name of a preferred {@link TillerClientProvider} implementation"}]}, {"index": "594", "file": "/root/repos/repos30/admiral/tiller/client/common/src/main/java/com/vmware/admiral/tiller/client/TillerClientProviderUtil.java", "methodName": "com.vmware.admiral.tiller.client.TillerClientProviderUtil.getTillerClientProvider", "methodParameterType": "String#", "methodParameterName": "preferredProviderClassName#", "methodBody": "public static TillerClientProvider getTillerClientProvider(String preferredProviderClassName) {\n        ServiceLoader<TillerClientProvider> loader = ServiceLoader.load(TillerClientProvider.class);\n        Iterator<TillerClientProvider> iterator = loader.iterator();\n\n        // if there is no preference, just return the first provider\n        boolean noPreference = preferredProviderClassName == null\n                || preferredProviderClassName.isEmpty();\n        if (noPreference && iterator.hasNext()) {\n            return iterator.next();\n        }\n\n        // otherwise, iterate over the result and look for the specified class name\n        TillerClientProvider provider = null;\n        while (iterator.hasNext()) {\n            TillerClientProvider currentProvider = iterator.next();\n            Class<? extends TillerClientProvider> clazz = currentProvider.getClass();\n            // the preference might be any of the class name, canonical name or simple name\n            if (Stream.of(clazz.getName(), clazz.getCanonicalName(), clazz.getSimpleName())\n                    .anyMatch(preferredProviderClassName::equals)) {\n                return currentProvider;\n            }\n\n            // this guarantees that invoking with no preference and with\n            // non-satisfiable preference will return the same result\n            if (provider == null) {\n                provider = currentProvider;\n            }\n        }\n\n        if (provider != null) {\n            return provider;\n        }\n\n        throw new TillerClientException(\"No TillerClientProvider implementation was loaded\");\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "@param preferredProviderClassName the class name, canonical class name or simple class name of a preferred {@link TillerClientProvider} implementation", "call_func_name": ["java.util.ServiceLoader.load", "java.util.ServiceLoader.iterator", "java.lang.String.isEmpty", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Object.getClass", "java.lang.Class.getName", "java.lang.Class.getCanonicalName", "java.lang.Class.getSimpleName", "java.util.stream.Stream.of", "java.util.function.Predicate.test", "java.util.stream.Stream.anyMatch", "com.vmware.admiral.tiller.client.TillerClientException.<init>"], "call_func_parameter": [["java.lang.Class"], [""], [""], [""], [""], [""], [""], [""], [""], ["java.lang.Object[]"], ["java.lang.String"], ["java.util.function.Predicate"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "595", "file": "/root/repos/repos30/admiral/tiller/client/common/src/main/java/com/vmware/admiral/tiller/client/TillerClient.java", "methodName": "com.vmware.admiral.tiller.client.TillerClient.healthCheck", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CompletableFuture<Void> healthCheck();", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Checks Tiller overall health.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "596", "file": "/root/repos/repos30/admiral/tiller/client/common/src/main/java/com/vmware/admiral/tiller/client/TillerClient.java", "methodName": "com.vmware.admiral.tiller.client.TillerClient.isClosed", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isClosed();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return whether this client has been closed. All calls to methods will fail after the clienthas been closed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "597", "file": "/root/repos/repos30/admiral/tiller/client/common/src/main/java/com/vmware/admiral/tiller/client/TillerClientProvider.java", "methodName": "com.vmware.admiral.tiller.client.TillerClientProvider.createTillerClient", "methodParameterType": "TillerConfig#", "methodParameterName": "tillerConfig#", "methodBody": "public TillerClient createTillerClient(TillerConfig tillerConfig);", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Creates a  {@link TillerClient} instance that connects to the Tiller specified in the passed{@link TillerConfig}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "598", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static SwaggerDocumentationAssembler create() {\n        return new SwaggerDocumentationAssembler();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return A new instance of {@link SwaggerDocumentationAssembler}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "599", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.setInfo", "methodParameterType": "Info#", "methodParameterName": "info#", "methodBody": "public SwaggerDocumentationAssembler setInfo(Info info) {\n        this.swagger.setInfo(info);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify the  {@link Info} object to be used by Swagger. This objectcontains general information about the API such as the title, license, etc.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "600", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.setHost", "methodParameterType": "String#", "methodParameterName": "host#", "methodBody": "public SwaggerDocumentationAssembler setHost(String host) {\n        this.swagger.setHost(host);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify the base address on which all documented services are available.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "601", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.setBasePath", "methodParameterType": "String#", "methodParameterName": "basePath#", "methodBody": "public SwaggerDocumentationAssembler setBasePath(String basePath) {\n        this.swagger.setBasePath(basePath);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify the base path under which all documented services are available.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "602", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.setIncludePackages", "methodParameterType": "String[]#", "methodParameterName": "includePackages#", "methodBody": "public SwaggerDocumentationAssembler setIncludePackages(String[] includePackages) {\n        this.includePackages = Arrays.asList(includePackages);\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify which packages to search for documented classes. The packages are passed as an array of Strings with the format \"com.vmware.admiral.etc\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "603", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.setSchemes", "methodParameterType": "Scheme[]#", "methodParameterName": "schemes#", "methodBody": "public SwaggerDocumentationAssembler setSchemes(Scheme[] schemes) {\n        this.swagger.setSchemes(Arrays.asList(schemes));\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify the HTTP schemes to be used in making requests.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "604", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.build", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Swagger build() {\n        prepareSwagger();\n        return this.swagger;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets up the  {@link Swagger} object with all the gathered necessary informationand returns its instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "605", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.prepareSwagger", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void prepareSwagger() {\n\n        includePackages.forEach(includePackage -> {\n            Reflections reflections = new Reflections(includePackage);\n\n            reflections.getTypesAnnotatedWith(ApiModel.class)\n                    .forEach(clazz -> createApiModel(clazz));\n\n            reflections.getTypesAnnotatedWith(Api.class)\n                    .forEach(clazz -> createApi(clazz));\n        });\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Retrieve all documented API classes and all documented API Models and populate them in  {@link Swagger} accordingly. The API classes are all classes annotated with{@link Api} which are used to handle REST calls. The API Models are all classesannotated with  {@link ApiModel} and are representations of objects which arepersisted in the database. These models can be used as request bodies or as request responses.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "606", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.createApiModel", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "private void createApiModel(Class<?> clazz) {\n        swagger.addDefinition(clazz.getSimpleName(), model(clazz));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add the  {@code clazz} model to Swagger. The model is a class annotated with{@link ApiModel}. The definition in  {@link Swagger} is in the form of a mapwith the keys being the class names and the values - a  {@link Model} objectdefined by Swagger. The models contain different  {@link io.swagger.models.properties.Property}objects which vary depending on the class fields.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "607", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.createApi", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "private void createApi(Class<?> clazz) {\n        setTags(clazz);\n        setPaths(clazz);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add the  {@code clazz} tags and operations to Swagger. The tags are documentedin the  {@link Api} annotation and are used to logically group REST operationsunder concrete lists. The operations are methods annotated by  {@link ApiOperation}and are used to handle REST calls to the service.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "608", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.setTags", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "private void setTags(Class<?> clazz) {\n        if (this.swagger.getTags() == null) {\n            this.swagger.setTags(new LinkedList<>());\n        }\n\n        this.swagger.getTags().addAll(getApiTagsAsList(clazz));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add the service's tags to Swagger.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "609", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.setPaths", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "private void setPaths(Class<?> clazz) {\n        String rootPath = clazz.getAnnotation(Path.class).value();\n        String[] operationTags = clazz.getAnnotation(Api.class).tags();\n\n        getApiMethods(clazz).forEach(method -> {\n            String path = rootPath + methodPath(method);\n\n            if (this.swagger.getPath(path) == null) {\n                this.swagger.path(path, new io.swagger.models.Path());\n            }\n\n            if (method.isAnnotationPresent(GET.class)) {\n                this.swagger.getPath(path).get(createOperation(method, operationTags));\n            }\n            if (method.isAnnotationPresent(PUT.class)) {\n                this.swagger.getPath(path).put(createOperation(method, operationTags));\n            }\n            if (method.isAnnotationPresent(POST.class)) {\n                this.swagger.getPath(path).post(createOperation(method, operationTags));\n            }\n            if (method.isAnnotationPresent(PATCH.class)) {\n                this.swagger.getPath(path).patch(createOperation(method, operationTags));\n            }\n            if (method.isAnnotationPresent(OPTIONS.class)) {\n                this.swagger.getPath(path).options(createOperation(method, operationTags));\n            }\n            if (method.isAnnotationPresent(HEAD.class)) {\n                this.swagger.getPath(path).head(createOperation(method, operationTags));\n            }\n            if (method.isAnnotationPresent(DELETE.class)) {\n                this.swagger.getPath(path).delete(createOperation(method, operationTags));\n            }\n        });\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add the REST operation descriptions to Swagger. The descriptions are stored in  {@link Swagger#paths} which is a map, containing the path of the operationas key and the descriptions of the different HTTP methods as value. The descriptions are stored in a separate  {@link io.swagger.models.Path} object which has an{@link Operation} definition for each method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "610", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.createOperation", "methodParameterType": "Method#String[]#", "methodParameterName": "method#operationTags#", "methodBody": "private Operation createOperation(Method method, String[] operationTags) {\n        ApiOperation apiOperation = method.getAnnotation(ApiOperation.class);\n        ApiResponses apiResponses = method.getAnnotation(ApiResponses.class);\n        ApiImplicitParams apiParams = method.getAnnotation(ApiImplicitParams.class);\n\n        Operation operation = new Operation()\n                .deprecated(method.isAnnotationPresent(Deprecated.class))\n                .operationId(apiOperation.nickname())\n                .summary(apiOperation.value())\n                .description(apiOperation.notes())\n                .tags(Arrays.asList(operationTags));\n\n        if (apiResponses != null) {\n            Arrays.asList(apiResponses.value())\n                    .forEach(apiResponse -> {\n                        Response responseMessage = new Response().description(apiResponse.message());\n                        RefProperty responseObject = new RefProperty();\n\n                        /**\n                         * Use the {@link ApiOperation#response()} for status code 200 if defined.\n                         * Otherwise use the {@link ApiResponse#response()} if defined.\n                         */\n                        if (apiResponse.code() == STATUS_CODE_OK && !apiOperation.response().equals(Void.class)) {\n                            responseObject.asDefault(apiOperation.response().getSimpleName());\n                            responseMessage.schema(responseObject);\n                        } else if (!apiResponse.response().equals(Void.class)) {\n                            responseObject.asDefault(apiResponse.response().getSimpleName());\n                            responseMessage.schema(responseObject);\n                        }\n\n                        operation.response(apiResponse.code(), responseMessage);\n                    });\n        }\n\n        if (apiParams != null) {\n            Arrays.asList(apiParams.value())\n                    .forEach(apiParam -> {\n                        setOperationParam(operation, apiParam);\n                    });\n        }\n\n        return operation;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add the description of a specific HTTP method to Swagger. The method is documented in an  {@link Operation} object, which contains the method's description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "611", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationAssembler.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationAssembler.setOperationParam", "methodParameterType": "Operation#ApiImplicitParam#", "methodParameterName": "operation#apiParam#", "methodBody": "private void setOperationParam(Operation operation, ApiImplicitParam apiParam) {\n        switch (apiParam.paramType()) {\n        case SwaggerDocumentation.ParamTypes.PARAM_TYPE_BODY:\n            operation.parameter(bodyParameter(apiParam));\n            break;\n        case SwaggerDocumentation.ParamTypes.PARAM_TYPE_FORM:\n            operation.parameter(formParameter(apiParam));\n            break;\n        case SwaggerDocumentation.ParamTypes.PARAM_TYPE_HEADER:\n            operation.parameter(headerParameter(apiParam));\n            break;\n        case SwaggerDocumentation.ParamTypes.PARAM_TYPE_PATH:\n            operation.parameter(pathParameter(apiParam));\n            break;\n        case SwaggerDocumentation.ParamTypes.PARAM_TYPE_QUERY:\n            operation.parameter(queryParameter(apiParam));\n            break;\n        default:\n            break;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#BreakStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(BreakStatement)BreakStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Add the  {@code operation} parameter depending on its type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "612", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationUtils.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationUtils.getApiTagsAsList", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public static List<Tag> getApiTagsAsList(Class<?> clazz) {\n        return Arrays.asList(clazz.getAnnotation(Api.class).tags())\n                .stream()\n                .map(tag -> new Tag().name(tag))\n                .collect(Collectors.toList());\n\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a list of  {@link Tag} objects created from the {@link Api#tags()} property.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "613", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationUtils.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationUtils.getApiMethods", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public static Stream<Method> getApiMethods(Class<?> clazz) {\n        return Arrays.asList(clazz.getMethods())\n                .stream()\n                .filter(method -> method.isAnnotationPresent(ApiOperation.class));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a stream of all class methods annotated with  {@link ApiOperation}. These are the methods responsible for handling REST calls to the service described in {@code clazz}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "614", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationUtils.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationUtils.methodPath", "methodParameterType": "Method#", "methodParameterName": "method#", "methodBody": "public static String methodPath(Method method) {\n        return method.getAnnotation(Path.class) == null ?\n                SwaggerDocumentation.BASE_PATH :\n                method.getAnnotation(Path.class).value();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Build the URI for the REST operation executed by the  {@code method} to beused in  {@link Swagger#paths}. If the method has no  {@link Path} annotationthe  {@link SwaggerDocumentation#BASE_PATH} is used.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "615", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationUtils.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationUtils.bodyParameter", "methodParameterType": "ApiImplicitParam#", "methodParameterName": "apiParam#", "methodBody": "public static BodyParameter bodyParameter(ApiImplicitParam apiParam) {\n        BodyParameter bodyParameter = new BodyParameter()\n                .name(apiParam.name())\n                .description(apiParam.value())\n                .schema(new RefModel().asDefault(apiParam.dataTypeClass().getSimpleName()));\n        bodyParameter.setRequired(apiParam.required());\n        return bodyParameter;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Build a  {@link BodyParameter} Swagger object defined by {@link ApiImplicitParam}to use for documentation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "616", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationUtils.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationUtils.formParameter", "methodParameterType": "ApiImplicitParam#", "methodParameterName": "apiParam#", "methodBody": "public static FormParameter formParameter(ApiImplicitParam apiParam) {\n        return new FormParameter()\n                .name(apiParam.name())\n                .description(apiParam.value())\n                .required(apiParam.required())\n                .type(apiParam.dataType());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Build a  {@link FormParameter} Swagger object defined by {@link ApiImplicitParam}to use for documentation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "617", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationUtils.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationUtils.headerParameter", "methodParameterType": "ApiImplicitParam#", "methodParameterName": "apiParam#", "methodBody": "public static HeaderParameter headerParameter(ApiImplicitParam apiParam) {\n        return new HeaderParameter()\n                .name(apiParam.name())\n                .description(apiParam.value())\n                .required(apiParam.required())\n                .type(apiParam.dataType());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Build a  {@link HeaderParameter} Swagger object defined by {@link ApiImplicitParam}to use for documentation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "618", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationUtils.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationUtils.pathParameter", "methodParameterType": "ApiImplicitParam#", "methodParameterName": "apiParam#", "methodBody": "public static PathParameter pathParameter(ApiImplicitParam apiParam) {\n        return new PathParameter()\n                .name(apiParam.name())\n                .description(apiParam.value())\n                .required(apiParam.required())\n                .type(apiParam.dataType());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Build a  {@link PathParameter} Swagger object defined by {@link ApiImplicitParam}to use for documentation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "619", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationUtils.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationUtils.queryParameter", "methodParameterType": "ApiImplicitParam#", "methodParameterName": "apiParam#", "methodBody": "public static QueryParameter queryParameter(ApiImplicitParam apiParam) {\n        return new QueryParameter()\n                .name(apiParam.name())\n                .description(apiParam.value())\n                .required(apiParam.required())\n                .type(apiParam.dataType());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Build a  {@link QueryParameter} Swagger object defined by {@link ApiImplicitParam}to use for documentation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "620", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationUtils.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationUtils.model", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public static Model model(Class<?> clazz) {\n        ApiModel annotation = clazz.getAnnotation(ApiModel.class);\n\n        ModelImpl model = new ModelImpl()\n                .name(annotation.value())\n                .description(annotation.description());\n\n        Arrays.asList(clazz.getFields())\n                .stream()\n                .filter(field -> field.isAnnotationPresent(ApiModelProperty.class))\n                .forEach(field -> {\n                    model.property(field.getName(), property(field));\n                });\n\n        return model;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Build a  {@link Model} Swagger object defined by {@link ApiModel} to use fordocumentation. The model is described by the  {@code clazz} object and containsfields, of which only the ones annotated with  {@link ApiModelProperty} aregoing to appear in the documentation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "621", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/swagger/SwaggerDocumentationUtils.java", "methodName": "com.vmware.admiral.host.swagger.SwaggerDocumentationUtils.property", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "private static Property property(Field field) {\n        ApiModelProperty annotation = field.getAnnotation(ApiModelProperty.class);\n\n        Class<?> fieldType = field.getType();\n\n        if (String.class.isAssignableFrom(fieldType)) {\n            return new StringProperty()\n                    .required(annotation.required())\n                    .example(annotation.example().isEmpty() ? null : annotation.example())\n                    .description(annotation.value().isEmpty() ? null : annotation.value());\n        }\n        if (Map.class.isAssignableFrom(fieldType)) {\n            MapProperty property = new MapProperty();\n            property.setRequired(annotation.required());\n            return property\n                    .description(annotation.value());\n        }\n        if (fieldType.isArray()) {\n            ArrayProperty property = new ArrayProperty();\n            property.setRequired(annotation.required());\n            return property\n                    .example(annotation.example())\n                    .description(annotation.value());\n        }\n        if (Double.class.isAssignableFrom(fieldType) || \"double\".equals(fieldType.getName())) {\n            DoubleProperty property = new DoubleProperty();\n            property.setRequired(annotation.required());\n            return property\n                    .example(annotation.example())\n                    .description(annotation.value());\n        }\n        if (Float.class.isAssignableFrom(fieldType) || \"float\".equals(fieldType.getName())) {\n            FloatProperty property = new FloatProperty();\n            property.setRequired(annotation.required());\n            return property\n                    .example(annotation.example())\n                    .description(annotation.value());\n        }\n        if (Integer.class.isAssignableFrom(fieldType) || \"int\".equals(fieldType.getName())) {\n            IntegerProperty property = new IntegerProperty();\n            property.setRequired(annotation.required());\n            property.setExample(annotation.example());\n            return property\n                    .description(annotation.value());\n        }\n        if (Long.class.isAssignableFrom(fieldType) || \"long\".equals(fieldType.getName())) {\n            LongProperty property = new LongProperty();\n            property.setRequired(annotation.required());\n            property.setExample(annotation.example());\n            return property\n                    .description(annotation.value());\n        }\n        if (Boolean.class.isAssignableFrom(fieldType) || \"boolean\".equals(fieldType.getName())) {\n            BooleanProperty property = new BooleanProperty();\n            property.setRequired(annotation.required());\n            property.setExample(annotation.example());\n            return property\n                    .description(annotation.value());\n        }\n\n        ObjectProperty property = new ObjectProperty()\n                .required(annotation.required())\n                .example(annotation.example())\n                .description(annotation.value());\n        return property;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)MethodInvocation(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Build a  {@link Property} object defined by {@link ApiModelProperty} to documentthe fields of an  {@link ApiModel}. The property object returned is going to vary depending on the field type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "622", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/ManagementHost.java", "methodName": "com.vmware.admiral.host.ManagementHost.registerOperationInterceptors", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void registerOperationInterceptors() {\n        InUsePlacementZoneInterceptor.register(interceptors);\n        SchedulerPlacementZoneInterceptor.register(interceptors);\n        CompositeComponentInterceptor.register(interceptors);\n        AuthCredentialsInterceptor.register(interceptors);\n        UnauthorizedDeleteInterceptor.register(interceptors);\n        ProjectInterceptor.register(interceptors);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Registers service operation interceptors.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "623", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/ManagementHost.java", "methodName": "com.vmware.admiral.host.ManagementHost.startClosureServices", "methodParameterType": "ServiceHost#boolean#", "methodParameterName": "host#startMockHostAdapterInstance#", "methodBody": "protected void startClosureServices(ServiceHost host, boolean startMockHostAdapterInstance)\n            throws Throwable {\n        host.log(Level.INFO, \"Closure services starting...\");\n        HostInitClosureServiceConfig.startServices(host, startMockHostAdapterInstance);\n        host.log(Level.INFO, \"Closure services started.\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Start all services related to closures support.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "624", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/ManagementHost.java", "methodName": "com.vmware.admiral.host.ManagementHost.startCommonServices", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void startCommonServices() throws Throwable {\n        this.log(Level.INFO, \"Common service starting ...\");\n\n        HostInitCommonServiceConfig.startServices(this);\n        HostInitAuthServiceConfig.startServices(this);\n        HostInitUpgradeServiceConfig.startServices(this);\n\n        registerForServiceAvailability(AuthBootstrapService.startTask(this), true,\n                AuthBootstrapService.FACTORY_LINK);\n        if (!ConfigurationUtil.isVca()) {\n            registerForServiceAvailability(ProjectsTransformationBootstrapService.startTask(this),\n                    true,\n                    ProjectsTransformationBootstrapService.FACTORY_LINK,\n                    ProjectFactoryService.SELF_LINK);\n        }\n\n        this.log(Level.INFO, \"Common services started.\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#BooleanLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#BooleanLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation(BooleanLiteral)BooleanLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation(BooleanLiteral)BooleanLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Start all services required to support management of infrastructure and applications.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "625", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/ManagementHost.java", "methodName": "com.vmware.admiral.host.ManagementHost.startManagementServices", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void startManagementServices() throws Throwable {\n        this.log(Level.INFO, \"Management service starting ...\");\n\n        registerForServiceAvailability(CaSigningCertService.startTask(this), true,\n                CaSigningCertService.FACTORY_LINK);\n\n        HostInitComputeServicesConfig.startServices(this, false);\n        HostInitComputeBackgroundServicesConfig.startServices(this);\n        HostInitRequestServicesConfig.startServices(this);\n        HostInitImageServicesConfig.startServices(this);\n        HostInitUiServicesConfig.startServices(this);\n        HostInitHarborServices.startServices(this, startMockHostAdapterInstance);\n        HostInitDockerAdapterServiceConfig.startServices(this, startMockHostAdapterInstance);\n        HostInitKubernetesAdapterServiceConfig.startServices(this, startMockHostAdapterInstance);\n        HostInitRegistryAdapterServiceConfig.startServices(this);\n\n        this.log(Level.INFO, \"Management services started.\");\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#BooleanLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation(BooleanLiteral)BooleanLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Start all services required to support management of infrastructure and applications.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "626", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/ManagementHost.java", "methodName": "com.vmware.admiral.host.ManagementHost.startSwaggerService", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void startSwaggerService() {\n\n        this.log(Level.INFO, \"Swagger service starting ...\");\n\n        // Serve Swagger 2.0 compatible API description\n        SwaggerDescriptorService swagger = new SwaggerDescriptorService();\n\n        // Exclude some core services\n        swagger.setExcludedPrefixes(\n                \"/favicon.ico\",\n                \"/index.html\",\n                \"/index-embedded.html\",\n                \"/inline.\",\n                \"/fontawesome-webfont.\",\n                \"/ng\",\n                \"/ogui\",\n                \"/iaas\", // TODO - remove it!\n                \"/META-INF/\",\n                \"/assets/\",\n                \"/login/assets/\",\n                \"/container-icons/\",\n                \"/container-identicons/\",\n                \"/container-image-icons\",\n                \"/main.\",\n                \"/vendor.\",\n                \"/scripts.\",\n                \"/styles.\",\n                \"/rp\",\n                \"/subscriptions\",\n                \"/core/\");\n        swagger.setExcludeUtilities(true);\n\n        // Provide API metainfo\n        Info apiInfo = new Info();\n        apiInfo.setVersion(ReleaseConstants.CURRENT_API_VERSION);\n        apiInfo.setTitle(\"Admiral\");\n\n        apiInfo.setLicense(new License().name(\"Apache 2.0\")\n                .url(\"https://github.com/vmware/admiral/blob/master/LICENSE\"));\n        apiInfo.setContact(new Contact().url(\"https://github.com/vmware/admiral\"));\n\n        swagger.setInfo(apiInfo);\n\n        // Serve swagger on default uri\n        this.startService(swagger);\n\n        this.log(Level.INFO, \"Swagger service started. Checkout Swagger UI at: %s%s/ui\",\n                this.getUri(), ServiceUriPaths.SWAGGER);\n\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Start Swagger service.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "627", "file": "/root/repos/repos30/admiral/host/src/main/java/com/vmware/admiral/host/ManagementHost.java", "methodName": "com.vmware.admiral.host.ManagementHost.setEncryptionFilePermissions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void setEncryptionFilePermissions() throws Throwable {\n        String encFileParam = System.getProperty(EncryptionUtils.ENCRYPTION_KEY);\n        if (encFileParam == null) {\n            return;\n        }\n\n        File f = new File(encFileParam);\n        File parent = f.getParentFile();\n\n        // create parent folder if it does not exist\n        if (!parent.exists() && !parent.mkdirs()) {\n            log(Level.SEVERE, \"Cannot create folders %s for encryption file.\",\n                    parent.getAbsolutePath());\n            throw new IOException(\"Cannot create \" + parent.getAbsolutePath());\n        }\n\n        // dummy call to initialize the EncryptionUtils and create the encryption file\n        EncryptionUtils.encrypt(null);\n\n        try {\n            // set file permissions\n            setPermissionsToOwner(f);\n        } catch (Throwable e) {\n            log(Level.SEVERE, \"Cannot change permissions of file %s. Error: %s\",\n                    encFileParam, e.getMessage());\n            throw e;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Sets read/write permissions only to the owner of the encryption file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}]