[{"index": "0", "file": "/root/repos/repos8/avro/lang/java/grpc/src/main/java/org/apache/avro/grpc/AvroGrpcUtils.java", "methodName": "org.apache.avro.grpc.AvroGrpcUtils.getServiceName", "methodParameterType": "Class#", "methodParameterName": "iface#", "methodBody": "public static String getServiceName(Class iface) {\n    Protocol protocol = getProtocol(iface);\n    return protocol.getNamespace() + \".\" + protocol.getName();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Provides a a unique gRPC service name for Avro RPC interface or its subclass Callback Interface.", "call_func_name": ["org.apache.avro.grpc.AvroGrpcUtils.getProtocol", "java.lang.StringBuilder.<init>", "org.apache.avro.Protocol.getNamespace", "java.lang.StringBuilder.append", "org.apache.avro.Protocol.getName", "java.lang.StringBuilder.toString"], "call_func_parameter": [["java.lang.Class"], [""], [""], ["java.lang.String"], [""], [""]], "passed_comments": [{"org.apache.avro.grpc.AvroGrpcUtils.getProtocol": "Gets the  {@link Protocol} from the Avro Interface."}, {"org.apache.avro.Protocol.getNamespace": "The namespace of this protocol. Qualifies its name."}, {"org.apache.avro.Protocol.getName": "The name of this protocol."}]}, {"index": "1", "file": "/root/repos/repos8/avro/lang/java/grpc/src/main/java/org/apache/avro/grpc/AvroGrpcUtils.java", "methodName": "org.apache.avro.grpc.AvroGrpcUtils.getProtocol", "methodParameterType": "Class#", "methodParameterName": "iface#", "methodBody": "public static Protocol getProtocol(Class iface) {\n    try {\n      Protocol p = (Protocol) (iface.getDeclaredField(\"PROTOCOL\").get(null));\n      return p;\n    } catch (NoSuchFieldException e) {\n      throw new AvroRuntimeException(\"Not a Specific protocol: \" + iface);\n    } catch (IllegalAccessException e) {\n      throw new AvroRuntimeException(e);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ParenthesizedExpression#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ParenthesizedExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ParenthesizedExpression)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Gets the  {@link Protocol} from the Avro Interface.", "call_func_name": ["java.lang.Class.getDeclaredField", "java.lang.reflect.Field.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos8/avro/lang/java/grpc/src/main/java/org/apache/avro/grpc/AvroGrpcUtils.java", "methodName": "org.apache.avro.grpc.AvroGrpcUtils.skipAndCloseQuietly", "methodParameterType": "InputStream#", "methodParameterName": "stream#", "methodBody": "static void skipAndCloseQuietly(InputStream stream) {\n    try {\n      if (stream instanceof KnownLength && stream.available() > 0) {\n        stream.skip(stream.available());\n      } else {\n        // don't expect this for an inputStream provided by gRPC but just to be on safe\n        // side.\n        byte[] skipBuffer = new byte[4096];\n        while (true) {\n          int read = stream.read(skipBuffer);\n          if (read < skipBuffer.length) {\n            break;\n          }\n        }\n      }\n      stream.close();\n    } catch (Exception e) {\n      LOG.log(Level.WARNING, \"failed to skip/close the input stream, may cause memory leak\", e);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#BooleanLiteral#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#BreakStatement#Block#IfStatement#Block#WhileStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(IfStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(BooleanLiteral)BooleanLiteral(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement)Block)WhileStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Skips any unread bytes from InputStream and closes it.", "call_func_name": ["java.io.InputStream.available", "java.io.InputStream.skip", "java.io.InputStream.read", "java.io.InputStream.close", "java.util.logging.Logger.log"], "call_func_parameter": [[""], ["long"], ["byte[]"], [""], ["java.util.logging.Level", "java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos8/avro/lang/java/grpc/src/main/java/org/apache/avro/grpc/AvroGrpcServer.java", "methodName": "org.apache.avro.grpc.AvroGrpcServer.createServiceDefinition", "methodParameterType": "Class#Object#", "methodParameterName": "iface#impl#", "methodBody": "public static ServerServiceDefinition createServiceDefinition(Class iface, Object impl) {\n    Protocol protocol = AvroGrpcUtils.getProtocol(iface);\n    ServiceDescriptor serviceDescriptor = ServiceDescriptor.create(iface);\n    ServerServiceDefinition.Builder serviceDefinitionBuilder = ServerServiceDefinition\n        .builder(serviceDescriptor.getServiceName());\n    Map<String, Protocol.Message> messages = protocol.getMessages();\n    for (Method method : iface.getMethods()) {\n      Protocol.Message msg = messages.get(method.getName());\n      // setup a method handler only if corresponding message exists in avro protocol.\n      if (msg != null) {\n        UnaryMethodHandler methodHandler = msg.isOneWay() ? new OneWayUnaryMethodHandler(impl, method)\n            : new UnaryMethodHandler(impl, method);\n        serviceDefinitionBuilder.addMethod(\n            serviceDescriptor.getMethod(method.getName(), MethodDescriptor.MethodType.UNARY),\n            ServerCalls.asyncUnaryCall(methodHandler));\n      }\n    }\n    return serviceDefinitionBuilder.build();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link ServerServiceDefinition} for Avro Interface and itsimplementation that can be passed a gRPC Server.", "call_func_name": ["org.apache.avro.grpc.AvroGrpcUtils.getProtocol", "org.apache.avro.grpc.ServiceDescriptor.create", "org.apache.avro.grpc.ServiceDescriptor.getServiceName", "io.grpc.ServerServiceDefinition.builder", "org.apache.avro.Protocol.getMessages", "java.lang.Class.getMethods", "java.lang.reflect.Method.getName", "java.util.Map.get"], "call_func_parameter": [["java.lang.Class"], ["java.lang.Class"], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.grpc.AvroGrpcUtils.getProtocol": "Gets the  {@link Protocol} from the Avro Interface."}, {"org.apache.avro.grpc.ServiceDescriptor.create": "Creates a Service Descriptor."}, {"org.apache.avro.grpc.ServiceDescriptor.getServiceName": "provides name of the service."}, {"org.apache.avro.Protocol.getMessages": "The messages of this protocol."}]}, {"index": "4", "file": "/root/repos/repos8/avro/lang/java/grpc/src/main/java/org/apache/avro/grpc/ServiceDescriptor.java", "methodName": "org.apache.avro.grpc.ServiceDescriptor.create", "methodParameterType": "Class#", "methodParameterName": "iface#", "methodBody": "public static ServiceDescriptor create(Class iface) {\n    String serviceName = AvroGrpcUtils.getServiceName(iface);\n    return SERVICE_DESCRIPTORS.computeIfAbsent(serviceName, key -> new ServiceDescriptor(iface, serviceName));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a Service Descriptor.", "call_func_name": ["org.apache.avro.grpc.AvroGrpcUtils.getServiceName", "java.util.function.Function.apply", "java.util.concurrent.ConcurrentMap.computeIfAbsent"], "call_func_parameter": [["java.lang.Class"], ["java.lang.Class", "java.lang.String"], ["java.lang.Object", "java.util.function.Function"]], "passed_comments": [{"org.apache.avro.grpc.AvroGrpcUtils.getServiceName": "Provides a a unique gRPC service name for Avro RPC interface or its subclass Callback Interface."}]}, {"index": "5", "file": "/root/repos/repos8/avro/lang/java/grpc/src/main/java/org/apache/avro/grpc/ServiceDescriptor.java", "methodName": "org.apache.avro.grpc.ServiceDescriptor.getServiceName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getServiceName() {\n    return serviceName;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "provides name of the service.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos8/avro/lang/java/grpc/src/main/java/org/apache/avro/grpc/ServiceDescriptor.java", "methodName": "org.apache.avro.grpc.ServiceDescriptor.getMethod", "methodParameterType": "String#MethodDescriptor.MethodType#", "methodParameterName": "methodName#methodType#", "methodBody": "public MethodDescriptor<Object[], Object> getMethod(String methodName, MethodDescriptor.MethodType methodType) {\n    return methods.computeIfAbsent(methodName,\n        key -> MethodDescriptor.<Object[], Object>newBuilder()\n            .setFullMethodName(generateFullMethodName(serviceName, methodName)).setType(methodType)\n            .setRequestMarshaller(new AvroRequestMarshaller(protocol.getMessages().get(methodName)))\n            .setResponseMarshaller(new AvroResponseMarshaller(protocol.getMessages().get(methodName))).build());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Provides a gRPC  {@link MethodDescriptor} for a RPC method/message of Avro{@link Protocol}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "7", "file": "/root/repos/repos8/avro/lang/java/grpc/src/main/java/org/apache/avro/grpc/AvroGrpcClient.java", "methodName": "org.apache.avro.grpc.AvroGrpcClient.create", "methodParameterType": "Channel#Class<T>#", "methodParameterName": "channel#iface#", "methodBody": "public static <T> T create(Channel channel, Class<T> iface) {\n    return create(channel, iface, CallOptions.DEFAULT);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a gRPC client for Avro's interface with default  {@link CallOptions}.", "call_func_name": ["org.apache.avro.grpc.AvroGrpcClient.create"], "call_func_parameter": [["io.grpc.Channel", "java.lang.Class", "io.grpc.CallOptions"]], "passed_comments": [{"org.apache.avro.grpc.AvroGrpcClient.create": "Creates a gRPC client for Avro's interface with provided  {@link CallOptions}."}]}, {"index": "8", "file": "/root/repos/repos8/avro/lang/java/grpc/src/main/java/org/apache/avro/grpc/AvroGrpcClient.java", "methodName": "org.apache.avro.grpc.AvroGrpcClient.create", "methodParameterType": "Channel#Class<T>#CallOptions#", "methodParameterName": "channel#iface#callOptions#", "methodBody": "public static <T> T create(Channel channel, Class<T> iface, CallOptions callOptions) {\n    Protocol protocol = AvroGrpcUtils.getProtocol(iface);\n    ServiceDescriptor serviceDescriptor = ServiceDescriptor.create(iface);\n    ServiceInvocationHandler proxyHandler = new ServiceInvocationHandler(channel, callOptions, protocol,\n        serviceDescriptor);\n    return (T) Proxy.newProxyInstance(iface.getClassLoader(), new Class[] { iface }, proxyHandler);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a gRPC client for Avro's interface with provided  {@link CallOptions}.", "call_func_name": ["org.apache.avro.grpc.AvroGrpcUtils.getProtocol", "org.apache.avro.grpc.ServiceDescriptor.create", "java.lang.Class.getClassLoader", "java.lang.reflect.Proxy.newProxyInstance"], "call_func_parameter": [["java.lang.Class"], ["java.lang.Class"], [""], ["java.lang.ClassLoader", "java.lang.Class[]", "java.lang.reflect.InvocationHandler"]], "passed_comments": [{"org.apache.avro.grpc.AvroGrpcUtils.getProtocol": "Gets the  {@link Protocol} from the Avro Interface."}, {"org.apache.avro.grpc.ServiceDescriptor.create": "Creates a Service Descriptor."}]}, {"index": "9", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/ValidateCanRead.java", "methodName": "org.apache.avro.ValidateCanRead.validate", "methodParameterType": "Schema#Schema#", "methodParameterName": "toValidate#existing#", "methodBody": "@Override\n  public void validate(Schema toValidate, Schema existing) throws SchemaValidationException {\n    ValidateMutualRead.canRead(existing, toValidate);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Validate that the first schema provided can be used to read data written with the second schema, according to the default Avro schema resolution rules.", "call_func_name": ["org.apache.avro.ValidateMutualRead.canRead"], "call_func_parameter": [["org.apache.avro.Schema", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.ValidateMutualRead.canRead": "Validates that data written with one schema can be read using another, based on the default Avro schema resolution rules."}]}, {"index": "10", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader12.java", "methodName": "org.apache.avro.file.DataFileReader12.DataFileReader12", "methodParameterType": "SeekableInput#DatumReader<D>#", "methodParameterName": "sin#reader#", "methodBody": "public DataFileReader12(SeekableInput sin, DatumReader<D> reader) throws IOException {\n    this.in = new DataFileReader.SeekableInputStream(sin);\n\n    byte[] magic = new byte[4];\n    in.read(magic);\n    if (!Arrays.equals(MAGIC, magic))\n      throw new InvalidAvroMagicException(\"Not a data file.\");\n\n    long length = in.length();\n    in.seek(length - 4);\n    int footerSize = (in.read() << 24) + (in.read() << 16) + (in.read() << 8) + in.read();\n    seek(length - footerSize);\n    long l = vin.readMapStart();\n    if (l > 0) {\n      do {\n        for (long i = 0; i < l; i++) {\n          String key = vin.readString(null).toString();\n          ByteBuffer value = vin.readBytes(null);\n          byte[] bb = new byte[value.remaining()];\n          value.get(bb);\n          meta.put(key, bb);\n        }\n      } while ((l = vin.mapNext()) != 0);\n    }\n\n    this.sync = getMeta(SYNC);\n    // # entries in file\n    long count = getMetaLong(COUNT);\n    String codec = getMetaString(CODEC);\n    if (codec != null && !codec.equals(NULL_CODEC)) {\n      throw new UnknownAvroCodecException(\"Unknown codec: \" + codec);\n    }\n    this.schema = new Schema.Parser().parse(getMetaString(SCHEMA));\n    this.reader = reader;\n\n    reader.setSchema(schema);\n\n    seek(MAGIC.length); // seek to start\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NumberLiteral#InfixExpression#DoStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(DoStatement(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)DoStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct a reader for a file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader12.java", "methodName": "org.apache.avro.file.DataFileReader12.getMeta", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public synchronized byte[] getMeta(String key) {\n    return meta.get(key);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the value of a metadata property.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader12.java", "methodName": "org.apache.avro.file.DataFileReader12.getMetaString", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public synchronized String getMetaString(String key) {\n    byte[] value = getMeta(key);\n    if (value == null) {\n      return null;\n    }\n    return new String(value, StandardCharsets.UTF_8);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the value of a metadata property.", "call_func_name": ["org.apache.avro.file.DataFileReader12.getMeta", "java.lang.String.<init>"], "call_func_parameter": [["java.lang.String"], ["byte[]", "java.nio.charset.Charset"]], "passed_comments": [{"org.apache.avro.file.DataFileReader12.getMeta": "Return the value of a metadata property."}]}, {"index": "13", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader12.java", "methodName": "org.apache.avro.file.DataFileReader12.getMetaLong", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public synchronized long getMetaLong(String key) {\n    return Long.parseLong(getMetaString(key));\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the value of a metadata property.", "call_func_name": ["org.apache.avro.file.DataFileReader12.getMetaString", "java.lang.Long.parseLong"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.file.DataFileReader12.getMetaString": "Return the value of a metadata property."}]}, {"index": "14", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader12.java", "methodName": "org.apache.avro.file.DataFileReader12.getSchema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public Schema getSchema() {\n    return schema;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the schema used in this file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader12.java", "methodName": "org.apache.avro.file.DataFileReader12.next", "methodParameterType": "D#", "methodParameterName": "reuse#", "methodBody": "@Override\n  public synchronized D next(D reuse) throws IOException {\n    while (blockCount == 0) { // at start of block\n\n      if (in.tell() == in.length()) // at eof\n        return null;\n\n      skipSync(); // skip a sync\n\n      blockCount = vin.readLong(); // read blockCount\n\n      if (blockCount == FOOTER_BLOCK) {\n        seek(vin.readLong() + in.tell()); // skip a footer\n      }\n    }\n    blockCount--;\n    return reader.read(reuse, vin);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#NullLiteral#ReturnStatement#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the next datum in the file.", "call_func_name": ["org.apache.avro.file.DataFileReader12.next", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader12.java", "methodName": "org.apache.avro.file.DataFileReader12.seek", "methodParameterType": "long#", "methodParameterName": "position#", "methodBody": "public synchronized void seek(long position) throws IOException {\n    in.seek(position);\n    blockCount = 0;\n    blockStart = position;\n    vin = DecoderFactory.get().binaryDecoder(in, vin);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Move to the specified synchronization point, as returned by {@link DataFileWriter#sync()}.", "call_func_name": ["org.apache.avro.io.DecoderFactory.get", "org.apache.avro.io.DecoderFactory.binaryDecoder"], "call_func_parameter": [[""], ["java.io.InputStream", "org.apache.avro.io.BinaryDecoder"]], "passed_comments": [{"org.apache.avro.io.DecoderFactory.get": "Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions. All creator methods create objects with default settings."}, {"org.apache.avro.io.DecoderFactory.binaryDecoder": "Creates or reinitializes a  {@link BinaryDecoder} with the input streamprovided as the source of data. If <i>reuse</i> is provided, it will be reinitialized to the given input stream. <p/> {@link BinaryDecoder} instances returned by this method buffer their input,reading up to  {@link #getConfiguredBufferSize()} bytes past the minimumrequired to satisfy read requests in order to achieve better performance. If the buffering is not desired, use {@link #directBinaryDecoder(InputStream,BinaryDecoder)}. <p/> {@link BinaryDecoder#inputStream()} provides a view on the data that isbuffer-aware, for users that need to interleave access to data with the Decoder API."}]}, {"index": "17", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader12.java", "methodName": "org.apache.avro.file.DataFileReader12.sync", "methodParameterType": "long#", "methodParameterName": "position#", "methodBody": "@Override\n  public synchronized void sync(long position) throws IOException {\n    if (in.tell() + SYNC_SIZE >= in.length()) {\n      seek(in.length());\n      return;\n    }\n    in.seek(position);\n    vin.readFixed(syncBuffer);\n    for (int i = 0; in.tell() < in.length(); i++) {\n      int j = 0;\n      for (; j < sync.length; j++) {\n        if (sync[j] != syncBuffer[(i + j) % sync.length])\n          break;\n      }\n      if (j == sync.length) { // position before sync\n        seek(in.tell() - SYNC_SIZE);\n        return;\n      }\n      syncBuffer[i % sync.length] = (byte) in.read();\n    }\n    seek(in.length());\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#QualifiedName#InfixExpression#ArrayAccess#InfixExpression#BreakStatement#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ArrayAccess#PrimitiveType#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ArrayAccess)InfixExpression(BreakStatement)BreakStatement)IfStatement)Block)ForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Move to the next synchronization point after a position.", "call_func_name": ["org.apache.avro.file.DataFileReader12.seek", "org.apache.avro.io.BinaryDecoder.readFixed"], "call_func_parameter": [["long"], ["byte[]"]], "passed_comments": [{"org.apache.avro.file.DataFileReader12.seek": "Move to the specified synchronization point, as returned by {@link DataFileWriter#sync()}."}]}, {"index": "18", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader12.java", "methodName": "org.apache.avro.file.DataFileReader12.pastSync", "methodParameterType": "long#", "methodParameterName": "position#", "methodBody": "@Override\n  public boolean pastSync(long position) throws IOException {\n    return ((blockStart >= position + SYNC_SIZE) || (blockStart >= in.length()));\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#InfixExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if past the next synchronization point after a position.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader12.java", "methodName": "org.apache.avro.file.DataFileReader12.tell", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public long tell() throws IOException {\n    return in.tell();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the current position in the input.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader12.java", "methodName": "org.apache.avro.file.DataFileReader12.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public synchronized void close() throws IOException {\n    in.close();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Close this reader.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/SyncableFileOutputStream.java", "methodName": "org.apache.avro.file.SyncableFileOutputStream.SyncableFileOutputStream", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public SyncableFileOutputStream(String name) throws FileNotFoundException {\n    super(name);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates an instance of  {@linkplain SyncableFileOutputStream} with the givenname.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/SyncableFileOutputStream.java", "methodName": "org.apache.avro.file.SyncableFileOutputStream.SyncableFileOutputStream", "methodParameterType": "File#", "methodParameterName": "file#", "methodBody": "public SyncableFileOutputStream(File file) throws FileNotFoundException {\n    super(file);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates an instance of  {@linkplain SyncableFileOutputStream} using the given{@linkplain File} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/SyncableFileOutputStream.java", "methodName": "org.apache.avro.file.SyncableFileOutputStream.SyncableFileOutputStream", "methodParameterType": "String#boolean#", "methodParameterName": "name#append#", "methodBody": "public SyncableFileOutputStream(String name, boolean append) throws FileNotFoundException {\n    super(name, append);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates an instance of  {@linkplain SyncableFileOutputStream} with the givenname and optionally append to the file if it already exists.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/SyncableFileOutputStream.java", "methodName": "org.apache.avro.file.SyncableFileOutputStream.SyncableFileOutputStream", "methodParameterType": "File#boolean#", "methodParameterName": "file#append#", "methodBody": "public SyncableFileOutputStream(File file, boolean append) throws FileNotFoundException {\n    super(file, append);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates an instance of  {@linkplain SyncableFileOutputStream} that writes tothe file represented by the given  {@linkplain File} instance and optionallyappend to the file if it already exists.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/SyncableFileOutputStream.java", "methodName": "org.apache.avro.file.SyncableFileOutputStream.SyncableFileOutputStream", "methodParameterType": "FileDescriptor#", "methodParameterName": "fdObj#", "methodBody": "public SyncableFileOutputStream(FileDescriptor fdObj) {\n    super(fdObj);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates an instance of  {@linkplain SyncableFileOutputStream} using the given{@linkplain FileDescriptor} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/SyncableFileOutputStream.java", "methodName": "org.apache.avro.file.SyncableFileOutputStream.sync", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void sync() throws IOException {\n    getFD().sync();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.file.SyncableFileOutputStream.getFD", "java.io.FileDescriptor.sync"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "27", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java", "methodName": "org.apache.avro.file.CodecFactory.nullCodec", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static CodecFactory nullCodec() {\n    return NullCodec.OPTION;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Null codec, for no compression.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java", "methodName": "org.apache.avro.file.CodecFactory.deflateCodec", "methodParameterType": "int#", "methodParameterName": "compressionLevel#", "methodBody": "public static CodecFactory deflateCodec(int compressionLevel) {\n    return new DeflateCodec.Option(compressionLevel);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deflate codec, with specific compression. compressionLevel should be between 1 and 9, inclusive.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java", "methodName": "org.apache.avro.file.CodecFactory.xzCodec", "methodParameterType": "int#", "methodParameterName": "compressionLevel#", "methodBody": "public static CodecFactory xzCodec(int compressionLevel) {\n    return new XZCodec.Option(compressionLevel);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "XZ codec, with specific compression. compressionLevel should be between 1 and 9, inclusive.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java", "methodName": "org.apache.avro.file.CodecFactory.snappyCodec", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static CodecFactory snappyCodec() {\n    try {\n      return new SnappyCodec.Option();\n    } catch (Throwable t) {\n      LOG.debug(\"Snappy was not available\", t);\n      return null;\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Snappy codec.", "call_func_name": ["org.slf4j.Logger.debug"], "call_func_parameter": [["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java", "methodName": "org.apache.avro.file.CodecFactory.bzip2Codec", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static CodecFactory bzip2Codec() {\n    return new BZip2Codec.Option();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "bzip2 codec.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "32", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java", "methodName": "org.apache.avro.file.CodecFactory.zstandardCodec", "methodParameterType": "int#", "methodParameterName": "level#", "methodBody": "public static CodecFactory zstandardCodec(int level) {\n    return new ZstandardCodec.Option(level, false);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#BooleanLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "zstandard codec, with specific compression level.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java", "methodName": "org.apache.avro.file.CodecFactory.zstandardCodec", "methodParameterType": "int#boolean#", "methodParameterName": "level#useChecksum#", "methodBody": "public static CodecFactory zstandardCodec(int level, boolean useChecksum) {\n    return new ZstandardCodec.Option(level, useChecksum);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "zstandard codec, with specific compression level.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java", "methodName": "org.apache.avro.file.CodecFactory.createInstance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract Codec createInstance();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Creates internal Codec.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java", "methodName": "org.apache.avro.file.CodecFactory.fromString", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static CodecFactory fromString(String s) {\n    CodecFactory o = REGISTERED.get(s);\n    if (o == null) {\n      throw new AvroRuntimeException(\"Unrecognized codec: \" + s);\n    }\n    return o;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Maps a codec name into a CodecFactory. Currently there are six codecs registered by default: <ul> <li> {@code null}</li> <li> {@code deflate}</li> <li> {@code snappy}</li> <li> {@code bzip2}</li> <li> {@code xz}</li> <li> {@code zstandard}</li> </ul>", "call_func_name": ["java.util.Map.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "36", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/CodecFactory.java", "methodName": "org.apache.avro.file.CodecFactory.addCodec", "methodParameterType": "String#CodecFactory#", "methodParameterName": "name#c#", "methodBody": "public static CodecFactory addCodec(String name, CodecFactory c) {\n    if (c != null) {\n      return REGISTERED.put(name, c);\n    }\n    return null;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Adds a new codec implementation. If name already had a codec associated with it, returns the previous codec.", "call_func_name": ["java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/Codec.java", "methodName": "org.apache.avro.file.Codec.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String getName();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Name of the codec; written to the file's metadata.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/Codec.java", "methodName": "org.apache.avro.file.Codec.compress", "methodParameterType": "ByteBuffer#", "methodParameterName": "uncompressedData#", "methodBody": "public abstract ByteBuffer compress(ByteBuffer uncompressedData) throws IOException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Compresses the input data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/Codec.java", "methodName": "org.apache.avro.file.Codec.decompress", "methodParameterType": "ByteBuffer#", "methodParameterName": "compressedData#", "methodBody": "public abstract ByteBuffer decompress(ByteBuffer compressedData) throws IOException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Decompress the data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/Codec.java", "methodName": "org.apache.avro.file.Codec.equals", "methodParameterType": "Object#", "methodParameterName": "other#", "methodBody": "@Override\n  public abstract boolean equals(Object other);", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Codecs must implement an equals() method. Two codecs, A and B are equal if: the result of A and B decompressing content compressed by A is the same AND the result of A and B decompressing content compressed by B is the same", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/Codec.java", "methodName": "org.apache.avro.file.Codec.hashCode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public abstract int hashCode();", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Codecs must implement a hashCode() method that is consistent with equals().", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.DataFileWriter", "methodParameterType": "DatumWriter<D>#", "methodParameterName": "dout#", "methodBody": "public DataFileWriter(DatumWriter<D> dout) {\n    this.dout = dout;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct a writer, not yet open.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "43", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.setCodec", "methodParameterType": "CodecFactory#", "methodParameterName": "c#", "methodBody": "public DataFileWriter<D> setCodec(CodecFactory c) {\n    assertNotOpen();\n    this.codec = c.createInstance();\n    setMetaInternal(DataFileConstants.CODEC, codec.getName());\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Configures this writer to use the given codec. May not be reset after writes have begun.", "call_func_name": ["org.apache.avro.file.DataFileWriter.assertNotOpen", "org.apache.avro.file.CodecFactory.createInstance", "org.apache.avro.file.Codec.getName", "org.apache.avro.file.DataFileWriter.setMetaInternal"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.apache.avro.file.CodecFactory.createInstance": "Creates internal Codec."}, {"org.apache.avro.file.Codec.getName": "Name of the codec; written to the file's metadata."}]}, {"index": "44", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.setSyncInterval", "methodParameterType": "int#", "methodParameterName": "syncInterval#", "methodBody": "public DataFileWriter<D> setSyncInterval(int syncInterval) {\n    if (syncInterval < 32 || syncInterval > (1 << 30)) {\n      throw new IllegalArgumentException(\"Invalid syncInterval value: \" + syncInterval);\n    }\n    this.syncInterval = syncInterval;\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the synchronization interval for this file, in bytes. Valid values range from 32 to 2^30 Suggested values are between 2K and 2M The stream is flushed by default at the end of each synchronization interval. If  {@linkplain #setFlushOnEveryBlock(boolean)} is called with param set tofalse, then the block may not be flushed to the stream after the sync marker is written. In this case, the  {@linkplain #flush()} must be called to flushthe stream. Invalid values throw IllegalArgumentException", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "45", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.create", "methodParameterType": "Schema#File#", "methodParameterName": "schema#file#", "methodBody": "public DataFileWriter<D> create(Schema schema, File file) throws IOException {\n    SyncableFileOutputStream sfos = new SyncableFileOutputStream(file);\n    try {\n      return create(schema, sfos, null);\n    } catch (final Throwable e) {\n      IOUtils.closeQuietly(sfos);\n      throw e;\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Open a new file for data matching a schema with a random sync.", "call_func_name": ["org.apache.avro.file.SyncableFileOutputStream.<init>", "org.apache.avro.file.DataFileWriter.create", "org.apache.commons.compress.utils.IOUtils.closeQuietly"], "call_func_parameter": [["java.io.File"], ["org.apache.avro.Schema", "java.io.OutputStream", "byte[]"], ["java.io.Closeable"]], "passed_comments": [{"org.apache.avro.file.DataFileWriter.create": "Open a new file for data matching a schema with an explicit sync."}]}, {"index": "46", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.create", "methodParameterType": "Schema#OutputStream#", "methodParameterName": "schema#outs#", "methodBody": "public DataFileWriter<D> create(Schema schema, OutputStream outs) throws IOException {\n    return create(schema, outs, null);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Open a new file for data matching a schema with a random sync.", "call_func_name": ["org.apache.avro.file.DataFileWriter.create"], "call_func_parameter": [["org.apache.avro.Schema", "java.io.OutputStream", "byte[]"]], "passed_comments": [{"org.apache.avro.file.DataFileWriter.create": "Open a new file for data matching a schema with an explicit sync."}]}, {"index": "47", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.create", "methodParameterType": "Schema#OutputStream#byte[]#", "methodParameterName": "schema#outs#sync#", "methodBody": "public DataFileWriter<D> create(Schema schema, OutputStream outs, byte[] sync) throws IOException {\n    assertNotOpen();\n\n    this.schema = schema;\n    setMetaInternal(DataFileConstants.SCHEMA, schema.toString());\n    if (sync == null) {\n      this.sync = generateSync();\n    } else if (sync.length == 16) {\n      this.sync = sync;\n    } else {\n      throw new IOException(\"sync must be exactly 16 bytes\");\n    }\n\n    init(outs);\n\n    vout.writeFixed(DataFileConstants.MAGIC); // write magic\n\n    vout.writeMapStart(); // write metadata\n    vout.setItemCount(meta.size());\n    for (Map.Entry<String, byte[]> entry : meta.entrySet()) {\n      vout.startItem();\n      vout.writeString(entry.getKey());\n      vout.writeBytes(entry.getValue());\n    }\n    vout.writeMapEnd();\n    vout.writeFixed(this.sync); // write initial sync\n    vout.flush(); // vout may be buffered, flush before writing to out\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#PrimitiveType#Dimension#ArrayType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Open a new file for data matching a schema with an explicit sync.", "call_func_name": ["org.apache.avro.file.DataFileWriter.assertNotOpen", "org.apache.avro.Schema.toString", "org.apache.avro.file.DataFileWriter.setMetaInternal", "org.apache.avro.file.DataFileWriter.generateSync", "java.io.IOException.<init>", "org.apache.avro.file.DataFileWriter.init", "org.apache.avro.io.BinaryEncoder.writeFixed", "org.apache.avro.io.BinaryEncoder.writeMapStart", "java.util.Map.size", "org.apache.avro.io.BinaryEncoder.setItemCount", "java.util.Map.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.io.BinaryEncoder.startItem", "org.apache.avro.io.BinaryEncoder.writeString", "org.apache.avro.io.BinaryEncoder.writeBytes", "org.apache.avro.io.BinaryEncoder.writeMapEnd", "org.apache.avro.io.BinaryEncoder.flush"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], ["java.io.OutputStream"], ["byte[]"], [""], [""], ["long"], [""], [""], [""], [""], [""], ["java.lang.String"], ["byte[]"], [""], [""]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "48", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.setFlushOnEveryBlock", "methodParameterType": "boolean#", "methodParameterName": "flushOnEveryBlock#", "methodBody": "public void setFlushOnEveryBlock(boolean flushOnEveryBlock) {\n    this.flushOnEveryBlock = flushOnEveryBlock;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set whether this writer should flush the block to the stream every time a sync marker is written. By default, the writer will flush the buffer each time a sync marker is written (if the block size limit is reached or the {@linkplain #sync()} is called.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.isFlushOnEveryBlock", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isFlushOnEveryBlock() {\n    return this.flushOnEveryBlock;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return - true if this writer flushes the block to the stream every time async marker is written. Else returns false.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "50", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.appendTo", "methodParameterType": "File#", "methodParameterName": "file#", "methodBody": "public DataFileWriter<D> appendTo(File file) throws IOException {\n    try (SeekableInput input = new SeekableFileInput(file)) {\n      OutputStream output = new SyncableFileOutputStream(file, true);\n      return appendTo(input, output);\n    }\n    // output does not need to be closed here. It will be closed by invoking close()\n    // of this writer.\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#BooleanLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Open a writer appending to an existing file.", "call_func_name": ["org.apache.avro.file.SeekableFileInput.<init>", "org.apache.avro.file.SyncableFileOutputStream.<init>", "org.apache.avro.file.DataFileWriter.appendTo", "org.apache.avro.file.SeekableInput.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.io.File"], ["java.io.File", "boolean"], ["org.apache.avro.file.SeekableInput", "java.io.OutputStream"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.file.DataFileWriter.appendTo": "Open a writer appending to an existing file. <strong>Since 1.9.0 this method does not close in.</strong>"}]}, {"index": "51", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.appendTo", "methodParameterType": "SeekableInput#OutputStream#", "methodParameterName": "in#out#", "methodBody": "public DataFileWriter<D> appendTo(SeekableInput in, OutputStream out) throws IOException {\n    assertNotOpen();\n    DataFileReader<D> reader = new DataFileReader<>(in, new GenericDatumReader<>());\n    this.schema = reader.getSchema();\n    this.sync = reader.getHeader().sync;\n    this.meta.putAll(reader.getHeader().meta);\n    byte[] codecBytes = this.meta.get(DataFileConstants.CODEC);\n    if (codecBytes != null) {\n      String strCodec = new String(codecBytes, StandardCharsets.UTF_8);\n      this.codec = CodecFactory.fromString(strCodec).createInstance();\n    } else {\n      this.codec = CodecFactory.nullCodec().createInstance();\n    }\n\n    init(out);\n\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#PrimitiveType#Dimension#ArrayType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Open a writer appending to an existing file. <strong>Since 1.9.0 this method does not close in.</strong>", "call_func_name": ["org.apache.avro.file.DataFileWriter.assertNotOpen", "org.apache.avro.generic.GenericDatumReader.<init>", "org.apache.avro.file.DataFileReader.<init>", "org.apache.avro.file.DataFileReader.getSchema", "org.apache.avro.file.DataFileReader.getHeader", "java.util.Map.putAll", "java.util.Map.get", "java.lang.String.<init>", "org.apache.avro.file.CodecFactory.fromString", "org.apache.avro.file.CodecFactory.createInstance", "org.apache.avro.file.CodecFactory.nullCodec", "org.apache.avro.file.DataFileWriter.init"], "call_func_parameter": [[""], [""], ["org.apache.avro.file.SeekableInput", "org.apache.avro.io.DatumReader"], [""], [""], ["java.util.Map"], ["java.lang.Object"], ["byte[]", "java.nio.charset.Charset"], ["java.lang.String"], [""], [""], ["java.io.OutputStream"]], "passed_comments": [{"org.apache.avro.file.CodecFactory.fromString": "Maps a codec name into a CodecFactory. Currently there are six codecs registered by default: <ul> <li> {@code null}</li> <li> {@code deflate}</li> <li> {@code snappy}</li> <li> {@code bzip2}</li> <li> {@code xz}</li> <li> {@code zstandard}</li> </ul>"}, {"org.apache.avro.file.CodecFactory.createInstance": "Creates internal Codec."}, {"org.apache.avro.file.CodecFactory.nullCodec": "Null codec, for no compression."}]}, {"index": "52", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.setMeta", "methodParameterType": "String#byte[]#", "methodParameterName": "key#value#", "methodBody": "public DataFileWriter<D> setMeta(String key, byte[] value) {\n    if (isReservedMeta(key)) {\n      throw new AvroRuntimeException(\"Cannot set reserved meta key: \" + key);\n    }\n    return setMetaInternal(key, value);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set a metadata property.", "call_func_name": ["org.apache.avro.file.DataFileWriter.isReservedMeta", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>", "org.apache.avro.file.DataFileWriter.setMetaInternal"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "byte[]"]], "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.setMeta", "methodParameterType": "String#String#", "methodParameterName": "key#value#", "methodBody": "public DataFileWriter<D> setMeta(String key, String value) {\n    return setMeta(key, value.getBytes(UTF_8));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set a metadata property.", "call_func_name": ["java.lang.String.getBytes", "org.apache.avro.file.DataFileWriter.setMeta"], "call_func_parameter": [["java.nio.charset.Charset"], ["java.lang.String", "byte[]"]], "passed_comments": [{"org.apache.avro.file.DataFileWriter.setMeta": "Set a metadata property."}]}, {"index": "54", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.setMeta", "methodParameterType": "String#long#", "methodParameterName": "key#value#", "methodBody": "public DataFileWriter<D> setMeta(String key, long value) {\n    return setMeta(key, Long.toString(value));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set a metadata property.", "call_func_name": ["java.lang.Long.toString", "org.apache.avro.file.DataFileWriter.setMeta"], "call_func_parameter": [["long"], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.apache.avro.file.DataFileWriter.setMeta": "Set a metadata property."}]}, {"index": "55", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.append", "methodParameterType": "D#", "methodParameterName": "datum#", "methodBody": "public void append(D datum) throws IOException {\n    assertOpen();\n    int usedBuffer = bufferInUse();\n    try {\n      dout.write(datum, bufOut);\n    } catch (IOException | RuntimeException e) {\n      resetBufferTo(usedBuffer);\n      throw new AppendWriteException(e);\n    }\n    blockCount++;\n    writeIfBlockFull();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Append a datum to the file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.appendEncoded", "methodParameterType": "ByteBuffer#", "methodParameterName": "datum#", "methodBody": "public void appendEncoded(ByteBuffer datum) throws IOException {\n    assertOpen();\n    bufOut.writeFixed(datum);\n    blockCount++;\n    writeIfBlockFull();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Expert: Append a pre-encoded datum to the file. No validation is performed to check that the encoding conforms to the file's schema. Appending non-conforming data may result in an unreadable file.", "call_func_name": ["org.apache.avro.file.DataFileWriter.assertOpen", "org.apache.avro.io.BinaryEncoder.writeFixed", "org.apache.avro.file.DataFileWriter.writeIfBlockFull"], "call_func_parameter": [[""], ["java.nio.ByteBuffer"], [""]], "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.appendAllFrom", "methodParameterType": "DataFileStream<D>#boolean#", "methodParameterName": "otherFile#recompress#", "methodBody": "public void appendAllFrom(DataFileStream<D> otherFile, boolean recompress) throws IOException {\n    assertOpen();\n    // make sure other file has same schema\n    Schema otherSchema = otherFile.getSchema();\n    if (!this.schema.equals(otherSchema)) {\n      throw new IOException(\"Schema from file \" + otherFile + \" does not match\");\n    }\n    // flush anything written so far\n    writeBlock();\n    Codec otherCodec = otherFile.resolveCodec();\n    DataBlock nextBlockRaw = null;\n    if (codec.equals(otherCodec) && !recompress) {\n      // copy raw bytes\n      while (otherFile.hasNextBlock()) {\n        nextBlockRaw = otherFile.nextRawBlock(nextBlockRaw);\n        nextBlockRaw.writeBlockTo(vout, sync);\n      }\n    } else {\n      while (otherFile.hasNextBlock()) {\n        nextBlockRaw = otherFile.nextRawBlock(nextBlockRaw);\n        nextBlockRaw.decompressUsing(otherCodec);\n        nextBlockRaw.compressUsing(codec);\n        nextBlockRaw.writeBlockTo(vout, sync);\n      }\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block(Block(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Appends data from another file. otherFile must have the same schema. Data blocks will be copied without de-serializing data. If the codecs of the two files are compatible, data blocks are copied directly without decompression. If the codecs are not compatible, blocks from otherFile are uncompressed and then compressed using this file's codec. <p/> If the recompress flag is set all blocks are decompressed and then compressed using this file's codec. This is useful when the two files have compatible compression codecs but different codec options. For example, one might append a file compressed with deflate at compression level 1 to a file with deflate at compression level 7. If <i>recompress</i> is false, blocks will be copied without changing the compression level. If true, they will be converted to the new compression level.", "call_func_name": ["org.apache.avro.file.DataFileWriter.assertOpen", "org.apache.avro.file.DataFileStream.getSchema", "org.apache.avro.Schema.equals", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.io.IOException.<init>", "org.apache.avro.file.DataFileWriter.writeBlock", "org.apache.avro.file.DataFileStream.resolveCodec", "org.apache.avro.file.Codec.equals", "org.apache.avro.file.DataFileStream.hasNextBlock"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], [""]], "passed_comments": [{"org.apache.avro.file.DataFileStream.getSchema": "Return the schema used in this file."}, {"org.apache.avro.file.Codec.equals": "Codecs must implement an equals() method. Two codecs, A and B are equal if: the result of A and B decompressing content compressed by A is the same AND the result of A and B decompressing content compressed by B is the same"}]}, {"index": "58", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.sync", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long sync() throws IOException {\n    assertOpen();\n    writeBlock();\n    return out.tell();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the current position as a value that may be passed to {@link DataFileReader#seek(long)}. Forces the end of the current block, emitting a synchronization marker. By default, this will also flush the block to the stream. If  {@linkplain #setFlushOnEveryBlock(boolean)} is called with param set tofalse, then this method may not flush the block. In this case, the {@linkplain #flush()} must be called to flush the stream.", "call_func_name": ["org.apache.avro.file.DataFileWriter.assertOpen", "org.apache.avro.file.DataFileWriter.writeBlock"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.flush", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void flush() throws IOException {\n    sync();\n    vout.flush();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Calls  {@linkplain #sync()} and then flushes the current state of the file.", "call_func_name": ["org.apache.avro.file.DataFileWriter.sync", "org.apache.avro.io.BinaryEncoder.flush"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.apache.avro.file.DataFileWriter.sync": "Return the current position as a value that may be passed to {@link DataFileReader#seek(long)}. Forces the end of the current block, emitting a synchronization marker. By default, this will also flush the block to the stream. If  {@linkplain #setFlushOnEveryBlock(boolean)} is called with param set tofalse, then this method may not flush the block. In this case, the {@linkplain #flush()} must be called to flush the stream."}]}, {"index": "60", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.fSync", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void fSync() throws IOException {\n    flush();\n    if (underlyingStream instanceof Syncable) {\n      ((Syncable) underlyingStream).sync();\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "If this writer was instantiated using a File or using an {@linkplain Syncable} instance, this method flushes all buffers for thiswriter to disk. In other cases, this method behaves exactly like {@linkplain #flush()}.", "call_func_name": ["org.apache.avro.file.DataFileWriter.flush", "org.apache.avro.file.Syncable.sync"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.apache.avro.file.DataFileWriter.flush": "Calls  {@linkplain #sync()} and then flushes the current state of the file."}, {"org.apache.avro.file.Syncable.sync": "Sync the file to disk. On supported platforms, this method behaves like POSIX <code>fsync</code> and syncs all underlying OS buffers for this file descriptor to disk. On these platforms, if this method returns, the data written to this instance is guaranteed to be persisted on disk."}]}, {"index": "61", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileWriter.java", "methodName": "org.apache.avro.file.DataFileWriter.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void close() throws IOException {\n    if (isOpen) {\n      flush();\n      out.close();\n      isOpen = false;\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Flush and close the file.", "call_func_name": ["org.apache.avro.file.DataFileWriter.flush"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.file.DataFileWriter.flush": "Calls  {@linkplain #sync()} and then flushes the current state of the file."}]}, {"index": "62", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/ZstandardCodec.java", "methodName": "org.apache.avro.file.ZstandardCodec.ZstandardCodec", "methodParameterType": "int#boolean#", "methodParameterName": "compressionLevel#useChecksum#", "methodBody": "public ZstandardCodec(int compressionLevel, boolean useChecksum) {\n    this.compressionLevel = compressionLevel;\n    this.useChecksum = useChecksum;\n  }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a ZstandardCodec instance with the given compressionLevel and checksum option", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader.java", "methodName": "org.apache.avro.file.DataFileReader.openReader", "methodParameterType": "File#DatumReader<D>#", "methodParameterName": "file#reader#", "methodBody": "public static <D> FileReader<D> openReader(File file, DatumReader<D> reader) throws IOException {\n    SeekableFileInput input = new SeekableFileInput(file);\n    try {\n      return openReader(input, reader);\n    } catch (final Throwable e) {\n      IOUtils.closeQuietly(input);\n      throw e;\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Open a reader for a file.", "call_func_name": ["org.apache.avro.file.SeekableFileInput.<init>", "org.apache.avro.file.DataFileReader.openReader", "org.apache.commons.compress.utils.IOUtils.closeQuietly"], "call_func_parameter": [["java.io.File"], ["org.apache.avro.file.SeekableInput", "org.apache.avro.io.DatumReader"], ["java.io.Closeable"]], "passed_comments": [{"org.apache.avro.file.DataFileReader.openReader": "Open a reader for a file."}]}, {"index": "64", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader.java", "methodName": "org.apache.avro.file.DataFileReader.openReader", "methodParameterType": "SeekableInput#DatumReader<D>#", "methodParameterName": "in#reader#", "methodBody": "public static <D> FileReader<D> openReader(SeekableInput in, DatumReader<D> reader) throws IOException {\n    if (in.length() < MAGIC.length)\n      throw new InvalidAvroMagicException(\"Not an Avro data file\");\n\n    // read magic header\n    byte[] magic = new byte[MAGIC.length];\n    in.seek(0);\n    for (int c = 0; c < magic.length; c = in.read(magic, c, magic.length - c)) {\n    }\n    in.seek(0);\n\n    if (Arrays.equals(MAGIC, magic)) // current format\n      return new DataFileReader<>(in, reader);\n    if (Arrays.equals(DataFileReader12.MAGIC, magic)) // 1.2 format\n      return new DataFileReader12<>(in, reader);\n\n    throw new InvalidAvroMagicException(\"Not an Avro data file\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#MethodInvocation#Assignment#Block#ForStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#IfStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)MethodInvocation)Assignment(Block)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Open a reader for a file.", "call_func_name": ["org.apache.avro.file.SeekableInput.length", "org.apache.avro.InvalidAvroMagicException.<init>", "org.apache.avro.file.SeekableInput.seek", "org.apache.avro.file.SeekableInput.read", "java.util.Arrays.equals", "org.apache.avro.file.DataFileReader.<init>", "org.apache.avro.file.DataFileReader12.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["long"], ["byte[]", "int", "int"], ["byte[]", "byte[]"], ["org.apache.avro.file.SeekableInput", "org.apache.avro.io.DatumReader"], ["org.apache.avro.file.SeekableInput", "org.apache.avro.io.DatumReader"]], "passed_comments": [{"org.apache.avro.file.SeekableInput.length": "Return the length of the file."}, {"org.apache.avro.file.SeekableInput.seek": "Set the position for the next  {@link java.io.InputStream#read(byte[],int,int) read()}."}, {"org.apache.avro.file.SeekableInput.read": "Equivalent to  {@link java.io.InputStream#read(byte[],int,int)}."}]}, {"index": "65", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader.java", "methodName": "org.apache.avro.file.DataFileReader.openReader", "methodParameterType": "SeekableInput#DatumReader<D>#Header#boolean#", "methodParameterName": "in#reader#header#sync#", "methodBody": "public static <D> DataFileReader<D> openReader(SeekableInput in, DatumReader<D> reader, Header header, boolean sync)\n      throws IOException {\n    DataFileReader<D> dreader = new DataFileReader<>(in, reader, header);\n    // seek/sync to an (assumed) valid position\n    if (sync)\n      dreader.sync(in.tell());\n    else\n      dreader.seek(in.tell());\n    return dreader;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a reader for a file at the current position of the input, without reading the header.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader.java", "methodName": "org.apache.avro.file.DataFileReader.DataFileReader", "methodParameterType": "File#DatumReader<D>#", "methodParameterName": "file#reader#", "methodBody": "public DataFileReader(File file, DatumReader<D> reader) throws IOException {\n    this(new SeekableFileInput(file), reader, true);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a reader for a file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "67", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader.java", "methodName": "org.apache.avro.file.DataFileReader.DataFileReader", "methodParameterType": "SeekableInput#DatumReader<D>#", "methodParameterName": "sin#reader#", "methodBody": "public DataFileReader(SeekableInput sin, DatumReader<D> reader) throws IOException {\n    this(sin, reader, false);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a reader for a file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader.java", "methodName": "org.apache.avro.file.DataFileReader.DataFileReader", "methodParameterType": "SeekableInput#DatumReader<D>#boolean#", "methodParameterName": "sin#reader#closeOnError#", "methodBody": "protected DataFileReader(SeekableInput sin, DatumReader<D> reader, boolean closeOnError) throws IOException {\n    super(reader);\n    try {\n      this.sin = new SeekableInputStream(sin);\n      initialize(this.sin);\n      blockFinished();\n    } catch (final Throwable e) {\n      if (closeOnError) {\n        IOUtils.closeQuietly(sin);\n      }\n      throw e;\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(TryStatement(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Construct a reader for a file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader.java", "methodName": "org.apache.avro.file.DataFileReader.DataFileReader", "methodParameterType": "SeekableInput#DatumReader<D>#Header#", "methodParameterName": "sin#reader#header#", "methodBody": "protected DataFileReader(SeekableInput sin, DatumReader<D> reader, Header header) throws IOException {\n    super(reader);\n    this.sin = new SeekableInputStream(sin);\n    initialize(this.sin, header);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct using a  {@link DataFileStream.Header}. Does not call {@link #sync(long)} or {@link #seek(long)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader.java", "methodName": "org.apache.avro.file.DataFileReader.seek", "methodParameterType": "long#", "methodParameterName": "position#", "methodBody": "public void seek(long position) throws IOException {\n    sin.seek(position);\n    vin = DecoderFactory.get().binaryDecoder(this.sin, vin);\n    datumIn = null;\n    blockRemaining = 0;\n    blockStart = position;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Move to a specific, known synchronization point, one returned from {@link DataFileWriter#sync()} while writing. If synchronization points werenot saved while writing a file, use  {@link #sync(long)} instead.", "call_func_name": ["org.apache.avro.io.DecoderFactory.get", "org.apache.avro.io.DecoderFactory.binaryDecoder"], "call_func_parameter": [[""], ["java.io.InputStream", "org.apache.avro.io.BinaryDecoder"]], "passed_comments": [{"org.apache.avro.io.DecoderFactory.get": "Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions. All creator methods create objects with default settings."}, {"org.apache.avro.io.DecoderFactory.binaryDecoder": "Creates or reinitializes a  {@link BinaryDecoder} with the input streamprovided as the source of data. If <i>reuse</i> is provided, it will be reinitialized to the given input stream. <p/> {@link BinaryDecoder} instances returned by this method buffer their input,reading up to  {@link #getConfiguredBufferSize()} bytes past the minimumrequired to satisfy read requests in order to achieve better performance. If the buffering is not desired, use {@link #directBinaryDecoder(InputStream,BinaryDecoder)}. <p/> {@link BinaryDecoder#inputStream()} provides a view on the data that isbuffer-aware, for users that need to interleave access to data with the Decoder API."}]}, {"index": "71", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader.java", "methodName": "org.apache.avro.file.DataFileReader.sync", "methodParameterType": "long#", "methodParameterName": "position#", "methodBody": "@Override\n  public void sync(long position) throws IOException {\n    seek(position);\n    // work around an issue where 1.5.4 C stored sync in metadata\n    if ((position == 0) && (getMeta(\"avro.sync\") != null)) {\n      initialize(sin); // re-init to skip header\n      return;\n    }\n    try {\n      int i = 0, b;\n      InputStream in = vin.inputStream();\n      vin.readFixed(syncBuffer);\n      do {\n        int j = 0;\n        for (; j < SYNC_SIZE; j++) {\n          if (getHeader().sync[j] != syncBuffer[(i + j) % SYNC_SIZE])\n            break;\n        }\n        if (j == SYNC_SIZE) { // matched a complete sync\n          blockStart = position + i + SYNC_SIZE;\n          return;\n        }\n        b = in.read();\n        syncBuffer[i++ % SYNC_SIZE] = (byte) b;\n      } while (b != -1);\n    } catch (EOFException e) {\n      // fall through\n    }\n    // if no match or EOF set start to the end position\n    blockStart = sin.tell();\n    // System.out.println(\"block start location after EOF: \" + blockStart );\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#StringLiteral#MethodInvocation#NullLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ArrayAccess#InfixExpression#BreakStatement#IfStatement#Block#ForStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#SimpleName#InfixExpression#ArrayAccess#PrimitiveType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#DoStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(DoStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ArrayAccess(FieldAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ArrayAccess)InfixExpression(BreakStatement)BreakStatement)IfStatement)Block)ForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(SimpleName)SimpleName)InfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)DoStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Move to the next synchronization point after a position. To process a range of file entires, call this with the starting position, then check {@link #pastSync(long)} with the end point before each call to{@link #next()}.", "call_func_name": ["org.apache.avro.file.DataFileReader.seek", "org.apache.avro.file.DataFileReader.getMeta", "org.apache.avro.file.DataFileReader.initialize", "org.apache.avro.io.BinaryDecoder.inputStream", "org.apache.avro.io.BinaryDecoder.readFixed", "org.apache.avro.file.DataFileReader.getHeader", "java.io.InputStream.read"], "call_func_parameter": [["long"], ["java.lang.String"], ["java.io.InputStream"], [""], ["byte[]"], [""], [""]], "passed_comments": [{"org.apache.avro.file.DataFileReader.seek": "Move to a specific, known synchronization point, one returned from {@link DataFileWriter#sync()} while writing. If synchronization points werenot saved while writing a file, use  {@link #sync(long)} instead."}, {"org.apache.avro.io.BinaryDecoder.inputStream": "Returns an  {@link java.io.InputStream} that is aware of any buffering thatmay occur in this BinaryDecoder. Readers that need to interleave decoding Avro data with other reads must access this InputStream to do so unless the implementation is 'direct' and does not read beyond the minimum bytes necessary from the source."}]}, {"index": "72", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader.java", "methodName": "org.apache.avro.file.DataFileReader.previousSync", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long previousSync() {\n    return blockStart;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the last synchronization point before our current position.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileReader.java", "methodName": "org.apache.avro.file.DataFileReader.pastSync", "methodParameterType": "long#", "methodParameterName": "position#", "methodBody": "@Override\n  public boolean pastSync(long position) throws IOException {\n    return ((blockStart >= position + SYNC_SIZE) || (blockStart >= sin.length()));\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#InfixExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if past the next synchronization point after a position.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "74", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/Syncable.java", "methodName": "org.apache.avro.file.Syncable.sync", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void sync() throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Sync the file to disk. On supported platforms, this method behaves like POSIX <code>fsync</code> and syncs all underlying OS buffers for this file descriptor to disk. On these platforms, if this method returns, the data written to this instance is guaranteed to be persisted on disk.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "75", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/FileReader.java", "methodName": "org.apache.avro.file.FileReader.getSchema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Schema getSchema();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the schema for data in this file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/FileReader.java", "methodName": "org.apache.avro.file.FileReader.next", "methodParameterType": "D#", "methodParameterName": "reuse#", "methodBody": "D next(D reuse) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Read the next datum from the file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/FileReader.java", "methodName": "org.apache.avro.file.FileReader.sync", "methodParameterType": "long#", "methodParameterName": "position#", "methodBody": "void sync(long position) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Move to the next synchronization point after a position. To process a range of file entires, call this with the starting position, then check {@link #pastSync(long)} with the end point before each call to{@link #next()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/FileReader.java", "methodName": "org.apache.avro.file.FileReader.pastSync", "methodParameterType": "long#", "methodParameterName": "position#", "methodBody": "boolean pastSync(long position) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Return true if past the next synchronization point after a position.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/FileReader.java", "methodName": "org.apache.avro.file.FileReader.tell", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long tell() throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Return the current position in the input.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "80", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.DataFileStream", "methodParameterType": "InputStream#DatumReader<D>#", "methodParameterName": "in#reader#", "methodBody": "public DataFileStream(InputStream in, DatumReader<D> reader) throws IOException {\n    this.reader = reader;\n    initialize(in);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct a reader for an input stream. For file-based input, use {@link DataFileReader}. This will buffer, wrapping with a {@link java.io.BufferedInputStream} is not necessary.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.DataFileStream", "methodParameterType": "DatumReader<D>#", "methodParameterName": "reader#", "methodBody": "protected DataFileStream(DatumReader<D> reader) throws IOException {\n    this.reader = reader;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "create an uninitialized DataFileStream", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.initialize", "methodParameterType": "InputStream#", "methodParameterName": "in#", "methodBody": "void initialize(InputStream in) throws IOException {\n    this.header = new Header();\n    this.vin = DecoderFactory.get().binaryDecoder(in, vin);\n    byte[] magic = new byte[DataFileConstants.MAGIC.length];\n    try {\n      vin.readFixed(magic); // read magic\n    } catch (IOException e) {\n      throw new IOException(\"Not an Avro data file.\", e);\n    }\n    if (!Arrays.equals(DataFileConstants.MAGIC, magic))\n      throw new InvalidAvroMagicException(\"Not an Avro data file.\");\n\n    long l = vin.readMapStart(); // read meta data\n    if (l > 0) {\n      do {\n        for (long i = 0; i < l; i++) {\n          String key = vin.readString(null).toString();\n          ByteBuffer value = vin.readBytes(null);\n          byte[] bb = new byte[value.remaining()];\n          value.get(bb);\n          header.meta.put(key, bb);\n          header.metaKeyList.add(key);\n        }\n      } while ((l = vin.mapNext()) != 0);\n    }\n    vin.readFixed(header.sync); // read sync\n\n    // finalize the header\n    header.metaKeyList = Collections.unmodifiableList(header.metaKeyList);\n    header.schema = new Schema.Parser().setValidate(false).parse(getMetaString(DataFileConstants.SCHEMA));\n    this.codec = resolveCodec();\n    reader.setSchema(header.schema);\n  }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NumberLiteral#InfixExpression#DoStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(DoStatement(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)DoStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initialize the stream by reading from its head.", "call_func_name": ["org.apache.avro.io.DecoderFactory.get", "org.apache.avro.io.DecoderFactory.binaryDecoder", "org.apache.avro.io.BinaryDecoder.readFixed", "java.io.IOException.<init>", "java.util.Arrays.equals", "org.apache.avro.InvalidAvroMagicException.<init>", "org.apache.avro.io.BinaryDecoder.readMapStart", "org.apache.avro.io.BinaryDecoder.readString", "org.apache.avro.util.Utf8.toString", "org.apache.avro.io.BinaryDecoder.readBytes", "java.nio.ByteBuffer.remaining", "java.nio.ByteBuffer.get", "java.util.Map.put", "java.util.List.add", "org.apache.avro.io.BinaryDecoder.mapNext", "java.util.Collections.unmodifiableList", "org.apache.avro.file.DataFileStream.getMetaString", "org.apache.avro.file.DataFileStream.resolveCodec", "org.apache.avro.io.DatumReader.setSchema"], "call_func_parameter": [[""], ["java.io.InputStream", "org.apache.avro.io.BinaryDecoder"], ["byte[]"], ["java.lang.String", "java.lang.Throwable"], ["byte[]", "byte[]"], ["java.lang.String"], [""], ["org.apache.avro.util.Utf8"], [""], ["java.nio.ByteBuffer"], [""], ["byte[]"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], [""], ["java.util.List"], ["java.lang.String"], [""], ["org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.io.DecoderFactory.get": "Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions. All creator methods create objects with default settings."}, {"org.apache.avro.io.DecoderFactory.binaryDecoder": "Creates or reinitializes a  {@link BinaryDecoder} with the input streamprovided as the source of data. If <i>reuse</i> is provided, it will be reinitialized to the given input stream. <p/> {@link BinaryDecoder} instances returned by this method buffer their input,reading up to  {@link #getConfiguredBufferSize()} bytes past the minimumrequired to satisfy read requests in order to achieve better performance. If the buffering is not desired, use {@link #directBinaryDecoder(InputStream,BinaryDecoder)}. <p/> {@link BinaryDecoder#inputStream()} provides a view on the data that isbuffer-aware, for users that need to interleave access to data with the Decoder API."}, {"org.apache.avro.file.DataFileStream.getMetaString": "Return the value of a metadata property."}, {"org.apache.avro.io.DatumReader.setSchema": "Set the writer's schema."}]}, {"index": "83", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.initialize", "methodParameterType": "InputStream#Header#", "methodParameterName": "in#header#", "methodBody": "void initialize(InputStream in, Header header) throws IOException {\n    this.header = header;\n    this.codec = resolveCodec();\n    reader.setSchema(header.schema);\n  }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initialize the stream without reading from it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.getHeader", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Header getHeader() {\n    return header;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A handle that can be used to reopen this stream without rereading the head.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.getSchema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Schema getSchema() {\n    return header.schema;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the schema used in this file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.getMetaKeys", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getMetaKeys() {\n    return header.metaKeyList;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the list of keys in the metadata", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "87", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.getMeta", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public byte[] getMeta(String key) {\n    return header.meta.get(key);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the value of a metadata property.", "call_func_name": ["java.util.Map.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.getMetaString", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public String getMetaString(String key) {\n    byte[] value = getMeta(key);\n    if (value == null) {\n      return null;\n    }\n    return new String(value, StandardCharsets.UTF_8);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the value of a metadata property.", "call_func_name": ["org.apache.avro.file.DataFileStream.getMeta", "java.lang.String.<init>"], "call_func_parameter": [["java.lang.String"], ["byte[]", "java.nio.charset.Charset"]], "passed_comments": [{"org.apache.avro.file.DataFileStream.getMeta": "Return the value of a metadata property."}]}, {"index": "89", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.getMetaLong", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public long getMetaLong(String key) {\n    return Long.parseLong(getMetaString(key));\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the value of a metadata property.", "call_func_name": ["org.apache.avro.file.DataFileStream.getMetaString", "java.lang.Long.parseLong"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.file.DataFileStream.getMetaString": "Return the value of a metadata property."}]}, {"index": "90", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.iterator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public Iterator<D> iterator() {\n    return this;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an iterator over entries in this file. Note that this iterator is shared with other users of the file: it does not contain a separate pointer into the file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "91", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.hasNext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public boolean hasNext() {\n    try {\n      if (blockRemaining == 0) {\n        // check that the previous block was finished\n        if (null != datumIn) {\n          boolean atEnd = datumIn.isEnd();\n          if (!atEnd) {\n            throw new IOException(\"Block read partially, the data may be corrupt\");\n          }\n        }\n        if (hasNextBlock()) {\n          block = nextRawBlock(block);\n          block.decompressUsing(codec);\n          blockBuffer = block.getAsByteBuffer();\n          datumIn = DecoderFactory.get().binaryDecoder(blockBuffer.array(),\n              blockBuffer.arrayOffset() + blockBuffer.position(), blockBuffer.remaining(), datumIn);\n        }\n      }\n      return blockRemaining != 0;\n    } catch (EOFException e) { // at EOF\n      return false;\n    } catch (IOException e) {\n      throw new AvroRuntimeException(e);\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#NullLiteral#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "True if more entries remain in this file.", "call_func_name": ["org.apache.avro.io.BinaryDecoder.isEnd", "java.io.IOException.<init>", "org.apache.avro.file.DataFileStream.hasNextBlock", "org.apache.avro.io.DecoderFactory.get", "java.nio.ByteBuffer.array", "java.nio.ByteBuffer.arrayOffset", "java.nio.ByteBuffer.position", "java.nio.ByteBuffer.remaining", "org.apache.avro.io.DecoderFactory.binaryDecoder", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], [""], [""], [""], ["byte[]", "int", "int", "org.apache.avro.io.BinaryDecoder"], ["java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.io.BinaryDecoder.isEnd": "Returns true if the current BinaryDecoder is at the end of its source data and cannot read any further without throwing an EOFException or other IOException. <p/> Not all implementations of BinaryDecoder support isEnd(). Implementations that do not support isEnd() will throw a {@link java.lang.UnsupportedOperationException}."}, {"org.apache.avro.io.DecoderFactory.get": "Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions. All creator methods create objects with default settings."}, {"org.apache.avro.io.DecoderFactory.binaryDecoder": "Creates or reinitializes a  {@link BinaryDecoder} with the byte array providedas the source of data. If <i>reuse</i> is provided, it will attempt to reinitialize <i>reuse</i> to the new byte array. This instance will use the provided byte array as its buffer. <p/> {@link BinaryDecoder#inputStream()} provides a view on the data that isbuffer-aware and can provide a view of the data not yet read by Decoder API methods."}]}, {"index": "92", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.next", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public D next() {\n    try {\n      return next(null);\n    } catch (IOException e) {\n      throw new AvroRuntimeException(e);\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Read the next datum in the file.", "call_func_name": ["org.apache.avro.file.DataFileStream.next", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "93", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.next", "methodParameterType": "D#", "methodParameterName": "reuse#", "methodBody": "public D next(D reuse) throws IOException {\n    if (!hasNext())\n      throw new NoSuchElementException();\n    D result = reader.read(reuse, datumIn);\n    if (0 == --blockRemaining) {\n      blockFinished();\n    }\n    return result;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NumberLiteral#SimpleName#PrefixExpression#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(NumberLiteral)NumberLiteral(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Read the next datum from the file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.nextBlock", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ByteBuffer nextBlock() throws IOException {\n    if (!hasNext())\n      throw new NoSuchElementException();\n    if (blockRemaining != blockCount)\n      throw new IllegalStateException(\"Not at block start.\");\n    blockRemaining = 0;\n    datumIn = null;\n    return blockBuffer;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Expert: Return the next block in the file, as binary-encoded data.", "call_func_name": ["org.apache.avro.file.DataFileStream.hasNext", "java.util.NoSuchElementException.<init>", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.file.DataFileStream.hasNext": "True if more entries remain in this file."}]}, {"index": "95", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.getBlockCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getBlockCount() {\n    return blockCount;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Expert: Return the count of items in the current block.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "96", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.getBlockSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getBlockSize() {\n    return blockSize;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Expert: Return the size in bytes (uncompressed) of the current block.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "97", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.remove", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void remove() {\n    throw new UnsupportedOperationException();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Not supported.", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/DataFileStream.java", "methodName": "org.apache.avro.file.DataFileStream.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void close() throws IOException {\n    vin.inputStream().close();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Close this reader.", "call_func_name": ["org.apache.avro.io.BinaryDecoder.inputStream", "java.io.InputStream.close"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.apache.avro.io.BinaryDecoder.inputStream": "Returns an  {@link java.io.InputStream} that is aware of any buffering thatmay occur in this BinaryDecoder. Readers that need to interleave decoding Avro data with other reads must access this InputStream to do so unless the implementation is 'direct' and does not read beyond the minimum bytes necessary from the source."}]}, {"index": "99", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/SeekableInput.java", "methodName": "org.apache.avro.file.SeekableInput.seek", "methodParameterType": "long#", "methodParameterName": "p#", "methodBody": "void seek(long p) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Set the position for the next  {@link java.io.InputStream#read(byte[],int,int) read()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/SeekableInput.java", "methodName": "org.apache.avro.file.SeekableInput.tell", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long tell() throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Return the position of the next {@link java.io.InputStream#read(byte[],int,int) read()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/SeekableInput.java", "methodName": "org.apache.avro.file.SeekableInput.length", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long length() throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Return the length of the file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/file/SeekableInput.java", "methodName": "org.apache.avro.file.SeekableInput.read", "methodParameterType": "byte[]#int#int#", "methodParameterName": "b#off#len#", "methodBody": "int read(byte[] b, int off, int len) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Equivalent to  {@link java.io.InputStream#read(byte[],int,int)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "103", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaCompatibility.java", "methodName": "org.apache.avro.SchemaCompatibility.SchemaCompatibility", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private SchemaCompatibility() {\n  }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Utility class cannot be instantiated.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaCompatibility.java", "methodName": "org.apache.avro.SchemaCompatibility.checkReaderWriterCompatibility", "methodParameterType": "Schema#Schema#", "methodParameterName": "reader#writer#", "methodBody": "public static SchemaPairCompatibility checkReaderWriterCompatibility(final Schema reader, final Schema writer) {\n    final SchemaCompatibilityResult compatibility = new ReaderWriterCompatibilityChecker().getCompatibility(reader,\n        writer);\n\n    final String message;\n    switch (compatibility.getCompatibility()) {\n    case INCOMPATIBLE: {\n      message = String.format(\n          \"Data encoded using writer schema:%n%s%n\" + \"will or may fail to decode using reader schema:%n%s%n\",\n          writer.toString(true), reader.toString(true));\n      break;\n    }\n    case COMPATIBLE: {\n      message = READER_WRITER_COMPATIBLE_MESSAGE;\n      break;\n    }\n    default:\n      throw new AvroRuntimeException(\"Unknown compatibility: \" + compatibility);\n    }\n\n    return new SchemaPairCompatibility(compatibility, reader, writer, message);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#InfixExpression#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#SimpleName#SwitchCase#SimpleName#SimpleName#Assignment#ExpressionStatement#BreakStatement#Block#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Validates that the provided reader schema can be used to decode avro data written with the provided writer schema.", "call_func_name": ["org.apache.avro.Schema.toString", "java.lang.String.format", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [["boolean"], ["java.lang.String", "java.lang.Object[]"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "105", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaCompatibility.java", "methodName": "org.apache.avro.SchemaCompatibility.schemaNameEquals", "methodParameterType": "Schema#Schema#", "methodParameterName": "reader#writer#", "methodBody": "public static boolean schemaNameEquals(final Schema reader, final Schema writer) {\n    if (objectsEqual(reader.getName(), writer.getName())) {\n      return true;\n    }\n    // Apply reader aliases:\n    return reader.getAliases().contains(writer.getFullName());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tests the equality of two Avro named schemas. <p> Matching includes reader name aliases. </p>", "call_func_name": ["org.apache.avro.Schema.getName", "org.apache.avro.SchemaCompatibility.objectsEqual", "org.apache.avro.Schema.getAliases", "org.apache.avro.Schema.getFullName", "java.util.Set.contains"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"], [""], [""], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.Schema.getName": "If this is a record, enum or fixed, returns its name, otherwise the name of the primitive type."}, {"org.apache.avro.SchemaCompatibility.objectsEqual": "Borrowed from Guava's Objects.equal(a, b)"}, {"org.apache.avro.Schema.getAliases": "If this is a record, enum or fixed, return its aliases, if any."}, {"org.apache.avro.Schema.getFullName": "If this is a record, enum or fixed, returns its namespace-qualified name, otherwise returns the name of the primitive type."}]}, {"index": "106", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaCompatibility.java", "methodName": "org.apache.avro.SchemaCompatibility.lookupWriterField", "methodParameterType": "Schema#Field#", "methodParameterName": "writerSchema#readerField#", "methodBody": "public static Field lookupWriterField(final Schema writerSchema, final Field readerField) {\n    assert (writerSchema.getType() == Type.RECORD);\n    final List<Field> writerFields = new ArrayList<>();\n    final Field direct = writerSchema.getField(readerField.name());\n    if (direct != null) {\n      writerFields.add(direct);\n    }\n    for (final String readerFieldAliasName : readerField.aliases()) {\n      final Field writerField = writerSchema.getField(readerFieldAliasName);\n      if (writerField != null) {\n        writerFields.add(writerField);\n      }\n    }\n    switch (writerFields.size()) {\n    case 0:\n      return null;\n    case 1:\n      return writerFields.get(0);\n    default: {\n      throw new AvroRuntimeException(String.format(\n          \"Reader record field %s matches multiple fields in writer record schema %s\", readerField, writerSchema));\n    }\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#AssertStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#SwitchCase#NullLiteral#ReturnStatement#NumberLiteral#SwitchCase#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(AssertStatement(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)AssertStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement(SwitchCase)SwitchCase(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Identifies the writer field that corresponds to the specified reader field. <p> Matching includes reader name aliases. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaCompatibility.java", "methodName": "org.apache.avro.SchemaCompatibility.objectsEqual", "methodParameterType": "Object#Object#", "methodParameterName": "obj1#obj2#", "methodBody": "private static boolean objectsEqual(Object obj1, Object obj2) {\n    return Objects.equals(obj1, obj2);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Borrowed from Guava's Objects.equal(a, b)", "call_func_name": ["java.util.Objects.equals"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "108", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/JsonProperties.java", "methodName": "org.apache.avro.JsonProperties.getProp", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public String getProp(String name) {\n    JsonNode value = getJsonProp(name);\n    return value != null && value.isTextual() ? value.textValue() : null;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of the named, string-valued property in this schema. Returns <tt>null</tt> if there is no string-valued property with that name.", "call_func_name": ["org.apache.avro.JsonProperties.getJsonProp", "com.fasterxml.jackson.databind.JsonNode.isTextual", "com.fasterxml.jackson.databind.JsonNode.textValue"], "call_func_parameter": [["java.lang.String"], [""], [""]], "passed_comments": [{"org.apache.avro.JsonProperties.getJsonProp": "Returns the value of the named property in this schema. Returns <tt>null</tt> if there is no property with that name."}]}, {"index": "109", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/JsonProperties.java", "methodName": "org.apache.avro.JsonProperties.getJsonProp", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "private JsonNode getJsonProp(String name) {\n    return props.get(name);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of the named property in this schema. Returns <tt>null</tt> if there is no property with that name.", "call_func_name": ["java.util.concurrent.ConcurrentMap.get"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/JsonProperties.java", "methodName": "org.apache.avro.JsonProperties.getObjectProp", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public Object getObjectProp(String name) {\n    return JacksonUtils.toObject(props.get(name));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value of the named property in this schema. Returns <tt>null</tt> if there is no property with that name.", "call_func_name": ["java.util.concurrent.ConcurrentMap.get", "org.apache.avro.util.internal.JacksonUtils.toObject"], "call_func_parameter": [["java.lang.Object"], ["com.fasterxml.jackson.databind.JsonNode"]], "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/JsonProperties.java", "methodName": "org.apache.avro.JsonProperties.addProp", "methodParameterType": "String#String#", "methodParameterName": "name#value#", "methodBody": "public void addProp(String name, String value) {\n    addProp(name, TextNode.valueOf(value));\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a property with the given name <tt>name</tt> and value <tt>value</tt>. Neither <tt>name</tt> nor <tt>value</tt> can be <tt>null</tt>. It is illegal to add a property if another with the same name but different value already exists in this schema.", "call_func_name": ["com.fasterxml.jackson.databind.node.TextNode.valueOf", "org.apache.avro.JsonProperties.addProp"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "com.fasterxml.jackson.databind.JsonNode"]], "passed_comments": [{"org.apache.avro.JsonProperties.addProp": "Adds a property with the given name <tt>name</tt> and value <tt>value</tt>. Neither <tt>name</tt> nor <tt>value</tt> can be <tt>null</tt>. It is illegal to add a property if another with the same name but different value already exists in this schema."}]}, {"index": "112", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/JsonProperties.java", "methodName": "org.apache.avro.JsonProperties.addProp", "methodParameterType": "String#JsonNode#", "methodParameterName": "name#value#", "methodBody": "private void addProp(String name, JsonNode value) {\n    if (reserved.contains(name))\n      throw new AvroRuntimeException(\"Can't set reserved property: \" + name);\n\n    if (value == null)\n      throw new AvroRuntimeException(\"Can't set a property to null: \" + name);\n\n    JsonNode old = props.putIfAbsent(name, value);\n    if (old != null && !old.equals(value)) {\n      throw new AvroRuntimeException(\"Can't overwrite property: \" + name);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds a property with the given name <tt>name</tt> and value <tt>value</tt>. Neither <tt>name</tt> nor <tt>value</tt> can be <tt>null</tt>. It is illegal to add a property if another with the same name but different value already exists in this schema.", "call_func_name": ["java.util.Set.contains", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>", "java.util.concurrent.ConcurrentMap.putIfAbsent", "com.fasterxml.jackson.databind.JsonNode.equals"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/JsonProperties.java", "methodName": "org.apache.avro.JsonProperties.addAllProps", "methodParameterType": "JsonProperties#", "methodParameterName": "properties#", "methodBody": "public void addAllProps(JsonProperties properties) {\n    for (Entry<String, JsonNode> entry : properties.props.entrySet())\n      addProp(entry.getKey(), entry.getValue());\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Adds all the props from the specified json properties.", "call_func_name": ["java.util.concurrent.ConcurrentMap.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.JsonProperties.addProp"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String", "com.fasterxml.jackson.databind.JsonNode"]], "passed_comments": [{"org.apache.avro.JsonProperties.addProp": "Adds a property with the given name <tt>name</tt> and value <tt>value</tt>. Neither <tt>name</tt> nor <tt>value</tt> can be <tt>null</tt>. It is illegal to add a property if another with the same name but different value already exists in this schema."}]}, {"index": "114", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/JsonProperties.java", "methodName": "org.apache.avro.JsonProperties.getObjectProps", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, Object> getObjectProps() {\n    Map<String, Object> result = new LinkedHashMap<>();\n    for (Map.Entry<String, JsonNode> e : props.entrySet())\n      result.put(e.getKey(), JacksonUtils.toObject(e.getValue()));\n    return Collections.unmodifiableMap(result);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the defined properties as an unmodifiable Map.", "call_func_name": ["java.util.LinkedHashMap.<init>", "java.util.concurrent.ConcurrentMap.entrySet", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.util.internal.JacksonUtils.toObject", "java.util.Map.put", "java.util.Collections.unmodifiableMap"], "call_func_parameter": [[""], [""], [""], [""], [""], ["com.fasterxml.jackson.databind.JsonNode"], ["java.lang.Object", "java.lang.Object"], ["java.util.Map"]], "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.create", "methodParameterType": "Type#", "methodParameterName": "type#", "methodBody": "public static Schema create(Type type) {\n    switch (type) {\n    case STRING:\n      return new StringSchema();\n    case BYTES:\n      return new BytesSchema();\n    case INT:\n      return new IntSchema();\n    case LONG:\n      return new LongSchema();\n    case FLOAT:\n      return new FloatSchema();\n    case DOUBLE:\n      return new DoubleSchema();\n    case BOOLEAN:\n      return new BooleanSchema();\n    case NULL:\n      return new NullSchema();\n    default:\n      throw new AvroRuntimeException(\"Can't create a: \" + type);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Create a schema for a primitive type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.createRecord", "methodParameterType": "List<Field>#", "methodParameterName": "fields#", "methodBody": "@Deprecated\n  public static Schema createRecord(List<Field> fields) {\n    Schema result = createRecord(null, null, null, false);\n    result.setFields(fields);\n    return result;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an anonymous record schema.", "call_func_name": ["org.apache.avro.Schema.createRecord", "org.apache.avro.Schema.setFields"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "boolean"], ["java.util.List"]], "passed_comments": [{"org.apache.avro.Schema.createRecord": "Create a named record schema."}, {"org.apache.avro.Schema.setFields": "If this is a record, set its fields. The fields can be set only once in a schema."}]}, {"index": "117", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.createRecord", "methodParameterType": "String#String#String#boolean#", "methodParameterName": "name#doc#namespace#isError#", "methodBody": "public static Schema createRecord(String name, String doc, String namespace, boolean isError) {\n    return new RecordSchema(new Name(name, namespace), doc, isError);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a named record schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.createRecord", "methodParameterType": "String#String#String#boolean#List<Field>#", "methodParameterName": "name#doc#namespace#isError#fields#", "methodBody": "public static Schema createRecord(String name, String doc, String namespace, boolean isError, List<Field> fields) {\n    return new RecordSchema(new Name(name, namespace), doc, isError, fields);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a named record schema with fields already set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.createEnum", "methodParameterType": "String#String#String#List<String>#", "methodParameterName": "name#doc#namespace#values#", "methodBody": "public static Schema createEnum(String name, String doc, String namespace, List<String> values) {\n    return new EnumSchema(new Name(name, namespace), doc, new LockableArrayList<>(values), null);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#NullLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation(NullLiteral)NullLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an enum schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.createEnum", "methodParameterType": "String#String#String#List<String>#String#", "methodParameterName": "name#doc#namespace#values#enumDefault#", "methodBody": "public static Schema createEnum(String name, String doc, String namespace, List<String> values, String enumDefault) {\n    return new EnumSchema(new Name(name, namespace), doc, new LockableArrayList<>(values), enumDefault);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an enum schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.createArray", "methodParameterType": "Schema#", "methodParameterName": "elementType#", "methodBody": "public static Schema createArray(Schema elementType) {\n    return new ArraySchema(elementType);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an array schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.createMap", "methodParameterType": "Schema#", "methodParameterName": "valueType#", "methodBody": "public static Schema createMap(Schema valueType) {\n    return new MapSchema(valueType);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a map schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "123", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.createUnion", "methodParameterType": "List<Schema>#", "methodParameterName": "types#", "methodBody": "public static Schema createUnion(List<Schema> types) {\n    return new UnionSchema(new LockableArrayList<>(types));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a union schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.createUnion", "methodParameterType": "Schema#", "methodParameterName": "types#", "methodBody": "public static Schema createUnion(Schema... types) {\n    return createUnion(new LockableArrayList<>(types));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a union schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.createFixed", "methodParameterType": "String#String#String#int#", "methodParameterName": "name#doc#space#size#", "methodBody": "public static Schema createFixed(String name, String doc, String space, int size) {\n    return new FixedSchema(new Name(name, space), doc, size);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a fixed schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Type getType() {\n    return type;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the type of this schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getField", "methodParameterType": "String#", "methodParameterName": "fieldname#", "methodBody": "public Field getField(String fieldname) {\n    throw new AvroRuntimeException(\"Not a record: \" + this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is a record, returns the Field with the given name <tt>fieldName</tt>. If there is no field by that name, a <tt>null</tt> is returned.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getFields", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Field> getFields() {\n    throw new AvroRuntimeException(\"Not a record: \" + this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is a record, returns the fields in it. The returned list is in the order of their positions.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.setFields", "methodParameterType": "List<Field>#", "methodParameterName": "fields#", "methodBody": "public void setFields(List<Field> fields) {\n    throw new AvroRuntimeException(\"Not a record: \" + this);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is a record, set its fields. The fields can be set only once in a schema.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getEnumSymbols", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<String> getEnumSymbols() {\n    throw new AvroRuntimeException(\"Not an enum: \" + this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is an enum, return its symbols.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getEnumDefault", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getEnumDefault() {\n    throw new AvroRuntimeException(\"Not an enum: \" + this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is an enum, return its default value.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getEnumOrdinal", "methodParameterType": "String#", "methodParameterName": "symbol#", "methodBody": "public int getEnumOrdinal(String symbol) {\n    throw new AvroRuntimeException(\"Not an enum: \" + this);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is an enum, return a symbol's ordinal value.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.hasEnumSymbol", "methodParameterType": "String#", "methodParameterName": "symbol#", "methodBody": "public boolean hasEnumSymbol(String symbol) {\n    throw new AvroRuntimeException(\"Not an enum: \" + this);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is an enum, returns true if it contains given symbol.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "134", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n    return type.name;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If this is a record, enum or fixed, returns its name, otherwise the name of the primitive type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "135", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getDoc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDoc() {\n    return null;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If this is a record, enum, or fixed, returns its docstring, if available. Otherwise, returns null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "136", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getNamespace", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNamespace() {\n    throw new AvroRuntimeException(\"Not a named type: \" + this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is a record, enum or fixed, returns its namespace, if any.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getFullName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFullName() {\n    return getName();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If this is a record, enum or fixed, returns its namespace-qualified name, otherwise returns the name of the primitive type.", "call_func_name": ["org.apache.avro.Schema.getName"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.Schema.getName": "If this is a record, enum or fixed, returns its name, otherwise the name of the primitive type."}]}, {"index": "138", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.addAlias", "methodParameterType": "String#", "methodParameterName": "alias#", "methodBody": "public void addAlias(String alias) {\n    throw new AvroRuntimeException(\"Not a named type: \" + this);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is a record, enum or fixed, add an alias.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "139", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.addAlias", "methodParameterType": "String#String#", "methodParameterName": "alias#space#", "methodBody": "public void addAlias(String alias, String space) {\n    throw new AvroRuntimeException(\"Not a named type: \" + this);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is a record, enum or fixed, add an alias.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getAliases", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<String> getAliases() {\n    throw new AvroRuntimeException(\"Not a named type: \" + this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is a record, enum or fixed, return its aliases, if any.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.isError", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isError() {\n    throw new AvroRuntimeException(\"Not a record: \" + this);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Returns true if this record is an error type.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "142", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getElementType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Schema getElementType() {\n    throw new AvroRuntimeException(\"Not an array: \" + this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is an array, returns its element type.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "143", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getValueType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Schema getValueType() {\n    throw new AvroRuntimeException(\"Not a map: \" + this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is a map, returns its value type.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "144", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getTypes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Schema> getTypes() {\n    throw new AvroRuntimeException(\"Not a union: \" + this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is a union, returns its types.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getIndexNamed", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public Integer getIndexNamed(String name) {\n    throw new AvroRuntimeException(\"Not a union: \" + this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is a union, return the branch with the provided full name.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "146", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getFixedSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getFixedSize() {\n    throw new AvroRuntimeException(\"Not fixed: \" + this);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "If this is fixed, returns its size.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "147", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public String toString() {\n    return toString(false);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Render this as <a href=\"https://json.org/\">JSON</a>.", "call_func_name": ["org.apache.avro.Schema.toString"], "call_func_parameter": [["boolean"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "148", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.toString", "methodParameterType": "boolean#", "methodParameterName": "pretty#", "methodBody": "public String toString(boolean pretty) {\n    try {\n      StringWriter writer = new StringWriter();\n      JsonGenerator gen = FACTORY.createGenerator(writer);\n      if (pretty)\n        gen.useDefaultPrettyPrinter();\n      toJson(new Names(), gen);\n      gen.flush();\n      return writer.toString();\n    } catch (IOException e) {\n      throw new AvroRuntimeException(e);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Render this as <a href=\"https://json.org/\">JSON</a>.", "call_func_name": ["java.io.StringWriter.<init>", "com.fasterxml.jackson.core.JsonFactory.createGenerator", "com.fasterxml.jackson.core.JsonGenerator.useDefaultPrettyPrinter", "com.fasterxml.jackson.core.JsonGenerator.flush", "java.io.StringWriter.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.io.Writer"], [""], [""], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "149", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.isUnion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isUnion() {\n    return this instanceof UnionSchema;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InstanceofExpression(ThisExpression)ThisExpression(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if this record is an union type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "150", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.isNullable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isNullable() {\n    if (!isUnion()) {\n      return getType().equals(Schema.Type.NULL);\n    }\n\n    for (Schema schema : getTypes()) {\n      if (schema.isNullable()) {\n        return true;\n      }\n    }\n\n    return false;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if this record is an union type containing null.", "call_func_name": ["org.apache.avro.Schema.isUnion", "org.apache.avro.Schema.getType", "org.apache.avro.Schema.getTypes", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.Schema.isNullable"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], [""]], "passed_comments": [{"org.apache.avro.Schema.isUnion": "Returns true if this record is an union type."}, {"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}, {"org.apache.avro.Schema.isNullable": "Returns true if this record is an union type containing null."}]}, {"index": "151", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.parse", "methodParameterType": "File#", "methodParameterName": "file#", "methodBody": "@Deprecated\n  public static Schema parse(File file) throws IOException {\n    return new Parser().parse(file);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Constructs a Schema object from JSON schema file <tt>file</tt>. The contents of <tt>file</tt> is expected to be in UTF-8 format.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "152", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.parse", "methodParameterType": "InputStream#", "methodParameterName": "in#", "methodBody": "@Deprecated\n  public static Schema parse(InputStream in) throws IOException {\n    return new Parser().parse(in);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Constructs a Schema object from JSON schema stream <tt>in</tt>. The contents of <tt>in</tt> is expected to be in UTF-8 format.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "153", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.parse", "methodParameterType": "String#", "methodParameterName": "jsonSchema#", "methodBody": "@Deprecated\n  public static Schema parse(String jsonSchema) {\n    return new Parser().parse(jsonSchema);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a schema from <a href=\"https://json.org/\">JSON</a> text.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "154", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.parse", "methodParameterType": "String#boolean#", "methodParameterName": "jsonSchema#validate#", "methodBody": "@Deprecated\n  public static Schema parse(String jsonSchema, boolean validate) {\n    return new Parser().setValidate(validate).parse(jsonSchema);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Construct a schema from <a href=\"https://json.org/\">JSON</a> text.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "155", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.parse", "methodParameterType": "JsonNode#Names#", "methodParameterName": "schema#names#", "methodBody": "static Schema parse(JsonNode schema, Names names) {\n    if (schema == null) {\n      throw new SchemaParseException(\"Cannot parse <null> schema\");\n    }\n    if (schema.isTextual()) { // name\n      Schema result = names.get(schema.textValue());\n      if (result == null)\n        throw new SchemaParseException(\"Undefined name: \" + schema);\n      return result;\n    } else if (schema.isObject()) {\n      Schema result;\n      String type = getRequiredText(schema, \"type\", \"No type\");\n      Name name = null;\n      String savedSpace = names.space();\n      String doc = null;\n      if (type.equals(\"record\") || type.equals(\"error\") || type.equals(\"enum\") || type.equals(\"fixed\")) {\n        String space = getOptionalText(schema, \"namespace\");\n        doc = getOptionalText(schema, \"doc\");\n        if (space == null)\n          space = names.space();\n        name = new Name(getRequiredText(schema, \"name\", \"No name in schema\"), space);\n        if (name.space != null) { // set default namespace\n          names.space(name.space);\n        }\n      }\n      if (PRIMITIVES.containsKey(type)) { // primitive\n        result = create(PRIMITIVES.get(type));\n      } else if (type.equals(\"record\") || type.equals(\"error\")) { // record\n        List<Field> fields = new ArrayList<>();\n        result = new RecordSchema(name, doc, type.equals(\"error\"));\n        if (name != null)\n          names.add(result);\n        JsonNode fieldsNode = schema.get(\"fields\");\n        if (fieldsNode == null || !fieldsNode.isArray())\n          throw new SchemaParseException(\"Record has no fields: \" + schema);\n        for (JsonNode field : fieldsNode) {\n          String fieldName = getRequiredText(field, \"name\", \"No field name\");\n          String fieldDoc = getOptionalText(field, \"doc\");\n          JsonNode fieldTypeNode = field.get(\"type\");\n          if (fieldTypeNode == null)\n            throw new SchemaParseException(\"No field type: \" + field);\n          if (fieldTypeNode.isTextual() && names.get(fieldTypeNode.textValue()) == null)\n            throw new SchemaParseException(fieldTypeNode + \" is not a defined name.\" + \" The type of the \\\"\" + fieldName\n                + \"\\\" field must be\" + \" a defined name or a {\\\"type\\\": ...} expression.\");\n          Schema fieldSchema = parse(fieldTypeNode, names);\n          Field.Order order = Field.Order.ASCENDING;\n          JsonNode orderNode = field.get(\"order\");\n          if (orderNode != null)\n            order = Field.Order.valueOf(orderNode.textValue().toUpperCase(Locale.ENGLISH));\n          JsonNode defaultValue = field.get(\"default\");\n          if (defaultValue != null\n              && (Type.FLOAT.equals(fieldSchema.getType()) || Type.DOUBLE.equals(fieldSchema.getType()))\n              && defaultValue.isTextual())\n            defaultValue = new DoubleNode(Double.valueOf(defaultValue.textValue()));\n          Field f = new Field(fieldName, fieldSchema, fieldDoc, defaultValue, true, order);\n          Iterator<String> i = field.fieldNames();\n          while (i.hasNext()) { // add field props\n            String prop = i.next();\n            if (!FIELD_RESERVED.contains(prop))\n              f.addProp(prop, field.get(prop));\n          }\n          f.aliases = parseAliases(field);\n          fields.add(f);\n        }\n        result.setFields(fields);\n      } else if (type.equals(\"enum\")) { // enum\n        JsonNode symbolsNode = schema.get(\"symbols\");\n        if (symbolsNode == null || !symbolsNode.isArray())\n          throw new SchemaParseException(\"Enum has no symbols: \" + schema);\n        LockableArrayList<String> symbols = new LockableArrayList<>(symbolsNode.size());\n        for (JsonNode n : symbolsNode)\n          symbols.add(n.textValue());\n        JsonNode enumDefault = schema.get(\"default\");\n        String defaultSymbol = null;\n        if (enumDefault != null)\n          defaultSymbol = enumDefault.textValue();\n        result = new EnumSchema(name, doc, symbols, defaultSymbol);\n        if (name != null)\n          names.add(result);\n      } else if (type.equals(\"array\")) { // array\n        JsonNode itemsNode = schema.get(\"items\");\n        if (itemsNode == null)\n          throw new SchemaParseException(\"Array has no items type: \" + schema);\n        result = new ArraySchema(parse(itemsNode, names));\n      } else if (type.equals(\"map\")) { // map\n        JsonNode valuesNode = schema.get(\"values\");\n        if (valuesNode == null)\n          throw new SchemaParseException(\"Map has no values type: \" + schema);\n        result = new MapSchema(parse(valuesNode, names));\n      } else if (type.equals(\"fixed\")) { // fixed\n        JsonNode sizeNode = schema.get(\"size\");\n        if (sizeNode == null || !sizeNode.isInt())\n          throw new SchemaParseException(\"Invalid or no size: \" + schema);\n        result = new FixedSchema(name, doc, sizeNode.intValue());\n        if (name != null)\n          names.add(result);\n      } else { // For unions with self reference\n        Name nameFromType = new Name(type, names.space);\n        if (names.containsKey(nameFromType)) {\n          return names.get(nameFromType);\n        }\n        throw new SchemaParseException(\"Type not supported: \" + type);\n      }\n      Iterator<String> i = schema.fieldNames();\n\n      Set reserved = SCHEMA_RESERVED;\n      if (type.equals(\"enum\")) {\n        reserved = ENUM_RESERVED;\n      }\n      while (i.hasNext()) { // add properties\n        String prop = i.next();\n        if (!reserved.contains(prop)) // ignore reserved\n          result.addProp(prop, schema.get(prop));\n      }\n      // parse logical type if present\n      result.logicalType = LogicalTypes.fromSchemaIgnoreInvalid(result);\n      names.space(savedSpace); // restore space\n      if (result instanceof NamedSchema) {\n        Set<String> aliases = parseAliases(schema);\n        if (aliases != null) // add aliases\n          for (String alias : aliases)\n            result.addAlias(alias);\n      }\n      return result;\n    } else if (schema.isArray()) { // union\n      LockableArrayList<Schema> types = new LockableArrayList<>(schema.size());\n      for (JsonNode typeNode : schema)\n        types.add(parse(typeNode, names));\n      return new UnionSchema(types);\n    } else {\n      throw new SchemaParseException(\"Schema not yet supported: \" + schema);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#SimpleName#StringLiteral#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#EnhancedForStatement#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#EnhancedForStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement)Block)WhileStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement)Block)WhileStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)EnhancedForStatement)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)EnhancedForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "@see #parse(String)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getRequiredText", "methodParameterType": "JsonNode#String#String#", "methodParameterName": "container#key#error#", "methodBody": "private static String getRequiredText(JsonNode container, String key, String error) {\n    String out = getOptionalText(container, key);\n    if (null == out) {\n      throw new SchemaParseException(error + \": \" + container);\n    }\n    return out;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts text value associated to key from the container JsonNode, and throws {@link SchemaParseException} if it doesn't exist.", "call_func_name": ["org.apache.avro.Schema.getOptionalText", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.SchemaParseException.<init>"], "call_func_parameter": [["com.fasterxml.jackson.databind.JsonNode", "java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getOptionalText": "Extracts text value associated to key from the container JsonNode."}]}, {"index": "157", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.getOptionalText", "methodParameterType": "JsonNode#String#", "methodParameterName": "container#key#", "methodBody": "private static String getOptionalText(JsonNode container, String key) {\n    JsonNode jsonNode = container.get(key);\n    return jsonNode != null ? jsonNode.textValue() : null;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extracts text value associated to key from the container JsonNode.", "call_func_name": ["com.fasterxml.jackson.databind.JsonNode.get", "com.fasterxml.jackson.databind.JsonNode.textValue"], "call_func_parameter": [["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.parseJsonToObject", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static Object parseJsonToObject(String s) {\n    return JacksonUtils.toObject(parseJson(s));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Parses the specified json string to an object.", "call_func_name": ["org.apache.avro.Schema.parseJson", "org.apache.avro.util.internal.JacksonUtils.toObject"], "call_func_parameter": [["java.lang.String"], ["com.fasterxml.jackson.databind.JsonNode"]], "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Schema.java", "methodName": "org.apache.avro.Schema.applyAliases", "methodParameterType": "Schema#Schema#", "methodParameterName": "writer#reader#", "methodBody": "public static Schema applyAliases(Schema writer, Schema reader) {\n    if (writer.equals(reader))\n      return writer; // same schema\n\n    // create indexes of names\n    Map<Schema, Schema> seen = new IdentityHashMap<>(1);\n    Map<Name, Name> aliases = new HashMap<>(1);\n    Map<Name, Map<String, String>> fieldAliases = new HashMap<>(1);\n    getAliases(reader, seen, aliases, fieldAliases);\n\n    if (aliases.size() == 0 && fieldAliases.size() == 0)\n      return writer; // no aliases\n\n    seen.clear();\n    return applyAliases(writer, seen, aliases, fieldAliases);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Rewrite a writer's schema using the aliases from a reader's schema. This permits reading records, enums and fixed schemas whose names have changed, and records whose field names have changed. The returned schema always contains the same data elements in the same order, but with possibly different names.", "call_func_name": ["org.apache.avro.Schema.equals", "java.util.IdentityHashMap.<init>", "java.util.HashMap.<init>", "org.apache.avro.Schema.getAliases", "java.util.Map.size", "java.util.Map.clear", "org.apache.avro.Schema.applyAliases"], "call_func_parameter": [["java.lang.Object"], ["int"], ["int"], ["org.apache.avro.Schema", "java.util.Map", "java.util.Map", "java.util.Map"], [""], [""], ["org.apache.avro.Schema", "java.util.Map", "java.util.Map", "java.util.Map"]], "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java", "methodName": "org.apache.avro.SchemaBuilder.builder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static TypeBuilder<Schema> builder() {\n    return new TypeBuilder<>(new SchemaCompletion(), new NameContext());\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a builder for Avro schemas.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java", "methodName": "org.apache.avro.SchemaBuilder.builder", "methodParameterType": "String#", "methodParameterName": "namespace#", "methodBody": "public static TypeBuilder<Schema> builder(String namespace) {\n    return new TypeBuilder<>(new SchemaCompletion(), new NameContext().namespace(namespace));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a builder for Avro schemas with a default namespace. Types created without namespaces will inherit the namespace provided.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java", "methodName": "org.apache.avro.SchemaBuilder.record", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public static RecordBuilder<Schema> record(String name) {\n    return builder().record(name);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a builder for an Avro record with the specified name. This is equivalent to: <pre> builder().record(name); </pre>", "call_func_name": ["org.apache.avro.SchemaBuilder.builder"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas."}, {"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas with a default namespace. Types created without namespaces will inherit the namespace provided."}]}, {"index": "163", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java", "methodName": "org.apache.avro.SchemaBuilder.enumeration", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public static EnumBuilder<Schema> enumeration(String name) {\n    return builder().enumeration(name);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a builder for an Avro enum with the specified name and symbols (values). This is equivalent to: <pre> builder().enumeration(name); </pre>", "call_func_name": ["org.apache.avro.SchemaBuilder.builder"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas."}, {"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas with a default namespace. Types created without namespaces will inherit the namespace provided."}]}, {"index": "164", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java", "methodName": "org.apache.avro.SchemaBuilder.fixed", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public static FixedBuilder<Schema> fixed(String name) {\n    return builder().fixed(name);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a builder for an Avro fixed type with the specified name and size. This is equivalent to: <pre> builder().fixed(name); </pre>", "call_func_name": ["org.apache.avro.SchemaBuilder.builder"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas."}, {"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas with a default namespace. Types created without namespaces will inherit the namespace provided."}]}, {"index": "165", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java", "methodName": "org.apache.avro.SchemaBuilder.array", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ArrayBuilder<Schema> array() {\n    return builder().array();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a builder for an Avro array This is equivalent to: <pre> builder().array(); </pre>", "call_func_name": ["org.apache.avro.SchemaBuilder.builder"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas."}, {"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas with a default namespace. Types created without namespaces will inherit the namespace provided."}]}, {"index": "166", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java", "methodName": "org.apache.avro.SchemaBuilder.map", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static MapBuilder<Schema> map() {\n    return builder().map();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a builder for an Avro map This is equivalent to: <pre> builder().map(); </pre>", "call_func_name": ["org.apache.avro.SchemaBuilder.builder"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas."}, {"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas with a default namespace. Types created without namespaces will inherit the namespace provided."}]}, {"index": "167", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java", "methodName": "org.apache.avro.SchemaBuilder.unionOf", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BaseTypeBuilder<UnionAccumulator<Schema>> unionOf() {\n    return builder().unionOf();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a builder for an Avro union This is equivalent to: <pre> builder().unionOf(); </pre>", "call_func_name": ["org.apache.avro.SchemaBuilder.builder"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas."}, {"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas with a default namespace. Types created without namespaces will inherit the namespace provided."}]}, {"index": "168", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaBuilder.java", "methodName": "org.apache.avro.SchemaBuilder.nullable", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BaseTypeBuilder<Schema> nullable() {\n    return builder().nullable();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a builder for a union of a type and null. This is a shortcut for: <pre> builder().nullable(); </pre> and the following two lines are equivalent: <pre> nullable().intType(); </pre> <pre> unionOf().intType().and().nullType().endUnion(); </pre>", "call_func_name": ["org.apache.avro.SchemaBuilder.builder"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas."}, {"org.apache.avro.SchemaBuilder.builder": "Create a builder for Avro schemas with a default namespace. Types created without namespaces will inherit the namespace provided."}]}, {"index": "169", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaValidatorBuilder.java", "methodName": "org.apache.avro.SchemaValidatorBuilder.canReadStrategy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SchemaValidatorBuilder canReadStrategy() {\n    this.strategy = new ValidateCanRead();\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Use a strategy that validates that a schema can be used to read existing schema(s) according to the Avro default schema resolution.", "call_func_name": ["org.apache.avro.ValidateCanRead.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaValidatorBuilder.java", "methodName": "org.apache.avro.SchemaValidatorBuilder.canBeReadStrategy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SchemaValidatorBuilder canBeReadStrategy() {\n    this.strategy = new ValidateCanBeRead();\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Use a strategy that validates that a schema can be read by existing schema(s) according to the Avro default schema resolution.", "call_func_name": ["org.apache.avro.ValidateCanBeRead.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "171", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaValidatorBuilder.java", "methodName": "org.apache.avro.SchemaValidatorBuilder.mutualReadStrategy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SchemaValidatorBuilder mutualReadStrategy() {\n    this.strategy = new ValidateMutualRead();\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Use a strategy that validates that a schema can read existing schema(s), and vice-versa, according to the Avro default schema resolution.", "call_func_name": ["org.apache.avro.ValidateMutualRead.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "172", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.Protocol", "methodParameterType": "Protocol#", "methodParameterName": "p#", "methodBody": "public Protocol(Protocol p) {\n    this(p.getName(), p.getDoc(), p.getNamespace());\n    putAll(p);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a similar Protocol instance with the same  {@code name}, {@code doc}, and  {@code namespace} as {code p} has. It also copies all the{@code props}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "173", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n    return name;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The name of this protocol.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "174", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.getNamespace", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getNamespace() {\n    return namespace;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The namespace of this protocol. Qualifies its name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "175", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.getDoc", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDoc() {\n    return doc;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Doc string for this protocol.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "176", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.getTypes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<Schema> getTypes() {\n    return types.values();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The types of this protocol.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "177", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.getType", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public Schema getType(String name) {\n    return types.get(name);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the named type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "178", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.setTypes", "methodParameterType": "Collection<Schema>#", "methodParameterName": "newTypes#", "methodBody": "public void setTypes(Collection<Schema> newTypes) {\n    types = new Schema.Names();\n    for (Schema s : newTypes)\n      types.add(s);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Set the types of this protocol.", "call_func_name": ["java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "179", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.getMessages", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, Message> getMessages() {\n    return messages;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The messages of this protocol.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "180", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.createMessage", "methodParameterType": "String#String#Schema#", "methodParameterName": "name#doc#request#", "methodBody": "@Deprecated\n  public Message createMessage(String name, String doc, Schema request) {\n    return new Message(name, doc, new LinkedHashMap<String, String>(), request);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a one-way message.", "call_func_name": ["java.util.LinkedHashMap.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "181", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.createMessage", "methodParameterType": "Message#Schema#", "methodParameterName": "m#request#", "methodBody": "public Message createMessage(Message m, Schema request) {\n    return new Message(name, doc, m, request);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a one-way message using the  {@code name},  {@code doc}, and {@code props} of {@code m}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "182", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.createMessage", "methodParameterType": "String#String#JsonProperties#Schema#", "methodParameterName": "name#doc#propMap#request#", "methodBody": "public <T> Message createMessage(String name, String doc, JsonProperties propMap, Schema request) {\n    return new Message(name, doc, propMap, request);\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a one-way message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "183", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.createMessage", "methodParameterType": "String#String#Map<String,?>#Schema#", "methodParameterName": "name#doc#propMap#request#", "methodBody": "public <T> Message createMessage(String name, String doc, Map<String, ?> propMap, Schema request) {\n    return new Message(name, doc, propMap, request);\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a one-way message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "184", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.createMessage", "methodParameterType": "String#String#Schema#Schema#Schema#", "methodParameterName": "name#doc#request#response#errors#", "methodBody": "@Deprecated\n  public Message createMessage(String name, String doc, Schema request, Schema response, Schema errors) {\n    return new TwoWayMessage(name, doc, new LinkedHashMap<String, String>(), request, response, errors);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a two-way message.", "call_func_name": ["java.util.LinkedHashMap.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.createMessage", "methodParameterType": "Message#Schema#Schema#Schema#", "methodParameterName": "m#request#response#errors#", "methodBody": "public Message createMessage(Message m, Schema request, Schema response, Schema errors) {\n    return new TwoWayMessage(m.getName(), m.getDoc(), m, request, response, errors);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a two-way message using the  {@code name},  {@code doc}, and {@code props} of {@code m}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.createMessage", "methodParameterType": "String#String#JsonProperties#Schema#Schema#Schema#", "methodParameterName": "name#doc#propMap#request#response#errors#", "methodBody": "public <T> Message createMessage(String name, String doc, JsonProperties propMap, Schema request, Schema response,\n      Schema errors) {\n    return new TwoWayMessage(name, doc, propMap, request, response, errors);\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a two-way message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.createMessage", "methodParameterType": "String#String#Map<String,?>#Schema#Schema#Schema#", "methodParameterName": "name#doc#propMap#request#response#errors#", "methodBody": "public <T> Message createMessage(String name, String doc, Map<String, ?> propMap, Schema request, Schema response,\n      Schema errors) {\n    return new TwoWayMessage(name, doc, propMap, request, response, errors);\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a two-way message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public String toString() {\n    return toString(false);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Render this as <a href=\"https://json.org/\">JSON</a>.", "call_func_name": ["org.apache.avro.Protocol.toString"], "call_func_parameter": [["boolean"]], "passed_comments": [{"org.apache.avro.Protocol.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "189", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.toString", "methodParameterType": "boolean#", "methodParameterName": "pretty#", "methodBody": "public String toString(boolean pretty) {\n    try {\n      StringWriter writer = new StringWriter();\n      JsonGenerator gen = Schema.FACTORY.createGenerator(writer);\n      if (pretty)\n        gen.useDefaultPrettyPrinter();\n      toJson(gen);\n      gen.flush();\n      return writer.toString();\n    } catch (IOException e) {\n      throw new AvroRuntimeException(e);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Render this as <a href=\"https://json.org/\">JSON</a>.", "call_func_name": ["java.io.StringWriter.<init>", "com.fasterxml.jackson.core.JsonFactory.createGenerator", "com.fasterxml.jackson.core.JsonGenerator.useDefaultPrettyPrinter", "org.apache.avro.Protocol.toJson", "com.fasterxml.jackson.core.JsonGenerator.flush", "java.io.StringWriter.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.io.Writer"], [""], ["com.fasterxml.jackson.core.JsonGenerator"], [""], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "190", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.getMD5", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public byte[] getMD5() {\n    if (md5 == null)\n      try {\n        md5 = MessageDigest.getInstance(\"MD5\").digest(this.toString().getBytes(StandardCharsets.UTF_8));\n      } catch (Exception e) {\n        throw new AvroRuntimeException(e);\n      }\n    return md5;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#ThisExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the MD5 hash of the text of this protocol.", "call_func_name": ["java.security.MessageDigest.getInstance", "org.apache.avro.Protocol.toString", "java.lang.String.getBytes", "java.security.MessageDigest.digest", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.nio.charset.Charset"], ["byte[]"], ["java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.Protocol.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Protocol.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "191", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.parse", "methodParameterType": "File#", "methodParameterName": "file#", "methodBody": "public static Protocol parse(File file) throws IOException {\n    return parse(Schema.FACTORY.createParser(file));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Read a protocol from a Json file.", "call_func_name": ["com.fasterxml.jackson.core.JsonFactory.createParser", "org.apache.avro.Protocol.parse"], "call_func_parameter": [["java.io.File"], ["com.fasterxml.jackson.core.JsonParser"]], "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.parse", "methodParameterType": "InputStream#", "methodParameterName": "stream#", "methodBody": "public static Protocol parse(InputStream stream) throws IOException {\n    return parse(Schema.FACTORY.createParser(stream));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Read a protocol from a Json stream.", "call_func_name": ["com.fasterxml.jackson.core.JsonFactory.createParser", "org.apache.avro.Protocol.parse"], "call_func_parameter": [["java.io.InputStream"], ["com.fasterxml.jackson.core.JsonParser"]], "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.parse", "methodParameterType": "String#String#", "methodParameterName": "string#more#", "methodBody": "public static Protocol parse(String string, String... more) {\n    StringBuilder b = new StringBuilder(string);\n    for (String part : more)\n      b.append(part);\n    return parse(b.toString());\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Read a protocol from one or more json strings", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Protocol.java", "methodName": "org.apache.avro.Protocol.parse", "methodParameterType": "String#", "methodParameterName": "string#", "methodBody": "public static Protocol parse(String string) {\n    try {\n      return parse(Schema.FACTORY.createParser(new ByteArrayInputStream(string.getBytes(StandardCharsets.UTF_8))));\n    } catch (IOException e) {\n      throw new AvroRuntimeException(e);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ClassInstanceCreation#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ClassInstanceCreation)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Read a protocol from a Json string.", "call_func_name": ["java.lang.String.getBytes", "java.io.ByteArrayInputStream.<init>", "com.fasterxml.jackson.core.JsonFactory.createParser", "org.apache.avro.Protocol.parse", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [["java.nio.charset.Charset"], ["byte[]"], ["java.io.InputStream"], ["com.fasterxml.jackson.core.JsonParser"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java", "methodName": "org.apache.avro.LogicalTypes.fromSchema", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public static LogicalType fromSchema(Schema schema) {\n    return fromSchemaImpl(schema, true);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link LogicalType} from the schema, if one is present.", "call_func_name": ["org.apache.avro.LogicalTypes.fromSchemaImpl"], "call_func_parameter": [["org.apache.avro.Schema", "boolean"]], "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java", "methodName": "org.apache.avro.LogicalTypes.decimal", "methodParameterType": "int#", "methodParameterName": "precision#", "methodBody": "public static Decimal decimal(int precision) {\n    return decimal(precision, 0);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a Decimal LogicalType with the given precision and scale 0", "call_func_name": ["org.apache.avro.LogicalTypes.decimal"], "call_func_parameter": [["int", "int"]], "passed_comments": [{"org.apache.avro.LogicalTypes.decimal": "Create a Decimal LogicalType with the given precision and scale"}]}, {"index": "197", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/LogicalTypes.java", "methodName": "org.apache.avro.LogicalTypes.decimal", "methodParameterType": "int#int#", "methodParameterName": "precision#scale#", "methodBody": "public static Decimal decimal(int precision, int scale) {\n    return new Decimal(precision, scale);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a Decimal LogicalType with the given precision and scale", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java", "methodName": "org.apache.avro.reflect.ReflectData.ReflectData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ReflectData() {\n  }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "For subclasses. Applications normally use  {@link ReflectData#get()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java", "methodName": "org.apache.avro.reflect.ReflectData.ReflectData", "methodParameterType": "ClassLoader#", "methodParameterName": "classLoader#", "methodBody": "public ReflectData(ClassLoader classLoader) {\n    super(classLoader);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct with a particular classloader.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java", "methodName": "org.apache.avro.reflect.ReflectData.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ReflectData get() {\n    return INSTANCE;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the singleton instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "201", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java", "methodName": "org.apache.avro.reflect.ReflectData.addStringable", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "public ReflectData addStringable(Class c) {\n    stringableClasses.add(c);\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Cause a class to be treated as though it had an  {@link Stringable}annotation.", "call_func_name": ["java.util.Set.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "202", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java", "methodName": "org.apache.avro.reflect.ReflectData.isArray", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "@Override\n  protected boolean isArray(Object datum) {\n    if (datum == null)\n      return false;\n    Class c = datum.getClass();\n    return (datum instanceof Collection) || (c.isArray() && c.getComponentType() != Byte.TYPE) || isNonStringMap(datum);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true for arrays and false otherwise, with the following exceptions: <ul> <li> <p> Returns true for non-string-keyed maps, which are written as an array of key/value pair records. </p> </li> <li> <p> Returns false for arrays of bytes, since those should be treated as byte data type instead. </p> </li> </ul>", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.isArray", "java.lang.Class.getComponentType", "org.apache.avro.reflect.ReflectData.isNonStringMap"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "203", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java", "methodName": "org.apache.avro.reflect.ReflectData.isMap", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "@Override\n  protected boolean isMap(Object datum) {\n    return (datum instanceof Map) && !isNonStringMap(datum);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "It returns false for non-string-maps because Avro writes out such maps as an array of records. Even their JSON representation is an array.", "call_func_name": ["org.apache.avro.reflect.ReflectData.isNonStringMap"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java", "methodName": "org.apache.avro.reflect.ReflectData.makeNullable", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public static Schema makeNullable(Schema schema) {\n    if (schema.getType() == Schema.Type.UNION) {\n      // check to see if the union already contains NULL\n      for (Schema subType : schema.getTypes()) {\n        if (subType.getType() == Schema.Type.NULL) {\n          return schema;\n        }\n      }\n      // add null as the first type in a new union\n      List<Schema> withNull = new ArrayList<>();\n      withNull.add(Schema.create(Schema.Type.NULL));\n      withNull.addAll(schema.getTypes());\n      return Schema.createUnion(withNull);\n    } else {\n      // create a union with null\n      return Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.NULL), schema));\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Create and return a union of the null schema and the provided schema.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.Schema.getTypes", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.ArrayList.<init>", "java.util.List.add", "java.util.List.addAll", "org.apache.avro.Schema.createUnion", "java.util.Arrays.asList"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.Object"], ["java.util.Collection"], ["java.util.List"], ["java.lang.Object[]"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}, {"org.apache.avro.Schema.createUnion": "Create a union schema."}]}, {"index": "205", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java", "methodName": "org.apache.avro.reflect.ReflectData.createFieldSchema", "methodParameterType": "Field#Map<String,Schema>#", "methodParameterName": "field#names#", "methodBody": "protected Schema createFieldSchema(Field field, Map<String, Schema> names) {\n    AvroEncode enc = field.getAnnotation(AvroEncode.class);\n    if (enc != null)\n      try {\n        return enc.using().getDeclaredConstructor().newInstance().getSchema();\n      } catch (Exception e) {\n        throw new AvroRuntimeException(\"Could not create schema from custom serializer for \" + field.getName());\n      }\n\n    AvroSchema explicit = field.getAnnotation(AvroSchema.class);\n    if (explicit != null) // explicit schema\n      return new Schema.Parser().parse(explicit.value());\n\n    Union union = field.getAnnotation(Union.class);\n    if (union != null)\n      return getAnnotatedUnion(union, names);\n\n    Schema schema = createSchema(field.getGenericType(), names);\n    if (field.isAnnotationPresent(Stringable.class)) { // Stringable\n      schema = Schema.create(Schema.Type.STRING);\n    }\n    if (field.isAnnotationPresent(Nullable.class)) // nullable\n      schema = makeNullable(schema);\n    return schema;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(TryStatement(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a schema for a field.", "call_func_name": ["java.lang.reflect.Field.getAnnotation", "org.apache.avro.reflect.AvroEncode.using", "java.lang.Class.getDeclaredConstructor", "java.lang.reflect.Constructor.newInstance", "org.apache.avro.reflect.CustomEncoding.getSchema", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.reflect.Field.getName", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>", "org.apache.avro.reflect.AvroSchema.value", "org.apache.avro.reflect.ReflectData.getAnnotatedUnion", "java.lang.reflect.Field.getGenericType", "org.apache.avro.reflect.ReflectData.createSchema", "java.lang.reflect.Field.isAnnotationPresent", "org.apache.avro.reflect.ReflectData.makeNullable"], "call_func_parameter": [["java.lang.Class"], [""], ["java.lang.Class[]"], ["java.lang.Object[]"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["org.apache.avro.reflect.Union", "java.util.Map"], [""], ["java.lang.reflect.Type", "java.util.Map"], ["java.lang.Class"], ["org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.reflect.ReflectData.makeNullable": "Create and return a union of the null schema and the provided schema."}]}, {"index": "206", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectData.java", "methodName": "org.apache.avro.reflect.ReflectData.getProtocol", "methodParameterType": "Class#", "methodParameterName": "iface#", "methodBody": "@Override\n  public Protocol getProtocol(Class iface) {\n    Protocol protocol = new Protocol(iface.getSimpleName(),\n        iface.getPackage() == null ? \"\" : iface.getPackage().getName());\n    Map<String, Schema> names = new LinkedHashMap<>();\n    Map<String, Message> messages = protocol.getMessages();\n    Map<TypeVariable<?>, Type> genericTypeVariableMap = ReflectionUtil.resolveTypeVariables(iface);\n    for (Method method : iface.getMethods()) {\n      if ((method.getModifiers() & Modifier.STATIC) == 0) {\n        String name = method.getName();\n        if (messages.containsKey(name))\n          throw new AvroTypeException(\"Two methods with same name: \" + name);\n        messages.put(name, getMessage(method, protocol, names, genericTypeVariableMap));\n      }\n    }\n\n    // reverse types, since they were defined in reference order\n    List<Schema> types = new ArrayList<>(names.values());\n    Collections.reverse(types);\n    protocol.setTypes(types);\n\n    return protocol;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ConditionalExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the protocol for a Java interface. <p> The correct name of the method parameters needs the <code>-parameters</code> java compiler argument. More info at https://openjdk.java.net/jeps/118", "call_func_name": ["java.lang.Class.getSimpleName", "java.lang.Class.getPackage", "java.lang.Package.getName", "org.apache.avro.Protocol.<init>", "java.util.LinkedHashMap.<init>", "org.apache.avro.Protocol.getMessages", "org.apache.avro.reflect.ReflectionUtil.resolveTypeVariables", "java.lang.Class.getMethods", "java.lang.reflect.Method.getModifiers", "java.lang.reflect.Method.getName", "java.util.Map.containsKey", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroTypeException.<init>", "org.apache.avro.reflect.ReflectData.getMessage", "java.util.Map.put", "java.util.Map.values", "java.util.ArrayList.<init>", "java.util.Collections.reverse", "org.apache.avro.Protocol.setTypes"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.Class"], [""], [""], [""], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.reflect.Method", "org.apache.avro.Protocol", "java.util.Map", "java.util.Map"], ["java.lang.Object", "java.lang.Object"], [""], ["java.util.Collection"], ["java.util.List"], ["java.util.Collection"]], "passed_comments": [{"org.apache.avro.Protocol.getMessages": "The messages of this protocol."}, {"org.apache.avro.reflect.ReflectionUtil.resolveTypeVariables": "For an interface, get a map of any  {@link TypeVariable}s to their actual types."}, {"org.apache.avro.Protocol.setTypes": "Set the types of this protocol."}]}, {"index": "207", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectionUtil.java", "methodName": "org.apache.avro.reflect.ReflectionUtil.resolveTypeVariables", "methodParameterType": "Class<?>#", "methodParameterName": "iface#", "methodBody": "protected static Map<TypeVariable<?>, Type> resolveTypeVariables(Class<?> iface) {\n    return resolveTypeVariables(iface, new IdentityHashMap<>());\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For an interface, get a map of any  {@link TypeVariable}s to their actual types.", "call_func_name": ["java.util.IdentityHashMap.<init>", "org.apache.avro.reflect.ReflectionUtil.resolveTypeVariables"], "call_func_parameter": [[""], ["java.lang.Class", "java.util.Map"]], "passed_comments": "/"}, {"index": "208", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumReader.java", "methodName": "org.apache.avro.reflect.ReflectDatumReader.ReflectDatumReader", "methodParameterType": "Class<T>#", "methodParameterName": "c#", "methodBody": "public ReflectDatumReader(Class<T> c) {\n    this(new ReflectData(c.getClassLoader()));\n    setSchema(getSpecificData().getSchema(c));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ConstructorInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct for reading instances of a class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "209", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumReader.java", "methodName": "org.apache.avro.reflect.ReflectDatumReader.ReflectDatumReader", "methodParameterType": "Schema#", "methodParameterName": "root#", "methodBody": "public ReflectDatumReader(Schema root) {\n    this(root, root, ReflectData.get());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct where the writer's and reader's schemas are the same.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "210", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumReader.java", "methodName": "org.apache.avro.reflect.ReflectDatumReader.ReflectDatumReader", "methodParameterType": "Schema#Schema#", "methodParameterName": "writer#reader#", "methodBody": "public ReflectDatumReader(Schema writer, Schema reader) {\n    this(writer, reader, ReflectData.get());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct given writer's and reader's schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "211", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumReader.java", "methodName": "org.apache.avro.reflect.ReflectDatumReader.ReflectDatumReader", "methodParameterType": "Schema#Schema#ReflectData#", "methodParameterName": "writer#reader#data#", "methodBody": "public ReflectDatumReader(Schema writer, Schema reader, ReflectData data) {\n    super(writer, reader, data);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct given writer's and reader's schema and the data model.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "212", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumReader.java", "methodName": "org.apache.avro.reflect.ReflectDatumReader.ReflectDatumReader", "methodParameterType": "ReflectData#", "methodParameterName": "data#", "methodBody": "public ReflectDatumReader(ReflectData data) {\n    super(data);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct given a  {@link ReflectData}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "213", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/reflect/ReflectDatumWriter.java", "methodName": "org.apache.avro.reflect.ReflectDatumWriter.writeArray", "methodParameterType": "Schema#Object#Encoder#", "methodParameterName": "schema#datum#out#", "methodBody": "@Override\n  protected void writeArray(Schema schema, Object datum, Encoder out) throws IOException {\n    if (datum instanceof Collection) {\n      super.writeArray(schema, datum, out);\n      return;\n    }\n    Class<?> elementClass = datum.getClass().getComponentType();\n    if (null == elementClass) {\n      // not a Collection or an Array\n      throw new AvroRuntimeException(\"Array data must be a Collection or Array\");\n    }\n    Schema element = schema.getElementType();\n    if (elementClass.isPrimitive()) {\n      Schema.Type type = element.getType();\n      out.writeArrayStart();\n      switch (type) {\n      case BOOLEAN:\n        if (elementClass.isPrimitive())\n          ArrayAccessor.writeArray((boolean[]) datum, out);\n        break;\n      case DOUBLE:\n        ArrayAccessor.writeArray((double[]) datum, out);\n        break;\n      case FLOAT:\n        ArrayAccessor.writeArray((float[]) datum, out);\n        break;\n      case INT:\n        if (elementClass.equals(int.class)) {\n          ArrayAccessor.writeArray((int[]) datum, out);\n        } else if (elementClass.equals(char.class)) {\n          ArrayAccessor.writeArray((char[]) datum, out);\n        } else if (elementClass.equals(short.class)) {\n          ArrayAccessor.writeArray((short[]) datum, out);\n        } else {\n          arrayError(elementClass, type);\n        }\n        break;\n      case LONG:\n        ArrayAccessor.writeArray((long[]) datum, out);\n        break;\n      default:\n        arrayError(elementClass, type);\n      }\n      out.writeArrayEnd();\n    } else {\n      out.writeArrayStart();\n      writeObjectArray(element, (Object[]) datum, out);\n      out.writeArrayEnd();\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#PrimitiveType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#PrimitiveType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#PrimitiveType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SwitchStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)SwitchStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Called to write a array. May be overridden for alternate array representations.", "call_func_name": ["org.apache.avro.specific.SpecificDatumWriter.writeArray", "java.lang.Object.getClass", "java.lang.Class.getComponentType", "org.apache.avro.AvroRuntimeException.<init>", "org.apache.avro.Schema.getElementType", "java.lang.Class.isPrimitive", "org.apache.avro.Schema.getType", "org.apache.avro.io.Encoder.writeArrayStart", "org.apache.avro.reflect.ArrayAccessor.writeArray", "org.apache.avro.reflect.ArrayAccessor.writeArray", "org.apache.avro.reflect.ArrayAccessor.writeArray", "java.lang.Object.equals", "org.apache.avro.reflect.ArrayAccessor.writeArray", "org.apache.avro.reflect.ArrayAccessor.writeArray", "org.apache.avro.reflect.ArrayAccessor.writeArray", "org.apache.avro.reflect.ArrayAccessor.writeArray", "org.apache.avro.io.Encoder.writeArrayEnd", "org.apache.avro.reflect.ReflectDatumWriter.writeObjectArray"], "call_func_parameter": [["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"], [""], [""], ["java.lang.String"], [""], [""], [""], [""], ["boolean[]", "org.apache.avro.io.Encoder"], ["double[]", "org.apache.avro.io.Encoder"], ["float[]", "org.apache.avro.io.Encoder"], ["java.lang.Object"], ["int[]", "org.apache.avro.io.Encoder"], ["char[]", "org.apache.avro.io.Encoder"], ["short[]", "org.apache.avro.io.Encoder"], ["long[]", "org.apache.avro.io.Encoder"], [""], ["org.apache.avro.Schema", "java.lang.Object[]", "org.apache.avro.io.Encoder"]], "passed_comments": [{"org.apache.avro.Schema.getElementType": "If this is an array, returns its element type."}, {"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.io.Encoder.writeArrayStart": "Call this method to start writing an array. When starting to serialize an array, call  {@link #writeArrayStart}. Then, before writing any data for any item call  {@link #setItemCount} followed by asequence of  {@link #startItem()} and the item itself. The number of{@link #startItem()} should match the number specified in{@link #setItemCount}. When actually writing the data of the item, you can call any  {@link Encoder} method (e.g., {@link #writeLong}). When all items of the array have been written, call  {@link #writeArrayEnd}. As an example, let's say you want to write an array of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeArrayStart(); out.setItemCount(list.size()); for (Record r : list) { out.startItem(); out.writeLong(r.longField); out.writeBoolean(r.boolField); } out.writeArrayEnd(); </pre>"}, {"org.apache.avro.io.Encoder.writeArrayEnd": "Call this method to finish writing an array. See  {@link #writeArrayStart} forusage information."}]}, {"index": "214", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/ByteBufferOutputStream.java", "methodName": "org.apache.avro.util.ByteBufferOutputStream.getBufferList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<ByteBuffer> getBufferList() {\n    List<ByteBuffer> result = buffers;\n    reset();\n    for (ByteBuffer buffer : result)\n      buffer.flip();\n    return result;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns all data written and resets the stream to be empty.", "call_func_name": ["org.apache.avro.util.ByteBufferOutputStream.reset", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.nio.ByteBuffer.flip"], "call_func_parameter": [[""], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "215", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/ByteBufferOutputStream.java", "methodName": "org.apache.avro.util.ByteBufferOutputStream.prepend", "methodParameterType": "List<ByteBuffer>#", "methodParameterName": "lists#", "methodBody": "public void prepend(List<ByteBuffer> lists) {\n    for (ByteBuffer buffer : lists) {\n      buffer.position(buffer.limit());\n    }\n    buffers.addAll(0, lists);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Prepend a list of ByteBuffers to this stream.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.nio.ByteBuffer.limit", "java.nio.ByteBuffer.position", "java.util.List.addAll"], "call_func_parameter": [[""], [""], [""], [""], ["int"], ["int", "java.util.Collection"]], "passed_comments": "/"}, {"index": "216", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/ByteBufferOutputStream.java", "methodName": "org.apache.avro.util.ByteBufferOutputStream.append", "methodParameterType": "List<ByteBuffer>#", "methodParameterName": "lists#", "methodBody": "public void append(List<ByteBuffer> lists) {\n    for (ByteBuffer buffer : lists) {\n      buffer.position(buffer.limit());\n    }\n    buffers.addAll(lists);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Append a list of ByteBuffers to this stream.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.nio.ByteBuffer.limit", "java.nio.ByteBuffer.position", "java.util.List.addAll"], "call_func_parameter": [[""], [""], [""], [""], ["int"], ["java.util.Collection"]], "passed_comments": "/"}, {"index": "217", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/ByteBufferOutputStream.java", "methodName": "org.apache.avro.util.ByteBufferOutputStream.writeBuffer", "methodParameterType": "ByteBuffer#", "methodParameterName": "buffer#", "methodBody": "public void writeBuffer(ByteBuffer buffer) throws IOException {\n    if (buffer.remaining() < BUFFER_SIZE) {\n      write(buffer.array(), buffer.position(), buffer.remaining());\n    } else { // append w/o copying bytes\n      ByteBuffer dup = buffer.duplicate();\n      dup.position(buffer.limit()); // ready for flip\n      buffers.add(dup);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Add a buffer to the output without copying, if possible.", "call_func_name": ["java.nio.ByteBuffer.remaining", "java.nio.ByteBuffer.array", "java.nio.ByteBuffer.position", "org.apache.avro.util.ByteBufferOutputStream.write", "java.nio.ByteBuffer.duplicate", "java.nio.ByteBuffer.limit", "java.nio.ByteBuffer.position", "java.util.List.add"], "call_func_parameter": [[""], [""], [""], ["byte[]", "int", "int"], [""], [""], ["int"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "218", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/ByteBufferInputStream.java", "methodName": "org.apache.avro.util.ByteBufferInputStream.read", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public int read() throws IOException {\n    ByteBuffer buffer = getBuffer();\n    if (buffer == null) {\n      return -1;\n    }\n    return buffer.get() & 0xff;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NumberLiteral#PrefixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see InputStream#read()", "call_func_name": ["org.apache.avro.util.ByteBufferInputStream.getBuffer", "java.nio.ByteBuffer.get"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.apache.avro.util.ByteBufferInputStream.getBuffer": "Returns the next non-empty buffer."}]}, {"index": "219", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/ByteBufferInputStream.java", "methodName": "org.apache.avro.util.ByteBufferInputStream.read", "methodParameterType": "byte[]#int#int#", "methodParameterName": "b#off#len#", "methodBody": "@Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    if (len == 0)\n      return 0;\n    ByteBuffer buffer = getBuffer();\n    if (buffer == null) {\n      return -1;\n    }\n    int remaining = buffer.remaining();\n    if (len > remaining) {\n      buffer.get(b, off, remaining);\n      return remaining;\n    } else {\n      buffer.get(b, off, len);\n      return len;\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NumberLiteral#PrefixExpression#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@see InputStream#read(byte[],int,int)", "call_func_name": ["org.apache.avro.util.ByteBufferInputStream.getBuffer", "java.nio.ByteBuffer.remaining", "java.nio.ByteBuffer.get"], "call_func_parameter": [[""], [""], ["byte[]", "int", "int"]], "passed_comments": [{"org.apache.avro.util.ByteBufferInputStream.getBuffer": "Returns the next non-empty buffer."}]}, {"index": "220", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/ByteBufferInputStream.java", "methodName": "org.apache.avro.util.ByteBufferInputStream.readBuffer", "methodParameterType": "int#", "methodParameterName": "length#", "methodBody": "public ByteBuffer readBuffer(int length) throws IOException {\n    if (length == 0)\n      return ByteBuffer.allocate(0);\n    ByteBuffer buffer = getBuffer();\n    if (buffer == null) {\n      return ByteBuffer.allocate(0);\n    }\n    if (buffer.remaining() == length) { // can return current as-is?\n      current++;\n      return buffer; // return w/o copying\n    }\n    // punt: allocate a new buffer & copy into it\n    ByteBuffer result = ByteBuffer.allocate(length);\n    int start = 0;\n    while (start < length)\n      start += read(result.array(), start, length - start);\n    return result;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Read a buffer from the input without copying, if possible.", "call_func_name": ["java.nio.ByteBuffer.allocate", "org.apache.avro.util.ByteBufferInputStream.getBuffer", "java.nio.ByteBuffer.remaining", "java.nio.ByteBuffer.array", "org.apache.avro.util.ByteBufferInputStream.read"], "call_func_parameter": [["int"], [""], [""], [""], ["byte[]", "int", "int"]], "passed_comments": [{"org.apache.avro.util.ByteBufferInputStream.getBuffer": "Returns the next non-empty buffer."}, {"org.apache.avro.util.ByteBufferInputStream.read": "@see InputStream#read(byte[],int,int)"}]}, {"index": "221", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/ByteBufferInputStream.java", "methodName": "org.apache.avro.util.ByteBufferInputStream.getBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private ByteBuffer getBuffer() throws IOException {\n    while (current < buffers.size()) {\n      ByteBuffer buffer = buffers.get(current);\n      if (buffer.hasRemaining())\n        return buffer;\n      current++;\n    }\n    return null;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(WhileStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the next non-empty buffer.", "call_func_name": ["java.util.List.size", "java.util.List.get", "java.nio.ByteBuffer.hasRemaining"], "call_func_parameter": [[""], ["int"], [""]], "passed_comments": "/"}, {"index": "222", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/ClassUtils.java", "methodName": "org.apache.avro.util.ClassUtils.forName", "methodParameterType": "String#", "methodParameterName": "className#", "methodBody": "public static Class<?> forName(String className) throws ClassNotFoundException {\n    return ClassUtils.forName(ClassUtils.class, className);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Loads a class using the class loader. 1. The class loader of the current class is being used. 2. The thread context class loader is being used. If both approaches fail, returns null.", "call_func_name": ["org.apache.avro.util.ClassUtils.forName"], "call_func_parameter": [["java.lang.Class", "java.lang.String"]], "passed_comments": [{"org.apache.avro.util.ClassUtils.forName": "Loads a class using the class loader. 1. The class loader of the context class is being used. 2. The thread context class loader is being used. If both approaches fail, returns null."}, {"org.apache.avro.util.ClassUtils.forName": "Loads a class using the class loader. 1. The class loader of the context class is being used. 2. The thread context class loader is being used. If both approaches fail, returns null."}]}, {"index": "223", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/ClassUtils.java", "methodName": "org.apache.avro.util.ClassUtils.forName", "methodParameterType": "Class<?>#String#", "methodParameterName": "contextClass#className#", "methodBody": "public static Class<?> forName(Class<?> contextClass, String className) throws ClassNotFoundException {\n    Class<?> c = null;\n    if (contextClass.getClassLoader() != null) {\n      c = forName(className, contextClass.getClassLoader());\n    }\n    if (c == null && Thread.currentThread().getContextClassLoader() != null) {\n      c = forName(className, Thread.currentThread().getContextClassLoader());\n    }\n    if (c == null) {\n      throw new ClassNotFoundException(\"Failed to load class\" + className);\n    }\n    return c;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Loads a class using the class loader. 1. The class loader of the context class is being used. 2. The thread context class loader is being used. If both approaches fail, returns null.", "call_func_name": ["java.lang.Class.getClassLoader", "org.apache.avro.util.ClassUtils.forName", "java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.ClassNotFoundException.<init>"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.ClassLoader"], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.util.ClassUtils.forName": "Loads a  {@link Class} from the specified {@link ClassLoader} without throwing{@link ClassNotFoundException}."}]}, {"index": "224", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/ClassUtils.java", "methodName": "org.apache.avro.util.ClassUtils.forName", "methodParameterType": "ClassLoader#String#", "methodParameterName": "classLoader#className#", "methodBody": "public static Class<?> forName(ClassLoader classLoader, String className) throws ClassNotFoundException {\n    Class<?> c = null;\n    if (classLoader != null) {\n      c = forName(className, classLoader);\n    }\n    if (c == null && Thread.currentThread().getContextClassLoader() != null) {\n      c = forName(className, Thread.currentThread().getContextClassLoader());\n    }\n    if (c == null) {\n      throw new ClassNotFoundException(\"Failed to load class\" + className);\n    }\n    return c;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Loads a class using the class loader. 1. The class loader of the context class is being used. 2. The thread context class loader is being used. If both approaches fail, returns null.", "call_func_name": ["org.apache.avro.util.ClassUtils.forName", "java.lang.Thread.currentThread", "java.lang.Thread.getContextClassLoader", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.ClassNotFoundException.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.ClassLoader"], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.util.ClassUtils.forName": "Loads a  {@link Class} from the specified {@link ClassLoader} without throwing{@link ClassNotFoundException}."}]}, {"index": "225", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/ClassUtils.java", "methodName": "org.apache.avro.util.ClassUtils.forName", "methodParameterType": "String#ClassLoader#", "methodParameterName": "className#classLoader#", "methodBody": "private static Class<?> forName(String className, ClassLoader classLoader) {\n    Class<?> c = null;\n    if (classLoader != null && className != null) {\n      try {\n        c = Class.forName(className, true, classLoader);\n      } catch (ClassNotFoundException e) {\n        // Ignore and return null\n      }\n    }\n    return c;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Loads a  {@link Class} from the specified {@link ClassLoader} without throwing{@link ClassNotFoundException}.", "call_func_name": ["java.lang.Class.forName"], "call_func_parameter": [["java.lang.String", "boolean", "java.lang.ClassLoader"]], "passed_comments": "/"}, {"index": "226", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/Utf8.java", "methodName": "org.apache.avro.util.Utf8.getBytes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public byte[] getBytes() {\n    return bytes;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return UTF-8 encoded bytes. Only valid through  {@link #getByteLength()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "227", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/Utf8.java", "methodName": "org.apache.avro.util.Utf8.getLength", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n  public int getLength() {\n    return length;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return length in bytes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "228", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/Utf8.java", "methodName": "org.apache.avro.util.Utf8.getByteLength", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getByteLength() {\n    return length;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return length in bytes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "229", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/Utf8.java", "methodName": "org.apache.avro.util.Utf8.setLength", "methodParameterType": "int#", "methodParameterName": "newLength#", "methodBody": "@Deprecated\n  public Utf8 setLength(int newLength) {\n    return setByteLength(newLength);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set length in bytes. Should called whenever byte content changes, even if the length does not change, as this also clears the cached String.", "call_func_name": ["org.apache.avro.util.Utf8.setByteLength"], "call_func_parameter": [["int"]], "passed_comments": [{"org.apache.avro.util.Utf8.setByteLength": "Set length in bytes. Should called whenever byte content changes, even if the length does not change, as this also clears the cached String."}]}, {"index": "230", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/Utf8.java", "methodName": "org.apache.avro.util.Utf8.setByteLength", "methodParameterType": "int#", "methodParameterName": "newLength#", "methodBody": "public Utf8 setByteLength(int newLength) {\n    if (newLength > MAX_LENGTH) {\n      throw new AvroRuntimeException(\"String length \" + newLength + \" exceeds maximum allowed\");\n    }\n    if (this.bytes.length < newLength) {\n      byte[] newBytes = new byte[newLength];\n      System.arraycopy(bytes, 0, newBytes, 0, this.length);\n      this.bytes = newBytes;\n    }\n    this.length = newLength;\n    this.string = null;\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#InfixExpression#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NumberLiteral)NumberLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set length in bytes. Should called whenever byte content changes, even if the length does not change, as this also clears the cached String.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>", "java.lang.System.arraycopy"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["java.lang.String"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": "/"}, {"index": "231", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/Utf8.java", "methodName": "org.apache.avro.util.Utf8.set", "methodParameterType": "String#", "methodParameterName": "string#", "methodBody": "public Utf8 set(String string) {\n    this.bytes = getBytesFor(string);\n    this.length = bytes.length;\n    this.string = string;\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set to the contents of a String.", "call_func_name": ["org.apache.avro.util.Utf8.getBytesFor"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.apache.avro.util.Utf8.getBytesFor": "Gets the UTF-8 bytes for a String"}]}, {"index": "232", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/util/Utf8.java", "methodName": "org.apache.avro.util.Utf8.getBytesFor", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "public static byte[] getBytesFor(String str) {\n    return str.getBytes(StandardCharsets.UTF_8);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the UTF-8 bytes for a String", "call_func_name": ["java.lang.String.getBytes"], "call_func_parameter": [["java.nio.charset.Charset"]], "passed_comments": "/"}, {"index": "233", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/ValidateCanBeRead.java", "methodName": "org.apache.avro.ValidateCanBeRead.validate", "methodParameterType": "Schema#Schema#", "methodParameterName": "toValidate#existing#", "methodBody": "@Override\n  public void validate(Schema toValidate, Schema existing) throws SchemaValidationException {\n    ValidateMutualRead.canRead(toValidate, existing);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Validate that data written with first schema provided can be read using the second schema, according to the default Avro schema resolution rules.", "call_func_name": ["org.apache.avro.ValidateMutualRead.canRead"], "call_func_parameter": [["org.apache.avro.Schema", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.ValidateMutualRead.canRead": "Validates that data written with one schema can be read using another, based on the default Avro schema resolution rules."}]}, {"index": "234", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Resolver.java", "methodName": "org.apache.avro.Resolver.resolve", "methodParameterType": "Schema#Schema#GenericData#", "methodParameterName": "writer#reader#data#", "methodBody": "public static Action resolve(Schema writer, Schema reader, GenericData data) {\n    return resolve(Schema.applyAliases(writer, reader), reader, data, new HashMap<>());\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link Resolver.Action} tree for resolving the writer schema<tt>writer</tt> and the reader schema <tt>reader</tt>. This method walks the reader's and writer's schemas together, generating an appropriate subclass of  {@link Action} to encapsulate the information neededto resolve the corresponding parts of each schema tree. For convience, every {@link Action} object has a pointer to the corresponding parts of thereader's and writer's trees being resolved by the action. Each subclass of {@link Action} has additional information needed for different types ofschema, e.g., the  {@link EnumAdjust} subclass has information aboutre-ordering and deletion of enumeration symbols, while  {@link RecordAdjust}has information about re-ordering and deletion of record fields. Note that aliases are applied to the writer's schema before resolution actually takes place. This means that the <tt>writer</tt> field of the resulting  {@link Action} objects will not be the same schema as provided tothis method. However, the <tt>reader</tt> field will be.", "call_func_name": ["org.apache.avro.Schema.applyAliases", "java.util.HashMap.<init>", "org.apache.avro.Resolver.resolve"], "call_func_parameter": [["org.apache.avro.Schema", "org.apache.avro.Schema"], [""], ["org.apache.avro.Schema", "org.apache.avro.Schema", "org.apache.avro.generic.GenericData", "java.util.Map"]], "passed_comments": [{"org.apache.avro.Schema.applyAliases": "Rewrite a writer's schema using the aliases from a reader's schema. This permits reading records, enums and fixed schemas whose names have changed, and records whose field names have changed. The returned schema always contains the same data elements in the same order, but with possibly different names."}]}, {"index": "235", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Resolver.java", "methodName": "org.apache.avro.Resolver.resolve", "methodParameterType": "Schema#Schema#", "methodParameterName": "writer#reader#", "methodBody": "public static Action resolve(Schema writer, Schema reader) {\n    return resolve(writer, reader, GenericData.get());\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Uses <tt>GenericData.get()</tt> for the <tt>data</tt> param.", "call_func_name": ["org.apache.avro.generic.GenericData.get", "org.apache.avro.Resolver.resolve"], "call_func_parameter": [[""], ["org.apache.avro.Schema", "org.apache.avro.Schema", "org.apache.avro.generic.GenericData"]], "passed_comments": [{"org.apache.avro.generic.GenericData.get": "Return the singleton instance."}, {"org.apache.avro.Resolver.resolve": "Returns a  {@link Resolver.Action} tree for resolving the writer schema<tt>writer</tt> and the reader schema <tt>reader</tt>. This method walks the reader's and writer's schemas together, generating an appropriate subclass of  {@link Action} to encapsulate the information neededto resolve the corresponding parts of each schema tree. For convience, every {@link Action} object has a pointer to the corresponding parts of thereader's and writer's trees being resolved by the action. Each subclass of {@link Action} has additional information needed for different types ofschema, e.g., the  {@link EnumAdjust} subclass has information aboutre-ordering and deletion of enumeration symbols, while  {@link RecordAdjust}has information about re-ordering and deletion of record fields. Note that aliases are applied to the writer's schema before resolution actually takes place. This means that the <tt>writer</tt> field of the resulting  {@link Action} objects will not be the same schema as provided tothis method. However, the <tt>reader</tt> field will be."}]}, {"index": "236", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.GenericRecordBuilder", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public GenericRecordBuilder(Schema schema) {\n    super(schema, GenericData.get());\n    record = new GenericData.Record(schema);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a GenericRecordBuilder for building Record instances.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "237", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.GenericRecordBuilder", "methodParameterType": "GenericRecordBuilder#", "methodParameterName": "other#", "methodBody": "public GenericRecordBuilder(GenericRecordBuilder other) {\n    super(other, GenericData.get());\n    record = new GenericData.Record(other.record, /* deepCopy = */ true);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#BooleanLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a GenericRecordBuilder by copying an existing GenericRecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "238", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.GenericRecordBuilder", "methodParameterType": "Record#", "methodParameterName": "other#", "methodBody": "public GenericRecordBuilder(Record other) {\n    super(other.getSchema(), GenericData.get());\n    record = new GenericData.Record(other, /* deepCopy = */ true);\n\n    // Set all fields in the RecordBuilder that are set in the record\n    for (Field f : schema().getFields()) {\n      Object value = other.get(f.pos());\n      // Only set the value if it is not null, if the schema type is null,\n      // or if the schema type is a union that accepts nulls.\n      if (isValidValue(f, value)) {\n        set(f, data().deepCopy(f.schema(), value));\n      }\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#BooleanLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Creates a GenericRecordBuilder by copying an existing record instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "239", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.get", "methodParameterType": "String#", "methodParameterName": "fieldName#", "methodBody": "public Object get(String fieldName) {\n    return get(schema().getField(fieldName));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of a field.", "call_func_name": ["org.apache.avro.generic.GenericRecordBuilder.schema", "org.apache.avro.Schema.getField"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getField": "If this is a record, returns the Field with the given name <tt>fieldName</tt>. If there is no field by that name, a <tt>null</tt> is returned."}]}, {"index": "240", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.get", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "public Object get(Field field) {\n    return get(field.pos());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of a field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "241", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.get", "methodParameterType": "int#", "methodParameterName": "pos#", "methodBody": "protected Object get(int pos) {\n    return record.get(pos);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of a field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "242", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.set", "methodParameterType": "String#Object#", "methodParameterName": "fieldName#value#", "methodBody": "public GenericRecordBuilder set(String fieldName, Object value) {\n    return set(schema().getField(fieldName), value);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of a field.", "call_func_name": ["org.apache.avro.generic.GenericRecordBuilder.schema", "org.apache.avro.Schema.getField"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getField": "If this is a record, returns the Field with the given name <tt>fieldName</tt>. If there is no field by that name, a <tt>null</tt> is returned."}]}, {"index": "243", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.set", "methodParameterType": "Field#Object#", "methodParameterName": "field#value#", "methodBody": "public GenericRecordBuilder set(Field field, Object value) {\n    return set(field, field.pos(), value);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of a field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "244", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.set", "methodParameterType": "int#Object#", "methodParameterName": "pos#value#", "methodBody": "protected GenericRecordBuilder set(int pos, Object value) {\n    return set(fields()[pos], pos, value);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of a field.", "call_func_name": ["org.apache.avro.generic.GenericRecordBuilder.fields"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "245", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.set", "methodParameterType": "Field#int#Object#", "methodParameterName": "field#pos#value#", "methodBody": "private GenericRecordBuilder set(Field field, int pos, Object value) {\n    validate(field, value);\n    record.put(pos, value);\n    fieldSetFlags()[pos] = true;\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#SimpleName#ArrayAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ArrayAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of a field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "246", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.has", "methodParameterType": "String#", "methodParameterName": "fieldName#", "methodBody": "public boolean has(String fieldName) {\n    return has(schema().getField(fieldName));\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether a field has been set.", "call_func_name": ["org.apache.avro.generic.GenericRecordBuilder.schema", "org.apache.avro.Schema.getField"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getField": "If this is a record, returns the Field with the given name <tt>fieldName</tt>. If there is no field by that name, a <tt>null</tt> is returned."}]}, {"index": "247", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.has", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "public boolean has(Field field) {\n    return has(field.pos());\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether a field has been set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "248", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.has", "methodParameterType": "int#", "methodParameterName": "pos#", "methodBody": "protected boolean has(int pos) {\n    return fieldSetFlags()[pos];\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ArrayAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks whether a field has been set.", "call_func_name": ["org.apache.avro.generic.GenericRecordBuilder.fieldSetFlags"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "249", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.clear", "methodParameterType": "String#", "methodParameterName": "fieldName#", "methodBody": "public GenericRecordBuilder clear(String fieldName) {\n    return clear(schema().getField(fieldName));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Clears the value of the given field.", "call_func_name": ["org.apache.avro.generic.GenericRecordBuilder.schema", "org.apache.avro.Schema.getField"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getField": "If this is a record, returns the Field with the given name <tt>fieldName</tt>. If there is no field by that name, a <tt>null</tt> is returned."}]}, {"index": "250", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.clear", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "public GenericRecordBuilder clear(Field field) {\n    return clear(field.pos());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Clears the value of the given field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "251", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.clear", "methodParameterType": "int#", "methodParameterName": "pos#", "methodBody": "protected GenericRecordBuilder clear(int pos) {\n    record.put(pos, null);\n    fieldSetFlags()[pos] = false;\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#SimpleName#ArrayAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ArrayAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Clears the value of the given field.", "call_func_name": ["org.apache.avro.generic.GenericRecordBuilder.fieldSetFlags"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "252", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecordBuilder.java", "methodName": "org.apache.avro.generic.GenericRecordBuilder.getWithDefault", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "private Object getWithDefault(Field field) throws IOException {\n    return fieldSetFlags()[field.pos()] ? record.get(field.pos()) : defaultValue(field);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ConditionalExpression(ArrayAccess(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the given field. If the field has been set, the set value is returned (even if it's null). If the field hasn't been set and has a default value, the default value is returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "253", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecord.java", "methodName": "org.apache.avro.generic.GenericRecord.put", "methodParameterType": "String#Object#", "methodParameterName": "key#v#", "methodBody": "void put(String key, Object v);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the value of a field given its name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "254", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericRecord.java", "methodName": "org.apache.avro.generic.GenericRecord.get", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "Object get(String key);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return the value of a field given its name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "255", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.setStringType", "methodParameterType": "Schema#StringType#", "methodParameterName": "s#stringType#", "methodBody": "public static void setStringType(Schema s, StringType stringType) {\n    // Utf8 is the default and implements CharSequence, so we only need to add\n    // a property when the type is String\n    if (stringType == StringType.String)\n      s.addProp(GenericData.STRING_PROP, GenericData.STRING_TYPE_STRING);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Set the Java type to be used when reading this schema. Meaningful only only string schemas and map schemas (for the keys).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "256", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static GenericData get() {\n    return INSTANCE;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the singleton instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "257", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.GenericData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GenericData() {\n    this(null);\n  }", "AST": "Javadoc#Modifier#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "For subclasses. Applications normally use  {@link GenericData#get()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "258", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.GenericData", "methodParameterType": "ClassLoader#", "methodParameterName": "classLoader#", "methodBody": "public GenericData(ClassLoader classLoader) {\n    this.classLoader = (classLoader != null) ? classLoader : getClass().getClassLoader();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "For subclasses. GenericData does not use a ClassLoader.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "259", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getClassLoader", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ClassLoader getClassLoader() {\n    return classLoader;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the class loader that's used (by subclasses).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "260", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.addLogicalTypeConversion", "methodParameterType": "Conversion<?>#", "methodParameterName": "conversion#", "methodBody": "public void addLogicalTypeConversion(Conversion<?> conversion) {\n    conversions.put(conversion.getLogicalTypeName(), conversion);\n    Class<?> type = conversion.getConvertedType();\n    if (conversionsByClass.containsKey(type)) {\n      conversionsByClass.get(type).put(conversion.getLogicalTypeName(), conversion);\n    } else {\n      Map<String, Conversion<?>> conversions = new LinkedHashMap<>();\n      conversions.put(conversion.getLogicalTypeName(), conversion);\n      conversionsByClass.put(type, conversions);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Registers the given conversion to be used when reading and writing with this data model.", "call_func_name": ["org.apache.avro.Conversion.getLogicalTypeName", "java.util.Map.put", "org.apache.avro.Conversion.getConvertedType", "java.util.Map.containsKey", "java.util.Map.get", "java.util.LinkedHashMap.<init>"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.Object"], [""]], "passed_comments": [{"org.apache.avro.Conversion.getLogicalTypeName": "Return the logical type this class converts."}, {"org.apache.avro.Conversion.getConvertedType": "Return the Java class representing the logical type."}]}, {"index": "261", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getConversionByClass", "methodParameterType": "Class<T>#", "methodParameterName": "datumClass#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public <T> Conversion<T> getConversionByClass(Class<T> datumClass) {\n    Map<String, Conversion<?>> conversions = conversionsByClass.get(datumClass);\n    if (conversions != null) {\n      return (Conversion<T>) conversions.values().iterator().next();\n    }\n    return null;\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the first conversion found for the given class.", "call_func_name": ["java.util.Map.get", "java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.next"], "call_func_parameter": [["java.lang.Object"], [""], [""], [""]], "passed_comments": "/"}, {"index": "262", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getConversionByClass", "methodParameterType": "Class<T>#LogicalType#", "methodParameterName": "datumClass#logicalType#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public <T> Conversion<T> getConversionByClass(Class<T> datumClass, LogicalType logicalType) {\n    Map<String, Conversion<?>> conversions = conversionsByClass.get(datumClass);\n    if (conversions != null) {\n      return (Conversion<T>) conversions.get(logicalType.getName());\n    }\n    return null;\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the conversion for the given class and logical type.", "call_func_name": ["java.util.Map.get", "org.apache.avro.LogicalType.getName"], "call_func_parameter": [["java.lang.Object"], [""]], "passed_comments": [{"org.apache.avro.LogicalType.getName": "Get the name of this logical type. <p> This name is set as the Schema property \"logicalType\"."}]}, {"index": "263", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getConversionFor", "methodParameterType": "LogicalType#", "methodParameterName": "logicalType#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public Conversion<Object> getConversionFor(LogicalType logicalType) {\n    if (logicalType == null) {\n      return null;\n    }\n    return (Conversion<Object>) conversions.get(logicalType.getName());\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Conversion for the given logical type.", "call_func_name": ["org.apache.avro.LogicalType.getName", "java.util.Map.get"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.LogicalType.getName": "Get the name of this logical type. <p> This name is set as the Schema property \"logicalType\"."}]}, {"index": "264", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.createDatumReader", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public DatumReader createDatumReader(Schema schema) {\n    return new GenericDatumReader(schema, schema, this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ThisExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link DatumReader} for this kind of data.", "call_func_name": ["org.apache.avro.generic.GenericDatumReader.<init>"], "call_func_parameter": [["org.apache.avro.Schema", "org.apache.avro.Schema", "org.apache.avro.generic.GenericData"]], "passed_comments": "/"}, {"index": "265", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.createDatumReader", "methodParameterType": "Schema#Schema#", "methodParameterName": "writer#reader#", "methodBody": "public DatumReader createDatumReader(Schema writer, Schema reader) {\n    return new GenericDatumReader(writer, reader, this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ThisExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link DatumReader} for this kind of data.", "call_func_name": ["org.apache.avro.generic.GenericDatumReader.<init>"], "call_func_parameter": [["org.apache.avro.Schema", "org.apache.avro.Schema", "org.apache.avro.generic.GenericData"]], "passed_comments": "/"}, {"index": "266", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.createDatumWriter", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public DatumWriter createDatumWriter(Schema schema) {\n    return new GenericDatumWriter(schema, this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ThisExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ThisExpression)ThisExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a  {@link DatumWriter} for this kind of data.", "call_func_name": ["org.apache.avro.generic.GenericDatumWriter.<init>"], "call_func_parameter": [["org.apache.avro.Schema", "org.apache.avro.generic.GenericData"]], "passed_comments": "/"}, {"index": "267", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.validate", "methodParameterType": "Schema#Object#", "methodParameterName": "schema#datum#", "methodBody": "public boolean validate(Schema schema, Object datum) {\n    switch (schema.getType()) {\n    case RECORD:\n      if (!isRecord(datum))\n        return false;\n      for (Field f : schema.getFields()) {\n        if (!validate(f.schema(), getField(datum, f.name(), f.pos())))\n          return false;\n      }\n      return true;\n    case ENUM:\n      if (!isEnum(datum))\n        return false;\n      return schema.getEnumSymbols().contains(datum.toString());\n    case ARRAY:\n      if (!(isArray(datum)))\n        return false;\n      for (Object element : getArrayAsCollection(datum))\n        if (!validate(schema.getElementType(), element))\n          return false;\n      return true;\n    case MAP:\n      if (!(isMap(datum)))\n        return false;\n      @SuppressWarnings(value = \"unchecked\")\n      Map<Object, Object> map = (Map<Object, Object>) datum;\n      for (Map.Entry<Object, Object> entry : map.entrySet())\n        if (!validate(schema.getValueType(), entry.getValue()))\n          return false;\n      return true;\n    case UNION:\n      try {\n        int i = resolveUnion(schema, datum);\n        return validate(schema.getTypes().get(i), datum);\n      } catch (UnresolvedUnionException e) {\n        return false;\n      }\n    case FIXED:\n      return datum instanceof GenericFixed && ((GenericFixed) datum).bytes().length == schema.getFixedSize();\n    case STRING:\n      return isString(datum);\n    case BYTES:\n      return isBytes(datum);\n    case INT:\n      return isInteger(datum);\n    case LONG:\n      return isLong(datum);\n    case FLOAT:\n      return isFloat(datum);\n    case DOUBLE:\n      return isDouble(datum);\n    case BOOLEAN:\n      return isBoolean(datum);\n    case NULL:\n      return datum == null;\n    default:\n      return false;\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#EnhancedForStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#EnhancedForStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#NullLiteral#InfixExpression#ReturnStatement#SwitchCase#BooleanLiteral#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(VariableDeclarationStatement(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)CatchClause)TryStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InfixExpression(FieldAccess(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Returns true if a Java datum matches a schema.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.generic.GenericData.isRecord", "org.apache.avro.Schema.getFields", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.generic.GenericData.getField", "org.apache.avro.generic.GenericData.validate", "org.apache.avro.generic.GenericData.isEnum", "org.apache.avro.Schema.getEnumSymbols", "java.lang.Object.toString", "java.util.List.contains", "org.apache.avro.generic.GenericData.isArray", "org.apache.avro.generic.GenericData.getArrayAsCollection", "java.util.Collection.iterator", "org.apache.avro.Schema.getElementType", "org.apache.avro.generic.GenericData.isMap", "java.util.Map.entrySet", "java.util.Set.iterator", "org.apache.avro.Schema.getValueType", "org.apache.avro.generic.GenericData.resolveUnion", "org.apache.avro.Schema.getTypes", "java.util.List.get", "org.apache.avro.generic.GenericFixed.bytes", "org.apache.avro.Schema.getFixedSize", "org.apache.avro.generic.GenericData.isString", "org.apache.avro.generic.GenericData.isBytes", "org.apache.avro.generic.GenericData.isInteger", "org.apache.avro.generic.GenericData.isLong", "org.apache.avro.generic.GenericData.isFloat", "org.apache.avro.generic.GenericData.isDouble", "org.apache.avro.generic.GenericData.isBoolean"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""], [""], [""], ["java.lang.Object", "java.lang.String", "int"], ["org.apache.avro.Schema", "java.lang.Object"], ["java.lang.Object"], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], [""], [""], ["java.lang.Object"], [""], [""], [""], ["org.apache.avro.Schema", "java.lang.Object"], [""], ["int"], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.generic.GenericData.isRecord": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.Schema.getFields": "If this is a record, returns the fields in it. The returned list is in the order of their positions."}, {"org.apache.avro.generic.GenericData.getField": "Called by  {@link GenericDatumReader#readRecord} to retrieve a record fieldvalue from a reused instance. The default implementation is for {@link IndexedRecord}."}, {"org.apache.avro.generic.GenericData.validate": "Returns true if a Java datum matches a schema."}, {"org.apache.avro.generic.GenericData.isEnum": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.Schema.getEnumSymbols": "If this is an enum, return its symbols."}, {"org.apache.avro.generic.GenericData.isArray": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.getArrayAsCollection": "Called to access an array as a collection."}, {"org.apache.avro.Schema.getElementType": "If this is an array, returns its element type."}, {"org.apache.avro.generic.GenericData.isMap": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.Schema.getValueType": "If this is a map, returns its value type."}, {"org.apache.avro.generic.GenericData.resolveUnion": "Return the index for a datum within a union. Implemented with {@link Schema#getIndexNamed(String)} and {@link #getSchemaName(Object)}."}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}, {"org.apache.avro.generic.GenericFixed.bytes": "Return the data."}, {"org.apache.avro.Schema.getFixedSize": "If this is fixed, returns its size."}, {"org.apache.avro.generic.GenericData.isString": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isBytes": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isInteger": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isLong": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isFloat": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isDouble": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isBoolean": "Called by the default implementation of  {@link #instanceOf}."}]}, {"index": "268", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.toString", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "public String toString(Object datum) {\n    StringBuilder buffer = new StringBuilder();\n    toString(datum, buffer, new IdentityHashMap<>(128));\n    return buffer.toString();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Renders a Java datum as <a href=\"https://www.json.org/\">JSON</a>.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.util.IdentityHashMap.<init>", "org.apache.avro.generic.GenericData.toString", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["int"], ["java.lang.Object", "java.lang.StringBuilder", "java.util.IdentityHashMap"], [""]], "passed_comments": [{"org.apache.avro.generic.GenericData.toString": "Renders a Java datum as <a href=\"https://www.json.org/\">JSON</a>."}]}, {"index": "269", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.toString", "methodParameterType": "Object#StringBuilder#IdentityHashMap<Object,Object>#", "methodParameterName": "datum#buffer#seenObjects#", "methodBody": "protected void toString(Object datum, StringBuilder buffer, IdentityHashMap<Object, Object> seenObjects) {\n    if (isRecord(datum)) {\n      if (seenObjects.containsKey(datum)) {\n        buffer.append(TOSTRING_CIRCULAR_REFERENCE_ERROR_TEXT);\n        return;\n      }\n      seenObjects.put(datum, datum);\n      buffer.append(\"{\");\n      int count = 0;\n      Schema schema = getRecordSchema(datum);\n      for (Field f : schema.getFields()) {\n        toString(f.name(), buffer, seenObjects);\n        buffer.append(\": \");\n        toString(getField(datum, f.name(), f.pos()), buffer, seenObjects);\n        if (++count < schema.getFields().size())\n          buffer.append(\", \");\n      }\n      buffer.append(\"}\");\n      seenObjects.remove(datum);\n    } else if (isArray(datum)) {\n      if (seenObjects.containsKey(datum)) {\n        buffer.append(TOSTRING_CIRCULAR_REFERENCE_ERROR_TEXT);\n        return;\n      }\n      seenObjects.put(datum, datum);\n      Collection<?> array = getArrayAsCollection(datum);\n      buffer.append(\"[\");\n      long last = array.size() - 1;\n      int i = 0;\n      for (Object element : array) {\n        toString(element, buffer, seenObjects);\n        if (i++ < last)\n          buffer.append(\", \");\n      }\n      buffer.append(\"]\");\n      seenObjects.remove(datum);\n    } else if (isMap(datum)) {\n      if (seenObjects.containsKey(datum)) {\n        buffer.append(TOSTRING_CIRCULAR_REFERENCE_ERROR_TEXT);\n        return;\n      }\n      seenObjects.put(datum, datum);\n      buffer.append(\"{\");\n      int count = 0;\n      @SuppressWarnings(value = \"unchecked\")\n      Map<Object, Object> map = (Map<Object, Object>) datum;\n      for (Map.Entry<Object, Object> entry : map.entrySet()) {\n        buffer.append(\"\\\"\");\n        writeEscapedString(String.valueOf(entry.getKey()), buffer);\n        buffer.append(\"\\\": \");\n        toString(entry.getValue(), buffer, seenObjects);\n        if (++count < map.size())\n          buffer.append(\", \");\n      }\n      buffer.append(\"}\");\n      seenObjects.remove(datum);\n    } else if (isString(datum) || isEnum(datum)) {\n      buffer.append(\"\\\"\");\n      writeEscapedString(datum.toString(), buffer);\n      buffer.append(\"\\\"\");\n    } else if (isBytes(datum)) {\n      buffer.append(\"\\\"\");\n      ByteBuffer bytes = ((ByteBuffer) datum).duplicate();\n      writeEscapedString(StandardCharsets.ISO_8859_1.decode(bytes), buffer);\n      buffer.append(\"\\\"\");\n    } else if (((datum instanceof Float) && // quote Nan & Infinity\n        (((Float) datum).isInfinite() || ((Float) datum).isNaN()))\n        || ((datum instanceof Double) && (((Double) datum).isInfinite() || ((Double) datum).isNaN()))) {\n      buffer.append(\"\\\"\");\n      buffer.append(datum);\n      buffer.append(\"\\\"\");\n    } else if (datum instanceof GenericData) {\n      if (seenObjects.containsKey(datum)) {\n        buffer.append(TOSTRING_CIRCULAR_REFERENCE_ERROR_TEXT);\n        return;\n      }\n      seenObjects.put(datum, datum);\n      toString(datum, buffer, seenObjects);\n      seenObjects.remove(datum);\n    } else {\n      buffer.append(datum);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(SimpleName)SimpleName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Renders a Java datum as <a href=\"https://www.json.org/\">JSON</a>.", "call_func_name": ["org.apache.avro.generic.GenericData.isRecord", "java.util.IdentityHashMap.containsKey", "java.lang.StringBuilder.append", "java.util.IdentityHashMap.put", "org.apache.avro.generic.GenericData.getRecordSchema", "org.apache.avro.Schema.getFields", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.generic.GenericData.toString", "org.apache.avro.generic.GenericData.getField", "java.util.List.size", "java.util.IdentityHashMap.remove", "org.apache.avro.generic.GenericData.isArray", "org.apache.avro.generic.GenericData.getArrayAsCollection", "java.util.Collection.size", "java.util.Collection.iterator", "org.apache.avro.generic.GenericData.isMap", "java.util.Map.entrySet", "java.util.Set.iterator", "java.lang.String.valueOf", "org.apache.avro.generic.GenericData.writeEscapedString", "java.util.Map.size", "org.apache.avro.generic.GenericData.isString", "org.apache.avro.generic.GenericData.isEnum", "java.lang.Object.toString", "org.apache.avro.generic.GenericData.isBytes", "java.nio.ByteBuffer.duplicate", "java.nio.charset.Charset.decode", "java.lang.Float.isInfinite", "java.lang.Float.isNaN", "java.lang.Double.isInfinite", "java.lang.Double.isNaN", "java.lang.StringBuilder.append"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"], [""], [""], [""], [""], ["java.lang.Object", "java.lang.StringBuilder", "java.util.IdentityHashMap"], ["java.lang.Object", "java.lang.String", "int"], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], [""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object"], ["java.lang.CharSequence", "java.lang.StringBuilder"], [""], ["java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.Object"], [""], ["java.nio.ByteBuffer"], [""], [""], [""], [""], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.generic.GenericData.isRecord": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.getRecordSchema": "Called to obtain the schema of a record. By default calls {GenericContainer#getSchema(). May be overridden for alternate record representations."}, {"org.apache.avro.Schema.getFields": "If this is a record, returns the fields in it. The returned list is in the order of their positions."}, {"org.apache.avro.generic.GenericData.toString": "Renders a Java datum as <a href=\"https://www.json.org/\">JSON</a>."}, {"org.apache.avro.generic.GenericData.getField": "Called by  {@link GenericDatumReader#readRecord} to retrieve a record fieldvalue from a reused instance. The default implementation is for {@link IndexedRecord}."}, {"org.apache.avro.generic.GenericData.isArray": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.getArrayAsCollection": "Called to access an array as a collection."}, {"org.apache.avro.generic.GenericData.isMap": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isString": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isEnum": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isBytes": "Called by the default implementation of  {@link #instanceOf}."}]}, {"index": "270", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.induce", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "public Schema induce(Object datum) {\n    if (isRecord(datum)) {\n      return getRecordSchema(datum);\n    } else if (isArray(datum)) {\n      Schema elementType = null;\n      for (Object element : getArrayAsCollection(datum)) {\n        if (elementType == null) {\n          elementType = induce(element);\n        } else if (!elementType.equals(induce(element))) {\n          throw new AvroTypeException(\"No mixed type arrays.\");\n        }\n      }\n      if (elementType == null) {\n        throw new AvroTypeException(\"Empty array: \" + datum);\n      }\n      return Schema.createArray(elementType);\n\n    } else if (isMap(datum)) {\n      @SuppressWarnings(value = \"unchecked\")\n      Map<Object, Object> map = (Map<Object, Object>) datum;\n      Schema value = null;\n      for (Map.Entry<Object, Object> entry : map.entrySet()) {\n        if (value == null) {\n          value = induce(entry.getValue());\n        } else if (!value.equals(induce(entry.getValue()))) {\n          throw new AvroTypeException(\"No mixed type map values.\");\n        }\n      }\n      if (value == null) {\n        throw new AvroTypeException(\"Empty map: \" + datum);\n      }\n      return Schema.createMap(value);\n    } else if (datum instanceof GenericFixed) {\n      return Schema.createFixed(null, null, null, ((GenericFixed) datum).bytes().length);\n    } else if (isString(datum))\n      return Schema.create(Type.STRING);\n    else if (isBytes(datum))\n      return Schema.create(Type.BYTES);\n    else if (isInteger(datum))\n      return Schema.create(Type.INT);\n    else if (isLong(datum))\n      return Schema.create(Type.LONG);\n    else if (isFloat(datum))\n      return Schema.create(Type.FLOAT);\n    else if (isDouble(datum))\n      return Schema.create(Type.DOUBLE);\n    else if (isBoolean(datum))\n      return Schema.create(Type.BOOLEAN);\n    else if (datum == null)\n      return Schema.create(Type.NULL);\n\n    else\n      throw new AvroTypeException(\"Can't create schema for: \" + datum);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#FieldAccess#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(FieldAccess(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a schema given an example datum.", "call_func_name": ["org.apache.avro.generic.GenericData.isRecord", "org.apache.avro.generic.GenericData.getRecordSchema", "org.apache.avro.generic.GenericData.isArray", "org.apache.avro.generic.GenericData.getArrayAsCollection", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.generic.GenericData.induce", "org.apache.avro.Schema.equals", "org.apache.avro.AvroTypeException.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.Schema.createArray", "org.apache.avro.generic.GenericData.isMap", "java.util.Map.entrySet", "java.util.Set.iterator", "org.apache.avro.Schema.createMap", "org.apache.avro.generic.GenericFixed.bytes", "org.apache.avro.Schema.createFixed", "org.apache.avro.generic.GenericData.isString", "org.apache.avro.generic.GenericData.isBytes", "org.apache.avro.generic.GenericData.isInteger", "org.apache.avro.generic.GenericData.isLong", "org.apache.avro.generic.GenericData.isFloat", "org.apache.avro.generic.GenericData.isDouble", "org.apache.avro.generic.GenericData.isBoolean"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["org.apache.avro.Schema"], ["java.lang.Object"], [""], [""], ["org.apache.avro.Schema"], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "int"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.generic.GenericData.isRecord": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.getRecordSchema": "Called to obtain the schema of a record. By default calls {GenericContainer#getSchema(). May be overridden for alternate record representations."}, {"org.apache.avro.generic.GenericData.isArray": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.getArrayAsCollection": "Called to access an array as a collection."}, {"org.apache.avro.generic.GenericData.induce": "Create a schema given an example datum."}, {"org.apache.avro.Schema.createArray": "Create an array schema."}, {"org.apache.avro.generic.GenericData.isMap": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.Schema.createMap": "Create a map schema."}, {"org.apache.avro.generic.GenericFixed.bytes": "Return the data."}, {"org.apache.avro.Schema.createFixed": "Create a fixed schema."}, {"org.apache.avro.generic.GenericData.isString": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isBytes": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isInteger": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isLong": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isFloat": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isDouble": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isBoolean": "Called by the default implementation of  {@link #instanceOf}."}]}, {"index": "271", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.setField", "methodParameterType": "Object#String#int#Object#", "methodParameterName": "record#name#position#o#", "methodBody": "public void setField(Object record, String name, int position, Object o) {\n    ((IndexedRecord) record).put(position, o);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called by  {@link GenericDatumReader#readRecord} to set a record fields valueto a record instance. The default implementation is for {@link IndexedRecord}.", "call_func_name": ["org.apache.avro.generic.IndexedRecord.put"], "call_func_parameter": [["int", "java.lang.Object"]], "passed_comments": [{"org.apache.avro.generic.IndexedRecord.put": "Set the value of a field given its position in the schema. <p> This method is not meant to be called by user code, but only by {@link org.apache.avro.io.DatumReader} implementations."}]}, {"index": "272", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getField", "methodParameterType": "Object#String#int#", "methodParameterName": "record#name#position#", "methodBody": "public Object getField(Object record, String name, int position) {\n    return ((IndexedRecord) record).get(position);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by  {@link GenericDatumReader#readRecord} to retrieve a record fieldvalue from a reused instance. The default implementation is for {@link IndexedRecord}.", "call_func_name": ["org.apache.avro.generic.IndexedRecord.get"], "call_func_parameter": [["int"]], "passed_comments": [{"org.apache.avro.generic.IndexedRecord.get": "Return the value of a field given its position in the schema. <p> This method is not meant to be called by user code, but only by {@link org.apache.avro.io.DatumWriter} implementations."}]}, {"index": "273", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getRecordState", "methodParameterType": "Object#Schema#", "methodParameterName": "record#schema#", "methodBody": "protected Object getRecordState(Object record, Schema schema) {\n    return null;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Produce state for repeated calls to {@link #getField(Object,String,int,Object)} and{@link #setField(Object,String,int,Object,Object)} on the same record.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "274", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.setField", "methodParameterType": "Object#String#int#Object#Object#", "methodParameterName": "r#n#p#o#state#", "methodBody": "protected void setField(Object r, String n, int p, Object o, Object state) {\n    setField(r, n, p, o);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Version of  {@link #setField} that has state.", "call_func_name": ["org.apache.avro.generic.GenericData.setField"], "call_func_parameter": [["java.lang.Object", "java.lang.String", "int", "java.lang.Object"]], "passed_comments": [{"org.apache.avro.generic.GenericData.setField": "Called by  {@link GenericDatumReader#readRecord} to set a record fields valueto a record instance. The default implementation is for {@link IndexedRecord}."}]}, {"index": "275", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getField", "methodParameterType": "Object#String#int#Object#", "methodParameterName": "record#name#pos#state#", "methodBody": "protected Object getField(Object record, String name, int pos, Object state) {\n    return getField(record, name, pos);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Version of  {@link #getField} that has state.", "call_func_name": ["org.apache.avro.generic.GenericData.getField"], "call_func_parameter": [["java.lang.Object", "java.lang.String", "int"]], "passed_comments": [{"org.apache.avro.generic.GenericData.getField": "Called by  {@link GenericDatumReader#readRecord} to retrieve a record fieldvalue from a reused instance. The default implementation is for {@link IndexedRecord}."}]}, {"index": "276", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.resolveUnion", "methodParameterType": "Schema#Object#", "methodParameterName": "union#datum#", "methodBody": "public int resolveUnion(Schema union, Object datum) {\n    // if there is a logical type that works, use it first\n    // this allows logical type concrete classes to overlap with supported ones\n    // for example, a conversion could return a map\n    if (datum != null) {\n      Map<String, Conversion<?>> conversions = conversionsByClass.get(datum.getClass());\n      if (conversions != null) {\n        List<Schema> candidates = union.getTypes();\n        for (int i = 0; i < candidates.size(); i += 1) {\n          LogicalType candidateType = candidates.get(i).getLogicalType();\n          if (candidateType != null) {\n            Conversion<?> conversion = conversions.get(candidateType.getName());\n            if (conversion != null) {\n              return i;\n            }\n          }\n        }\n      }\n    }\n\n    Integer i = union.getIndexNamed(getSchemaName(datum));\n    if (i != null)\n      return i;\n    throw new UnresolvedUnionException(union, datum);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#NumberLiteral#Assignment#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#ForStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)ForStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Return the index for a datum within a union. Implemented with {@link Schema#getIndexNamed(String)} and {@link #getSchemaName(Object)}.", "call_func_name": ["java.lang.Object.getClass", "java.util.Map.get", "org.apache.avro.Schema.getTypes", "java.util.List.size", "java.util.List.get", "org.apache.avro.Schema.getLogicalType", "org.apache.avro.LogicalType.getName", "org.apache.avro.generic.GenericData.getSchemaName", "org.apache.avro.Schema.getIndexNamed", "java.lang.Integer.intValue", "org.apache.avro.UnresolvedUnionException.<init>"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""], ["int"], [""], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["org.apache.avro.Schema", "java.lang.Object"]], "passed_comments": [{"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}, {"org.apache.avro.LogicalType.getName": "Get the name of this logical type. <p> This name is set as the Schema property \"logicalType\"."}, {"org.apache.avro.generic.GenericData.getSchemaName": "Return the schema full name for a datum. Called by {@link #resolveUnion(Schema,Object)}."}, {"org.apache.avro.Schema.getIndexNamed": "If this is a union, return the branch with the provided full name."}]}, {"index": "277", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getSchemaName", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected String getSchemaName(Object datum) {\n    if (datum == null || datum == JsonProperties.NULL_VALUE)\n      return Type.NULL.getName();\n    if (isRecord(datum))\n      return getRecordSchema(datum).getFullName();\n    if (isEnum(datum))\n      return getEnumSchema(datum).getFullName();\n    if (isArray(datum))\n      return Type.ARRAY.getName();\n    if (isMap(datum))\n      return Type.MAP.getName();\n    if (isFixed(datum))\n      return getFixedSchema(datum).getFullName();\n    if (isString(datum))\n      return Type.STRING.getName();\n    if (isBytes(datum))\n      return Type.BYTES.getName();\n    if (isInteger(datum))\n      return Type.INT.getName();\n    if (isLong(datum))\n      return Type.LONG.getName();\n    if (isFloat(datum))\n      return Type.FLOAT.getName();\n    if (isDouble(datum))\n      return Type.DOUBLE.getName();\n    if (isBoolean(datum))\n      return Type.BOOLEAN.getName();\n    throw new AvroRuntimeException(String.format(\"Unknown datum type %s: %s\", datum.getClass().getName(), datum));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Return the schema full name for a datum. Called by {@link #resolveUnion(Schema,Object)}.", "call_func_name": ["org.apache.avro.generic.GenericData.isRecord", "org.apache.avro.generic.GenericData.getRecordSchema", "org.apache.avro.Schema.getFullName", "org.apache.avro.generic.GenericData.isEnum", "org.apache.avro.generic.GenericData.getEnumSchema", "org.apache.avro.generic.GenericData.isArray", "org.apache.avro.generic.GenericData.isMap", "org.apache.avro.generic.GenericData.isFixed", "org.apache.avro.generic.GenericData.getFixedSchema", "org.apache.avro.generic.GenericData.isString", "org.apache.avro.generic.GenericData.isBytes", "org.apache.avro.generic.GenericData.isInteger", "org.apache.avro.generic.GenericData.isLong", "org.apache.avro.generic.GenericData.isFloat", "org.apache.avro.generic.GenericData.isDouble", "org.apache.avro.generic.GenericData.isBoolean", "java.lang.Object.getClass", "java.lang.Class.getName", "java.lang.String.format", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.generic.GenericData.isRecord": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.getRecordSchema": "Called to obtain the schema of a record. By default calls {GenericContainer#getSchema(). May be overridden for alternate record representations."}, {"org.apache.avro.Schema.getFullName": "If this is a record, enum or fixed, returns its namespace-qualified name, otherwise returns the name of the primitive type."}, {"org.apache.avro.generic.GenericData.isEnum": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.getEnumSchema": "Called to obtain the schema of a enum. By default calls {GenericContainer#getSchema(). May be overridden for alternate enum representations."}, {"org.apache.avro.generic.GenericData.isArray": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isMap": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isFixed": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.getFixedSchema": "Called to obtain the schema of a fixed. By default calls {GenericContainer#getSchema(). May be overridden for alternate fixed representations."}, {"org.apache.avro.generic.GenericData.isString": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isBytes": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isInteger": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isLong": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isFloat": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isDouble": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isBoolean": "Called by the default implementation of  {@link #instanceOf}."}]}, {"index": "278", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.instanceOf", "methodParameterType": "Schema#Object#", "methodParameterName": "schema#datum#", "methodBody": "protected boolean instanceOf(Schema schema, Object datum) {\n    switch (schema.getType()) {\n    case RECORD:\n      if (!isRecord(datum))\n        return false;\n      return (schema.getFullName() == null) ? getRecordSchema(datum).getFullName() == null\n          : schema.getFullName().equals(getRecordSchema(datum).getFullName());\n    case ENUM:\n      if (!isEnum(datum))\n        return false;\n      return schema.getFullName().equals(getEnumSchema(datum).getFullName());\n    case ARRAY:\n      return isArray(datum);\n    case MAP:\n      return isMap(datum);\n    case FIXED:\n      if (!isFixed(datum))\n        return false;\n      return schema.getFullName().equals(getFixedSchema(datum).getFullName());\n    case STRING:\n      return isString(datum);\n    case BYTES:\n      return isBytes(datum);\n    case INT:\n      return isInteger(datum);\n    case LONG:\n      return isLong(datum);\n    case FLOAT:\n      return isFloat(datum);\n    case DOUBLE:\n      return isDouble(datum);\n    case BOOLEAN:\n      return isBoolean(datum);\n    case NULL:\n      return datum == null;\n    default:\n      throw new AvroRuntimeException(\"Unexpected type: \" + schema);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#NullLiteral#InfixExpression#ReturnStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(ReturnStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ReturnStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Called by  {@link #resolveUnion(Schema,Object)}. May be overridden for alternate data representations.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.generic.GenericData.isRecord", "org.apache.avro.Schema.getFullName", "org.apache.avro.generic.GenericData.getRecordSchema", "java.lang.String.equals", "org.apache.avro.generic.GenericData.isEnum", "org.apache.avro.generic.GenericData.getEnumSchema", "org.apache.avro.generic.GenericData.isArray", "org.apache.avro.generic.GenericData.isMap", "org.apache.avro.generic.GenericData.isFixed", "org.apache.avro.generic.GenericData.getFixedSchema", "org.apache.avro.generic.GenericData.isString", "org.apache.avro.generic.GenericData.isBytes", "org.apache.avro.generic.GenericData.isInteger", "org.apache.avro.generic.GenericData.isLong", "org.apache.avro.generic.GenericData.isFloat", "org.apache.avro.generic.GenericData.isDouble", "org.apache.avro.generic.GenericData.isBoolean", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.generic.GenericData.isRecord": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.Schema.getFullName": "If this is a record, enum or fixed, returns its namespace-qualified name, otherwise returns the name of the primitive type."}, {"org.apache.avro.generic.GenericData.getRecordSchema": "Called to obtain the schema of a record. By default calls {GenericContainer#getSchema(). May be overridden for alternate record representations."}, {"org.apache.avro.generic.GenericData.isEnum": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.getEnumSchema": "Called to obtain the schema of a enum. By default calls {GenericContainer#getSchema(). May be overridden for alternate enum representations."}, {"org.apache.avro.generic.GenericData.isArray": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isMap": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isFixed": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.getFixedSchema": "Called to obtain the schema of a fixed. By default calls {GenericContainer#getSchema(). May be overridden for alternate fixed representations."}, {"org.apache.avro.generic.GenericData.isString": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isBytes": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isInteger": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isLong": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isFloat": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isDouble": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.generic.GenericData.isBoolean": "Called by the default implementation of  {@link #instanceOf}."}]}, {"index": "279", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.isArray", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected boolean isArray(Object datum) {\n    return datum instanceof Collection;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #instanceOf}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "280", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getArrayAsCollection", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected Collection getArrayAsCollection(Object datum) {\n    return (Collection) datum;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to access an array as a collection.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "281", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.isRecord", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected boolean isRecord(Object datum) {\n    return datum instanceof IndexedRecord;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #instanceOf}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "282", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getRecordSchema", "methodParameterType": "Object#", "methodParameterName": "record#", "methodBody": "protected Schema getRecordSchema(Object record) {\n    return ((GenericContainer) record).getSchema();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to obtain the schema of a record. By default calls {GenericContainer#getSchema(). May be overridden for alternate record representations.", "call_func_name": ["org.apache.avro.generic.GenericContainer.getSchema"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.generic.GenericContainer.getSchema": "The schema of this instance."}]}, {"index": "283", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.isEnum", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected boolean isEnum(Object datum) {\n    return datum instanceof GenericEnumSymbol;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #instanceOf}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "284", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getEnumSchema", "methodParameterType": "Object#", "methodParameterName": "enu#", "methodBody": "protected Schema getEnumSchema(Object enu) {\n    return ((GenericContainer) enu).getSchema();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to obtain the schema of a enum. By default calls {GenericContainer#getSchema(). May be overridden for alternate enum representations.", "call_func_name": ["org.apache.avro.generic.GenericContainer.getSchema"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.generic.GenericContainer.getSchema": "The schema of this instance."}]}, {"index": "285", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.isMap", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected boolean isMap(Object datum) {\n    return datum instanceof Map;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #instanceOf}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "286", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.isFixed", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected boolean isFixed(Object datum) {\n    return datum instanceof GenericFixed;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #instanceOf}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "287", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getFixedSchema", "methodParameterType": "Object#", "methodParameterName": "fixed#", "methodBody": "protected Schema getFixedSchema(Object fixed) {\n    return ((GenericContainer) fixed).getSchema();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to obtain the schema of a fixed. By default calls {GenericContainer#getSchema(). May be overridden for alternate fixed representations.", "call_func_name": ["org.apache.avro.generic.GenericContainer.getSchema"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.generic.GenericContainer.getSchema": "The schema of this instance."}]}, {"index": "288", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.isString", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected boolean isString(Object datum) {\n    return datum instanceof CharSequence;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #instanceOf}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "289", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.isBytes", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected boolean isBytes(Object datum) {\n    return datum instanceof ByteBuffer;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #instanceOf}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "290", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.isInteger", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected boolean isInteger(Object datum) {\n    return datum instanceof Integer;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #instanceOf}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "291", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.isLong", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected boolean isLong(Object datum) {\n    return datum instanceof Long;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #instanceOf}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "292", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.isFloat", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected boolean isFloat(Object datum) {\n    return datum instanceof Float;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #instanceOf}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "293", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.isDouble", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected boolean isDouble(Object datum) {\n    return datum instanceof Double;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #instanceOf}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "294", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.isBoolean", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "protected boolean isBoolean(Object datum) {\n    return datum instanceof Boolean;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #instanceOf}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "295", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.hashCode", "methodParameterType": "Object#Schema#", "methodParameterName": "o#s#", "methodBody": "public int hashCode(Object o, Schema s) {\n    if (o == null)\n      return 0; // incomplete datum\n    int hashCode = 1;\n    switch (s.getType()) {\n    case RECORD:\n      for (Field f : s.getFields()) {\n        if (f.order() == Field.Order.IGNORE)\n          continue;\n        hashCode = hashCodeAdd(hashCode, getField(o, f.name(), f.pos()), f.schema());\n      }\n      return hashCode;\n    case ARRAY:\n      Collection<?> a = (Collection<?>) o;\n      Schema elementType = s.getElementType();\n      for (Object e : a)\n        hashCode = hashCodeAdd(hashCode, e, elementType);\n      return hashCode;\n    case UNION:\n      return hashCode(o, s.getTypes().get(resolveUnion(s, o)));\n    case ENUM:\n      return s.getEnumOrdinal(o.toString());\n    case NULL:\n      return 0;\n    case STRING:\n      return (o instanceof Utf8 ? o : new Utf8(o.toString())).hashCode();\n    default:\n      return o.hashCode();\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NumberLiteral#ReturnStatement#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#ContinueStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#EnhancedForStatement#SimpleName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#NumberLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ConditionalExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(ContinueStatement)ContinueStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(ParenthesizedExpression(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ConditionalExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Compute a hash code according to a schema, consistent with {@link #compare(Object,Object,Schema)}.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.Schema.getFields", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.generic.GenericData.getField", "org.apache.avro.generic.GenericData.hashCodeAdd", "org.apache.avro.Schema.getElementType", "java.util.Collection.iterator", "org.apache.avro.Schema.getTypes", "org.apache.avro.generic.GenericData.resolveUnion", "java.util.List.get", "org.apache.avro.generic.GenericData.hashCode", "java.lang.Object.toString", "org.apache.avro.Schema.getEnumOrdinal", "org.apache.avro.util.Utf8.<init>", "java.lang.Object.hashCode"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.Object", "java.lang.String", "int"], ["int", "java.lang.Object", "org.apache.avro.Schema"], [""], [""], [""], ["org.apache.avro.Schema", "java.lang.Object"], ["int"], ["java.lang.Object", "org.apache.avro.Schema"], [""], ["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getFields": "If this is a record, returns the fields in it. The returned list is in the order of their positions."}, {"org.apache.avro.generic.GenericData.getField": "Called by  {@link GenericDatumReader#readRecord} to retrieve a record fieldvalue from a reused instance. The default implementation is for {@link IndexedRecord}."}, {"org.apache.avro.generic.GenericData.hashCodeAdd": "Add the hash code for an object into an accumulated hash code."}, {"org.apache.avro.Schema.getElementType": "If this is an array, returns its element type."}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}, {"org.apache.avro.generic.GenericData.resolveUnion": "Return the index for a datum within a union. Implemented with {@link Schema#getIndexNamed(String)} and {@link #getSchemaName(Object)}."}, {"org.apache.avro.generic.GenericData.hashCode": "Compute a hash code according to a schema, consistent with {@link #compare(Object,Object,Schema)}."}, {"org.apache.avro.Schema.getEnumOrdinal": "If this is an enum, return a symbol's ordinal value."}]}, {"index": "296", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.hashCodeAdd", "methodParameterType": "int#Object#Schema#", "methodParameterName": "hashCode#o#s#", "methodBody": "protected int hashCodeAdd(int hashCode, Object o, Schema s) {\n    return 31 * hashCode + hashCode(o, s);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NumberLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add the hash code for an object into an accumulated hash code.", "call_func_name": ["org.apache.avro.generic.GenericData.hashCode"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.generic.GenericData.hashCode": "Compute a hash code according to a schema, consistent with {@link #compare(Object,Object,Schema)}."}]}, {"index": "297", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.compare", "methodParameterType": "Object#Object#Schema#", "methodParameterName": "o1#o2#s#", "methodBody": "public int compare(Object o1, Object o2, Schema s) {\n    return compare(o1, o2, s, false);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Compare objects according to their schema. If equal, return zero. If greater-than, return 1, if less than return -1. Order is consistent with that of  {@link BinaryData#compare(byte[],int,byte[],int,Schema)}.", "call_func_name": ["org.apache.avro.generic.GenericData.compare"], "call_func_parameter": [["java.lang.Object", "java.lang.Object", "org.apache.avro.Schema", "boolean"]], "passed_comments": [{"org.apache.avro.generic.GenericData.compare": "Comparison implementation. When equals is true, only checks for equality, not for order."}]}, {"index": "298", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.compare", "methodParameterType": "Object#Object#Schema#boolean#", "methodParameterName": "o1#o2#s#equals#", "methodBody": "@SuppressWarnings(value = \"unchecked\")\n  protected int compare(Object o1, Object o2, Schema s, boolean equals) {\n    if (o1 == o2)\n      return 0;\n    switch (s.getType()) {\n    case RECORD:\n      for (Field f : s.getFields()) {\n        if (f.order() == Field.Order.IGNORE)\n          continue; // ignore this field\n        int pos = f.pos();\n        String name = f.name();\n        int compare = compare(getField(o1, name, pos), getField(o2, name, pos), f.schema(), equals);\n        if (compare != 0) // not equal\n          return f.order() == Field.Order.DESCENDING ? -compare : compare;\n      }\n      return 0;\n    case ENUM:\n      return s.getEnumOrdinal(o1.toString()) - s.getEnumOrdinal(o2.toString());\n    case ARRAY:\n      Collection a1 = (Collection) o1;\n      Collection a2 = (Collection) o2;\n      Iterator e1 = a1.iterator();\n      Iterator e2 = a2.iterator();\n      Schema elementType = s.getElementType();\n      while (e1.hasNext() && e2.hasNext()) {\n        int compare = compare(e1.next(), e2.next(), elementType, equals);\n        if (compare != 0)\n          return compare;\n      }\n      return e1.hasNext() ? 1 : (e2.hasNext() ? -1 : 0);\n    case MAP:\n      if (equals)\n        return o1.equals(o2) ? 0 : 1;\n      throw new AvroRuntimeException(\"Can't compare maps!\");\n    case UNION:\n      int i1 = resolveUnion(s, o1);\n      int i2 = resolveUnion(s, o2);\n      return (i1 == i2) ? compare(o1, o2, s.getTypes().get(i1), equals) : Integer.compare(i1, i2);\n    case NULL:\n      return 0;\n    case STRING:\n      Utf8 u1 = o1 instanceof Utf8 ? (Utf8) o1 : new Utf8(o1.toString());\n      Utf8 u2 = o2 instanceof Utf8 ? (Utf8) o2 : new Utf8(o2.toString());\n      return u1.compareTo(u2);\n    default:\n      return ((Comparable) o1).compareTo(o2);\n    }\n  }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#NumberLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#ContinueStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#PrefixExpression#SimpleName#ConditionalExpression#ReturnStatement#IfStatement#Block#EnhancedForStatement#NumberLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#NumberLiteral#ConditionalExpression#ParenthesizedExpression#ConditionalExpression#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#NumberLiteral#ConditionalExpression#ReturnStatement#IfStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#SimpleName#SwitchCase#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#SimpleName#SwitchCase#NumberLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SwitchCase#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)IfStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(ContinueStatement)ContinueStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)IfStatement)Block)EnhancedForStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement)Block)WhileStatement(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(ParenthesizedExpression(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression(NumberLiteral)NumberLiteral)ConditionalExpression)ParenthesizedExpression)ConditionalExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(SimpleName)SimpleName(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ConditionalExpression)ReturnStatement)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Comparison implementation. When equals is true, only checks for equality, not for order.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.Schema.getFields", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.generic.GenericData.getField", "org.apache.avro.generic.GenericData.compare", "java.lang.Object.toString", "org.apache.avro.Schema.getEnumOrdinal", "java.util.Collection.iterator", "org.apache.avro.Schema.getElementType", "java.lang.Object.equals", "org.apache.avro.AvroRuntimeException.<init>", "org.apache.avro.generic.GenericData.resolveUnion", "org.apache.avro.Schema.getTypes", "java.util.List.get", "java.lang.Integer.compare", "org.apache.avro.util.Utf8.<init>", "org.apache.avro.util.Utf8.compareTo", "java.lang.Comparable.compareTo"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.Object", "java.lang.String", "int"], ["java.lang.Object", "java.lang.Object", "org.apache.avro.Schema", "boolean"], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], ["java.lang.String"], ["org.apache.avro.Schema", "java.lang.Object"], [""], ["int"], ["int", "int"], ["java.lang.String"], ["org.apache.avro.util.Utf8"], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getFields": "If this is a record, returns the fields in it. The returned list is in the order of their positions."}, {"org.apache.avro.generic.GenericData.getField": "Called by  {@link GenericDatumReader#readRecord} to retrieve a record fieldvalue from a reused instance. The default implementation is for {@link IndexedRecord}."}, {"org.apache.avro.generic.GenericData.compare": "Comparison implementation. When equals is true, only checks for equality, not for order."}, {"org.apache.avro.Schema.getEnumOrdinal": "If this is an enum, return a symbol's ordinal value."}, {"org.apache.avro.Schema.getElementType": "If this is an array, returns its element type."}, {"org.apache.avro.generic.GenericData.resolveUnion": "Return the index for a datum within a union. Implemented with {@link Schema#getIndexNamed(String)} and {@link #getSchemaName(Object)}."}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}]}, {"index": "299", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.getDefaultValue", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "@SuppressWarnings({ \"unchecked\" })\n  public Object getDefaultValue(Field field) {\n    JsonNode json = Accessor.defaultValue(field);\n    if (json == null)\n      throw new AvroMissingFieldException(\"Field \" + field + \" not set and has no default value\", field);\n    if (json.isNull() && (field.schema().getType() == Type.NULL\n        || (field.schema().getType() == Type.UNION && field.schema().getTypes().get(0).getType() == Type.NULL))) {\n      return null;\n    }\n\n    // Check the cache\n    Object defaultValue = defaultValueCache.get(field);\n\n    // If not cached, get the default Java value by encoding the default JSON\n    // value and then decoding it:\n    if (defaultValue == null)\n      try {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        BinaryEncoder encoder = EncoderFactory.get().binaryEncoder(baos, null);\n        Accessor.encode(encoder, field.schema(), json);\n        encoder.flush();\n        BinaryDecoder decoder = DecoderFactory.get().binaryDecoder(baos.toByteArray(), null);\n        defaultValue = createDatumReader(field.schema()).read(null, decoder);\n\n        // this MAY result in two threads creating the same defaultValue\n        // and calling put. The last thread will win. However,\n        // that's not an issue.\n        defaultValueCache.put(field, defaultValue);\n      } catch (IOException e) {\n        throw new AvroRuntimeException(e);\n      }\n\n    return defaultValue;\n  }", "AST": "Javadoc#SimpleName#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#NullLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the default value of the given field, if any.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "300", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.deepCopy", "methodParameterType": "Schema#T#", "methodParameterName": "schema#value#", "methodBody": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n  public <T> T deepCopy(Schema schema, T value) {\n    if (value == null)\n      return null;\n    LogicalType logicalType = schema.getLogicalType();\n    if (logicalType == null) // not a logical type -- use raw copy\n      return (T) deepCopyRaw(schema, value);\n    Conversion conversion = getConversionByClass(value.getClass(), logicalType);\n    if (conversion == null) // no conversion defined -- try raw copy\n      return (T) deepCopyRaw(schema, value);\n    // logical type with conversion: convert to raw, copy, then convert back to\n    // logical\n    Object raw = Conversions.convertToRawType(value, schema, logicalType, conversion);\n    Object copy = deepCopyRaw(schema, raw); // copy raw\n    return (T) Conversions.convertToLogicalType(copy, schema, logicalType, conversion);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Makes a deep copy of a value given its schema. <P> Logical types are converted to raw types, copied, then converted back.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "301", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.createFixed", "methodParameterType": "Object#Schema#", "methodParameterName": "old#schema#", "methodBody": "public Object createFixed(Object old, Schema schema) {\n    if ((old instanceof GenericFixed) && ((GenericFixed) old).bytes().length == schema.getFixedSize())\n      return old;\n    return new GenericData.Fixed(schema);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#ReturnStatement#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(InfixExpression(FieldAccess(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to create an fixed value. May be overridden for alternate fixed representations. By default, returns  {@link GenericFixed}.", "call_func_name": ["org.apache.avro.generic.GenericFixed.bytes", "org.apache.avro.Schema.getFixedSize"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.apache.avro.generic.GenericFixed.bytes": "Return the data."}, {"org.apache.avro.Schema.getFixedSize": "If this is fixed, returns its size."}]}, {"index": "302", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.createFixed", "methodParameterType": "Object#byte[]#Schema#", "methodParameterName": "old#bytes#schema#", "methodBody": "public Object createFixed(Object old, byte[] bytes, Schema schema) {\n    GenericFixed fixed = (GenericFixed) createFixed(old, schema);\n    System.arraycopy(bytes, 0, fixed.bytes(), 0, schema.getFixedSize());\n    return fixed;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to create an fixed value. May be overridden for alternate fixed representations. By default, returns  {@link GenericFixed}.", "call_func_name": ["org.apache.avro.generic.GenericData.createFixed", "org.apache.avro.generic.GenericFixed.bytes", "org.apache.avro.Schema.getFixedSize", "java.lang.System.arraycopy"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.Schema"], [""], [""], ["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": [{"org.apache.avro.generic.GenericData.createFixed": "Called to create an fixed value. May be overridden for alternate fixed representations. By default, returns  {@link GenericFixed}."}, {"org.apache.avro.generic.GenericFixed.bytes": "Return the data."}, {"org.apache.avro.Schema.getFixedSize": "If this is fixed, returns its size."}]}, {"index": "303", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.createEnum", "methodParameterType": "String#Schema#", "methodParameterName": "symbol#schema#", "methodBody": "public Object createEnum(String symbol, Schema schema) {\n    return new EnumSymbol(schema, symbol);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to create an enum value. May be overridden for alternate enum representations. By default, returns a GenericEnumSymbol.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "304", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericData.java", "methodName": "org.apache.avro.generic.GenericData.newRecord", "methodParameterType": "Object#Schema#", "methodParameterName": "old#schema#", "methodBody": "public Object newRecord(Object old, Schema schema) {\n    if (old instanceof IndexedRecord) {\n      IndexedRecord record = (IndexedRecord) old;\n      if (record.getSchema() == schema)\n        return record;\n    }\n    return new GenericData.Record(schema);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#ReturnStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to create new record instances. Subclasses may override to use a different record implementation. The returned instance must conform to the schema provided. If the old object contains fields not present in the schema, they should either be removed from the old object, or it should create a new instance that conforms to the schema. By default, this returns a {@link GenericData.Record}.", "call_func_name": ["org.apache.avro.generic.IndexedRecord.getSchema"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "305", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericArray.java", "methodName": "org.apache.avro.generic.GenericArray.peek", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "T peek();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The current content of the location where  {@link #add(Object)} would nextstore an element, if any. This permits reuse of arrays and their elements without allocating new objects.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "306", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericArray.java", "methodName": "org.apache.avro.generic.GenericArray.reset", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default void reset() {\n    clear();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "reset size counter of array to zero", "call_func_name": ["org.apache.avro.generic.GenericArray.clear"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "307", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericArray.java", "methodName": "org.apache.avro.generic.GenericArray.prune", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default void prune() {\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "clean up reusable objects from array (if reset didn't already)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "308", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericArray.java", "methodName": "org.apache.avro.generic.GenericArray.reverse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void reverse();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Reverses the order of the elements in this array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "309", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericContainer.java", "methodName": "org.apache.avro.generic.GenericContainer.getSchema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Schema getSchema();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The schema of this instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "310", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.getData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GenericData getData() {\n    return data;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link GenericData} implementation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "311", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.write", "methodParameterType": "Schema#Object#Encoder#", "methodParameterName": "schema#datum#out#", "methodBody": "protected void write(Schema schema, Object datum, Encoder out) throws IOException {\n    LogicalType logicalType = schema.getLogicalType();\n    if (datum != null && logicalType != null) {\n      Conversion<?> conversion = getData().getConversionByClass(datum.getClass(), logicalType);\n      writeWithoutConversion(schema, convert(schema, logicalType, conversion, datum), out);\n    } else {\n      writeWithoutConversion(schema, datum, out);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Called to write data.", "call_func_name": ["org.apache.avro.Schema.getLogicalType", "org.apache.avro.generic.GenericDatumWriter.getData", "java.lang.Object.getClass", "org.apache.avro.generic.GenericData.getConversionByClass", "org.apache.avro.generic.GenericDatumWriter.convert", "org.apache.avro.generic.GenericDatumWriter.writeWithoutConversion"], "call_func_parameter": [[""], [""], [""], ["java.lang.Class", "org.apache.avro.LogicalType"], ["org.apache.avro.Schema", "org.apache.avro.LogicalType", "org.apache.avro.Conversion", "java.lang.Object"], ["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"]], "passed_comments": [{"org.apache.avro.generic.GenericDatumWriter.getData": "Return the  {@link GenericData} implementation."}, {"org.apache.avro.generic.GenericData.getConversionByClass": "Returns the conversion for the given class and logical type."}, {"org.apache.avro.generic.GenericDatumWriter.convert": "Convert a high level representation of a logical type (such as a BigDecimal) to the its underlying representation object (such as a ByteBuffer)."}, {"org.apache.avro.generic.GenericDatumWriter.writeWithoutConversion": "Called to write data."}]}, {"index": "312", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.convert", "methodParameterType": "Schema#LogicalType#Conversion<T>#Object#", "methodParameterName": "schema#logicalType#conversion#datum#", "methodBody": "protected <T> Object convert(Schema schema, LogicalType logicalType, Conversion<T> conversion, Object datum) {\n    try {\n      if (conversion == null) {\n        return datum;\n      } else {\n        return Conversions.convertToRawType(datum, schema, logicalType, conversion);\n      }\n    } catch (AvroRuntimeException e) {\n      Throwable cause = e.getCause();\n      if (cause != null && cause.getClass() == ClassCastException.class) {\n        // This is to keep backwards compatibility. The convert function here used to\n        // throw CCE. After being moved to Conversions, it throws AvroRuntimeException\n        // instead. To keep as much same behaviour as before, this function checks if\n        // the cause is a CCE. If yes, rethrow it in case any child class checks it.\n        // This\n        // behaviour can be changed later in future versions to make it consistent with\n        // reading path, which throws AvroRuntimeException\n        throw (ClassCastException) cause;\n      } else {\n        throw e;\n      }\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#CastExpression#ThrowStatement#Block#SimpleName#ThrowStatement#Block#IfStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ThrowStatement)Block(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)IfStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Convert a high level representation of a logical type (such as a BigDecimal) to the its underlying representation object (such as a ByteBuffer).", "call_func_name": ["org.apache.avro.Conversions.convertToRawType", "org.apache.avro.AvroRuntimeException.getCause", "java.lang.Object.getClass"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType", "org.apache.avro.Conversion"], [""], [""]], "passed_comments": [{"org.apache.avro.Conversions.convertToRawType": "Convert a high level representation of a logical type (such as a BigDecimal) to the its underlying representation object (such as a ByteBuffer)"}]}, {"index": "313", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.writeWithoutConversion", "methodParameterType": "Schema#Object#Encoder#", "methodParameterName": "schema#datum#out#", "methodBody": "protected void writeWithoutConversion(Schema schema, Object datum, Encoder out) throws IOException {\n    try {\n      switch (schema.getType()) {\n      case RECORD:\n        writeRecord(schema, datum, out);\n        break;\n      case ENUM:\n        writeEnum(schema, datum, out);\n        break;\n      case ARRAY:\n        writeArray(schema, datum, out);\n        break;\n      case MAP:\n        writeMap(schema, datum, out);\n        break;\n      case UNION:\n        int index = resolveUnion(schema, datum);\n        out.writeIndex(index);\n        write(schema.getTypes().get(index), datum, out);\n        break;\n      case FIXED:\n        writeFixed(schema, datum, out);\n        break;\n      case STRING:\n        writeString(schema, datum, out);\n        break;\n      case BYTES:\n        writeBytes(datum, out);\n        break;\n      case INT:\n        out.writeInt(((Number) datum).intValue());\n        break;\n      case LONG:\n        out.writeLong((Long) datum);\n        break;\n      case FLOAT:\n        out.writeFloat((Float) datum);\n        break;\n      case DOUBLE:\n        out.writeDouble((Double) datum);\n        break;\n      case BOOLEAN:\n        out.writeBoolean((Boolean) datum);\n        break;\n      case NULL:\n        out.writeNull();\n        break;\n      default:\n        error(schema, datum);\n      }\n    } catch (NullPointerException e) {\n      throw npe(e, \" of \" + schema.getFullName());\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SwitchStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)SwitchStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Called to write data.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.generic.GenericDatumWriter.writeRecord", "org.apache.avro.generic.GenericDatumWriter.writeEnum", "org.apache.avro.generic.GenericDatumWriter.writeArray", "org.apache.avro.generic.GenericDatumWriter.writeMap", "org.apache.avro.generic.GenericDatumWriter.resolveUnion", "org.apache.avro.io.Encoder.writeIndex", "org.apache.avro.Schema.getTypes", "java.util.List.get", "org.apache.avro.generic.GenericDatumWriter.write", "org.apache.avro.generic.GenericDatumWriter.writeFixed", "org.apache.avro.generic.GenericDatumWriter.writeString", "org.apache.avro.generic.GenericDatumWriter.writeBytes", "java.lang.Number.intValue", "org.apache.avro.io.Encoder.writeInt", "java.lang.Long.longValue", "org.apache.avro.io.Encoder.writeLong", "java.lang.Float.floatValue", "org.apache.avro.io.Encoder.writeFloat", "java.lang.Double.doubleValue", "org.apache.avro.io.Encoder.writeDouble", "java.lang.Boolean.booleanValue", "org.apache.avro.io.Encoder.writeBoolean", "org.apache.avro.io.Encoder.writeNull", "org.apache.avro.generic.GenericDatumWriter.error", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.apache.avro.Schema.getFullName", "java.lang.StringBuilder.toString", "org.apache.avro.generic.GenericDatumWriter.npe"], "call_func_parameter": [[""], ["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"], ["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"], ["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"], ["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"], ["org.apache.avro.Schema", "java.lang.Object"], ["int"], [""], ["int"], ["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"], ["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"], ["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"], ["java.lang.Object", "org.apache.avro.io.Encoder"], [""], ["int"], [""], ["long"], [""], ["float"], [""], ["double"], [""], ["boolean"], [""], ["org.apache.avro.Schema", "java.lang.Object"], [""], ["java.lang.String"], [""], [""], ["java.lang.NullPointerException", "java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.generic.GenericDatumWriter.writeRecord": "Called to write a record. May be overridden for alternate record representations."}, {"org.apache.avro.generic.GenericDatumWriter.writeEnum": "Called to write an enum value. May be overridden for alternate enum representations."}, {"org.apache.avro.generic.GenericDatumWriter.writeArray": "Called to write a array. May be overridden for alternate array representations."}, {"org.apache.avro.generic.GenericDatumWriter.writeMap": "Called to write a map. May be overridden for alternate map representations."}, {"org.apache.avro.generic.GenericDatumWriter.resolveUnion": "Called to find the index for a datum within a union. By default calls {@link GenericData#resolveUnion(Schema,Object)}."}, {"org.apache.avro.io.Encoder.writeIndex": "Call this method to write the tag of a union. As an example of usage, let's say you want to write a union, whose second branch is a record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeIndex(1); out.writeLong(record.longField); out.writeBoolean(record.boolField); </pre>"}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}, {"org.apache.avro.generic.GenericDatumWriter.write": "Called to write data."}, {"org.apache.avro.generic.GenericDatumWriter.writeFixed": "Called to write a fixed value. May be overridden for alternate fixed representations."}, {"org.apache.avro.generic.GenericDatumWriter.writeString": "Called to write a string. May be overridden for alternate string representations."}, {"org.apache.avro.generic.GenericDatumWriter.writeBytes": "Called to write a bytes. May be overridden for alternate bytes representations."}, {"org.apache.avro.io.Encoder.writeInt": "Writes a 32-bit integer."}, {"org.apache.avro.io.Encoder.writeLong": "Write a 64-bit integer."}, {"org.apache.avro.io.Encoder.writeFloat": "Write a float."}, {"org.apache.avro.io.Encoder.writeDouble": "Write a double."}, {"org.apache.avro.io.Encoder.writeBoolean": "Write a boolean value."}, {"org.apache.avro.io.Encoder.writeNull": "\"Writes\" a null value. (Doesn't actually write anything, but advances the state of the parser if this class is stateful.)"}, {"org.apache.avro.Schema.getFullName": "If this is a record, enum or fixed, returns its namespace-qualified name, otherwise returns the name of the primitive type."}, {"org.apache.avro.generic.GenericDatumWriter.npe": "Helper method for adding a message to an NPE."}]}, {"index": "314", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.npe", "methodParameterType": "NullPointerException#String#", "methodParameterName": "e#s#", "methodBody": "protected NullPointerException npe(NullPointerException e, String s) {\n    NullPointerException result = new NullPointerException(e.getMessage() + s);\n    result.initCause(e.getCause() == null ? e : e.getCause());\n    return result;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper method for adding a message to an NPE.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.NullPointerException.getMessage", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.NullPointerException.<init>", "java.lang.NullPointerException.getCause", "java.lang.NullPointerException.initCause"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "315", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.writeRecord", "methodParameterType": "Schema#Object#Encoder#", "methodParameterName": "schema#datum#out#", "methodBody": "protected void writeRecord(Schema schema, Object datum, Encoder out) throws IOException {\n    Object state = data.getRecordState(datum, schema);\n    for (Field f : schema.getFields()) {\n      writeField(datum, f, out, state);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Called to write a record. May be overridden for alternate record representations.", "call_func_name": ["org.apache.avro.generic.GenericData.getRecordState", "org.apache.avro.Schema.getFields", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.Schema"], [""], [""], [""], [""]], "passed_comments": [{"org.apache.avro.generic.GenericData.getRecordState": "Produce state for repeated calls to {@link #getField(Object,String,int,Object)} and{@link #setField(Object,String,int,Object,Object)} on the same record."}, {"org.apache.avro.Schema.getFields": "If this is a record, returns the fields in it. The returned list is in the order of their positions."}]}, {"index": "316", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.writeField", "methodParameterType": "Object#Field#Encoder#Object#", "methodParameterName": "datum#f#out#state#", "methodBody": "protected void writeField(Object datum, Field f, Encoder out, Object state) throws IOException {\n    Object value = data.getField(datum, f.name(), f.pos(), state);\n    try {\n      write(f.schema(), value, out);\n    } catch (NullPointerException e) {\n      throw npe(e, \" in field \" + f.name());\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Called to write a single field of a record. May be overridden for more efficient or alternate implementations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "317", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.writeEnum", "methodParameterType": "Schema#Object#Encoder#", "methodParameterName": "schema#datum#out#", "methodBody": "protected void writeEnum(Schema schema, Object datum, Encoder out) throws IOException {\n    if (!data.isEnum(datum))\n      throw new AvroTypeException(\"Not an enum: \" + datum + \" for schema: \" + schema);\n    out.writeEnum(schema.getEnumOrdinal(datum.toString()));\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called to write an enum value. May be overridden for alternate enum representations.", "call_func_name": ["org.apache.avro.generic.GenericData.isEnum", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroTypeException.<init>", "java.lang.Object.toString", "org.apache.avro.Schema.getEnumOrdinal", "org.apache.avro.io.Encoder.writeEnum"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["int"]], "passed_comments": [{"org.apache.avro.generic.GenericData.isEnum": "Called by the default implementation of  {@link #instanceOf}."}, {"org.apache.avro.Schema.getEnumOrdinal": "If this is an enum, return a symbol's ordinal value."}, {"org.apache.avro.io.Encoder.writeEnum": "Writes an enumeration."}]}, {"index": "318", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.writeArray", "methodParameterType": "Schema#Object#Encoder#", "methodParameterName": "schema#datum#out#", "methodBody": "protected void writeArray(Schema schema, Object datum, Encoder out) throws IOException {\n    Schema element = schema.getElementType();\n    long size = getArraySize(datum);\n    long actualSize = 0;\n    out.writeArrayStart();\n    out.setItemCount(size);\n    for (Iterator<? extends Object> it = getArrayElements(datum); it.hasNext();) {\n      out.startItem();\n      write(element, it.next(), out);\n      actualSize++;\n    }\n    out.writeArrayEnd();\n    if (actualSize != size) {\n      throw new ConcurrentModificationException(\n          \"Size of array written was \" + size + \", but number of elements written was \" + actualSize + \". \");\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Called to write a array. May be overridden for alternate array representations.", "call_func_name": ["org.apache.avro.Schema.getElementType", "org.apache.avro.generic.GenericDatumWriter.getArraySize", "org.apache.avro.io.Encoder.writeArrayStart", "org.apache.avro.io.Encoder.setItemCount", "org.apache.avro.generic.GenericDatumWriter.getArrayElements", "java.util.Iterator.hasNext", "org.apache.avro.io.Encoder.startItem", "java.util.Iterator.next", "org.apache.avro.generic.GenericDatumWriter.write", "org.apache.avro.io.Encoder.writeArrayEnd", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.ConcurrentModificationException.<init>"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["long"], ["java.lang.Object"], [""], [""], [""], ["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"], [""], [""], ["java.lang.String"], ["long"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getElementType": "If this is an array, returns its element type."}, {"org.apache.avro.generic.GenericDatumWriter.getArraySize": "Called by the default implementation of  {@link #writeArray} to get the sizeof an array. The default implementation is for  {@link Collection}."}, {"org.apache.avro.io.Encoder.writeArrayStart": "Call this method to start writing an array. When starting to serialize an array, call  {@link #writeArrayStart}. Then, before writing any data for any item call  {@link #setItemCount} followed by asequence of  {@link #startItem()} and the item itself. The number of{@link #startItem()} should match the number specified in{@link #setItemCount}. When actually writing the data of the item, you can call any  {@link Encoder} method (e.g., {@link #writeLong}). When all items of the array have been written, call  {@link #writeArrayEnd}. As an example, let's say you want to write an array of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeArrayStart(); out.setItemCount(list.size()); for (Record r : list) { out.startItem(); out.writeLong(r.longField); out.writeBoolean(r.boolField); } out.writeArrayEnd(); </pre>"}, {"org.apache.avro.io.Encoder.setItemCount": "Call this method before writing a batch of items in an array or a map. Then for each item, call  {@link #startItem()} followed by any of the other writemethods of  {@link Encoder}. The number of calls to  {@link #startItem()} mustbe equal to the count specified in  {@link #setItemCount}. Once a batch is completed you can start another batch with  {@link #setItemCount}."}, {"org.apache.avro.generic.GenericDatumWriter.getArrayElements": "Called by the default implementation of  {@link #writeArray} to enumeratearray elements. The default implementation is for  {@link Collection}."}, {"org.apache.avro.io.Encoder.startItem": "Start a new item of an array or map. See  {@link #writeArrayStart} for usageinformation."}, {"org.apache.avro.generic.GenericDatumWriter.write": "Called to write data."}, {"org.apache.avro.io.Encoder.writeArrayEnd": "Call this method to finish writing an array. See  {@link #writeArrayStart} forusage information."}]}, {"index": "319", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.resolveUnion", "methodParameterType": "Schema#Object#", "methodParameterName": "union#datum#", "methodBody": "protected int resolveUnion(Schema union, Object datum) {\n    return data.resolveUnion(union, datum);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to find the index for a datum within a union. By default calls {@link GenericData#resolveUnion(Schema,Object)}.", "call_func_name": ["org.apache.avro.generic.GenericData.resolveUnion"], "call_func_parameter": [["org.apache.avro.Schema", "java.lang.Object"]], "passed_comments": [{"org.apache.avro.generic.GenericData.resolveUnion": "Return the index for a datum within a union. Implemented with {@link Schema#getIndexNamed(String)} and {@link #getSchemaName(Object)}."}]}, {"index": "320", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.getArraySize", "methodParameterType": "Object#", "methodParameterName": "array#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  protected long getArraySize(Object array) {\n    return ((Collection) array).size();\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #writeArray} to get the sizeof an array. The default implementation is for  {@link Collection}.", "call_func_name": ["java.util.Collection.size"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "321", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.getArrayElements", "methodParameterType": "Object#", "methodParameterName": "array#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  protected Iterator<? extends Object> getArrayElements(Object array) {\n    return ((Collection) array).iterator();\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #writeArray} to enumeratearray elements. The default implementation is for  {@link Collection}.", "call_func_name": ["java.util.Collection.iterator"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "322", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.writeMap", "methodParameterType": "Schema#Object#Encoder#", "methodParameterName": "schema#datum#out#", "methodBody": "protected void writeMap(Schema schema, Object datum, Encoder out) throws IOException {\n    Schema value = schema.getValueType();\n    int size = getMapSize(datum);\n    int actualSize = 0;\n    out.writeMapStart();\n    out.setItemCount(size);\n    for (Map.Entry<Object, Object> entry : getMapEntries(datum)) {\n      out.startItem();\n      writeString(entry.getKey().toString(), out);\n      write(value, entry.getValue(), out);\n      actualSize++;\n    }\n    out.writeMapEnd();\n    if (actualSize != size) {\n      throw new ConcurrentModificationException(\n          \"Size of map written was \" + size + \", but number of entries written was \" + actualSize + \". \");\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Called to write a map. May be overridden for alternate map representations.", "call_func_name": ["org.apache.avro.Schema.getValueType", "org.apache.avro.generic.GenericDatumWriter.getMapSize", "org.apache.avro.io.Encoder.writeMapStart", "org.apache.avro.io.Encoder.setItemCount", "org.apache.avro.generic.GenericDatumWriter.getMapEntries", "java.lang.Iterable.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.io.Encoder.startItem", "java.lang.Object.toString", "org.apache.avro.generic.GenericDatumWriter.writeString", "org.apache.avro.generic.GenericDatumWriter.write", "org.apache.avro.io.Encoder.writeMapEnd", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.ConcurrentModificationException.<init>"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["long"], ["java.lang.Object"], [""], [""], [""], [""], [""], ["java.lang.Object", "org.apache.avro.io.Encoder"], ["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"], [""], [""], ["java.lang.String"], ["int"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getValueType": "If this is a map, returns its value type."}, {"org.apache.avro.generic.GenericDatumWriter.getMapSize": "Called by the default implementation of  {@link #writeMap} to get the size ofa map. The default implementation is for  {@link Map}."}, {"org.apache.avro.io.Encoder.writeMapStart": "Call this to start a new map. See  {@link #writeArrayStart} for details onusage. As an example of usage, let's say you want to write a map of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeMapStart(); out.setItemCount(list.size()); for (Map.Entry<String, Record> entry : map.entrySet()) { out.startItem(); out.writeString(entry.getKey()); out.writeLong(entry.getValue().longField); out.writeBoolean(entry.getValue().boolField); } out.writeMapEnd(); </pre>"}, {"org.apache.avro.io.Encoder.setItemCount": "Call this method before writing a batch of items in an array or a map. Then for each item, call  {@link #startItem()} followed by any of the other writemethods of  {@link Encoder}. The number of calls to  {@link #startItem()} mustbe equal to the count specified in  {@link #setItemCount}. Once a batch is completed you can start another batch with  {@link #setItemCount}."}, {"org.apache.avro.generic.GenericDatumWriter.getMapEntries": "Called by the default implementation of  {@link #writeMap} to enumerate mapelements. The default implementation is for  {@link Map}."}, {"org.apache.avro.io.Encoder.startItem": "Start a new item of an array or map. See  {@link #writeArrayStart} for usageinformation."}, {"org.apache.avro.generic.GenericDatumWriter.writeString": "Called to write a string. May be overridden for alternate string representations."}, {"org.apache.avro.generic.GenericDatumWriter.write": "Called to write data."}, {"org.apache.avro.io.Encoder.writeMapEnd": "Call this method to terminate the inner-most, currently-opened map. See {@link #writeArrayStart} for more details."}]}, {"index": "323", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.getMapSize", "methodParameterType": "Object#", "methodParameterName": "map#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  protected int getMapSize(Object map) {\n    return ((Map) map).size();\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #writeMap} to get the size ofa map. The default implementation is for  {@link Map}.", "call_func_name": ["java.util.Map.size"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "324", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.getMapEntries", "methodParameterType": "Object#", "methodParameterName": "map#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  protected Iterable<Map.Entry<Object, Object>> getMapEntries(Object map) {\n    return ((Map) map).entrySet();\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #writeMap} to enumerate mapelements. The default implementation is for  {@link Map}.", "call_func_name": ["java.util.Map.entrySet"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "325", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.writeString", "methodParameterType": "Schema#Object#Encoder#", "methodParameterName": "schema#datum#out#", "methodBody": "protected void writeString(Schema schema, Object datum, Encoder out) throws IOException {\n    writeString(datum, out);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called to write a string. May be overridden for alternate string representations.", "call_func_name": ["org.apache.avro.generic.GenericDatumWriter.writeString"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.io.Encoder"]], "passed_comments": [{"org.apache.avro.generic.GenericDatumWriter.writeString": "Called to write a string. May be overridden for alternate string representations."}]}, {"index": "326", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.writeString", "methodParameterType": "Object#Encoder#", "methodParameterName": "datum#out#", "methodBody": "protected void writeString(Object datum, Encoder out) throws IOException {\n    out.writeString((CharSequence) datum);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called to write a string. May be overridden for alternate string representations.", "call_func_name": ["org.apache.avro.io.Encoder.writeString"], "call_func_parameter": [["java.lang.CharSequence"]], "passed_comments": [{"org.apache.avro.io.Encoder.writeString": "Write a Unicode character string. If the CharSequence is an {@link org.apache.avro.util.Utf8} it writes this directly, otherwise theCharSequence is converted to a String via toString() and written."}]}, {"index": "327", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.writeBytes", "methodParameterType": "Object#Encoder#", "methodParameterName": "datum#out#", "methodBody": "protected void writeBytes(Object datum, Encoder out) throws IOException {\n    out.writeBytes((ByteBuffer) datum);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called to write a bytes. May be overridden for alternate bytes representations.", "call_func_name": ["org.apache.avro.io.Encoder.writeBytes"], "call_func_parameter": [["java.nio.ByteBuffer"]], "passed_comments": [{"org.apache.avro.io.Encoder.writeBytes": "Write a byte string."}]}, {"index": "328", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumWriter.java", "methodName": "org.apache.avro.generic.GenericDatumWriter.writeFixed", "methodParameterType": "Schema#Object#Encoder#", "methodParameterName": "schema#datum#out#", "methodBody": "protected void writeFixed(Schema schema, Object datum, Encoder out) throws IOException {\n    out.writeFixed(((GenericFixed) datum).bytes(), 0, schema.getFixedSize());\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called to write a fixed value. May be overridden for alternate fixed representations.", "call_func_name": ["org.apache.avro.generic.GenericFixed.bytes", "org.apache.avro.Schema.getFixedSize", "org.apache.avro.io.Encoder.writeFixed"], "call_func_parameter": [[""], [""], ["byte[]", "int", "int"]], "passed_comments": [{"org.apache.avro.generic.GenericFixed.bytes": "Return the data."}, {"org.apache.avro.Schema.getFixedSize": "If this is fixed, returns its size."}, {"org.apache.avro.io.Encoder.writeFixed": "Writes a fixed size binary object."}]}, {"index": "329", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.GenericDatumReader", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public GenericDatumReader(Schema schema) {\n    this(schema, schema, GenericData.get());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct where the writer's and reader's schemas are the same.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "330", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.GenericDatumReader", "methodParameterType": "Schema#Schema#", "methodParameterName": "writer#reader#", "methodBody": "public GenericDatumReader(Schema writer, Schema reader) {\n    this(writer, reader, GenericData.get());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct given writer's and reader's schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "331", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.getData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GenericData getData() {\n    return data;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the  {@link GenericData} implementation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "332", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.getSchema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Schema getSchema() {\n    return actual;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the writer's schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "333", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.getExpected", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Schema getExpected() {\n    return expected;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reader's schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "334", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.setExpected", "methodParameterType": "Schema#", "methodParameterName": "reader#", "methodBody": "public void setExpected(Schema reader) {\n    this.expected = reader;\n    creatorResolver = null;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the reader's schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "335", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.getResolver", "methodParameterType": "Schema#Schema#", "methodParameterName": "actual#expected#", "methodBody": "protected final ResolvingDecoder getResolver(Schema actual, Schema expected) throws IOException {\n    Thread currThread = Thread.currentThread();\n    ResolvingDecoder resolver;\n    if (currThread == creator && creatorResolver != null) {\n      return creatorResolver;\n    }\n\n    Map<Schema, ResolvingDecoder> cache = RESOLVER_CACHE.get().get(actual);\n    if (cache == null) {\n      cache = new WeakIdentityHashMap<>();\n      RESOLVER_CACHE.get().put(actual, cache);\n    }\n    resolver = cache.get(expected);\n    if (resolver == null) {\n      resolver = DecoderFactory.get().resolvingDecoder(Schema.applyAliases(actual, expected), expected, null);\n      cache.put(expected, resolver);\n    }\n\n    if (currThread == creator) {\n      creatorResolver = resolver;\n    }\n\n    return resolver;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets a resolving decoder for use by this GenericDatumReader. Unstable API. Currently uses a thread local cache to prevent constructing the resolvers too often, because that is very expensive.", "call_func_name": ["java.lang.Thread.currentThread", "java.lang.ThreadLocal.get", "java.util.Map.get", "org.apache.avro.util.WeakIdentityHashMap.<init>", "java.util.Map.put", "org.apache.avro.io.DecoderFactory.get", "org.apache.avro.Schema.applyAliases", "org.apache.avro.io.DecoderFactory.resolvingDecoder"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"], [""], ["org.apache.avro.Schema", "org.apache.avro.Schema"], ["org.apache.avro.Schema", "org.apache.avro.Schema", "org.apache.avro.io.Decoder"]], "passed_comments": [{"org.apache.avro.io.DecoderFactory.get": "Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions. All creator methods create objects with default settings."}, {"org.apache.avro.Schema.applyAliases": "Rewrite a writer's schema using the aliases from a reader's schema. This permits reading records, enums and fixed schemas whose names have changed, and records whose field names have changed. The returned schema always contains the same data elements in the same order, but with possibly different names."}, {"org.apache.avro.io.DecoderFactory.resolvingDecoder": "Creates a  {@link ResolvingDecoder} wrapping the Decoder provided. ThisResolvingDecoder will resolve input conforming to the <i>writer</i> schema from the wrapped Decoder, and present it as the <i>reader</i> schema."}]}, {"index": "336", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.read", "methodParameterType": "Object#Schema#ResolvingDecoder#", "methodParameterName": "old#expected#in#", "methodBody": "protected Object read(Object old, Schema expected, ResolvingDecoder in) throws IOException {\n    Object datum = readWithoutConversion(old, expected, in);\n    LogicalType logicalType = expected.getLogicalType();\n    if (logicalType != null) {\n      Conversion<?> conversion = getData().getConversionFor(logicalType);\n      if (conversion != null) {\n        return convert(datum, expected, logicalType, conversion);\n      }\n    }\n    return datum;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to read data.", "call_func_name": ["org.apache.avro.generic.GenericDatumReader.readWithoutConversion", "org.apache.avro.Schema.getLogicalType", "org.apache.avro.generic.GenericDatumReader.getData", "org.apache.avro.generic.GenericData.getConversionFor", "org.apache.avro.generic.GenericDatumReader.convert"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.io.ResolvingDecoder"], [""], [""], ["org.apache.avro.LogicalType"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType", "org.apache.avro.Conversion"]], "passed_comments": [{"org.apache.avro.generic.GenericDatumReader.getData": "Return the  {@link GenericData} implementation."}, {"org.apache.avro.generic.GenericData.getConversionFor": "Returns the Conversion for the given logical type."}, {"org.apache.avro.generic.GenericDatumReader.convert": "Convert a underlying representation of a logical type (such as a ByteBuffer) to a higher level object (such as a BigDecimal)."}]}, {"index": "337", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.convert", "methodParameterType": "Object#Schema#LogicalType#Conversion<?>#", "methodParameterName": "datum#schema#type#conversion#", "methodBody": "protected Object convert(Object datum, Schema schema, LogicalType type, Conversion<?> conversion) {\n    return Conversions.convertToLogicalType(datum, schema, type, conversion);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Convert a underlying representation of a logical type (such as a ByteBuffer) to a higher level object (such as a BigDecimal).", "call_func_name": ["org.apache.avro.Conversions.convertToLogicalType"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType", "org.apache.avro.Conversion"]], "passed_comments": [{"org.apache.avro.Conversions.convertToLogicalType": "Convert a underlying representation of a logical type (such as a ByteBuffer) to a higher level object (such as a BigDecimal)."}]}, {"index": "338", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.readRecord", "methodParameterType": "Object#Schema#ResolvingDecoder#", "methodParameterName": "old#expected#in#", "methodBody": "protected Object readRecord(Object old, Schema expected, ResolvingDecoder in) throws IOException {\n    Object r = data.newRecord(old, expected);\n    Object state = data.getRecordState(r, expected);\n\n    for (Field f : in.readFieldOrder()) {\n      int pos = f.pos();\n      String name = f.name();\n      Object oldDatum = null;\n      if (old != null) {\n        oldDatum = data.getField(r, name, pos, state);\n      }\n      readField(r, f, oldDatum, in, state);\n    }\n\n    return r;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to read a record instance. May be overridden for alternate record representations.", "call_func_name": ["org.apache.avro.generic.GenericData.newRecord", "org.apache.avro.generic.GenericData.getRecordState", "org.apache.avro.io.ResolvingDecoder.readFieldOrder", "org.apache.avro.generic.GenericData.getField"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.Schema"], ["java.lang.Object", "org.apache.avro.Schema"], [""], ["java.lang.Object", "java.lang.String", "int", "java.lang.Object"]], "passed_comments": [{"org.apache.avro.generic.GenericData.newRecord": "Called to create new record instances. Subclasses may override to use a different record implementation. The returned instance must conform to the schema provided. If the old object contains fields not present in the schema, they should either be removed from the old object, or it should create a new instance that conforms to the schema. By default, this returns a {@link GenericData.Record}."}, {"org.apache.avro.generic.GenericData.getRecordState": "Produce state for repeated calls to {@link #getField(Object,String,int,Object)} and{@link #setField(Object,String,int,Object,Object)} on the same record."}, {"org.apache.avro.io.ResolvingDecoder.readFieldOrder": "Returns the actual order in which the reader's fields will be returned to the reader. This method is useful because  {@link ResolvingDecoder} returns values in theorder written by the writer, rather than the order expected by the reader. This method allows readers to figure out what fields to expect. Let's say the reader is expecting a three-field record, the first field is a long, the second a string, and the third an array. In this case, a typical usage might be as follows: <pre> Schema.Fields[] fieldOrder = in.readFieldOrder(); for (int i = 0; i &lt; 3; i++) { switch (fieldOrder[i].pos()) { case 1: foo(in.readLong()); break; case 2: someVariable = in.readString(); break; case 3: bar(in); // The code of \"bar\" will read an array-of-int break; } </pre> Note that  {@link ResolvingDecoder} will return only the fields expected bythe reader, not other fields that may have been written by the writer. Thus, the iteration-count of \"3\" in the above loop will always be correct. Throws a runtime exception if we're not just about to read the first field of a record. (If the client knows the order of incoming fields, then the client does <em>not</em> need to call this method but rather can just start reading the field values.)"}, {"org.apache.avro.generic.GenericData.getField": "Version of  {@link #getField} that has state."}]}, {"index": "339", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.readField", "methodParameterType": "Object#Field#Object#ResolvingDecoder#Object#", "methodParameterName": "r#f#oldDatum#in#state#", "methodBody": "protected void readField(Object r, Field f, Object oldDatum, ResolvingDecoder in, Object state) throws IOException {\n    data.setField(r, f.name(), f.pos(), read(oldDatum, f.schema(), in), state);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called to read a single field of a record. May be overridden for more efficient or alternate implementations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "340", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.readEnum", "methodParameterType": "Schema#Decoder#", "methodParameterName": "expected#in#", "methodBody": "protected Object readEnum(Schema expected, Decoder in) throws IOException {\n    return createEnum(expected.getEnumSymbols().get(in.readEnum()), expected);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to read an enum value. May be overridden for alternate enum representations. By default, returns a GenericEnumSymbol.", "call_func_name": ["org.apache.avro.Schema.getEnumSymbols", "org.apache.avro.io.Decoder.readEnum", "java.util.List.get", "org.apache.avro.generic.GenericDatumReader.createEnum"], "call_func_parameter": [[""], [""], ["int"], ["java.lang.String", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.Schema.getEnumSymbols": "If this is an enum, return its symbols."}, {"org.apache.avro.io.Decoder.readEnum": "Reads an enumeration."}, {"org.apache.avro.generic.GenericDatumReader.createEnum": "Called to create an enum value. May be overridden for alternate enum representations. By default, returns a GenericEnumSymbol."}]}, {"index": "341", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.createEnum", "methodParameterType": "String#Schema#", "methodParameterName": "symbol#schema#", "methodBody": "protected Object createEnum(String symbol, Schema schema) {\n    return data.createEnum(symbol, schema);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to create an enum value. May be overridden for alternate enum representations. By default, returns a GenericEnumSymbol.", "call_func_name": ["org.apache.avro.generic.GenericData.createEnum"], "call_func_parameter": [["java.lang.String", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.generic.GenericData.createEnum": "Called to create an enum value. May be overridden for alternate enum representations. By default, returns a GenericEnumSymbol."}]}, {"index": "342", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.readArray", "methodParameterType": "Object#Schema#ResolvingDecoder#", "methodParameterName": "old#expected#in#", "methodBody": "protected Object readArray(Object old, Schema expected, ResolvingDecoder in) throws IOException {\n    Schema expectedType = expected.getElementType();\n    long l = in.readArrayStart();\n    long base = 0;\n    if (l > 0) {\n      LogicalType logicalType = expectedType.getLogicalType();\n      Conversion<?> conversion = getData().getConversionFor(logicalType);\n      Object array = newArray(old, (int) l, expected);\n      do {\n        if (logicalType != null && conversion != null) {\n          for (long i = 0; i < l; i++) {\n            addToArray(array, base + i,\n                readWithConversion(peekArray(array), expectedType, logicalType, conversion, in));\n          }\n        } else {\n          for (long i = 0; i < l; i++) {\n            addToArray(array, base + i, readWithoutConversion(peekArray(array), expectedType, in));\n          }\n        }\n        base += l;\n      } while ((l = in.arrayNext()) > 0);\n      return pruneArray(array);\n    } else {\n      return pruneArray(newArray(old, 0, expected));\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#PrimitiveType#SimpleName#CastExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NumberLiteral#InfixExpression#DoStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement)Block(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)DoStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Called to read an array instance. May be overridden for alternate array representations.", "call_func_name": ["org.apache.avro.Schema.getElementType", "org.apache.avro.io.ResolvingDecoder.readArrayStart", "org.apache.avro.Schema.getLogicalType", "org.apache.avro.generic.GenericDatumReader.getData", "org.apache.avro.generic.GenericData.getConversionFor", "org.apache.avro.generic.GenericDatumReader.newArray", "org.apache.avro.generic.GenericDatumReader.peekArray", "org.apache.avro.generic.GenericDatumReader.readWithConversion", "org.apache.avro.generic.GenericDatumReader.addToArray", "org.apache.avro.generic.GenericDatumReader.readWithoutConversion", "org.apache.avro.io.ResolvingDecoder.arrayNext", "org.apache.avro.generic.GenericDatumReader.pruneArray"], "call_func_parameter": [[""], [""], [""], [""], ["org.apache.avro.LogicalType"], ["java.lang.Object", "int", "org.apache.avro.Schema"], ["java.lang.Object"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType", "org.apache.avro.Conversion", "org.apache.avro.io.ResolvingDecoder"], ["java.lang.Object", "long", "java.lang.Object"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.io.ResolvingDecoder"], [""], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.Schema.getElementType": "If this is an array, returns its element type."}, {"org.apache.avro.generic.GenericDatumReader.getData": "Return the  {@link GenericData} implementation."}, {"org.apache.avro.generic.GenericData.getConversionFor": "Returns the Conversion for the given logical type."}, {"org.apache.avro.generic.GenericDatumReader.newArray": "Called to create new array instances. Subclasses may override to use a different array implementation. By default, this returns a {@link GenericData.Array}."}, {"org.apache.avro.generic.GenericDatumReader.peekArray": "Called by the default implementation of  {@link #readArray} to retrieve avalue from a reused instance. The default implementation is for {@link GenericArray}."}, {"org.apache.avro.generic.GenericDatumReader.addToArray": "Called by the default implementation of  {@link #readArray} to add a value.The default implementation is for  {@link Collection}."}]}, {"index": "343", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.peekArray", "methodParameterType": "Object#", "methodParameterName": "array#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  protected Object peekArray(Object array) {\n    return (array instanceof GenericArray) ? ((GenericArray) array).peek() : null;\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #readArray} to retrieve avalue from a reused instance. The default implementation is for {@link GenericArray}.", "call_func_name": ["org.apache.avro.generic.GenericArray.peek"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.generic.GenericArray.peek": "The current content of the location where  {@link #add(Object)} would nextstore an element, if any. This permits reuse of arrays and their elements without allocating new objects."}]}, {"index": "344", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.addToArray", "methodParameterType": "Object#long#Object#", "methodParameterName": "array#pos#e#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  protected void addToArray(Object array, long pos, Object e) {\n    ((Collection) array).add(e);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #readArray} to add a value.The default implementation is for  {@link Collection}.", "call_func_name": ["java.util.Collection.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "345", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.readMap", "methodParameterType": "Object#Schema#ResolvingDecoder#", "methodParameterName": "old#expected#in#", "methodBody": "protected Object readMap(Object old, Schema expected, ResolvingDecoder in) throws IOException {\n    Schema eValue = expected.getValueType();\n    long l = in.readMapStart();\n    LogicalType logicalType = eValue.getLogicalType();\n    Conversion<?> conversion = getData().getConversionFor(logicalType);\n    Object map = newMap(old, (int) l);\n    if (l > 0) {\n      do {\n        if (logicalType != null && conversion != null) {\n          for (int i = 0; i < l; i++) {\n            addToMap(map, readMapKey(null, expected, in),\n                readWithConversion(null, eValue, logicalType, conversion, in));\n          }\n        } else {\n          for (int i = 0; i < l; i++) {\n            addToMap(map, readMapKey(null, expected, in), readWithoutConversion(null, eValue, in));\n          }\n        }\n      } while ((l = in.mapNext()) > 0);\n    }\n    return map;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#PrimitiveType#SimpleName#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NumberLiteral#InfixExpression#DoStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(DoStatement(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement)Block(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)IfStatement)Block(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)DoStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to read a map instance. May be overridden for alternate map representations.", "call_func_name": ["org.apache.avro.Schema.getValueType", "org.apache.avro.io.ResolvingDecoder.readMapStart", "org.apache.avro.Schema.getLogicalType", "org.apache.avro.generic.GenericDatumReader.getData", "org.apache.avro.generic.GenericData.getConversionFor", "org.apache.avro.generic.GenericDatumReader.newMap", "org.apache.avro.generic.GenericDatumReader.readMapKey", "org.apache.avro.generic.GenericDatumReader.readWithConversion", "org.apache.avro.generic.GenericDatumReader.addToMap", "org.apache.avro.generic.GenericDatumReader.readWithoutConversion", "org.apache.avro.io.ResolvingDecoder.mapNext"], "call_func_parameter": [[""], [""], [""], [""], ["org.apache.avro.LogicalType"], ["java.lang.Object", "int"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.io.Decoder"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType", "org.apache.avro.Conversion", "org.apache.avro.io.ResolvingDecoder"], ["java.lang.Object", "java.lang.Object", "java.lang.Object"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.io.ResolvingDecoder"], [""]], "passed_comments": [{"org.apache.avro.Schema.getValueType": "If this is a map, returns its value type."}, {"org.apache.avro.generic.GenericDatumReader.getData": "Return the  {@link GenericData} implementation."}, {"org.apache.avro.generic.GenericData.getConversionFor": "Returns the Conversion for the given logical type."}, {"org.apache.avro.generic.GenericDatumReader.newMap": "Called to create new array instances. Subclasses may override to use a different map implementation. By default, this returns a  {@link HashMap}."}, {"org.apache.avro.generic.GenericDatumReader.readMapKey": "Called by the default implementation of  {@link #readMap} to read a key value.The default implementation returns delegates to {@link #readString(Object,org.apache.avro.io.Decoder)}."}, {"org.apache.avro.generic.GenericDatumReader.addToMap": "Called by the default implementation of  {@link #readMap} to add a key/valuepair. The default implementation is for  {@link Map}."}]}, {"index": "346", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.readMapKey", "methodParameterType": "Object#Schema#Decoder#", "methodParameterName": "old#expected#in#", "methodBody": "protected Object readMapKey(Object old, Schema expected, Decoder in) throws IOException {\n    return readString(old, expected, in);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #readMap} to read a key value.The default implementation returns delegates to {@link #readString(Object,org.apache.avro.io.Decoder)}.", "call_func_name": ["org.apache.avro.generic.GenericDatumReader.readString"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.io.Decoder"]], "passed_comments": [{"org.apache.avro.generic.GenericDatumReader.readString": "Called to read strings. Subclasses may override to use a different string representation. By default, this calls  {@link #readString(Object,Decoder)}."}]}, {"index": "347", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.addToMap", "methodParameterType": "Object#Object#Object#", "methodParameterName": "map#key#value#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  protected void addToMap(Object map, Object key, Object value) {\n    ((Map) map).put(key, value);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called by the default implementation of  {@link #readMap} to add a key/valuepair. The default implementation is for  {@link Map}.", "call_func_name": ["java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "348", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.readFixed", "methodParameterType": "Object#Schema#Decoder#", "methodParameterName": "old#expected#in#", "methodBody": "protected Object readFixed(Object old, Schema expected, Decoder in) throws IOException {\n    GenericFixed fixed = (GenericFixed) data.createFixed(old, expected);\n    in.readFixed(fixed.bytes(), 0, expected.getFixedSize());\n    return fixed;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to read a fixed value. May be overridden for alternate fixed representations. By default, returns  {@link GenericFixed}.", "call_func_name": ["org.apache.avro.generic.GenericData.createFixed", "org.apache.avro.generic.GenericFixed.bytes", "org.apache.avro.Schema.getFixedSize", "org.apache.avro.io.Decoder.readFixed"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.Schema"], [""], [""], ["byte[]", "int", "int"]], "passed_comments": [{"org.apache.avro.generic.GenericData.createFixed": "Called to create an fixed value. May be overridden for alternate fixed representations. By default, returns  {@link GenericFixed}."}, {"org.apache.avro.generic.GenericFixed.bytes": "Return the data."}, {"org.apache.avro.Schema.getFixedSize": "If this is fixed, returns its size."}, {"org.apache.avro.io.Decoder.readFixed": "Reads fixed sized binary object."}]}, {"index": "349", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.createFixed", "methodParameterType": "Object#Schema#", "methodParameterName": "old#schema#", "methodBody": "@Deprecated\n  protected Object createFixed(Object old, Schema schema) {\n    return data.createFixed(old, schema);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to create an fixed value. May be overridden for alternate fixed representations. By default, returns  {@link GenericFixed}.", "call_func_name": ["org.apache.avro.generic.GenericData.createFixed"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.generic.GenericData.createFixed": "Called to create an fixed value. May be overridden for alternate fixed representations. By default, returns  {@link GenericFixed}."}]}, {"index": "350", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.createFixed", "methodParameterType": "Object#byte[]#Schema#", "methodParameterName": "old#bytes#schema#", "methodBody": "@Deprecated\n  protected Object createFixed(Object old, byte[] bytes, Schema schema) {\n    return data.createFixed(old, bytes, schema);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to create an fixed value. May be overridden for alternate fixed representations. By default, returns  {@link GenericFixed}.", "call_func_name": ["org.apache.avro.generic.GenericData.createFixed"], "call_func_parameter": [["java.lang.Object", "byte[]", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.generic.GenericData.createFixed": "Called to create an fixed value. May be overridden for alternate fixed representations. By default, returns  {@link GenericFixed}."}]}, {"index": "351", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.newRecord", "methodParameterType": "Object#Schema#", "methodParameterName": "old#schema#", "methodBody": "@Deprecated\n  protected Object newRecord(Object old, Schema schema) {\n    return data.newRecord(old, schema);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to create new record instances. Subclasses may override to use a different record implementation. The returned instance must conform to the schema provided. If the old object contains fields not present in the schema, they should either be removed from the old object, or it should create a new instance that conforms to the schema. By default, this returns a {@link GenericData.Record}.", "call_func_name": ["org.apache.avro.generic.GenericData.newRecord"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.generic.GenericData.newRecord": "Called to create new record instances. Subclasses may override to use a different record implementation. The returned instance must conform to the schema provided. If the old object contains fields not present in the schema, they should either be removed from the old object, or it should create a new instance that conforms to the schema. By default, this returns a {@link GenericData.Record}."}]}, {"index": "352", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.newArray", "methodParameterType": "Object#int#Schema#", "methodParameterName": "old#size#schema#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  protected Object newArray(Object old, int size, Schema schema) {\n    if (old instanceof GenericArray) {\n      ((GenericArray) old).reset();\n      return old;\n    } else if (old instanceof Collection) {\n      ((Collection) old).clear();\n      return old;\n    } else\n      return new GenericData.Array(size, schema);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Called to create new array instances. Subclasses may override to use a different array implementation. By default, this returns a {@link GenericData.Array}.", "call_func_name": ["org.apache.avro.generic.GenericArray.reset", "java.util.Collection.clear"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.apache.avro.generic.GenericArray.reset": "reset size counter of array to zero"}]}, {"index": "353", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.newMap", "methodParameterType": "Object#int#", "methodParameterName": "old#size#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  protected Object newMap(Object old, int size) {\n    if (old instanceof Map) {\n      ((Map) old).clear();\n      return old;\n    } else\n      return new HashMap<>(size);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#ReturnStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Called to create new array instances. Subclasses may override to use a different map implementation. By default, this returns a  {@link HashMap}.", "call_func_name": ["java.util.Map.clear", "java.util.HashMap.<init>"], "call_func_parameter": [[""], ["int"]], "passed_comments": "/"}, {"index": "354", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.readString", "methodParameterType": "Object#Schema#Decoder#", "methodParameterName": "old#expected#in#", "methodBody": "protected Object readString(Object old, Schema expected, Decoder in) throws IOException {\n    Class stringClass = getStringClass(expected);\n    if (stringClass == String.class)\n      return in.readString();\n    if (stringClass == CharSequence.class)\n      return readString(old, in);\n    return newInstanceFromString(stringClass, in.readString());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to read strings. Subclasses may override to use a different string representation. By default, this calls  {@link #readString(Object,Decoder)}.", "call_func_name": ["org.apache.avro.generic.GenericDatumReader.getStringClass", "org.apache.avro.io.Decoder.readString", "org.apache.avro.generic.GenericDatumReader.readString", "org.apache.avro.generic.GenericDatumReader.newInstanceFromString"], "call_func_parameter": [["org.apache.avro.Schema"], [""], ["java.lang.Object", "org.apache.avro.io.Decoder"], ["java.lang.Class", "java.lang.String"]], "passed_comments": [{"org.apache.avro.io.Decoder.readString": "Reads a char-string written by  {@link Encoder#writeString}."}, {"org.apache.avro.io.Decoder.readString": "Reads a char-string written by  {@link Encoder#writeString}."}, {"org.apache.avro.generic.GenericDatumReader.readString": "Called to read strings. Subclasses may override to use a different string representation. By default, this calls  {@link Decoder#readString(Utf8)}."}]}, {"index": "355", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.readString", "methodParameterType": "Object#Decoder#", "methodParameterName": "old#in#", "methodBody": "protected Object readString(Object old, Decoder in) throws IOException {\n    return in.readString(old instanceof Utf8 ? (Utf8) old : null);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#NullLiteral#ConditionalExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(NullLiteral)NullLiteral)ConditionalExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to read strings. Subclasses may override to use a different string representation. By default, this calls  {@link Decoder#readString(Utf8)}.", "call_func_name": ["org.apache.avro.io.Decoder.readString"], "call_func_parameter": [["org.apache.avro.util.Utf8"]], "passed_comments": [{"org.apache.avro.io.Decoder.readString": "Reads a char-string written by  {@link Encoder#writeString}."}]}, {"index": "356", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.createString", "methodParameterType": "String#", "methodParameterName": "value#", "methodBody": "protected Object createString(String value) {\n    return new Utf8(value);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to create a string from a default value. Subclasses may override to use a different string representation. By default, this calls {@link Utf8#Utf8(String)}.", "call_func_name": ["org.apache.avro.util.Utf8.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "357", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.findStringClass", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "protected Class findStringClass(Schema schema) {\n    String name = schema.getProp(GenericData.STRING_PROP);\n    if (name == null)\n      return CharSequence.class;\n\n    switch (GenericData.StringType.valueOf(name)) {\n    case String:\n      return String.class;\n    default:\n      return CharSequence.class;\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#TypeLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleType#TypeLiteral#ReturnStatement#SwitchCase#SimpleName#SimpleType#TypeLiteral#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement)IfStatement(SwitchStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Determines the class to used to represent a string Schema. By default uses {@link GenericData#STRING_PROP} to determine whether {@link Utf8} or{@link String} is used. Subclasses may override for alternaterepresentations.", "call_func_name": ["org.apache.avro.Schema.getProp"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "358", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.readBytes", "methodParameterType": "Object#Schema#Decoder#", "methodParameterName": "old#s#in#", "methodBody": "protected Object readBytes(Object old, Schema s, Decoder in) throws IOException {\n    return readBytes(old, in);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to read byte arrays. Subclasses may override to use a different byte array representation. By default, this calls {@link Decoder#readBytes(ByteBuffer)}.", "call_func_name": ["org.apache.avro.generic.GenericDatumReader.readBytes"], "call_func_parameter": [["java.lang.Object", "org.apache.avro.io.Decoder"]], "passed_comments": [{"org.apache.avro.generic.GenericDatumReader.readBytes": "Called to read byte arrays. Subclasses may override to use a different byte array representation. By default, this calls {@link Decoder#readBytes(ByteBuffer)}."}]}, {"index": "359", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.readBytes", "methodParameterType": "Object#Decoder#", "methodParameterName": "old#in#", "methodBody": "protected Object readBytes(Object old, Decoder in) throws IOException {\n    return in.readBytes(old instanceof ByteBuffer ? (ByteBuffer) old : null);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#NullLiteral#ConditionalExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(NullLiteral)NullLiteral)ConditionalExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to read byte arrays. Subclasses may override to use a different byte array representation. By default, this calls {@link Decoder#readBytes(ByteBuffer)}.", "call_func_name": ["org.apache.avro.io.Decoder.readBytes"], "call_func_parameter": [["java.nio.ByteBuffer"]], "passed_comments": [{"org.apache.avro.io.Decoder.readBytes": "Reads a byte-string written by  {@link Encoder#writeBytes}. if <tt>old</tt> is not null and has sufficient capacity to take in the bytes being read, the bytes are returned in <tt>old</tt>."}]}, {"index": "360", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.readInt", "methodParameterType": "Object#Schema#Decoder#", "methodParameterName": "old#expected#in#", "methodBody": "protected Object readInt(Object old, Schema expected, Decoder in) throws IOException {\n    return in.readInt();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to read integers. Subclasses may override to use a different integer representation. By default, this calls  {@link Decoder#readInt()}.", "call_func_name": ["org.apache.avro.io.Decoder.readInt", "java.lang.Integer.valueOf"], "call_func_parameter": [[""], ["int"]], "passed_comments": [{"org.apache.avro.io.Decoder.readInt": "Reads an integer written by  {@link Encoder#writeInt}."}]}, {"index": "361", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.createBytes", "methodParameterType": "byte[]#", "methodParameterName": "value#", "methodBody": "protected Object createBytes(byte[] value) {\n    return ByteBuffer.wrap(value);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called to create byte arrays from default values. Subclasses may override to use a different byte array representation. By default, this calls {@link ByteBuffer#wrap(byte[])}.", "call_func_name": ["java.nio.ByteBuffer.wrap"], "call_func_parameter": [["byte[]"]], "passed_comments": "/"}, {"index": "362", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java", "methodName": "org.apache.avro.generic.GenericDatumReader.skip", "methodParameterType": "Schema#Decoder#", "methodParameterName": "schema#in#", "methodBody": "public static void skip(Schema schema, Decoder in) throws IOException {\n    switch (schema.getType()) {\n    case RECORD:\n      for (Field field : schema.getFields())\n        skip(field.schema(), in);\n      break;\n    case ENUM:\n      in.readInt();\n      break;\n    case ARRAY:\n      Schema elementType = schema.getElementType();\n      for (long l = in.skipArray(); l > 0; l = in.skipArray()) {\n        for (long i = 0; i < l; i++) {\n          skip(elementType, in);\n        }\n      }\n      break;\n    case MAP:\n      Schema value = schema.getValueType();\n      for (long l = in.skipMap(); l > 0; l = in.skipMap()) {\n        for (long i = 0; i < l; i++) {\n          in.skipString();\n          skip(value, in);\n        }\n      }\n      break;\n    case UNION:\n      skip(schema.getTypes().get(in.readIndex()), in);\n      break;\n    case FIXED:\n      in.skipFixed(schema.getFixedSize());\n      break;\n    case STRING:\n      in.skipString();\n      break;\n    case BYTES:\n      in.skipBytes();\n      break;\n    case INT:\n      in.readInt();\n      break;\n    case LONG:\n      in.readLong();\n      break;\n    case FLOAT:\n      in.readFloat();\n      break;\n    case DOUBLE:\n      in.readDouble();\n      break;\n    case BOOLEAN:\n      in.readBoolean();\n      break;\n    case NULL:\n      break;\n    default:\n      throw new RuntimeException(\"Unknown type: \" + schema);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#EnhancedForStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#ForStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#ForStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#BreakStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)EnhancedForStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)ForStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)ForStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Skip an instance of a schema.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.Schema.getFields", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.generic.GenericDatumReader.skip", "org.apache.avro.io.Decoder.readInt", "org.apache.avro.Schema.getElementType", "org.apache.avro.io.Decoder.skipArray", "org.apache.avro.Schema.getValueType", "org.apache.avro.io.Decoder.skipMap", "org.apache.avro.io.Decoder.skipString", "org.apache.avro.Schema.getTypes", "org.apache.avro.io.Decoder.readIndex", "java.util.List.get", "org.apache.avro.Schema.getFixedSize", "org.apache.avro.io.Decoder.skipFixed", "org.apache.avro.io.Decoder.skipBytes", "org.apache.avro.io.Decoder.readLong", "org.apache.avro.io.Decoder.readFloat", "org.apache.avro.io.Decoder.readDouble", "org.apache.avro.io.Decoder.readBoolean", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], [""], [""], [""], [""], ["org.apache.avro.Schema", "org.apache.avro.io.Decoder"], [""], [""], [""], [""], [""], [""], [""], [""], ["int"], [""], ["int"], [""], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getFields": "If this is a record, returns the fields in it. The returned list is in the order of their positions."}, {"org.apache.avro.generic.GenericDatumReader.skip": "Skip an instance of a schema."}, {"org.apache.avro.io.Decoder.readInt": "Reads an integer written by  {@link Encoder#writeInt}."}, {"org.apache.avro.Schema.getElementType": "If this is an array, returns its element type."}, {"org.apache.avro.io.Decoder.skipArray": "Used for quickly skipping through an array. Note you can either skip the entire array, or read the entire array (with  {@link #readArrayStart}), but you can't mix the two on the same array. This method will skip through as many items as it can, all of them if possible. It will return zero if there are no more items to skip through, or an item count if it needs the client's help in skipping. The typical usage pattern is: <pre> for(long i = in.skipArray(); i != 0; i = i.skipArray()) { for (long j = 0; j < i; j++) { read and discard the next element of the array; } } </pre> Note that this method can automatically skip through items if a byte-count is found in the underlying data, or if a schema has been provided to the implementation, but otherwise the client will have to skip through items itself."}, {"org.apache.avro.Schema.getValueType": "If this is a map, returns its value type."}, {"org.apache.avro.io.Decoder.skipMap": "Support for quickly skipping through a map similar to  {@link #skipArray}. As an example, let's say you want to skip a map of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> for (long i = in.skipMap(); i != 0; i = in.skipMap()) { for (long j = 0; j < i; j++) { in.skipString(); // Discard key in.readInt(); // Discard int-field of value in.readBoolean(); // Discard boolean-field of value } } </pre>"}, {"org.apache.avro.io.Decoder.skipString": "Discards a char-string written by  {@link Encoder#writeString}."}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}, {"org.apache.avro.io.Decoder.readIndex": "Reads the tag of a union written by  {@link Encoder#writeIndex}."}, {"org.apache.avro.Schema.getFixedSize": "If this is fixed, returns its size."}, {"org.apache.avro.io.Decoder.skipFixed": "Discards fixed sized binary object."}, {"org.apache.avro.io.Decoder.skipBytes": "Discards a byte-string written by  {@link Encoder#writeBytes}."}, {"org.apache.avro.io.Decoder.readLong": "Reads a long written by  {@link Encoder#writeLong}."}, {"org.apache.avro.io.Decoder.readFloat": "Reads a float written by  {@link Encoder#writeFloat}."}, {"org.apache.avro.io.Decoder.readDouble": "Reads a double written by  {@link Encoder#writeDouble}."}, {"org.apache.avro.io.Decoder.readBoolean": "Reads a boolean value written by  {@link Encoder#writeBoolean}."}]}, {"index": "363", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/IndexedRecord.java", "methodName": "org.apache.avro.generic.IndexedRecord.put", "methodParameterType": "int#Object#", "methodParameterName": "i#v#", "methodBody": "void put(int i, Object v);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the value of a field given its position in the schema. <p> This method is not meant to be called by user code, but only by {@link org.apache.avro.io.DatumReader} implementations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "364", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/IndexedRecord.java", "methodName": "org.apache.avro.generic.IndexedRecord.get", "methodParameterType": "int#", "methodParameterName": "i#", "methodBody": "Object get(int i);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return the value of a field given its position in the schema. <p> This method is not meant to be called by user code, but only by {@link org.apache.avro.io.DatumWriter} implementations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "365", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericEnumSymbol.java", "methodName": "org.apache.avro.generic.GenericEnumSymbol.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  String toString();", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the symbol.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "366", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/generic/GenericFixed.java", "methodName": "org.apache.avro.generic.GenericFixed.bytes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "byte[] bytes();", "AST": "Javadoc#PrimitiveType#Dimension#ArrayType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "367", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/LogicalType.java", "methodName": "org.apache.avro.LogicalType.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n    return name;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name of this logical type. <p> This name is set as the Schema property \"logicalType\".", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "368", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/LogicalType.java", "methodName": "org.apache.avro.LogicalType.addToSchema", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public Schema addToSchema(Schema schema) {\n    validate(schema);\n    schema.addProp(LOGICAL_TYPE_PROP, name);\n    schema.setLogicalType(this);\n    return schema;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add this logical type to the given Schema. <p> The \"logicalType\" property will be set to this type's name, and other type-specific properties may be added. The Schema is first validated to ensure it is compatible.", "call_func_name": ["org.apache.avro.LogicalType.validate", "org.apache.avro.Schema.addProp", "org.apache.avro.Schema.setLogicalType"], "call_func_parameter": [["org.apache.avro.Schema"], ["java.lang.String", "java.lang.String"], ["org.apache.avro.LogicalType"]], "passed_comments": [{"org.apache.avro.LogicalType.validate": "Validate this logical type for the given Schema. <p> This will throw an exception if the Schema is incompatible with this type. For example, a date is stored as an int and is incompatible with a fixed Schema."}]}, {"index": "369", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/LogicalType.java", "methodName": "org.apache.avro.LogicalType.validate", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public void validate(Schema schema) {\n    for (String incompatible : INCOMPATIBLE_PROPS) {\n      if (schema.getProp(incompatible) != null) {\n        throw new IllegalArgumentException(LOGICAL_TYPE_PROP + \" cannot be used with \" + incompatible);\n      }\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Validate this logical type for the given Schema. <p> This will throw an exception if the Schema is incompatible with this type. For example, a date is stored as an int and is incompatible with a fixed Schema.", "call_func_name": ["org.apache.avro.Schema.getProp", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "370", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilder.java", "methodName": "org.apache.avro.data.RecordBuilder.build", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "T build();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Constructs a new instance using the values set in the RecordBuilder. If a particular value was not set and the schema defines a default value, the default value will be used.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "371", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java", "methodName": "org.apache.avro.data.RecordBuilderBase.RecordBuilderBase", "methodParameterType": "Schema#GenericData#", "methodParameterName": "schema#data#", "methodBody": "protected RecordBuilderBase(Schema schema, GenericData data) {\n    this.schema = schema;\n    this.data = data;\n    fields = schema.getFields().toArray(EMPTY_FIELDS);\n    fieldSetFlags = new boolean[fields.length];\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a RecordBuilderBase for building records of the given type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "372", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java", "methodName": "org.apache.avro.data.RecordBuilderBase.RecordBuilderBase", "methodParameterType": "RecordBuilderBase<T>#GenericData#", "methodParameterName": "other#data#", "methodBody": "protected RecordBuilderBase(RecordBuilderBase<T> other, GenericData data) {\n    this.schema = other.schema;\n    this.data = data;\n    fields = schema.getFields().toArray(EMPTY_FIELDS);\n    fieldSetFlags = new boolean[other.fieldSetFlags.length];\n    System.arraycopy(other.fieldSetFlags, 0, fieldSetFlags, 0, fieldSetFlags.length);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ArrayCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "RecordBuilderBase copy constructor. Makes a deep copy of the values in the other builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "373", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java", "methodName": "org.apache.avro.data.RecordBuilderBase.validate", "methodParameterType": "Field#Object#", "methodParameterName": "field#value#", "methodBody": "protected void validate(Field field, Object value) {\n    if (isValidValue(field, value)) {\n    } else if (field.defaultVal() != null) {\n    } else {\n      throw new AvroRuntimeException(\"Field \" + field + \" does not accept null values\");\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#Block#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#Block#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Validates that a particular value for a given field is valid according to the following algorithm: 1. If the value is not null, or the field type is null, or the field type is a union which accepts nulls, returns. 2. Else, if the field has a default value, returns. 3. Otherwise throws AvroRuntimeException.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "374", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java", "methodName": "org.apache.avro.data.RecordBuilderBase.isValidValue", "methodParameterType": "Field#Object#", "methodParameterName": "f#value#", "methodBody": "protected static boolean isValidValue(Field f, Object value) {\n    if (value != null) {\n      return true;\n    }\n\n    Schema schema = f.schema();\n    Type type = schema.getType();\n\n    // If the type is null, any value is valid\n    if (type == Type.NULL) {\n      return true;\n    }\n\n    // If the type is a union that allows nulls, any value is valid\n    if (type == Type.UNION) {\n      for (Schema s : schema.getTypes()) {\n        if (s.getType() == Type.NULL) {\n          return true;\n        }\n      }\n    }\n\n    // The value is null but the type does not allow nulls\n    return false;\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tests whether a value is valid for a specified field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "375", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/RecordBuilderBase.java", "methodName": "org.apache.avro.data.RecordBuilderBase.defaultValue", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n  protected Object defaultValue(Field field) throws IOException {\n    return data.deepCopy(field.schema(), data.getDefaultValue(field));\n  }", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the default value of the given field, if any.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "376", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/Json.java", "methodName": "org.apache.avro.data.Json.parseJson", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static Object parseJson(String s) {\n    try {\n      return JacksonUtils.toObject(MAPPER.readTree(FACTORY.createParser(s)));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Parses a JSON string and converts it to the object model described in {@link org.apache.avro.JsonProperties}.", "call_func_name": ["com.fasterxml.jackson.core.JsonFactory.createParser", "com.fasterxml.jackson.databind.ObjectMapper.readTree", "org.apache.avro.util.internal.JacksonUtils.toObject", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"], ["com.fasterxml.jackson.core.JsonParser"], ["com.fasterxml.jackson.databind.JsonNode"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "377", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/Json.java", "methodName": "org.apache.avro.data.Json.toString", "methodParameterType": "Object#", "methodParameterName": "datum#", "methodBody": "public static String toString(Object datum) {\n    return JacksonUtils.toJsonNode(datum).toString();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts an instance of the object model described in {@link org.apache.avro.JsonProperties} to a JSON string.", "call_func_name": ["org.apache.avro.util.internal.JacksonUtils.toJsonNode", "com.fasterxml.jackson.databind.JsonNode.toString"], "call_func_parameter": [["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "378", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/Json.java", "methodName": "org.apache.avro.data.Json.write", "methodParameterType": "JsonNode#Encoder#", "methodParameterName": "node#out#", "methodBody": "private static void write(JsonNode node, Encoder out) throws IOException {\n    switch (node.asToken()) {\n    case VALUE_NUMBER_INT:\n      out.writeIndex(JsonType.LONG.ordinal());\n      out.writeLong(node.longValue());\n      break;\n    case VALUE_NUMBER_FLOAT:\n      out.writeIndex(JsonType.DOUBLE.ordinal());\n      out.writeDouble(node.doubleValue());\n      break;\n    case VALUE_STRING:\n      out.writeIndex(JsonType.STRING.ordinal());\n      out.writeString(node.textValue());\n      break;\n    case VALUE_TRUE:\n      out.writeIndex(JsonType.BOOLEAN.ordinal());\n      out.writeBoolean(true);\n      break;\n    case VALUE_FALSE:\n      out.writeIndex(JsonType.BOOLEAN.ordinal());\n      out.writeBoolean(false);\n      break;\n    case VALUE_NULL:\n      out.writeIndex(JsonType.NULL.ordinal());\n      out.writeNull();\n      break;\n    case START_ARRAY:\n      out.writeIndex(JsonType.ARRAY.ordinal());\n      out.writeArrayStart();\n      out.setItemCount(node.size());\n      for (JsonNode element : node) {\n        out.startItem();\n        write(element, out);\n      }\n      out.writeArrayEnd();\n      break;\n    case START_OBJECT:\n      out.writeIndex(JsonType.OBJECT.ordinal());\n      out.writeMapStart();\n      out.setItemCount(node.size());\n      Iterator<String> i = node.fieldNames();\n      while (i.hasNext()) {\n        out.startItem();\n        String name = i.next();\n        out.writeString(name);\n        write(node.get(name), out);\n      }\n      out.writeMapEnd();\n      break;\n    default:\n      throw new AvroRuntimeException(node.asToken() + \" unexpected: \" + node);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Write Json data as Avro data.", "call_func_name": ["com.fasterxml.jackson.databind.JsonNode.asToken", "com.fasterxml.jackson.core.JsonToken.ordinal", "org.apache.avro.io.Encoder.writeIndex", "com.fasterxml.jackson.databind.JsonNode.longValue", "org.apache.avro.io.Encoder.writeLong", "com.fasterxml.jackson.databind.JsonNode.doubleValue", "org.apache.avro.io.Encoder.writeDouble", "com.fasterxml.jackson.databind.JsonNode.textValue", "org.apache.avro.io.Encoder.writeString", "org.apache.avro.io.Encoder.writeBoolean", "org.apache.avro.io.Encoder.writeNull", "org.apache.avro.io.Encoder.writeArrayStart", "com.fasterxml.jackson.databind.JsonNode.size", "org.apache.avro.io.Encoder.setItemCount", "com.fasterxml.jackson.databind.JsonNode.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.io.Encoder.startItem", "org.apache.avro.data.Json.write", "org.apache.avro.io.Encoder.writeArrayEnd", "org.apache.avro.io.Encoder.writeMapStart", "com.fasterxml.jackson.databind.JsonNode.fieldNames", "com.fasterxml.jackson.databind.JsonNode.get", "org.apache.avro.io.Encoder.writeMapEnd", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], [""], ["int"], [""], ["long"], [""], ["double"], [""], ["java.lang.String"], ["boolean"], [""], [""], [""], ["long"], [""], [""], [""], [""], ["com.fasterxml.jackson.databind.JsonNode", "org.apache.avro.io.Encoder"], [""], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.io.Encoder.writeIndex": "Call this method to write the tag of a union. As an example of usage, let's say you want to write a union, whose second branch is a record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeIndex(1); out.writeLong(record.longField); out.writeBoolean(record.boolField); </pre>"}, {"org.apache.avro.io.Encoder.writeLong": "Write a 64-bit integer."}, {"org.apache.avro.io.Encoder.writeDouble": "Write a double."}, {"org.apache.avro.io.Encoder.writeString": "Write a Unicode character string. The default implementation converts the String to a  {@link org.apache.avro.util.Utf8}. Some Encoder implementations may want to do something different as a performance optimization."}, {"org.apache.avro.io.Encoder.writeBoolean": "Write a boolean value."}, {"org.apache.avro.io.Encoder.writeNull": "\"Writes\" a null value. (Doesn't actually write anything, but advances the state of the parser if this class is stateful.)"}, {"org.apache.avro.io.Encoder.writeArrayStart": "Call this method to start writing an array. When starting to serialize an array, call  {@link #writeArrayStart}. Then, before writing any data for any item call  {@link #setItemCount} followed by asequence of  {@link #startItem()} and the item itself. The number of{@link #startItem()} should match the number specified in{@link #setItemCount}. When actually writing the data of the item, you can call any  {@link Encoder} method (e.g., {@link #writeLong}). When all items of the array have been written, call  {@link #writeArrayEnd}. As an example, let's say you want to write an array of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeArrayStart(); out.setItemCount(list.size()); for (Record r : list) { out.startItem(); out.writeLong(r.longField); out.writeBoolean(r.boolField); } out.writeArrayEnd(); </pre>"}, {"org.apache.avro.io.Encoder.setItemCount": "Call this method before writing a batch of items in an array or a map. Then for each item, call  {@link #startItem()} followed by any of the other writemethods of  {@link Encoder}. The number of calls to  {@link #startItem()} mustbe equal to the count specified in  {@link #setItemCount}. Once a batch is completed you can start another batch with  {@link #setItemCount}."}, {"org.apache.avro.io.Encoder.startItem": "Start a new item of an array or map. See  {@link #writeArrayStart} for usageinformation."}, {"org.apache.avro.data.Json.write": "Write Json data as Avro data."}, {"org.apache.avro.io.Encoder.writeArrayEnd": "Call this method to finish writing an array. See  {@link #writeArrayStart} forusage information."}, {"org.apache.avro.io.Encoder.writeMapStart": "Call this to start a new map. See  {@link #writeArrayStart} for details onusage. As an example of usage, let's say you want to write a map of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeMapStart(); out.setItemCount(list.size()); for (Map.Entry<String, Record> entry : map.entrySet()) { out.startItem(); out.writeString(entry.getKey()); out.writeLong(entry.getValue().longField); out.writeBoolean(entry.getValue().boolField); } out.writeMapEnd(); </pre>"}, {"org.apache.avro.io.Encoder.writeMapEnd": "Call this method to terminate the inner-most, currently-opened map. See {@link #writeArrayStart} for more details."}]}, {"index": "379", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/Json.java", "methodName": "org.apache.avro.data.Json.read", "methodParameterType": "Decoder#", "methodParameterName": "in#", "methodBody": "private static JsonNode read(Decoder in) throws IOException {\n    switch (JsonType.values()[in.readIndex()]) {\n    case LONG:\n      return new LongNode(in.readLong());\n    case DOUBLE:\n      return new DoubleNode(in.readDouble());\n    case STRING:\n      return new TextNode(in.readString());\n    case BOOLEAN:\n      return in.readBoolean() ? BooleanNode.TRUE : BooleanNode.FALSE;\n    case NULL:\n      in.readNull();\n      return NullNode.getInstance();\n    case ARRAY:\n      ArrayNode array = JsonNodeFactory.instance.arrayNode();\n      for (long l = in.readArrayStart(); l > 0; l = in.arrayNext())\n        for (long i = 0; i < l; i++)\n          array.add(read(in));\n      return array;\n    case OBJECT:\n      ObjectNode object = JsonNodeFactory.instance.objectNode();\n      for (long l = in.readMapStart(); l > 0; l = in.mapNext())\n        for (long i = 0; i < l; i++)\n          object.set(in.readString(), read(in));\n      return object;\n    default:\n      throw new AvroRuntimeException(\"Unexpected Json node type\");\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ArrayAccess#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ConditionalExpression#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ForStatement#ForStatement#SimpleName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#ForStatement#ForStatement#SimpleName#ReturnStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SwitchStatement(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayAccess(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)ForStatement)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)ForStatement)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Read Json data from Avro data.", "call_func_name": ["org.apache.avro.io.Decoder.readIndex", "org.apache.avro.io.Decoder.readLong", "com.fasterxml.jackson.databind.node.LongNode.<init>", "org.apache.avro.io.Decoder.readDouble", "com.fasterxml.jackson.databind.node.DoubleNode.<init>", "org.apache.avro.io.Decoder.readString", "com.fasterxml.jackson.databind.node.TextNode.<init>", "org.apache.avro.io.Decoder.readBoolean", "org.apache.avro.io.Decoder.readNull", "com.fasterxml.jackson.databind.node.NullNode.getInstance", "com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode", "org.apache.avro.io.Decoder.readArrayStart", "org.apache.avro.data.Json.read", "com.fasterxml.jackson.databind.node.ArrayNode.add", "org.apache.avro.io.Decoder.arrayNext", "com.fasterxml.jackson.databind.node.JsonNodeFactory.objectNode", "org.apache.avro.io.Decoder.readMapStart", "com.fasterxml.jackson.databind.node.ObjectNode.set", "org.apache.avro.io.Decoder.mapNext", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], [""], ["long"], [""], ["double"], [""], ["java.lang.String"], [""], [""], [""], [""], [""], ["org.apache.avro.io.Decoder"], ["com.fasterxml.jackson.databind.JsonNode"], [""], [""], [""], ["java.lang.String", "com.fasterxml.jackson.databind.JsonNode"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.io.Decoder.readIndex": "Reads the tag of a union written by  {@link Encoder#writeIndex}."}, {"org.apache.avro.io.Decoder.readLong": "Reads a long written by  {@link Encoder#writeLong}."}, {"org.apache.avro.io.Decoder.readDouble": "Reads a double written by  {@link Encoder#writeDouble}."}, {"org.apache.avro.io.Decoder.readString": "Reads a char-string written by  {@link Encoder#writeString}."}, {"org.apache.avro.io.Decoder.readString": "Reads a char-string written by  {@link Encoder#writeString}."}, {"org.apache.avro.io.Decoder.readBoolean": "Reads a boolean value written by  {@link Encoder#writeBoolean}."}, {"org.apache.avro.io.Decoder.readNull": "\"Reads\" a null value. (Doesn't actually read anything, but advances the state of the parser if the implementation is stateful.)"}, {"org.apache.avro.io.Decoder.readArrayStart": "Reads and returns the size of the first block of an array. If this method returns non-zero, then the caller should read the indicated number of items, and then call  {@link #arrayNext} to find out the number of items in the nextblock. The typical pattern for consuming an array looks like: <pre> for(long i = in.readArrayStart(); i != 0; i = in.arrayNext()) { for (long j = 0; j < i; j++) { read next element of the array; } } </pre>"}, {"org.apache.avro.data.Json.read": "Read Json data from Avro data."}, {"org.apache.avro.io.Decoder.arrayNext": "Processes the next block of an array and returns the number of items in the block and let's the caller read those items."}, {"org.apache.avro.io.Decoder.readMapStart": "Reads and returns the size of the next block of map-entries. Similar to {@link #readArrayStart}. As an example, let's say you want to read a map of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> Map<String, Record> m = new HashMap<String, Record>(); Record reuse = new Record(); for (long i = in.readMapStart(); i != 0; i = in.readMapNext()) { for (long j = 0; j < i; j++) { String key = in.readString(); reuse.intField = in.readInt(); reuse.boolField = in.readBoolean(); m.put(key, reuse); } } </pre>"}, {"org.apache.avro.io.Decoder.mapNext": "Processes the next block of map entries and returns the count of them. Similar to  {@link #arrayNext}. See  {@link #readMapStart} for details."}]}, {"index": "380", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/ErrorBuilder.java", "methodName": "org.apache.avro.data.ErrorBuilder.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Object getValue();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the value", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "381", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/ErrorBuilder.java", "methodName": "org.apache.avro.data.ErrorBuilder.setValue", "methodParameterType": "Object#", "methodParameterName": "value#", "methodBody": "ErrorBuilder<T> setValue(Object value);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the value", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "382", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/ErrorBuilder.java", "methodName": "org.apache.avro.data.ErrorBuilder.hasValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean hasValue();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Checks whether the value has been set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "383", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/ErrorBuilder.java", "methodName": "org.apache.avro.data.ErrorBuilder.clearValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ErrorBuilder<T> clearValue();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Clears the value", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "384", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/ErrorBuilder.java", "methodName": "org.apache.avro.data.ErrorBuilder.getCause", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Throwable getCause();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the error cause", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "385", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/ErrorBuilder.java", "methodName": "org.apache.avro.data.ErrorBuilder.setCause", "methodParameterType": "Throwable#", "methodParameterName": "cause#", "methodBody": "ErrorBuilder<T> setCause(Throwable cause);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the error cause", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "386", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/ErrorBuilder.java", "methodName": "org.apache.avro.data.ErrorBuilder.hasCause", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean hasCause();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Checks whether the cause has been set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "387", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/data/ErrorBuilder.java", "methodName": "org.apache.avro.data.ErrorBuilder.clearCause", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "ErrorBuilder<T> clearCause();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Clears the cause", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "388", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/ValidateLatest.java", "methodName": "org.apache.avro.ValidateLatest.ValidateLatest", "methodParameterType": "SchemaValidationStrategy#", "methodParameterName": "strategy#", "methodBody": "public ValidateLatest(SchemaValidationStrategy strategy) {\n    this.strategy = strategy;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param strategy The strategy to use for validation of pairwise schemas.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "389", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/ValidateMutualRead.java", "methodName": "org.apache.avro.ValidateMutualRead.validate", "methodParameterType": "Schema#Schema#", "methodParameterName": "toValidate#existing#", "methodBody": "@Override\n  public void validate(Schema toValidate, Schema existing) throws SchemaValidationException {\n    canRead(toValidate, existing);\n    canRead(existing, toValidate);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Validate that the schemas provided can mutually read data written by each other according to the default Avro schema resolution rules.", "call_func_name": ["org.apache.avro.ValidateMutualRead.canRead"], "call_func_parameter": [["org.apache.avro.Schema", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.ValidateMutualRead.canRead": "Validates that data written with one schema can be read using another, based on the default Avro schema resolution rules."}]}, {"index": "390", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/ValidateMutualRead.java", "methodName": "org.apache.avro.ValidateMutualRead.canRead", "methodParameterType": "Schema#Schema#", "methodParameterName": "writtenWith#readUsing#", "methodBody": "static void canRead(Schema writtenWith, Schema readUsing) throws SchemaValidationException {\n    boolean error;\n    try {\n      error = Symbol.hasErrors(new ResolvingGrammarGenerator().generate(writtenWith, readUsing));\n    } catch (IOException e) {\n      throw new SchemaValidationException(readUsing, writtenWith, e);\n    }\n    if (error) {\n      throw new SchemaValidationException(readUsing, writtenWith);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Validates that data written with one schema can be read using another, based on the default Avro schema resolution rules.", "call_func_name": ["org.apache.avro.io.parsing.ResolvingGrammarGenerator.<init>", "org.apache.avro.io.parsing.ResolvingGrammarGenerator.generate", "org.apache.avro.io.parsing.Symbol.hasErrors", "org.apache.avro.SchemaValidationException.<init>", "org.apache.avro.SchemaValidationException.<init>"], "call_func_parameter": [[""], ["org.apache.avro.Schema", "org.apache.avro.Schema"], ["org.apache.avro.io.parsing.Symbol"], ["org.apache.avro.Schema", "org.apache.avro.Schema", "java.lang.Throwable"], ["org.apache.avro.Schema", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.io.parsing.ResolvingGrammarGenerator.generate": "Resolves the writer schema <tt>writer</tt> and the reader schema <tt>reader</tt> and returns the start symbol for the grammar generated."}, {"org.apache.avro.io.parsing.Symbol.hasErrors": "Returns true if the Parser contains any Error symbol, indicating that it may fail for some inputs."}]}, {"index": "391", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/ValidateAll.java", "methodName": "org.apache.avro.ValidateAll.ValidateAll", "methodParameterType": "SchemaValidationStrategy#", "methodParameterName": "strategy#", "methodBody": "public ValidateAll(SchemaValidationStrategy strategy) {\n    this.strategy = strategy;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param strategy The strategy to use for validation of pairwise schemas.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "392", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBase.java", "methodName": "org.apache.avro.specific.SpecificRecordBase.hasCustomCoders", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected boolean hasCustomCoders() {\n    return false;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true iff an instance supports the  {@link MessageEncoder#encode} and{@link MessageDecoder#decode} operations. Should only be used by<code>SpecificDatumReader/Writer</code> to selectively use {@link #customEncode} and {@link #customDecode} to optimize the(de)serialization of values.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "393", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java", "methodName": "org.apache.avro.specific.SpecificDatumReader.SpecificDatumReader", "methodParameterType": "Class<T>#", "methodParameterName": "c#", "methodBody": "public SpecificDatumReader(Class<T> c) {\n    this(SpecificData.getForClass(c));\n    setSchema(getSpecificData().getSchema(c));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct for reading instances of a class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "394", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java", "methodName": "org.apache.avro.specific.SpecificDatumReader.SpecificDatumReader", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public SpecificDatumReader(Schema schema) {\n    this(schema, schema, SpecificData.getForSchema(schema));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct where the writer's and reader's schemas are the same.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "395", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java", "methodName": "org.apache.avro.specific.SpecificDatumReader.SpecificDatumReader", "methodParameterType": "Schema#Schema#", "methodParameterName": "writer#reader#", "methodBody": "public SpecificDatumReader(Schema writer, Schema reader) {\n    this(writer, reader, SpecificData.getForSchema(reader));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct given writer's and reader's schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "396", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java", "methodName": "org.apache.avro.specific.SpecificDatumReader.SpecificDatumReader", "methodParameterType": "Schema#Schema#SpecificData#", "methodParameterName": "writer#reader#data#", "methodBody": "public SpecificDatumReader(Schema writer, Schema reader, SpecificData data) {\n    super(writer, reader, data);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct given writer's schema, reader's schema, and a  {@link SpecificData}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "397", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java", "methodName": "org.apache.avro.specific.SpecificDatumReader.SpecificDatumReader", "methodParameterType": "SpecificData#", "methodParameterName": "data#", "methodBody": "public SpecificDatumReader(SpecificData data) {\n    super(data);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct given a  {@link SpecificData}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "398", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumReader.java", "methodName": "org.apache.avro.specific.SpecificDatumReader.getSpecificData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SpecificData getSpecificData() {\n    return (SpecificData) getData();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the contained  {@link SpecificData}.", "call_func_name": ["org.apache.avro.specific.SpecificDatumReader.getData"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "399", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificDatumWriter.java", "methodName": "org.apache.avro.specific.SpecificDatumWriter.getSpecificData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SpecificData getSpecificData() {\n    return (SpecificData) getData();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link SpecificData} implementation used by this writer.", "call_func_name": ["org.apache.avro.specific.SpecificDatumWriter.getData"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "400", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBuilderBase.java", "methodName": "org.apache.avro.specific.SpecificRecordBuilderBase.SpecificRecordBuilderBase", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "protected SpecificRecordBuilderBase(Schema schema) {\n    super(schema, SpecificData.getForSchema(schema));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a SpecificRecordBuilderBase for building records of the given type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "401", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBuilderBase.java", "methodName": "org.apache.avro.specific.SpecificRecordBuilderBase.SpecificRecordBuilderBase", "methodParameterType": "SpecificRecordBuilderBase<T>#", "methodParameterName": "other#", "methodBody": "protected SpecificRecordBuilderBase(SpecificRecordBuilderBase<T> other) {\n    super(other, other.data());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "SpecificRecordBuilderBase copy constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "402", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificRecordBuilderBase.java", "methodName": "org.apache.avro.specific.SpecificRecordBuilderBase.SpecificRecordBuilderBase", "methodParameterType": "T#", "methodParameterName": "other#", "methodBody": "protected SpecificRecordBuilderBase(T other) {\n    super(other.getSchema(), SpecificData.getForSchema(other.getSchema()));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a SpecificRecordBuilderBase by copying an existing record instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "403", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificErrorBuilderBase.java", "methodName": "org.apache.avro.specific.SpecificErrorBuilderBase.SpecificErrorBuilderBase", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "protected SpecificErrorBuilderBase(Schema schema) {\n    super(schema, SpecificData.get());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a SpecificErrorBuilderBase for building errors of the given type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "404", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificErrorBuilderBase.java", "methodName": "org.apache.avro.specific.SpecificErrorBuilderBase.SpecificErrorBuilderBase", "methodParameterType": "SpecificErrorBuilderBase<T>#", "methodParameterName": "other#", "methodBody": "protected SpecificErrorBuilderBase(SpecificErrorBuilderBase<T> other) {\n    super(other, SpecificData.get());\n    this.errorConstructor = other.errorConstructor;\n    this.value = other.value;\n    this.hasValue = other.hasValue;\n    this.cause = other.cause;\n    this.hasCause = other.hasCause;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "SpecificErrorBuilderBase copy constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "405", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificErrorBuilderBase.java", "methodName": "org.apache.avro.specific.SpecificErrorBuilderBase.SpecificErrorBuilderBase", "methodParameterType": "T#", "methodParameterName": "other#", "methodBody": "protected SpecificErrorBuilderBase(T other) {\n    super(other.getSchema(), SpecificData.get());\n\n    Object otherValue = other.getValue();\n    if (otherValue != null) {\n      setValue(otherValue);\n    }\n\n    Throwable otherCause = other.getCause();\n    if (otherCause != null) {\n      setCause(otherCause);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a SpecificErrorBuilderBase by copying an existing error instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "406", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.SpecificData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SpecificData() {\n  }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "For subclasses. Applications normally use  {@link SpecificData#get()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "407", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.SpecificData", "methodParameterType": "ClassLoader#", "methodParameterName": "classLoader#", "methodBody": "public SpecificData(ClassLoader classLoader) {\n    super(classLoader);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct with a specific classloader.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "408", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static SpecificData get() {\n    return INSTANCE;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the singleton instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "409", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.getForSchema", "methodParameterType": "Schema#", "methodParameterName": "reader#", "methodBody": "public static SpecificData getForSchema(Schema reader) {\n    if (reader.getType() == Type.RECORD) {\n      final String className = getClassName(reader);\n      if (className != null) {\n        final Class<?> clazz;\n        try {\n          clazz = Class.forName(className);\n          return getForClass(clazz);\n        } catch (ClassNotFoundException e) {\n          return SpecificData.get();\n        }\n      }\n    }\n    return SpecificData.get();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For RECORD type schemas, this method returns the SpecificData instance of the class associated with the schema, in order to get the right conversions for any logical types used.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.specific.SpecificData.getClassName", "java.lang.Class.forName", "org.apache.avro.specific.SpecificData.getForClass", "org.apache.avro.specific.SpecificData.get"], "call_func_parameter": [[""], ["org.apache.avro.Schema"], ["java.lang.String"], ["java.lang.Class"], [""]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.specific.SpecificData.getClassName": "Returns the Java class name indicated by a schema's name and namespace."}, {"org.apache.avro.specific.SpecificData.getForClass": "If the given class is assignable to  {@link SpecificRecordBase}, this method returns the SpecificData instance from the field  {@code MODEL$}, in order to get the correct  {@link org.apache.avro.Conversion} instances for the class.Falls back to the default instance  {@link SpecificData#get()} for otherclasses or if the field is not found."}, {"org.apache.avro.specific.SpecificData.get": "Return the singleton instance."}]}, {"index": "410", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.getForClass", "methodParameterType": "Class<T>#", "methodParameterName": "c#", "methodBody": "public static <T> SpecificData getForClass(Class<T> c) {\n    if (SpecificRecordBase.class.isAssignableFrom(c)) {\n      final Field specificDataField;\n      try {\n        specificDataField = c.getDeclaredField(\"MODEL$\");\n        specificDataField.setAccessible(true);\n        return (SpecificData) specificDataField.get(null);\n      } catch (NoSuchFieldException e) {\n        // Return default instance\n        return SpecificData.get();\n      } catch (IllegalAccessException e) {\n        throw new AvroRuntimeException(e);\n      }\n    }\n    return SpecificData.get();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)CastExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If the given class is assignable to  {@link SpecificRecordBase}, this method returns the SpecificData instance from the field  {@code MODEL$}, in order to get the correct  {@link org.apache.avro.Conversion} instances for the class.Falls back to the default instance  {@link SpecificData#get()} for otherclasses or if the field is not found.", "call_func_name": ["java.lang.Class.isAssignableFrom", "java.lang.Class.getDeclaredField", "java.lang.reflect.Field.setAccessible", "java.lang.reflect.Field.get", "org.apache.avro.specific.SpecificData.get", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [["java.lang.Class"], ["java.lang.String"], ["boolean"], ["java.lang.Object"], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.specific.SpecificData.get": "Return the singleton instance."}]}, {"index": "411", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.useCustomCoders", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean useCustomCoders() {\n    return useCustomCoderFlag;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the current value of the custom-coders feature flag. Defaults to <code>true</code>, but this default can be overriden using the system property <code>org.apache.avro.specific.use_custom_coders</code>, and can be set dynamically by  {@link SpecificData#useCustomCoders()}. See <a href=\"https://avro.apache.org/docs/current/gettingstartedjava.html#Beta+feature:+Generating+faster+code\"Getting started with Java</a> for more about this feature flag.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "412", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.setCustomCoders", "methodParameterType": "boolean#", "methodParameterName": "flag#", "methodBody": "public void setCustomCoders(boolean flag) {\n    useCustomCoderFlag = flag;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Dynamically set the value of the custom-coder feature flag. See {@link SpecificData#useCustomCoders()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "413", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.getClass", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public Class getClass(Schema schema) {\n    switch (schema.getType()) {\n    case FIXED:\n    case RECORD:\n    case ENUM:\n      String name = schema.getFullName();\n      if (name == null)\n        return null;\n      Class c = classCache.get(name);\n      if (c == null) {\n        try {\n          c = ClassUtils.forName(getClassLoader(), getClassName(schema));\n        } catch (ClassNotFoundException e) {\n          try { // nested class?\n            c = ClassUtils.forName(getClassLoader(), getNestedClassName(schema));\n          } catch (ClassNotFoundException ex) {\n            c = NO_CLASS;\n          }\n        }\n        classCache.put(name, c);\n      }\n      return c == NO_CLASS ? null : c;\n    case ARRAY:\n      return List.class;\n    case MAP:\n      return Map.class;\n    case UNION:\n      List<Schema> types = schema.getTypes(); // elide unions with null\n      if ((types.size() == 2) && types.contains(NULL_SCHEMA))\n        return getWrapper(types.get(types.get(0).equals(NULL_SCHEMA) ? 1 : 0));\n      return Object.class;\n    case STRING:\n      if (STRING_TYPE_STRING.equals(schema.getProp(STRING_PROP)))\n        return String.class;\n      return CharSequence.class;\n    case BYTES:\n      return ByteBuffer.class;\n    case INT:\n      return Integer.TYPE;\n    case LONG:\n      return Long.TYPE;\n    case FLOAT:\n      return Float.TYPE;\n    case DOUBLE:\n      return Double.TYPE;\n    case BOOLEAN:\n      return Boolean.TYPE;\n    case NULL:\n      return Void.TYPE;\n    default:\n      throw new AvroRuntimeException(\"Unknown type: \" + schema);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#NullLiteral#SimpleName#ConditionalExpression#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#TypeLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#TypeLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#NumberLiteral#ConditionalExpression#MethodInvocation#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleType#TypeLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#TypeLiteral#ReturnStatement#IfStatement#SimpleName#SimpleType#TypeLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#TypeLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)CatchClause)TryStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)ConditionalExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ConditionalExpression)MethodInvocation)MethodInvocation)ReturnStatement)IfStatement(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement)IfStatement(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Return the class that implements a schema, or null if none exists.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.Schema.getFullName", "java.util.Map.get", "org.apache.avro.specific.SpecificData.getClassLoader", "org.apache.avro.specific.SpecificData.getClassName", "org.apache.avro.util.ClassUtils.forName", "org.apache.avro.specific.SpecificData.getNestedClassName", "java.util.Map.put", "org.apache.avro.Schema.getTypes", "java.util.List.size", "java.util.List.contains", "java.util.List.get", "org.apache.avro.Schema.equals", "org.apache.avro.specific.SpecificData.getWrapper", "org.apache.avro.Schema.getProp", "java.lang.String.equals", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], ["org.apache.avro.Schema"], ["java.lang.ClassLoader", "java.lang.String"], ["org.apache.avro.Schema"], ["java.lang.Object", "java.lang.Object"], [""], [""], ["java.lang.Object"], ["int"], ["java.lang.Object"], ["org.apache.avro.Schema"], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getFullName": "If this is a record, enum or fixed, returns its namespace-qualified name, otherwise returns the name of the primitive type."}, {"org.apache.avro.specific.SpecificData.getClassName": "Returns the Java class name indicated by a schema's name and namespace."}, {"org.apache.avro.util.ClassUtils.forName": "Loads a class using the class loader. 1. The class loader of the context class is being used. 2. The thread context class loader is being used. If both approaches fail, returns null."}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}]}, {"index": "414", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.getClassName", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public static String getClassName(Schema schema) {\n    String namespace = schema.getNamespace();\n    String name = schema.getName();\n    if (namespace == null || \"\".equals(namespace))\n      return name;\n    String dot = namespace.endsWith(\"$\") ? \"\" : \".\"; // back-compatibly handle $\n    return namespace + dot + name;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#StringLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Java class name indicated by a schema's name and namespace.", "call_func_name": ["org.apache.avro.Schema.getNamespace", "org.apache.avro.Schema.getName", "java.lang.String.equals", "java.lang.String.endsWith", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], [""]], "passed_comments": [{"org.apache.avro.Schema.getNamespace": "If this is a record, enum or fixed, returns its namespace, if any."}, {"org.apache.avro.Schema.getName": "If this is a record, enum or fixed, returns its name, otherwise the name of the primitive type."}]}, {"index": "415", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.getSchema", "methodParameterType": "java.lang.reflect.Type#", "methodParameterName": "type#", "methodBody": "public Schema getSchema(java.lang.reflect.Type type) {\n    try {\n      if (type instanceof Class) {\n        return schemaClassCache.get((Class<?>) type);\n      }\n      return schemaTypeCache.computeIfAbsent(type, t -> createSchema(t, new LinkedHashMap<>()));\n    } catch (Exception e) {\n      throw (e instanceof AvroRuntimeException) ? (AvroRuntimeException) e : new AvroRuntimeException(e);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#LambdaExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ConditionalExpression#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)LambdaExpression)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ConditionalExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ConditionalExpression)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Find the schema for a Java type.", "call_func_name": ["java.lang.ClassValue.get", "java.util.function.Function.apply", "java.util.Map.computeIfAbsent", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [["java.lang.Class"], ["org.apache.avro.specific.SpecificData"], ["java.lang.Object", "java.util.function.Function"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "416", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.createSchema", "methodParameterType": "java.lang.reflect.Type#Map<String,Schema>#", "methodParameterName": "type#names#", "methodBody": "@SuppressWarnings(value = \"unchecked\")\n  protected Schema createSchema(java.lang.reflect.Type type, Map<String, Schema> names) {\n    if (type instanceof Class && CharSequence.class.isAssignableFrom((Class) type))\n      return Schema.create(Type.STRING);\n    else if (type == ByteBuffer.class)\n      return Schema.create(Type.BYTES);\n    else if ((type == Integer.class) || (type == Integer.TYPE))\n      return Schema.create(Type.INT);\n    else if ((type == Long.class) || (type == Long.TYPE))\n      return Schema.create(Type.LONG);\n    else if ((type == Float.class) || (type == Float.TYPE))\n      return Schema.create(Type.FLOAT);\n    else if ((type == Double.class) || (type == Double.TYPE))\n      return Schema.create(Type.DOUBLE);\n    else if ((type == Boolean.class) || (type == Boolean.TYPE))\n      return Schema.create(Type.BOOLEAN);\n    else if ((type == Void.class) || (type == Void.TYPE))\n      return Schema.create(Type.NULL);\n    else if (type instanceof ParameterizedType) {\n      ParameterizedType ptype = (ParameterizedType) type;\n      Class raw = (Class) ptype.getRawType();\n      java.lang.reflect.Type[] params = ptype.getActualTypeArguments();\n      if (Collection.class.isAssignableFrom(raw)) { // array\n        if (params.length != 1)\n          throw new AvroTypeException(\"No array type specified.\");\n        return Schema.createArray(createSchema(params[0], names));\n      } else if (Map.class.isAssignableFrom(raw)) { // map\n        java.lang.reflect.Type key = params[0];\n        java.lang.reflect.Type value = params[1];\n        if (!(key instanceof Class && CharSequence.class.isAssignableFrom((Class) key)))\n          throw new AvroTypeException(\"Map key class not CharSequence: \" + key);\n        return Schema.createMap(createSchema(value, names));\n      } else {\n        return createSchema(raw, names);\n      }\n    } else if (type instanceof Class) { // class\n      Class c = (Class) type;\n      String fullName = c.getName();\n      Schema schema = names.get(fullName);\n      if (schema == null)\n        try {\n          schema = (Schema) (c.getDeclaredField(\"SCHEMA$\").get(null));\n\n          if (!fullName.equals(getClassName(schema)))\n            // HACK: schema mismatches class. maven shade plugin? try replacing.\n            schema = new Schema.Parser()\n                .parse(schema.toString().replace(schema.getNamespace(), c.getPackage().getName()));\n        } catch (NoSuchFieldException e) {\n          throw new AvroRuntimeException(\"Not a Specific class: \" + c);\n        } catch (IllegalAccessException e) {\n          throw new AvroRuntimeException(e);\n        }\n      names.put(fullName, schema);\n      return schema;\n    }\n    throw new AvroTypeException(\"Unknown type: \" + type);\n  }", "AST": "Javadoc#SimpleName#SimpleName#StringLiteral#MemberValuePair#NormalAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#SimpleType#TypeLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#InfixExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(NormalAnnotation(SimpleName)SimpleName(MemberValuePair(SimpleName)SimpleName(StringLiteral)StringLiteral)MemberValuePair)NormalAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(ParenthesizedExpression(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)InfixExpression)ParenthesizedExpression)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ParenthesizedExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Create the schema for a Java type.", "call_func_name": ["java.lang.Class.isAssignableFrom", "java.lang.reflect.ParameterizedType.getRawType", "java.lang.reflect.ParameterizedType.getActualTypeArguments", "org.apache.avro.AvroTypeException.<init>", "org.apache.avro.specific.SpecificData.createSchema", "org.apache.avro.Schema.createArray", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.Schema.createMap", "java.lang.Class.getName", "java.util.Map.get", "java.lang.Class.getDeclaredField", "java.lang.reflect.Field.get", "org.apache.avro.specific.SpecificData.getClassName", "java.lang.String.equals", "org.apache.avro.Schema.toString", "org.apache.avro.Schema.getNamespace", "java.lang.Class.getPackage", "java.lang.Package.getName", "java.lang.String.replace", "org.apache.avro.AvroRuntimeException.<init>", "org.apache.avro.AvroRuntimeException.<init>", "java.util.Map.put"], "call_func_parameter": [["java.lang.Class"], [""], [""], ["java.lang.String"], ["java.lang.reflect.Type", "java.util.Map"], ["org.apache.avro.Schema"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["org.apache.avro.Schema"], [""], ["java.lang.Object"], ["java.lang.String"], ["java.lang.Object"], ["org.apache.avro.Schema"], ["java.lang.Object"], [""], [""], [""], [""], ["java.lang.CharSequence", "java.lang.CharSequence"], ["java.lang.String"], ["java.lang.Throwable"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.apache.avro.specific.SpecificData.createSchema": "Create the schema for a Java type."}, {"org.apache.avro.Schema.createArray": "Create an array schema."}, {"org.apache.avro.Schema.createMap": "Create a map schema."}, {"org.apache.avro.specific.SpecificData.getClassName": "Returns the Java class name indicated by a schema's name and namespace."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.getNamespace": "If this is a record, enum or fixed, returns its namespace, if any."}]}, {"index": "417", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.isStringable", "methodParameterType": "Class<?>#", "methodParameterName": "c#", "methodBody": "protected boolean isStringable(Class<?> c) {\n    return stringableClasses.contains(c);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if a class should be serialized with toString().", "call_func_name": ["java.util.Set.contains"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "418", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.isStringType", "methodParameterType": "Class<?>#", "methodParameterName": "c#", "methodBody": "protected boolean isStringType(Class<?> c) {\n    // this will return true for String, Utf8, CharSequence\n    return CharSequence.class.isAssignableFrom(c);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if a class IS a string type", "call_func_name": ["java.lang.Class.isAssignableFrom"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": "/"}, {"index": "419", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.getProtocol", "methodParameterType": "Class#", "methodParameterName": "iface#", "methodBody": "public Protocol getProtocol(Class iface) {\n    try {\n      Protocol p = (Protocol) (iface.getDeclaredField(\"PROTOCOL\").get(null));\n      if (!p.getNamespace().equals(iface.getPackage().getName()))\n        // HACK: protocol mismatches iface. maven shade plugin? try replacing.\n        p = Protocol.parse(p.toString().replace(p.getNamespace(), iface.getPackage().getName()));\n      return p;\n    } catch (NoSuchFieldException e) {\n      throw new AvroRuntimeException(\"Not a Specific protocol: \" + iface);\n    } catch (IllegalAccessException e) {\n      throw new AvroRuntimeException(e);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#ParenthesizedExpression#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ParenthesizedExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ParenthesizedExpression)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Return the protocol for a Java interface.", "call_func_name": ["java.lang.Class.getDeclaredField", "java.lang.reflect.Field.get", "org.apache.avro.Protocol.getNamespace", "java.lang.Class.getPackage", "java.lang.Package.getName", "java.lang.String.equals", "org.apache.avro.Protocol.toString", "java.lang.String.replace", "org.apache.avro.Protocol.parse", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object"], [""], [""], [""], ["java.lang.Object"], [""], ["java.lang.CharSequence", "java.lang.CharSequence"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.Protocol.getNamespace": "The namespace of this protocol. Qualifies its name."}, {"org.apache.avro.Protocol.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Protocol.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Protocol.parse": "Read a protocol from a Json string."}]}, {"index": "420", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.newInstance", "methodParameterType": "Class#Schema#", "methodParameterName": "c#s#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public static Object newInstance(Class c, Schema s) {\n    boolean useSchema = SchemaConstructable.class.isAssignableFrom(c);\n    Object result;\n    try {\n      Constructor meth = CTOR_CACHE.get(c);\n      result = meth.newInstance(useSchema ? new Object[] { s } : null);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return result;\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#NullLiteral#ConditionalExpression#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation(NullLiteral)NullLiteral)ConditionalExpression)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an instance of a class. If the class implements {@link SchemaConstructable}, call a constructor with a {@link org.apache.avro.Schema} parameter, otherwise use a no-arg constructor.", "call_func_name": ["java.lang.Class.isAssignableFrom", "java.lang.ClassValue.get", "java.lang.reflect.Constructor.newInstance", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.Class"], ["java.lang.Class"], ["java.lang.Object[]"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "421", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.getDecoder", "methodParameterType": "ObjectInput#", "methodParameterName": "in#", "methodBody": "public static BinaryDecoder getDecoder(ObjectInput in) {\n    return DecoderFactory.get().directBinaryDecoder(new ExternalizableInput(in), null);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Runtime utility used by generated classes.", "call_func_name": ["org.apache.avro.io.DecoderFactory.get", "org.apache.avro.specific.ExternalizableInput.<init>", "org.apache.avro.io.DecoderFactory.directBinaryDecoder"], "call_func_parameter": [[""], ["java.io.ObjectInput"], ["java.io.InputStream", "org.apache.avro.io.BinaryDecoder"]], "passed_comments": [{"org.apache.avro.io.DecoderFactory.get": "Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions. All creator methods create objects with default settings."}, {"org.apache.avro.io.DecoderFactory.directBinaryDecoder": "Creates or reinitializes a  {@link BinaryDecoder} with the input streamprovided as the source of data. If <i>reuse</i> is provided, it will be reinitialized to the given input stream. <p/> {@link BinaryDecoder} instances returned by this method do not buffer theirinput. In most cases a buffering BinaryDecoder is sufficient in combination with  {@link BinaryDecoder#inputStream()} which provides a buffer-aware viewon the data. <p/> A \"direct\" BinaryDecoder does not read ahead from an InputStream or other data source that cannot be rewound. From the perspective of a client, a \"direct\" decoder must never read beyond the minimum necessary bytes to service a  {@link BinaryDecoder} API read request.<p/> In the case that the improved performance of a buffering implementation does not outweigh the inconvenience of its buffering semantics, a \"direct\" decoder can be used."}]}, {"index": "422", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java", "methodName": "org.apache.avro.specific.SpecificData.getEncoder", "methodParameterType": "ObjectOutput#", "methodParameterName": "out#", "methodBody": "public static BinaryEncoder getEncoder(ObjectOutput out) {\n    return EncoderFactory.get().directBinaryEncoder(new ExternalizableOutput(out), null);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Runtime utility used by generated classes.", "call_func_name": ["org.apache.avro.io.EncoderFactory.get", "org.apache.avro.specific.ExternalizableOutput.<init>", "org.apache.avro.io.EncoderFactory.directBinaryEncoder"], "call_func_parameter": [[""], ["java.io.ObjectOutput"], ["java.io.OutputStream", "org.apache.avro.io.BinaryEncoder"]], "passed_comments": [{"org.apache.avro.io.EncoderFactory.get": "Returns an immutable static DecoderFactory with default configuration. All configuration methods throw AvroRuntimeExceptions if called."}, {"org.apache.avro.io.EncoderFactory.directBinaryEncoder": "Creates or reinitializes a  {@link BinaryEncoder} with the OutputStreamprovided as the destination for written data. If <i>reuse</i> is provided, an attempt will be made to reconfigure <i>reuse</i> rather than construct a new instance, but this is not guaranteed, a new instance may be returned. <p/> The  {@link BinaryEncoder} implementation returned does not buffer its output,calling  {@link Encoder#flush()} will simply cause the wrapped OutputStream tobe flushed. <p/> Performance of unbuffered writes can be significantly slower than buffered writes.  {@link #binaryEncoder(OutputStream,BinaryEncoder)} returnsBinaryEncoder instances that are tuned for performance but may buffer output. The unbuffered, 'direct' encoder may be desired when buffering semantics are problematic, or if the lifetime of the encoder is so short that the buffer would not be useful. <p/> {@link BinaryEncoder} instances returned by this method are not thread-safe."}]}, {"index": "423", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaNormalization.java", "methodName": "org.apache.avro.SchemaNormalization.toParsingForm", "methodParameterType": "Schema#", "methodParameterName": "s#", "methodBody": "public static String toParsingForm(Schema s) {\n    try {\n      Map<String, String> env = new HashMap<>();\n      return build(env, s, new StringBuilder()).toString();\n    } catch (IOException e) {\n      // Shouldn't happen, b/c StringBuilder can't throw IOException\n      throw new RuntimeException(e);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns \"Parsing Canonical Form\" of a schema as defined by Avro spec.", "call_func_name": ["java.util.HashMap.<init>", "java.lang.StringBuilder.<init>", "org.apache.avro.SchemaNormalization.build", "java.lang.Object.toString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], [""], ["java.util.Map", "org.apache.avro.Schema", "java.lang.Appendable"], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "424", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaNormalization.java", "methodName": "org.apache.avro.SchemaNormalization.fingerprint", "methodParameterType": "String#byte[]#", "methodParameterName": "fpName#data#", "methodBody": "public static byte[] fingerprint(String fpName, byte[] data) throws NoSuchAlgorithmException {\n    if (fpName.equals(\"CRC-64-AVRO\")) {\n      long fp = fingerprint64(data);\n      byte[] result = new byte[8];\n      for (int i = 0; i < 8; i++) {\n        result[i] = (byte) fp;\n        fp >>= 8;\n      }\n      return result;\n    }\n\n    MessageDigest md = MessageDigest.getInstance(fpName);\n    return md.digest(data);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#PrimitiveType#SimpleName#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a fingerprint of a string of bytes. This string is presumed to contain a canonical form of a schema. The algorithm used to compute the fingerprint is selected by the argument <i>fpName</i>. If <i>fpName</i> equals the string <code>\"CRC-64-AVRO\"</code>, then the result of {@link #fingerprint64} is returned in little-endian format. Otherwise,<i>fpName</i> is used as an algorithm name for {@link MessageDigest#getInstance(String)}, which will throw <code>NoSuchAlgorithmException</code> if it doesn't recognize the name. <p> Recommended Avro practice dictates that <code>\"CRC-64-AVRO\"</code> is used for 64-bit fingerprints, <code>\"MD5\"</code> is used for 128-bit fingerprints, and <code>\"SHA-256\"</code> is used for 256-bit fingerprints.", "call_func_name": ["java.lang.String.equals", "org.apache.avro.SchemaNormalization.fingerprint64", "java.security.MessageDigest.getInstance", "java.security.MessageDigest.digest"], "call_func_parameter": [["java.lang.Object"], ["byte[]"], ["java.lang.String"], ["byte[]"]], "passed_comments": [{"org.apache.avro.SchemaNormalization.fingerprint64": "Returns the 64-bit Rabin Fingerprint (as recommended in the Avro spec) of a byte string."}]}, {"index": "425", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaNormalization.java", "methodName": "org.apache.avro.SchemaNormalization.fingerprint64", "methodParameterType": "byte[]#", "methodParameterName": "data#", "methodBody": "public static long fingerprint64(byte[] data) {\n    long result = EMPTY64;\n    for (byte b : data)\n      result = (result >>> 8) ^ FP64.FP_TABLE[(int) (result ^ b) & 0xff];\n    return result;\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#QualifiedName#PrimitiveType#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#CastExpression#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#Assignment#ExpressionStatement#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)CastExpression(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression)Assignment)ExpressionStatement)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the 64-bit Rabin Fingerprint (as recommended in the Avro spec) of a byte string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "426", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaNormalization.java", "methodName": "org.apache.avro.SchemaNormalization.parsingFingerprint", "methodParameterType": "String#Schema#", "methodParameterName": "fpName#s#", "methodBody": "public static byte[] parsingFingerprint(String fpName, Schema s) throws NoSuchAlgorithmException {\n    return fingerprint(fpName, toParsingForm(s).getBytes(StandardCharsets.UTF_8));\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns  {@link #fingerprint} applied to the parsing canonical form of thesupplied schema.", "call_func_name": ["org.apache.avro.SchemaNormalization.toParsingForm", "java.lang.String.getBytes", "org.apache.avro.SchemaNormalization.fingerprint"], "call_func_parameter": [["org.apache.avro.Schema"], ["java.nio.charset.Charset"], ["java.lang.String", "byte[]"]], "passed_comments": [{"org.apache.avro.SchemaNormalization.toParsingForm": "Returns \"Parsing Canonical Form\" of a schema as defined by Avro spec."}, {"org.apache.avro.SchemaNormalization.fingerprint": "Returns a fingerprint of a string of bytes. This string is presumed to contain a canonical form of a schema. The algorithm used to compute the fingerprint is selected by the argument <i>fpName</i>. If <i>fpName</i> equals the string <code>\"CRC-64-AVRO\"</code>, then the result of {@link #fingerprint64} is returned in little-endian format. Otherwise,<i>fpName</i> is used as an algorithm name for {@link MessageDigest#getInstance(String)}, which will throw <code>NoSuchAlgorithmException</code> if it doesn't recognize the name. <p> Recommended Avro practice dictates that <code>\"CRC-64-AVRO\"</code> is used for 64-bit fingerprints, <code>\"MD5\"</code> is used for 128-bit fingerprints, and <code>\"SHA-256\"</code> is used for 256-bit fingerprints."}]}, {"index": "427", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaNormalization.java", "methodName": "org.apache.avro.SchemaNormalization.parsingFingerprint64", "methodParameterType": "Schema#", "methodParameterName": "s#", "methodBody": "public static long parsingFingerprint64(Schema s) {\n    return fingerprint64(toParsingForm(s).getBytes(StandardCharsets.UTF_8));\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns  {@link #fingerprint64} applied to the parsing canonical form of thesupplied schema.", "call_func_name": ["org.apache.avro.SchemaNormalization.toParsingForm", "java.lang.String.getBytes", "org.apache.avro.SchemaNormalization.fingerprint64"], "call_func_parameter": [["org.apache.avro.Schema"], ["java.nio.charset.Charset"], ["byte[]"]], "passed_comments": [{"org.apache.avro.SchemaNormalization.toParsingForm": "Returns \"Parsing Canonical Form\" of a schema as defined by Avro spec."}, {"org.apache.avro.SchemaNormalization.fingerprint64": "Returns the 64-bit Rabin Fingerprint (as recommended in the Avro spec) of a byte string."}]}, {"index": "428", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/RawMessageDecoder.java", "methodName": "org.apache.avro.message.RawMessageDecoder.RawMessageDecoder", "methodParameterType": "GenericData#Schema#", "methodParameterName": "model#schema#", "methodBody": "public RawMessageDecoder(GenericData model, Schema schema) {\n    this(model, schema, schema);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link RawMessageDecoder} that uses the given{@link GenericData data model} to construct datum instances described by the{@link Schema schema}. <p> The  {@code schema} is used as both the expected schema (read schema) and forthe schema of payloads that are decoded (written schema).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "429", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/RawMessageDecoder.java", "methodName": "org.apache.avro.message.RawMessageDecoder.RawMessageDecoder", "methodParameterType": "GenericData#Schema#Schema#", "methodParameterName": "model#writeSchema#readSchema#", "methodBody": "public RawMessageDecoder(GenericData model, Schema writeSchema, Schema readSchema) {\n    Schema writeSchema1 = writeSchema;\n    Schema readSchema1 = readSchema;\n    this.reader = model.createDatumReader(writeSchema1, readSchema1);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link RawMessageDecoder} that uses the given{@link GenericData data model} to construct datum instances described by the{@link Schema readSchema}. <p> The  {@code readSchema} is used for the expected schema and the{@code writeSchema} is the schema used to decode buffers. The{@code writeSchema} must be the schema that was used to encode all buffersdecoded by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "430", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/BinaryMessageDecoder.java", "methodName": "org.apache.avro.message.BinaryMessageDecoder.BinaryMessageDecoder", "methodParameterType": "GenericData#Schema#", "methodParameterName": "model#readSchema#", "methodBody": "public BinaryMessageDecoder(GenericData model, Schema readSchema) {\n    this(model, readSchema, null);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link BinaryMessageEncoder} that uses the given{@link GenericData data model} to construct datum instances described by the{@link Schema schema}. <p> The  {@code readSchema} is as used the expected schema (read schema). Datuminstances created by this class will be described by the expected schema. <p> If  {@code readSchema} is {@code null}, the write schema of an incoming buffer is used as read schema for that datum instance. <p> The schema used to decode incoming buffers is determined by the schema fingerprint encoded in the message header. This class can decode messages that were encoded using the  {@code readSchema} (if any) and other schemasthat are added using  {@link #addSchema(Schema)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "431", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/BinaryMessageDecoder.java", "methodName": "org.apache.avro.message.BinaryMessageDecoder.BinaryMessageDecoder", "methodParameterType": "GenericData#Schema#SchemaStore#", "methodParameterName": "model#readSchema#resolver#", "methodBody": "public BinaryMessageDecoder(GenericData model, Schema readSchema, SchemaStore resolver) {\n    this.model = model;\n    this.readSchema = readSchema;\n    this.resolver = resolver;\n    if (readSchema != null) {\n      addSchema(readSchema);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link BinaryMessageEncoder} that uses the given{@link GenericData data model} to construct datum instances described by the{@link Schema schema}. <p> The  {@code readSchema} is used as the expected schema (read schema). Datuminstances created by this class will be described by the expected schema. <p> If  {@code readSchema} is {@code null}, the write schema of an incoming buffer is used as read schema for that datum instance. <p> The schema used to decode incoming buffers is determined by the schema fingerprint encoded in the message header. This class can decode messages that were encoded using the  {@code readSchema} (if any), other schemas thatare added using  {@link #addSchema(Schema)}, or schemas returned by the {@code resolver}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "432", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/BinaryMessageDecoder.java", "methodName": "org.apache.avro.message.BinaryMessageDecoder.addSchema", "methodParameterType": "Schema#", "methodParameterName": "writeSchema#", "methodBody": "public void addSchema(Schema writeSchema) {\n    long fp = SchemaNormalization.parsingFingerprint64(writeSchema);\n    final Schema actualReadSchema = this.readSchema != null ? this.readSchema : writeSchema;\n    codecByFingerprint.put(fp, new RawMessageDecoder<D>(model, writeSchema, actualReadSchema));\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#NullLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a  {@link Schema} that can be used to decode buffers.", "call_func_name": ["org.apache.avro.SchemaNormalization.parsingFingerprint64", "java.lang.Long.valueOf", "org.apache.avro.message.RawMessageDecoder.<init>", "java.util.Map.put"], "call_func_parameter": [["org.apache.avro.Schema"], ["long"], ["org.apache.avro.generic.GenericData", "org.apache.avro.Schema", "org.apache.avro.Schema"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.apache.avro.SchemaNormalization.parsingFingerprint64": "Returns  {@link #fingerprint64} applied to the parsing canonical form of thesupplied schema."}]}, {"index": "433", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/BinaryMessageDecoder.java", "methodName": "org.apache.avro.message.BinaryMessageDecoder.readFully", "methodParameterType": "InputStream#byte[]#", "methodParameterName": "stream#bytes#", "methodBody": "private boolean readFully(InputStream stream, byte[] bytes) throws IOException {\n    int pos = 0;\n    int bytesRead;\n    while ((bytes.length - pos) > 0 && (bytesRead = stream.read(bytes, pos, bytes.length - pos)) > 0) {\n      pos += bytesRead;\n    }\n    return (pos == bytes.length);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#MethodInvocation#Assignment#ParenthesizedExpression#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)MethodInvocation)Assignment)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Reads a buffer from a stream, making multiple read calls if necessary.", "call_func_name": ["java.io.InputStream.read"], "call_func_parameter": [["byte[]", "int", "int"]], "passed_comments": "/"}, {"index": "434", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/MessageDecoder.java", "methodName": "org.apache.avro.message.MessageDecoder.decode", "methodParameterType": "InputStream#", "methodParameterName": "stream#", "methodBody": "D decode(InputStream stream) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deserialize a single datum from an InputStream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "435", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/MessageDecoder.java", "methodName": "org.apache.avro.message.MessageDecoder.decode", "methodParameterType": "InputStream#D#", "methodParameterName": "stream#reuse#", "methodBody": "D decode(InputStream stream, D reuse) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deserialize a single datum from an InputStream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "436", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/MessageDecoder.java", "methodName": "org.apache.avro.message.MessageDecoder.decode", "methodParameterType": "ByteBuffer#", "methodParameterName": "encoded#", "methodBody": "D decode(ByteBuffer encoded) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deserialize a single datum from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "437", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/MessageDecoder.java", "methodName": "org.apache.avro.message.MessageDecoder.decode", "methodParameterType": "ByteBuffer#D#", "methodParameterName": "encoded#reuse#", "methodBody": "D decode(ByteBuffer encoded, D reuse) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deserialize a single datum from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "438", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/MessageDecoder.java", "methodName": "org.apache.avro.message.MessageDecoder.decode", "methodParameterType": "byte[]#", "methodParameterName": "encoded#", "methodBody": "D decode(byte[] encoded) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deserialize a single datum from a byte array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "439", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/MessageDecoder.java", "methodName": "org.apache.avro.message.MessageDecoder.decode", "methodParameterType": "byte[]#D#", "methodParameterName": "encoded#reuse#", "methodBody": "D decode(byte[] encoded, D reuse) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Deserialize a single datum from a byte array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "440", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/MessageEncoder.java", "methodName": "org.apache.avro.message.MessageEncoder.encode", "methodParameterType": "D#", "methodParameterName": "datum#", "methodBody": "ByteBuffer encode(D datum) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Serialize a single datum to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "441", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/MessageEncoder.java", "methodName": "org.apache.avro.message.MessageEncoder.encode", "methodParameterType": "D#OutputStream#", "methodParameterName": "datum#stream#", "methodBody": "void encode(D datum, OutputStream stream) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Serialize a single datum to an OutputStream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "442", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/RawMessageEncoder.java", "methodName": "org.apache.avro.message.RawMessageEncoder.RawMessageEncoder", "methodParameterType": "GenericData#Schema#", "methodParameterName": "model#schema#", "methodBody": "public RawMessageEncoder(GenericData model, Schema schema) {\n    this(model, schema, true);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link RawMessageEncoder} that uses the given{@link GenericData data model} to deconstruct datum instances described bythe  {@link Schema schema}. <p> Buffers returned by  {@link #encode(D)} are copied and will not be modified byfuture calls to  {@code encode}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "443", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/RawMessageEncoder.java", "methodName": "org.apache.avro.message.RawMessageEncoder.RawMessageEncoder", "methodParameterType": "GenericData#Schema#boolean#", "methodParameterName": "model#schema#shouldCopy#", "methodBody": "public RawMessageEncoder(GenericData model, Schema schema, boolean shouldCopy) {\n    Schema writeSchema = schema;\n    this.copyOutputBytes = shouldCopy;\n    this.writer = model.createDatumWriter(writeSchema);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link RawMessageEncoder} that uses the given{@link GenericData data model} to deconstruct datum instances described bythe  {@link Schema schema}. <p> If  {@code shouldCopy} is true, then buffers returned by {@link #encode(D)}are copied and will not be modified by future calls to  {@code encode}. <p> If  {@code shouldCopy} is false, then buffers returned by {@code encode} wrapa thread-local buffer that can be reused by future calls to  {@code encode}, but may not be. Callers should only set  {@code shouldCopy} to false if thebuffer will be copied before the current thread's next call to {@code encode}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "444", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/BinaryMessageEncoder.java", "methodName": "org.apache.avro.message.BinaryMessageEncoder.BinaryMessageEncoder", "methodParameterType": "GenericData#Schema#", "methodParameterName": "model#schema#", "methodBody": "public BinaryMessageEncoder(GenericData model, Schema schema) {\n    this(model, schema, true);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link BinaryMessageEncoder} that uses the given{@link GenericData data model} to deconstruct datum instances described bythe  {@link Schema schema}. <p> Buffers returned by  {@link #encode(D)} are copied and will not be modified byfuture calls to  {@code encode}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "445", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/BinaryMessageEncoder.java", "methodName": "org.apache.avro.message.BinaryMessageEncoder.BinaryMessageEncoder", "methodParameterType": "GenericData#Schema#boolean#", "methodParameterName": "model#schema#shouldCopy#", "methodBody": "public BinaryMessageEncoder(GenericData model, Schema schema, boolean shouldCopy) {\n    this.writeCodec = new V1MessageEncoder<>(model, schema, shouldCopy);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new  {@link BinaryMessageEncoder} that uses the given{@link GenericData data model} to deconstruct datum instances described bythe  {@link Schema schema}. <p> If  {@code shouldCopy} is true, then buffers returned by {@link #encode(D)}are copied and will not be modified by future calls to  {@code encode}. <p> If  {@code shouldCopy} is false, then buffers returned by {@code encode} wrapa thread-local buffer that can be reused by future calls to  {@code encode}, but may not be. Callers should only set  {@code shouldCopy} to false if thebuffer will be copied before the current thread's next call to {@code encode}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "446", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/message/SchemaStore.java", "methodName": "org.apache.avro.message.SchemaStore.findByFingerprint", "methodParameterType": "long#", "methodParameterName": "fingerprint#", "methodBody": "Schema findByFingerprint(long fingerprint);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Retrieves a fingerprint by its AVRO-CRC-64 fingerprint.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "447", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaValidationStrategy.java", "methodName": "org.apache.avro.SchemaValidationStrategy.validate", "methodParameterType": "Schema#Schema#", "methodParameterName": "toValidate#existing#", "methodBody": "void validate(Schema toValidate, Schema existing) throws SchemaValidationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Validates that one schema is compatible with another.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "448", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/SchemaValidator.java", "methodName": "org.apache.avro.SchemaValidator.validate", "methodParameterType": "Schema#Iterable<Schema>#", "methodParameterName": "toValidate#existing#", "methodBody": "void validate(Schema toValidate, Iterable<Schema> existing) throws SchemaValidationException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Validate one schema against others. The order of the schemas to validate against is chronological from most recent to oldest, if there is a natural chronological order. This allows some validators to identify which schemas are the most \"recent\" in order to validate only against the most recent schema(s).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "449", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Conversion.java", "methodName": "org.apache.avro.Conversion.getConvertedType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract Class<T> getConvertedType();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the Java class representing the logical type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "450", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Conversion.java", "methodName": "org.apache.avro.Conversion.getLogicalTypeName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String getLogicalTypeName();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return the logical type this class converts.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "451", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Conversion.java", "methodName": "org.apache.avro.Conversion.adjustAndSetValue", "methodParameterType": "String#String#", "methodParameterName": "varName#valParamName#", "methodBody": "public String adjustAndSetValue(String varName, String valParamName) {\n    return varName + \" = \" + valParamName + \";\";\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Certain logical types may require adjusting the code within the \"setter\" methods to make sure the data that is set is properly formatted. This method allows the Conversion to generate custom setter code if required.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "452", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Conversions.java", "methodName": "org.apache.avro.Conversions.convertToLogicalType", "methodParameterType": "Object#Schema#LogicalType#Conversion<?>#", "methodParameterName": "datum#schema#type#conversion#", "methodBody": "public static Object convertToLogicalType(Object datum, Schema schema, LogicalType type, Conversion<?> conversion) {\n    if (datum == null) {\n      return null;\n    }\n\n    if (schema == null || type == null || conversion == null) {\n      throw new IllegalArgumentException(\"Parameters cannot be null! Parameter values:\"\n          + Arrays.deepToString(new Object[] { datum, schema, type, conversion }));\n    }\n\n    try {\n      switch (schema.getType()) {\n      case RECORD:\n        return conversion.fromRecord((IndexedRecord) datum, schema, type);\n      case ENUM:\n        return conversion.fromEnumSymbol((GenericEnumSymbol) datum, schema, type);\n      case ARRAY:\n        return conversion.fromArray((Collection) datum, schema, type);\n      case MAP:\n        return conversion.fromMap((Map<?, ?>) datum, schema, type);\n      case FIXED:\n        return conversion.fromFixed((GenericFixed) datum, schema, type);\n      case STRING:\n        return conversion.fromCharSequence((CharSequence) datum, schema, type);\n      case BYTES:\n        return conversion.fromBytes((ByteBuffer) datum, schema, type);\n      case INT:\n        return conversion.fromInt((Integer) datum, schema, type);\n      case LONG:\n        return conversion.fromLong((Long) datum, schema, type);\n      case FLOAT:\n        return conversion.fromFloat((Float) datum, schema, type);\n      case DOUBLE:\n        return conversion.fromDouble((Double) datum, schema, type);\n      case BOOLEAN:\n        return conversion.fromBoolean((Boolean) datum, schema, type);\n      }\n      return datum;\n    } catch (ClassCastException e) {\n      throw new AvroRuntimeException(\n          \"Cannot convert \" + datum + \":\" + datum.getClass().getSimpleName() + \": expected generic type\", e);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#ArrayInitializer#ArrayCreation#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#WildcardType#WildcardType#ParameterizedType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SwitchStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)SwitchStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Convert a underlying representation of a logical type (such as a ByteBuffer) to a higher level object (such as a BigDecimal).", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.util.Arrays.deepToString", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.apache.avro.Schema.getType", "org.apache.avro.Conversion.fromRecord", "org.apache.avro.Conversion.fromEnumSymbol", "org.apache.avro.Conversion.fromArray", "org.apache.avro.Conversion.fromMap", "org.apache.avro.Conversion.fromFixed", "org.apache.avro.Conversion.fromCharSequence", "org.apache.avro.Conversion.fromBytes", "org.apache.avro.Conversion.fromInt", "org.apache.avro.Conversion.fromLong", "org.apache.avro.Conversion.fromFloat", "org.apache.avro.Conversion.fromDouble", "org.apache.avro.Conversion.fromBoolean", "java.lang.StringBuilder.append", "java.lang.Object.getClass", "java.lang.Class.getSimpleName", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object[]"], [""], ["java.lang.String"], [""], ["org.apache.avro.generic.IndexedRecord", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["org.apache.avro.generic.GenericEnumSymbol", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.util.Collection", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.util.Map", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["org.apache.avro.generic.GenericFixed", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.CharSequence", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.nio.ByteBuffer", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Integer", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Long", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Float", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Double", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Boolean", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}]}, {"index": "453", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/Conversions.java", "methodName": "org.apache.avro.Conversions.convertToRawType", "methodParameterType": "Object#Schema#LogicalType#Conversion<T>#", "methodParameterName": "datum#schema#type#conversion#", "methodBody": "public static <T> Object convertToRawType(Object datum, Schema schema, LogicalType type, Conversion<T> conversion) {\n    if (datum == null) {\n      return null;\n    }\n\n    if (schema == null || type == null || conversion == null) {\n      throw new IllegalArgumentException(\"Parameters cannot be null! Parameter values:\"\n          + Arrays.deepToString(new Object[] { datum, schema, type, conversion }));\n    }\n\n    try {\n      Class<T> fromClass = conversion.getConvertedType();\n      switch (schema.getType()) {\n      case RECORD:\n        return conversion.toRecord(fromClass.cast(datum), schema, type);\n      case ENUM:\n        return conversion.toEnumSymbol(fromClass.cast(datum), schema, type);\n      case ARRAY:\n        return conversion.toArray(fromClass.cast(datum), schema, type);\n      case MAP:\n        return conversion.toMap(fromClass.cast(datum), schema, type);\n      case FIXED:\n        return conversion.toFixed(fromClass.cast(datum), schema, type);\n      case STRING:\n        return conversion.toCharSequence(fromClass.cast(datum), schema, type);\n      case BYTES:\n        return conversion.toBytes(fromClass.cast(datum), schema, type);\n      case INT:\n        return conversion.toInt(fromClass.cast(datum), schema, type);\n      case LONG:\n        return conversion.toLong(fromClass.cast(datum), schema, type);\n      case FLOAT:\n        return conversion.toFloat(fromClass.cast(datum), schema, type);\n      case DOUBLE:\n        return conversion.toDouble(fromClass.cast(datum), schema, type);\n      case BOOLEAN:\n        return conversion.toBoolean(fromClass.cast(datum), schema, type);\n      }\n      return datum;\n    } catch (ClassCastException e) {\n      throw new AvroRuntimeException(\n          \"Cannot convert \" + datum + \":\" + datum.getClass().getSimpleName() + \": expected logical type\", e);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#ArrayInitializer#ArrayCreation#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SwitchStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ArrayInitializer)ArrayCreation)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)SwitchStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Convert a high level representation of a logical type (such as a BigDecimal) to the its underlying representation object (such as a ByteBuffer)", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.util.Arrays.deepToString", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.apache.avro.Conversion.getConvertedType", "org.apache.avro.Schema.getType", "java.lang.Class.cast", "org.apache.avro.Conversion.toRecord", "org.apache.avro.Conversion.toEnumSymbol", "org.apache.avro.Conversion.toArray", "org.apache.avro.Conversion.toMap", "org.apache.avro.Conversion.toFixed", "org.apache.avro.Conversion.toCharSequence", "org.apache.avro.Conversion.toBytes", "org.apache.avro.Conversion.toInt", "org.apache.avro.Conversion.toLong", "org.apache.avro.Conversion.toFloat", "org.apache.avro.Conversion.toDouble", "org.apache.avro.Conversion.toBoolean", "java.lang.StringBuilder.append", "java.lang.Object.getClass", "java.lang.Class.getSimpleName", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object[]"], [""], ["java.lang.String"], [""], [""], ["java.lang.Object"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.LogicalType"], ["java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.Conversion.getConvertedType": "Return the Java class representing the logical type."}, {"org.apache.avro.Schema.getType": "Return the type of this schema."}]}, {"index": "454", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DatumWriter.java", "methodName": "org.apache.avro.io.DatumWriter.setSchema", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "void setSchema(Schema schema);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "455", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DatumWriter.java", "methodName": "org.apache.avro.io.DatumWriter.write", "methodParameterType": "D#Encoder#", "methodParameterName": "datum#out#", "methodBody": "void write(D datum, Encoder out) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write a datum. Traverse the schema, depth first, writing each leaf value in the schema from the datum to the output.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "456", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryData.java", "methodName": "org.apache.avro.io.BinaryData.compare", "methodParameterType": "byte[]#int#byte[]#int#Schema#", "methodParameterName": "b1#s1#b2#s2#schema#", "methodBody": "public static int compare(byte[] b1, int s1, byte[] b2, int s2, Schema schema) {\n    return compare(b1, s1, b1.length - s1, b2, s2, b2.length - s2, schema);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Compare binary encoded data. If equal, return zero. If greater-than, return 1, if less than return -1. Order is consistent with that of {@link org.apache.avro.generic.GenericData#compare(Object,Object,Schema)}.", "call_func_name": ["org.apache.avro.io.BinaryData.compare"], "call_func_parameter": [["byte[]", "int", "int", "byte[]", "int", "int", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.io.BinaryData.compare": "Compare binary encoded data. If equal, return zero. If greater-than, return 1, if less than return -1. Order is consistent with that of {@link org.apache.avro.generic.GenericData#compare(Object,Object,Schema)}."}]}, {"index": "457", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryData.java", "methodName": "org.apache.avro.io.BinaryData.compare", "methodParameterType": "byte[]#int#int#byte[]#int#int#Schema#", "methodParameterName": "b1#s1#l1#b2#s2#l2#schema#", "methodBody": "public static int compare(byte[] b1, int s1, int l1, byte[] b2, int s2, int l2, Schema schema) {\n    Decoders decoders = DECODERS.get();\n    decoders.set(b1, s1, l1, b2, s2, l2);\n    try {\n      return compare(decoders, schema);\n    } catch (IOException e) {\n      throw new AvroRuntimeException(e);\n    } finally {\n      decoders.clear();\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Compare binary encoded data. If equal, return zero. If greater-than, return 1, if less than return -1. Order is consistent with that of {@link org.apache.avro.generic.GenericData#compare(Object,Object,Schema)}.", "call_func_name": ["java.lang.ThreadLocal.get", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "458", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryData.java", "methodName": "org.apache.avro.io.BinaryData.compare", "methodParameterType": "Decoders#Schema#", "methodParameterName": "d#schema#", "methodBody": "private static int compare(Decoders d, Schema schema) throws IOException {\n    Decoder d1 = d.d1;\n    Decoder d2 = d.d2;\n    switch (schema.getType()) {\n    case RECORD: {\n      for (Field field : schema.getFields()) {\n        if (field.order() == Field.Order.IGNORE) {\n          GenericDatumReader.skip(field.schema(), d1);\n          GenericDatumReader.skip(field.schema(), d2);\n          continue;\n        }\n        int c = compare(d, field.schema());\n        if (c != 0) {\n          return (field.order() != Field.Order.DESCENDING) ? c : -c;\n        }\n      }\n      return 0;\n    }\n    case ENUM:\n    case INT:\n      return Integer.compare(d1.readInt(), d2.readInt());\n    case LONG:\n      return Long.compare(d1.readLong(), d2.readLong());\n    case FLOAT:\n      return Float.compare(d1.readFloat(), d2.readFloat());\n    case DOUBLE:\n      return Double.compare(d1.readDouble(), d2.readDouble());\n    case BOOLEAN:\n      return Boolean.compare(d1.readBoolean(), d2.readBoolean());\n    case ARRAY: {\n      long i = 0; // position in array\n      long r1 = 0, r2 = 0; // remaining in current block\n      long l1 = 0, l2 = 0; // total array length\n      while (true) {\n        if (r1 == 0) { // refill blocks(s)\n          r1 = d1.readLong();\n          if (r1 < 0) {\n            r1 = -r1;\n            d1.readLong();\n          }\n          l1 += r1;\n        }\n        if (r2 == 0) {\n          r2 = d2.readLong();\n          if (r2 < 0) {\n            r2 = -r2;\n            d2.readLong();\n          }\n          l2 += r2;\n        }\n        if (r1 == 0 || r2 == 0) // empty block: done\n          return Long.compare(l1, l2);\n        long l = Math.min(l1, l2);\n        while (i < l) { // compare to end of block\n          int c = compare(d, schema.getElementType());\n          if (c != 0)\n            return c;\n          i++;\n          r1--;\n          r2--;\n        }\n      }\n    }\n    case MAP:\n      throw new AvroRuntimeException(\"Can't compare maps!\");\n    case UNION: {\n      int i1 = d1.readInt();\n      int i2 = d2.readInt();\n      int c = Integer.compare(i1, i2);\n      return c == 0 ? compare(d, schema.getTypes().get(i1)) : c;\n    }\n    case FIXED: {\n      int size = schema.getFixedSize();\n      int c = compareBytes(d.d1.getBuf(), d.d1.getPos(), size, d.d2.getBuf(), d.d2.getPos(), size);\n      d.d1.skipFixed(size);\n      d.d2.skipFixed(size);\n      return c;\n    }\n    case STRING:\n    case BYTES: {\n      int l1 = d1.readInt();\n      int l2 = d2.readInt();\n      int c = compareBytes(d.d1.getBuf(), d.d1.getPos(), l1, d.d2.getBuf(), d.d2.getPos(), l2);\n      d.d1.skipFixed(l1);\n      d.d2.skipFixed(l2);\n      return c;\n    }\n    case NULL:\n      return 0;\n    default:\n      throw new AvroRuntimeException(\"Unexpected schema to compare!\");\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#PrefixExpression#ConditionalExpression#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#NumberLiteral#ReturnStatement#Block#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#BooleanLiteral#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PrefixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PrefixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#Block#WhileStatement#Block#SimpleName#SwitchCase#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#SimpleName#SwitchCase#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#ConditionalExpression#ReturnStatement#Block#SimpleName#SwitchCase#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SwitchCase#SimpleName#SwitchCase#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SwitchCase#NumberLiteral#ReturnStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ConditionalExpression)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(BooleanLiteral)BooleanLiteral(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement)Block)WhileStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "If equal, return the number of bytes consumed. If greater than, return GT, if less than, return LT.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "459", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryData.java", "methodName": "org.apache.avro.io.BinaryData.compareBytes", "methodParameterType": "byte[]#int#int#byte[]#int#int#", "methodParameterName": "b1#s1#l1#b2#s2#l2#", "methodBody": "public static int compareBytes(byte[] b1, int s1, int l1, byte[] b2, int s2, int l2) {\n    int end1 = s1 + l1;\n    int end2 = s2 + l2;\n    for (int i = s1, j = s2; i < end1 && j < end2; i++, j++) {\n      int a = (b1[i] & 0xff);\n      int b = (b2[j] & 0xff);\n      if (a != b) {\n        return a - b;\n      }\n    }\n    return l1 - l2;\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#PostfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#NumberLiteral#InfixExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#NumberLiteral#InfixExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Lexicographically compare bytes. If equal, return zero. If greater-than, return a positive value, if less than return a negative value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "460", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryData.java", "methodName": "org.apache.avro.io.BinaryData.hashCode", "methodParameterType": "byte[]#int#int#Schema#", "methodParameterName": "bytes#start#length#schema#", "methodBody": "public static int hashCode(byte[] bytes, int start, int length, Schema schema) {\n    HashData data = HASH_DATA.get();\n    data.set(bytes, start, length);\n    try {\n      return hashCode(data, schema);\n    } catch (IOException e) {\n      throw new AvroRuntimeException(e);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Hash binary encoded data. Consistent with {@link org.apache.avro.generic.GenericData#hashCode(Object,Schema)}.", "call_func_name": ["java.lang.ThreadLocal.get", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "461", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryData.java", "methodName": "org.apache.avro.io.BinaryData.skipLong", "methodParameterType": "byte[]#int#", "methodParameterName": "bytes#start#", "methodBody": "public static int skipLong(byte[] bytes, int start) {\n    int i = start;\n    for (int b = bytes[i++]; ((b & 0x80) != 0); b = bytes[i++]) {\n    }\n    return i;\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#PostfixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#PostfixExpression#ArrayAccess#Assignment#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)Assignment(Block)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Skip a binary-encoded long, returning the position after it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "462", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryData.java", "methodName": "org.apache.avro.io.BinaryData.encodeBoolean", "methodParameterType": "boolean#byte[]#int#", "methodParameterName": "b#buf#pos#", "methodBody": "public static int encodeBoolean(boolean b, byte[] buf, int pos) {\n    buf[pos] = b ? (byte) 1 : (byte) 0;\n    return 1;\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ArrayAccess#SimpleName#PrimitiveType#NumberLiteral#CastExpression#PrimitiveType#NumberLiteral#CastExpression#ConditionalExpression#Assignment#ExpressionStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ConditionalExpression(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(NumberLiteral)NumberLiteral)CastExpression(CastExpression(PrimitiveType)PrimitiveType(NumberLiteral)NumberLiteral)CastExpression)ConditionalExpression)Assignment)ExpressionStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encode a boolean to the byte array at the given position. Will throw IndexOutOfBounds if the position is not valid.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "463", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryData.java", "methodName": "org.apache.avro.io.BinaryData.encodeInt", "methodParameterType": "int#byte[]#int#", "methodParameterName": "n#buf#pos#", "methodBody": "public static int encodeInt(int n, byte[] buf, int pos) {\n    // move sign to low-order bit, and flip others if negative\n    n = (n << 1) ^ (n >> 31);\n    int start = pos;\n    if ((n & ~0x7F) != 0) {\n      buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n      n >>>= 7;\n      if (n > 0x7F) {\n        buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n        n >>>= 7;\n        if (n > 0x7F) {\n          buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n          n >>>= 7;\n          if (n > 0x7F) {\n            buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n            n >>>= 7;\n          }\n        }\n      }\n    }\n    buf[pos++] = (byte) n;\n    return pos - start;\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encode an integer to the byte array at the given position. Will throw IndexOutOfBounds if it overflows. Users should ensure that there are at least 5 bytes left in the buffer before calling this method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "464", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryData.java", "methodName": "org.apache.avro.io.BinaryData.encodeLong", "methodParameterType": "long#byte[]#int#", "methodParameterName": "n#buf#pos#", "methodBody": "public static int encodeLong(long n, byte[] buf, int pos) {\n    // move sign to low-order bit, and flip others if negative\n    n = (n << 1) ^ (n >> 63);\n    int start = pos;\n    if ((n & ~0x7FL) != 0) {\n      buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n      n >>>= 7;\n      if (n > 0x7F) {\n        buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n        n >>>= 7;\n        if (n > 0x7F) {\n          buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n          n >>>= 7;\n          if (n > 0x7F) {\n            buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n            n >>>= 7;\n            if (n > 0x7F) {\n              buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n              n >>>= 7;\n              if (n > 0x7F) {\n                buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n                n >>>= 7;\n                if (n > 0x7F) {\n                  buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n                  n >>>= 7;\n                  if (n > 0x7F) {\n                    buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n                    n >>>= 7;\n                    if (n > 0x7F) {\n                      buf[pos++] = (byte) ((n | 0x80) & 0xFF);\n                      n >>>= 7;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    buf[pos++] = (byte) n;\n    return pos - start;\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#PrimitiveType#SimpleName#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encode a long to the byte array at the given position. Will throw IndexOutOfBounds if it overflows. Users should ensure that there are at least 10 bytes left in the buffer before calling this method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "465", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryData.java", "methodName": "org.apache.avro.io.BinaryData.encodeFloat", "methodParameterType": "float#byte[]#int#", "methodParameterName": "f#buf#pos#", "methodBody": "public static int encodeFloat(float f, byte[] buf, int pos) {\n    int len = 1;\n    int bits = Float.floatToRawIntBits(f);\n    // hotspot compiler works well with this variant\n    buf[pos] = (byte) ((bits) & 0xFF);\n    buf[pos + len++] = (byte) ((bits >>> 8) & 0xFF);\n    buf[pos + len++] = (byte) ((bits >>> 16) & 0xFF);\n    buf[pos + len++] = (byte) ((bits >>> 24) & 0xFF);\n    return 4;\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#PrimitiveType#SimpleName#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#PostfixExpression#InfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#PostfixExpression#InfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#PostfixExpression#InfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)InfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)InfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)InfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encode a float to the byte array at the given position. Will throw IndexOutOfBounds if it overflows. Users should ensure that there are at least 4 bytes left in the buffer before calling this method.", "call_func_name": ["java.lang.Float.floatToRawIntBits"], "call_func_parameter": [["float"]], "passed_comments": "/"}, {"index": "466", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryData.java", "methodName": "org.apache.avro.io.BinaryData.encodeDouble", "methodParameterType": "double#byte[]#int#", "methodParameterName": "d#buf#pos#", "methodBody": "public static int encodeDouble(double d, byte[] buf, int pos) {\n    long bits = Double.doubleToRawLongBits(d);\n    int first = (int) (bits & 0xFFFFFFFF);\n    int second = (int) ((bits >>> 32) & 0xFFFFFFFF);\n    // the compiler seems to execute this order the best, likely due to\n    // register allocation -- the lifetime of constants is minimized.\n    buf[pos] = (byte) ((first) & 0xFF);\n    buf[pos + 4] = (byte) ((second) & 0xFF);\n    buf[pos + 5] = (byte) ((second >>> 8) & 0xFF);\n    buf[pos + 1] = (byte) ((first >>> 8) & 0xFF);\n    buf[pos + 2] = (byte) ((first >>> 16) & 0xFF);\n    buf[pos + 6] = (byte) ((second >>> 16) & 0xFF);\n    buf[pos + 7] = (byte) ((second >>> 24) & 0xFF);\n    buf[pos + 3] = (byte) ((first >>> 24) & 0xFF);\n    return 8;\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#PrimitiveType#SimpleName#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#PrimitiveType#SimpleName#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#PrimitiveType#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#ExpressionStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)ExpressionStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encode a double to the byte array at the given position. Will throw IndexOutOfBounds if it overflows. Users should ensure that there are at least 8 bytes left in the buffer before calling this method.", "call_func_name": ["java.lang.Double.doubleToRawLongBits"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "467", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/ValidatingEncoder.java", "methodName": "org.apache.avro.io.ValidatingEncoder.configure", "methodParameterType": "Encoder#", "methodParameterName": "encoder#", "methodBody": "public ValidatingEncoder configure(Encoder encoder) {\n    this.parser.reset();\n    this.out = encoder;\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Reconfigures this ValidatingEncoder to wrap the encoder provided.", "call_func_name": ["org.apache.avro.io.parsing.Parser.reset"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "468", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/ParsingEncoder.java", "methodName": "org.apache.avro.io.ParsingEncoder.push", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected final void push() {\n    if (++pos == counts.length) {\n      counts = Arrays.copyOf(counts, pos + 10);\n    }\n    counts[pos] = 0;\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#PrefixExpression#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#ArrayAccess#NumberLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Push a new collection on to the stack.", "call_func_name": ["java.util.Arrays.copyOf"], "call_func_parameter": [["long[]", "int"]], "passed_comments": "/"}, {"index": "469", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/ValidatingDecoder.java", "methodName": "org.apache.avro.io.ValidatingDecoder.configure", "methodParameterType": "Decoder#", "methodParameterName": "in#", "methodBody": "public ValidatingDecoder configure(Decoder in) throws IOException {\n    this.parser.reset();\n    this.in = in;\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Re-initialize, reading from a new underlying Decoder.", "call_func_name": ["org.apache.avro.io.parsing.SkipParser.reset"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "470", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DirectBinaryEncoder.java", "methodName": "org.apache.avro.io.DirectBinaryEncoder.DirectBinaryEncoder", "methodParameterType": "OutputStream#", "methodParameterName": "out#", "methodBody": "DirectBinaryEncoder(OutputStream out) {\n    configure(out);\n  }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a writer that sends its output to the underlying stream <code>out</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "471", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java", "methodName": "org.apache.avro.io.ResolvingDecoder.ResolvingDecoder", "methodParameterType": "Object#Decoder#", "methodParameterName": "resolver#in#", "methodBody": "private ResolvingDecoder(Object resolver, Decoder in) throws IOException {\n    super((Symbol) resolver, in);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a <tt>ResolvingDecoder</tt> using the given resolver. The resolver must have been returned by a previous call to {@link #resolve(Schema,Schema)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "472", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java", "methodName": "org.apache.avro.io.ResolvingDecoder.resolve", "methodParameterType": "Schema#Schema#", "methodParameterName": "writer#reader#", "methodBody": "public static Object resolve(Schema writer, Schema reader) throws IOException {\n    if (null == writer) {\n      throw new NullPointerException(\"writer cannot be null!\");\n    }\n    if (null == reader) {\n      throw new NullPointerException(\"reader cannot be null!\");\n    }\n    return new ResolvingGrammarGenerator().generate(writer, reader);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Produces an opaque resolver that can be used to construct a new {@link ResolvingDecoder#ResolvingDecoder(Object,Decoder)}. The returned Object is immutable and hence can be simultaneously used in many ResolvingDecoders. This method is reasonably expensive, the users are encouraged to cache the result.", "call_func_name": ["java.lang.NullPointerException.<init>", "org.apache.avro.io.parsing.ResolvingGrammarGenerator.<init>", "org.apache.avro.io.parsing.ResolvingGrammarGenerator.generate"], "call_func_parameter": [["java.lang.String"], [""], ["org.apache.avro.Schema", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.io.parsing.ResolvingGrammarGenerator.generate": "Resolves the writer schema <tt>writer</tt> and the reader schema <tt>reader</tt> and returns the start symbol for the grammar generated."}]}, {"index": "473", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java", "methodName": "org.apache.avro.io.ResolvingDecoder.readFieldOrder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final Schema.Field[] readFieldOrder() throws IOException {\n    return ((Symbol.FieldOrderAction) parser.advance(Symbol.FIELD_ACTION)).fields;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the actual order in which the reader's fields will be returned to the reader. This method is useful because  {@link ResolvingDecoder} returns values in theorder written by the writer, rather than the order expected by the reader. This method allows readers to figure out what fields to expect. Let's say the reader is expecting a three-field record, the first field is a long, the second a string, and the third an array. In this case, a typical usage might be as follows: <pre> Schema.Fields[] fieldOrder = in.readFieldOrder(); for (int i = 0; i &lt; 3; i++) { switch (fieldOrder[i].pos()) { case 1: foo(in.readLong()); break; case 2: someVariable = in.readString(); break; case 3: bar(in); // The code of \"bar\" will read an array-of-int break; } </pre> Note that  {@link ResolvingDecoder} will return only the fields expected bythe reader, not other fields that may have been written by the writer. Thus, the iteration-count of \"3\" in the above loop will always be correct. Throws a runtime exception if we're not just about to read the first field of a record. (If the client knows the order of incoming fields, then the client does <em>not</em> need to call this method but rather can just start reading the field values.)", "call_func_name": ["org.apache.avro.io.parsing.SkipParser.advance"], "call_func_parameter": [["org.apache.avro.io.parsing.Symbol"]], "passed_comments": "/"}, {"index": "474", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java", "methodName": "org.apache.avro.io.ResolvingDecoder.readFieldOrderIfDiff", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final Schema.Field[] readFieldOrderIfDiff() throws IOException {\n    Symbol.FieldOrderAction top = (Symbol.FieldOrderAction) parser.advance(Symbol.FIELD_ACTION);\n    return (top.noReorder ? null : top.fields);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NullLiteral#SimpleName#SimpleName#QualifiedName#ConditionalExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ParenthesizedExpression(ConditionalExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Same as  {@link #readFieldOrder} except that it returns <tt>null</tt> if therewas no reordering of fields, i.e., if the correct thing for the reader to do is to read (all) of its fields in the order specified by its own schema (useful for optimizations).", "call_func_name": ["org.apache.avro.io.parsing.SkipParser.advance"], "call_func_parameter": [["org.apache.avro.io.parsing.Symbol"]], "passed_comments": "/"}, {"index": "475", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/ResolvingDecoder.java", "methodName": "org.apache.avro.io.ResolvingDecoder.drain", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final void drain() throws IOException {\n    parser.processImplicitActions();\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Consume any more data that has been written by the writer but not needed by the reader so that the the underlying decoder is in proper shape for the next record. This situation happens when, for example, the writer writes a record with two fields and the reader needs only the first field. This function should be called after completely decoding an object but before next object can be decoded from the same underlying decoder either directly or through another resolving decoder. If the same resolving decoder is used for the next object as well, calling this method is optional; the state of this resolving decoder ensures that any leftover portions are consumed before the next object is decoded.", "call_func_name": ["org.apache.avro.io.parsing.SkipParser.processImplicitActions"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "476", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryEncoder.java", "methodName": "org.apache.avro.io.BinaryEncoder.writeZero", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract void writeZero() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write a zero byte to the underlying output.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "477", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryEncoder.java", "methodName": "org.apache.avro.io.BinaryEncoder.bytesBuffered", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract int bytesBuffered();", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the number of bytes currently buffered by this encoder. If this Encoder does not buffer, this will always return zero. <p/> Call  {@link #flush()} to empty the buffer to the underlying output.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "478", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/JsonDecoder.java", "methodName": "org.apache.avro.io.JsonDecoder.configure", "methodParameterType": "InputStream#", "methodParameterName": "in#", "methodBody": "public JsonDecoder configure(InputStream in) throws IOException {\n    if (null == in) {\n      throw new NullPointerException(\"InputStream to read from cannot be null!\");\n    }\n    parser.reset();\n    reorderBuffers.clear();\n    currentReorderBuffer = null;\n    this.in = jsonFactory.createParser(in);\n    this.in.nextToken();\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Reconfigures this JsonDecoder to use the InputStream provided. <p/> If the InputStream provided is null, a NullPointerException is thrown. <p/> Otherwise, this JsonDecoder will reset its state and then reconfigure its input.", "call_func_name": ["java.lang.NullPointerException.<init>", "org.apache.avro.io.parsing.SkipParser.reset", "java.util.Stack.clear", "com.fasterxml.jackson.core.JsonFactory.createParser", "com.fasterxml.jackson.core.JsonParser.nextToken"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.io.InputStream"], [""]], "passed_comments": "/"}, {"index": "479", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/JsonDecoder.java", "methodName": "org.apache.avro.io.JsonDecoder.configure", "methodParameterType": "String#", "methodParameterName": "in#", "methodBody": "public JsonDecoder configure(String in) throws IOException {\n    if (null == in) {\n      throw new NullPointerException(\"String to read from cannot be null!\");\n    }\n    parser.reset();\n    reorderBuffers.clear();\n    currentReorderBuffer = null;\n    this.in = new JsonFactory().createParser(in);\n    this.in.nextToken();\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Reconfigures this JsonDecoder to use the String provided for input. <p/> If the String provided is null, a NullPointerException is thrown. <p/> Otherwise, this JsonDecoder will reset its state and then reconfigure its input.", "call_func_name": ["java.lang.NullPointerException.<init>", "org.apache.avro.io.parsing.SkipParser.reset", "java.util.Stack.clear", "com.fasterxml.jackson.core.JsonFactory.<init>", "com.fasterxml.jackson.core.JsonFactory.createParser", "com.fasterxml.jackson.core.JsonParser.nextToken"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "480", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryDecoder.java", "methodName": "org.apache.avro.io.BinaryDecoder.BinaryDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected BinaryDecoder() {\n  }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "protected constructor for child classes", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "481", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryDecoder.java", "methodName": "org.apache.avro.io.BinaryDecoder.configureSource", "methodParameterType": "int#ByteSource#", "methodParameterName": "bufferSize#source#", "methodBody": "private void configureSource(int bufferSize, ByteSource source) {\n    if (null != this.source) {\n      this.source.detach();\n    }\n    source.attach(bufferSize, this);\n    this.source = source;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initializes this decoder with a new ByteSource. Detaches the old source (if it exists) from this Decoder. The old source's state no longer depends on this Decoder and its InputStream interface will continue to drain the remaining buffer and source data. <p/> The decoder will read from the new source. The source will generally replace the buffer with its own. If the source allocates a new buffer, it will create it with size bufferSize.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "482", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryDecoder.java", "methodName": "org.apache.avro.io.BinaryDecoder.doReadBytes", "methodParameterType": "byte[]#int#int#", "methodParameterName": "bytes#start#length#", "methodBody": "protected void doReadBytes(byte[] bytes, int start, int length) throws IOException {\n    if (length < 0)\n      throw new AvroRuntimeException(\"Malformed data. Length is negative: \" + length);\n    int remaining = limit - pos;\n    if (length <= remaining) {\n      System.arraycopy(buf, pos, bytes, start, length);\n      pos += length;\n    } else {\n      // read the rest of the buffer\n      System.arraycopy(buf, pos, bytes, start, remaining);\n      start += remaining;\n      length -= remaining;\n      pos = limit;\n      // finish from the byte source\n      source.readRaw(bytes, start, length);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Reads <tt>length</tt> bytes into <tt>bytes</tt> starting at <tt>start</tt>.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>", "java.lang.System.arraycopy"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["java.lang.String"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": "/"}, {"index": "483", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryDecoder.java", "methodName": "org.apache.avro.io.BinaryDecoder.doReadItemCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected long doReadItemCount() throws IOException {\n    long result = readLong();\n    if (result < 0L) {\n      // Consume byte-count if present\n      readLong();\n      result = -result;\n    }\n    return result;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#PrefixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of items to follow in the current array or map. Returns 0 if there are no more items in the current array and the array/map has ended. Arrays are encoded as a series of blocks. Each block consists of a long count value, followed by that many array items. A block with count zero indicates the end of the array. If a block's count is negative, its absolute value is used, and the count is followed immediately by a long block size indicating the number of bytes in the block.", "call_func_name": ["org.apache.avro.io.BinaryDecoder.readLong"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "484", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryDecoder.java", "methodName": "org.apache.avro.io.BinaryDecoder.doSkipItems", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private long doSkipItems() throws IOException {\n    long result = readLong();\n    while (result < 0L) {\n      final long bytecount = readLong();\n      doSkipBytes(bytecount);\n      result = readLong();\n    }\n    return result;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Reads the count of items in the current array or map and skip those items, if possible. If it could skip the items, keep repeating until there are no more items left in the array or map. Arrays are encoded as a series of blocks. Each block consists of a long count value, followed by that many array items. A block with count zero indicates the end of the array. If a block's count is negative, its absolute value is used, and the count is followed immediately by a long block size indicating the number of bytes in the block. If block size is missing, this method return the count of the items found. The client needs to skip the items individually.", "call_func_name": ["org.apache.avro.io.BinaryDecoder.readLong", "org.apache.avro.io.BinaryDecoder.doSkipBytes"], "call_func_parameter": [[""], ["long"]], "passed_comments": "/"}, {"index": "485", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryDecoder.java", "methodName": "org.apache.avro.io.BinaryDecoder.isEnd", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isEnd() throws IOException {\n    if (pos < limit) {\n      return false;\n    }\n    if (source.isEof()) {\n      return true;\n    }\n\n    // read from source.\n    final int read = source.tryReadRaw(buf, 0, buf.length);\n    pos = 0;\n    limit = read;\n    return (0 == read);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the current BinaryDecoder is at the end of its source data and cannot read any further without throwing an EOFException or other IOException. <p/> Not all implementations of BinaryDecoder support isEnd(). Implementations that do not support isEnd() will throw a {@link java.lang.UnsupportedOperationException}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "486", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryDecoder.java", "methodName": "org.apache.avro.io.BinaryDecoder.ensureBounds", "methodParameterType": "int#", "methodParameterName": "num#", "methodBody": "private void ensureBounds(int num) throws IOException {\n    int remaining = limit - pos;\n    if (remaining < num) {\n      // move remaining to front\n      source.compactAndFill(buf, pos, minPos, remaining);\n      if (pos >= limit)\n        throw new EOFException();\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Ensures that buf[pos + num - 1] is not out of the buffer array bounds. However, buf[pos + num -1] may be >= limit if there is not enough data left in the source to fill the array with num bytes. <p/> This method allows readers to read ahead by num bytes safely without checking for EOF at each byte. However, readers must ensure that their reads are valid by checking that their read did not advance past the limit before adjusting pos. <p/> num must be less than the buffer size and greater than 0", "call_func_name": ["java.io.EOFException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "487", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BinaryDecoder.java", "methodName": "org.apache.avro.io.BinaryDecoder.inputStream", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public InputStream inputStream() {\n    return source;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an  {@link java.io.InputStream} that is aware of any buffering thatmay occur in this BinaryDecoder. Readers that need to interleave decoding Avro data with other reads must access this InputStream to do so unless the implementation is 'direct' and does not read beyond the minimum bytes necessary from the source.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "488", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/SkipParser.java", "methodName": "org.apache.avro.io.parsing.SkipParser.skipTo", "methodParameterType": "int#", "methodParameterName": "target#", "methodBody": "public final void skipTo(int target) throws IOException {\n    outer: while (target < pos) {\n      Symbol top = stack[pos - 1];\n      while (top.kind != Symbol.Kind.TERMINAL) {\n        if (top.kind == Symbol.Kind.IMPLICIT_ACTION || top.kind == Symbol.Kind.EXPLICIT_ACTION) {\n          skipHandler.skipAction();\n        } else {\n          --pos;\n          pushProduction(top);\n        }\n        continue outer;\n      }\n      skipHandler.skipTopSymbol();\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#PrefixExpression#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ContinueStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#LabeledStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(LabeledStatement(SimpleName)SimpleName(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ContinueStatement(SimpleName)SimpleName)ContinueStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement)LabeledStatement)Block)MethodDeclaration", "methodDoc": "Skips data by calling <code>skipXyz</code> or <code>readXyz</code> methods on <code>this</code>, until the parser stack reaches the target level.", "call_func_name": ["org.apache.avro.io.parsing.SkipParser.pushProduction"], "call_func_parameter": [["org.apache.avro.io.parsing.Symbol"]], "passed_comments": "/"}, {"index": "489", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/SkipParser.java", "methodName": "org.apache.avro.io.parsing.SkipParser.skipRepeater", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final void skipRepeater() throws IOException {\n    int target = pos;\n    Symbol repeater = stack[--pos];\n    assert repeater.kind == Symbol.Kind.REPEATER;\n    pushProduction(repeater);\n    skipTo(target);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#PrefixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#AssertStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(AssertStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)AssertStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Skips the repeater at the top the stack.", "call_func_name": ["java.lang.AssertionError.<init>", "org.apache.avro.io.parsing.SkipParser.pushProduction", "org.apache.avro.io.parsing.SkipParser.skipTo"], "call_func_parameter": [[""], ["org.apache.avro.io.parsing.Symbol"], ["int"]], "passed_comments": [{"org.apache.avro.io.parsing.SkipParser.skipTo": "Skips data by calling <code>skipXyz</code> or <code>readXyz</code> methods on <code>this</code>, until the parser stack reaches the target level."}]}, {"index": "490", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/SkipParser.java", "methodName": "org.apache.avro.io.parsing.SkipParser.skipSymbol", "methodParameterType": "Symbol#", "methodParameterName": "symToSkip#", "methodBody": "public final void skipSymbol(Symbol symToSkip) throws IOException {\n    int target = pos;\n    pushSymbol(symToSkip);\n    skipTo(target);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Pushes the given symbol on to the skip and skips it.", "call_func_name": ["org.apache.avro.io.parsing.SkipParser.pushSymbol", "org.apache.avro.io.parsing.SkipParser.skipTo"], "call_func_parameter": [["org.apache.avro.io.parsing.Symbol"], ["int"]], "passed_comments": [{"org.apache.avro.io.parsing.SkipParser.skipTo": "Skips data by calling <code>skipXyz</code> or <code>readXyz</code> methods on <code>this</code>, until the parser stack reaches the target level."}]}, {"index": "491", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Parser.java", "methodName": "org.apache.avro.io.parsing.Parser.expandStack", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void expandStack() {\n    stack = Arrays.copyOf(stack, stack.length + Math.max(stack.length, 1024));\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#MethodInvocation#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "If there is no sufficient room in the stack, use this expand it.", "call_func_name": ["java.lang.Math.max", "java.util.Arrays.copyOf"], "call_func_parameter": [["int", "int"], ["java.lang.Object[]", "int"]], "passed_comments": "/"}, {"index": "492", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Parser.java", "methodName": "org.apache.avro.io.parsing.Parser.advance", "methodParameterType": "Symbol#", "methodParameterName": "input#", "methodBody": "public final Symbol advance(Symbol input) throws IOException {\n    for (;;) {\n      Symbol top = stack[--pos];\n      if (top == input) {\n        return top; // A common case\n      }\n\n      Symbol.Kind k = top.kind;\n      if (k == Symbol.Kind.IMPLICIT_ACTION) {\n        Symbol result = symbolHandler.doAction(input, top);\n        if (result != null) {\n          return result;\n        }\n      } else if (k == Symbol.Kind.TERMINAL) {\n        throw new AvroTypeException(\"Attempt to process a \" + input + \" when a \" + top + \" was expected.\");\n      } else if (k == Symbol.Kind.REPEATER && input == ((Symbol.Repeater) top).end) {\n        return input;\n      } else {\n        pushProduction(top);\n      }\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#PrefixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#IfStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ForStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)IfStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Recursively replaces the symbol at the top of the stack with its production, until the top is a terminal. Then checks if the top symbol matches the terminal symbol suppled <tt>terminal</tt>.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroTypeException.<init>", "org.apache.avro.io.parsing.Parser.pushProduction"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["org.apache.avro.io.parsing.Symbol"]], "passed_comments": [{"org.apache.avro.io.parsing.Parser.pushProduction": "Pushes the production for the given symbol <tt>sym</tt>. If <tt>sym</tt> is a repeater and <tt>input</tt> is either  {@link Symbol#ARRAY_END} or{@link Symbol#MAP_END} pushes nothing."}]}, {"index": "493", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Parser.java", "methodName": "org.apache.avro.io.parsing.Parser.processImplicitActions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final void processImplicitActions() throws IOException {\n    while (pos > 1) {\n      Symbol top = stack[pos - 1];\n      if (top.kind == Symbol.Kind.IMPLICIT_ACTION) {\n        pos--;\n        symbolHandler.doAction(null, top);\n      } else if (top.kind != Symbol.Kind.TERMINAL) {\n        pos--;\n        pushProduction(top);\n      } else {\n        break;\n      }\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#BreakStatement#Block#IfStatement#IfStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(BreakStatement)BreakStatement)Block)IfStatement)IfStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Performs any implicit actions at the top the stack, expanding any production (other than the root) that may be encountered. This method will fail if there are any repeaters on the stack.", "call_func_name": ["org.apache.avro.io.parsing.Parser.pushProduction"], "call_func_parameter": [["org.apache.avro.io.parsing.Symbol"]], "passed_comments": [{"org.apache.avro.io.parsing.Parser.pushProduction": "Pushes the production for the given symbol <tt>sym</tt>. If <tt>sym</tt> is a repeater and <tt>input</tt> is either  {@link Symbol#ARRAY_END} or{@link Symbol#MAP_END} pushes nothing."}]}, {"index": "494", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Parser.java", "methodName": "org.apache.avro.io.parsing.Parser.processTrailingImplicitActions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public final void processTrailingImplicitActions() throws IOException {\n    while (pos >= 1) {\n      Symbol top = stack[pos - 1];\n      if (top.kind == Symbol.Kind.IMPLICIT_ACTION && ((Symbol.ImplicitAction) top).isTrailing) {\n        pos--;\n        symbolHandler.doAction(null, top);\n      } else {\n        break;\n      }\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#BreakStatement#Block#IfStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(WhileStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(BreakStatement)BreakStatement)Block)IfStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Performs any \"trailing\" implicit actions at the top the stack.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "495", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Parser.java", "methodName": "org.apache.avro.io.parsing.Parser.pushProduction", "methodParameterType": "Symbol#", "methodParameterName": "sym#", "methodBody": "public final void pushProduction(Symbol sym) {\n    Symbol[] p = sym.production;\n    while (pos + p.length > stack.length) {\n      expandStack();\n    }\n    System.arraycopy(p, 0, stack, pos, p.length);\n    pos += p.length;\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Pushes the production for the given symbol <tt>sym</tt>. If <tt>sym</tt> is a repeater and <tt>input</tt> is either  {@link Symbol#ARRAY_END} or{@link Symbol#MAP_END} pushes nothing.", "call_func_name": ["org.apache.avro.io.parsing.Parser.expandStack", "java.lang.System.arraycopy"], "call_func_parameter": [[""], ["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": [{"org.apache.avro.io.parsing.Parser.expandStack": "If there is no sufficient room in the stack, use this expand it."}]}, {"index": "496", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Parser.java", "methodName": "org.apache.avro.io.parsing.Parser.popSymbol", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Symbol popSymbol() {\n    return stack[--pos];\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#PrefixExpression#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Pops and returns the top symbol from the stack.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "497", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Parser.java", "methodName": "org.apache.avro.io.parsing.Parser.topSymbol", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Symbol topSymbol() {\n    return stack[pos - 1];\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the top symbol from the stack.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "498", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Parser.java", "methodName": "org.apache.avro.io.parsing.Parser.pushSymbol", "methodParameterType": "Symbol#", "methodParameterName": "sym#", "methodBody": "public void pushSymbol(Symbol sym) {\n    if (pos == stack.length) {\n      expandStack();\n    }\n    stack[pos++] = sym;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Pushes <tt>sym</tt> on to the stack.", "call_func_name": ["org.apache.avro.io.parsing.Parser.expandStack"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.io.parsing.Parser.expandStack": "If there is no sufficient room in the stack, use this expand it."}]}, {"index": "499", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Parser.java", "methodName": "org.apache.avro.io.parsing.Parser.depth", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int depth() {\n    return pos;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the depth of the stack.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "500", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java", "methodName": "org.apache.avro.io.parsing.Symbol.Symbol", "methodParameterType": "Kind#", "methodParameterName": "kind#", "methodBody": "protected Symbol(Kind kind) {\n    this(kind, null);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a new symbol of the given kind <tt>kind</tt>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "501", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java", "methodName": "org.apache.avro.io.parsing.Symbol.root", "methodParameterType": "Symbol#", "methodParameterName": "symbols#", "methodBody": "static Symbol root(Symbol... symbols) {\n    return new Root(symbols);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A convenience method to construct a root symbol.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "502", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java", "methodName": "org.apache.avro.io.parsing.Symbol.seq", "methodParameterType": "Symbol#", "methodParameterName": "production#", "methodBody": "static Symbol seq(Symbol... production) {\n    return new Sequence(production);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A convenience method to construct a sequence.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "503", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java", "methodName": "org.apache.avro.io.parsing.Symbol.repeat", "methodParameterType": "Symbol#Symbol#", "methodParameterName": "endSymbol#symsToRepeat#", "methodBody": "static Symbol repeat(Symbol endSymbol, Symbol... symsToRepeat) {\n    return new Repeater(endSymbol, symsToRepeat);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A convenience method to construct a repeater.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "504", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java", "methodName": "org.apache.avro.io.parsing.Symbol.alt", "methodParameterType": "Symbol[]#String[]#", "methodParameterName": "symbols#labels#", "methodBody": "static Symbol alt(Symbol[] symbols, String[] labels) {\n    return new Alternative(symbols, labels);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A convenience method to construct a union.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "505", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java", "methodName": "org.apache.avro.io.parsing.Symbol.error", "methodParameterType": "String#", "methodParameterName": "e#", "methodBody": "static Symbol error(String e) {\n    return new ErrorAction(e);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A convenience method to construct an ErrorAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "506", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java", "methodName": "org.apache.avro.io.parsing.Symbol.resolve", "methodParameterType": "Symbol#Symbol#", "methodParameterName": "w#r#", "methodBody": "static Symbol resolve(Symbol w, Symbol r) {\n    return new ResolvingAction(w, r);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A convenience method to construct a ResolvingAction.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "507", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java", "methodName": "org.apache.avro.io.parsing.Symbol.flatten", "methodParameterType": "Symbol[]#int#Symbol[]#int#Map<Sequence,Sequence>#Map<Sequence,List<Fixup>>#", "methodParameterName": "in#start#out#skip#map#map2#", "methodBody": "static void flatten(Symbol[] in, int start, Symbol[] out, int skip, Map<Sequence, Sequence> map,\n      Map<Sequence, List<Fixup>> map2) {\n    for (int i = start, j = skip; i < in.length; i++) {\n      Symbol s = in[i].flatten(map, map2);\n      if (s instanceof Sequence) {\n        Symbol[] p = s.production;\n        List<Fixup> l = map2.get(s);\n        if (l == null) {\n          System.arraycopy(p, 0, out, j, p.length);\n          // Copy any fixups that will be applied to p to add missing symbols\n          for (List<Fixup> fixups : map2.values()) {\n            copyFixups(fixups, out, j, p);\n          }\n        } else {\n          l.add(new Fixup(out, j));\n        }\n        j += p.length;\n      } else {\n        out[j++] = s;\n      }\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Flattens the given sub-array of symbols into an sub-array of symbols. Every <tt>Sequence</tt> in the input are replaced by its production recursively. Non-<tt>Sequence</tt> symbols, they internally have other symbols those internal symbols also get flattened. When flattening is done, the only place there might be Sequence symbols is in the productions of a Repeater, Alternative, or the symToParse and symToSkip in a UnionAdjustAction or SkipAction. Why is this done? We want our parsers to be fast. If we left the grammars unflattened, then the parser would be constantly copying the contents of nested Sequence productions onto the parsing stack. Instead, because of flattening, we have a long top-level production with no Sequences unless the Sequence is absolutely needed, e.g., in the case of a Repeater or an Alterantive. Well, this is not exactly true when recursion is involved. Where there is a recursive record, that record will be \"inlined\" once, but any internal (ie, recursive) references to that record will be a Sequence for the record. That Sequence will not further inline itself -- it will refer to itself as a Sequence. The same is true for any records nested in this outer recursive record. Recursion is rare, and we want things to be fast in the typical case, which is why we do the flattening optimization. The algorithm does a few tricks to handle recursive symbol definitions. In order to avoid infinite recursion with recursive symbols, we have a map of Symbol->Symbol. Before fully constructing a flattened symbol for a <tt>Sequence</tt> we insert an empty output symbol into the map and then start filling the production for the <tt>Sequence</tt>. If the same <tt>Sequence</tt> is encountered due to recursion, we simply return the (empty) output <tt>Sequence<tt> from the map. Then we actually fill out the production for the <tt>Sequence</tt>. As part of the flattening process we copy the production of <tt>Sequence</tt>s into larger arrays. If the original <tt>Sequence</tt> has not not be fully constructed yet, we copy a bunch of <tt>null</tt>s. Fix-up remembers all those <tt>null</tt> patches. The fix-ups gets finally filled when we know the symbols to occupy those patches.", "call_func_name": ["org.apache.avro.io.parsing.Symbol.flatten", "java.util.Map.get", "java.lang.System.arraycopy", "java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.io.parsing.Symbol.copyFixups", "java.util.List.add"], "call_func_parameter": [["java.util.Map", "java.util.Map"], ["java.lang.Object"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"], [""], [""], [""], [""], ["java.util.List", "org.apache.avro.io.parsing.Symbol[]", "int", "org.apache.avro.io.parsing.Symbol[]"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "508", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java", "methodName": "org.apache.avro.io.parsing.Symbol.flattenedSize", "methodParameterType": "Symbol[]#int#", "methodParameterName": "symbols#start#", "methodBody": "protected static int flattenedSize(Symbol[] symbols, int start) {\n    int result = 0;\n    for (int i = start; i < symbols.length; i++) {\n      if (symbols[i] instanceof Sequence) {\n        Sequence s = (Sequence) symbols[i];\n        result += s.flattenedSize();\n      } else {\n        result += 1;\n      }\n    }\n    return result;\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InstanceofExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the amount of space required to flatten the given sub-array of symbols.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "509", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java", "methodName": "org.apache.avro.io.parsing.Symbol.hasErrors", "methodParameterType": "Symbol#", "methodParameterName": "symbol#", "methodBody": "public static boolean hasErrors(Symbol symbol) {\n    return hasErrors(symbol, new HashSet<>());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the Parser contains any Error symbol, indicating that it may fail for some inputs.", "call_func_name": ["java.util.HashSet.<init>", "org.apache.avro.io.parsing.Symbol.hasErrors"], "call_func_parameter": [[""], ["org.apache.avro.io.parsing.Symbol", "java.util.Set"]], "passed_comments": "/"}, {"index": "510", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/Symbol.java", "methodName": "org.apache.avro.io.parsing.Symbol.enumLabelsAction", "methodParameterType": "List<String>#", "methodParameterName": "symbols#", "methodBody": "public static EnumLabelsAction enumLabelsAction(List<String> symbols) {\n    return new EnumLabelsAction(symbols);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For JSON.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "511", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/JsonGrammarGenerator.java", "methodName": "org.apache.avro.io.parsing.JsonGrammarGenerator.generate", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "@Override\n  public Symbol generate(Schema schema) {\n    return Symbol.root(generate(schema, new HashMap<>()));\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the non-terminal that is the start symbol for the grammar for the grammar for the given schema <tt>sc</tt>.", "call_func_name": ["java.util.HashMap.<init>", "org.apache.avro.io.parsing.JsonGrammarGenerator.generate", "org.apache.avro.io.parsing.Symbol.root"], "call_func_parameter": [[""], ["org.apache.avro.Schema", "java.util.Map"], ["org.apache.avro.io.parsing.Symbol[]"]], "passed_comments": [{"org.apache.avro.io.parsing.JsonGrammarGenerator.generate": "Returns the non-terminal that is the start symbol for grammar of the given schema <tt>sc</tt>. If there is already an entry for the given schema in the given map <tt>seen</tt> then that entry is returned. Otherwise a new symbol is generated and an entry is inserted into the map."}]}, {"index": "512", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/JsonGrammarGenerator.java", "methodName": "org.apache.avro.io.parsing.JsonGrammarGenerator.generate", "methodParameterType": "Schema#Map<LitS,Symbol>#", "methodParameterName": "sc#seen#", "methodBody": "@Override\n  public Symbol generate(Schema sc, Map<LitS, Symbol> seen) {\n    switch (sc.getType()) {\n    case NULL:\n    case BOOLEAN:\n    case INT:\n    case LONG:\n    case FLOAT:\n    case DOUBLE:\n    case STRING:\n    case BYTES:\n    case FIXED:\n    case UNION:\n      return super.generate(sc, seen);\n    case ENUM:\n      return Symbol.seq(Symbol.enumLabelsAction(sc.getEnumSymbols()), Symbol.ENUM);\n    case ARRAY:\n      return Symbol.seq(Symbol.repeat(Symbol.ARRAY_END, Symbol.ITEM_END, generate(sc.getElementType(), seen)),\n          Symbol.ARRAY_START);\n    case MAP:\n      return Symbol.seq(Symbol.repeat(Symbol.MAP_END, Symbol.ITEM_END, generate(sc.getValueType(), seen),\n          Symbol.MAP_KEY_MARKER, Symbol.STRING), Symbol.MAP_START);\n    case RECORD: {\n      LitS wsc = new LitS(sc);\n      Symbol rresult = seen.get(wsc);\n      if (rresult == null) {\n        Symbol[] production = new Symbol[sc.getFields().size() * 3 + 2];\n        rresult = Symbol.seq(production);\n        seen.put(wsc, rresult);\n\n        int i = production.length;\n        int n = 0;\n        production[--i] = Symbol.RECORD_START;\n        for (Field f : sc.getFields()) {\n          production[--i] = Symbol.fieldAdjustAction(n, f.name(), f.aliases());\n          production[--i] = generate(f.schema(), seen);\n          production[--i] = Symbol.FIELD_END;\n          n++;\n        }\n        production[--i] = Symbol.RECORD_END;\n      }\n      return rresult;\n    }\n    default:\n      throw new RuntimeException(\"Unexpected schema type\");\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#PrefixExpression#ArrayAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#PrefixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PrefixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PrefixExpression#ArrayAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#PrefixExpression#ArrayAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SwitchCase#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Returns the non-terminal that is the start symbol for grammar of the given schema <tt>sc</tt>. If there is already an entry for the given schema in the given map <tt>seen</tt> then that entry is returned. Otherwise a new symbol is generated and an entry is inserted into the map.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.io.parsing.ValidatingGrammarGenerator.generate", "org.apache.avro.Schema.getEnumSymbols", "org.apache.avro.io.parsing.Symbol.enumLabelsAction", "org.apache.avro.io.parsing.Symbol.seq", "org.apache.avro.Schema.getElementType", "org.apache.avro.io.parsing.JsonGrammarGenerator.generate", "org.apache.avro.io.parsing.Symbol.repeat", "org.apache.avro.Schema.getValueType", "java.util.Map.get", "org.apache.avro.Schema.getFields", "java.util.List.size", "java.util.Map.put", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.io.parsing.Symbol.fieldAdjustAction", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], ["org.apache.avro.Schema", "java.util.Map"], [""], ["java.util.List"], ["org.apache.avro.io.parsing.Symbol[]"], [""], ["org.apache.avro.Schema", "java.util.Map"], ["org.apache.avro.io.parsing.Symbol", "org.apache.avro.io.parsing.Symbol[]"], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], ["int", "java.lang.String", "java.util.Set"], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.io.parsing.ValidatingGrammarGenerator.generate": "Returns the non-terminal that is the start symbol for the grammar for the given schema <tt>sc</tt>. If there is already an entry for the given schema in the given map <tt>seen</tt> then that entry is returned. Otherwise a new symbol is generated and an entry is inserted into the map."}, {"org.apache.avro.Schema.getEnumSymbols": "If this is an enum, return its symbols."}, {"org.apache.avro.io.parsing.Symbol.enumLabelsAction": "For JSON."}, {"org.apache.avro.Schema.getElementType": "If this is an array, returns its element type."}, {"org.apache.avro.io.parsing.JsonGrammarGenerator.generate": "Returns the non-terminal that is the start symbol for grammar of the given schema <tt>sc</tt>. If there is already an entry for the given schema in the given map <tt>seen</tt> then that entry is returned. Otherwise a new symbol is generated and an entry is inserted into the map."}, {"org.apache.avro.Schema.getValueType": "If this is a map, returns its value type."}, {"org.apache.avro.Schema.getFields": "If this is a record, returns the fields in it. The returned list is in the order of their positions."}]}, {"index": "513", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ValidatingGrammarGenerator.java", "methodName": "org.apache.avro.io.parsing.ValidatingGrammarGenerator.generate", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public Symbol generate(Schema schema) {\n    return Symbol.root(generate(schema, new HashMap<>()));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the non-terminal that is the start symbol for the grammar for the given schema <tt>sc</tt>.", "call_func_name": ["java.util.HashMap.<init>", "org.apache.avro.io.parsing.ValidatingGrammarGenerator.generate", "org.apache.avro.io.parsing.Symbol.root"], "call_func_parameter": [[""], ["org.apache.avro.Schema", "java.util.Map"], ["org.apache.avro.io.parsing.Symbol[]"]], "passed_comments": [{"org.apache.avro.io.parsing.ValidatingGrammarGenerator.generate": "Returns the non-terminal that is the start symbol for the grammar for the given schema <tt>sc</tt>. If there is already an entry for the given schema in the given map <tt>seen</tt> then that entry is returned. Otherwise a new symbol is generated and an entry is inserted into the map."}]}, {"index": "514", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ValidatingGrammarGenerator.java", "methodName": "org.apache.avro.io.parsing.ValidatingGrammarGenerator.generate", "methodParameterType": "Schema#Map<LitS,Symbol>#", "methodParameterName": "sc#seen#", "methodBody": "public Symbol generate(Schema sc, Map<LitS, Symbol> seen) {\n    switch (sc.getType()) {\n    case NULL:\n      return Symbol.NULL;\n    case BOOLEAN:\n      return Symbol.BOOLEAN;\n    case INT:\n      return Symbol.INT;\n    case LONG:\n      return Symbol.LONG;\n    case FLOAT:\n      return Symbol.FLOAT;\n    case DOUBLE:\n      return Symbol.DOUBLE;\n    case STRING:\n      return Symbol.STRING;\n    case BYTES:\n      return Symbol.BYTES;\n    case FIXED:\n      return Symbol.seq(Symbol.intCheckAction(sc.getFixedSize()), Symbol.FIXED);\n    case ENUM:\n      return Symbol.seq(Symbol.intCheckAction(sc.getEnumSymbols().size()), Symbol.ENUM);\n    case ARRAY:\n      return Symbol.seq(Symbol.repeat(Symbol.ARRAY_END, generate(sc.getElementType(), seen)), Symbol.ARRAY_START);\n    case MAP:\n      return Symbol.seq(Symbol.repeat(Symbol.MAP_END, generate(sc.getValueType(), seen), Symbol.STRING),\n          Symbol.MAP_START);\n    case RECORD: {\n      LitS wsc = new LitS(sc);\n      Symbol rresult = seen.get(wsc);\n      if (rresult == null) {\n        Symbol[] production = new Symbol[sc.getFields().size()];\n\n        /**\n         * We construct a symbol without filling the array. Please see\n         * {@link Symbol#production} for the reason.\n         */\n        rresult = Symbol.seq(production);\n        seen.put(wsc, rresult);\n\n        int i = production.length;\n        for (Field f : sc.getFields()) {\n          production[--i] = generate(f.schema(), seen);\n        }\n      }\n      return rresult;\n    }\n    case UNION:\n      List<Schema> subs = sc.getTypes();\n      Symbol[] symbols = new Symbol[subs.size()];\n      String[] labels = new String[subs.size()];\n\n      int i = 0;\n      for (Schema b : sc.getTypes()) {\n        symbols[i] = generate(b, seen);\n        labels[i] = b.getFullName();\n        i++;\n      }\n      return Symbol.seq(Symbol.alt(symbols, labels), Symbol.UNION);\n\n    default:\n      throw new RuntimeException(\"Unexpected schema type\");\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#QualifiedName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#PrefixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Returns the non-terminal that is the start symbol for the grammar for the given schema <tt>sc</tt>. If there is already an entry for the given schema in the given map <tt>seen</tt> then that entry is returned. Otherwise a new symbol is generated and an entry is inserted into the map.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.Schema.getFixedSize", "org.apache.avro.io.parsing.Symbol.intCheckAction", "org.apache.avro.io.parsing.Symbol.seq", "org.apache.avro.Schema.getEnumSymbols", "java.util.List.size", "org.apache.avro.Schema.getElementType", "org.apache.avro.io.parsing.ValidatingGrammarGenerator.generate", "org.apache.avro.io.parsing.Symbol.repeat", "org.apache.avro.Schema.getValueType", "java.util.Map.get", "org.apache.avro.Schema.getFields", "java.util.Map.put", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.Schema.getTypes", "org.apache.avro.Schema.getFullName", "org.apache.avro.io.parsing.Symbol.alt", "java.lang.RuntimeException.<init>"], "call_func_parameter": [[""], [""], ["int"], ["org.apache.avro.io.parsing.Symbol[]"], [""], [""], [""], ["org.apache.avro.Schema", "java.util.Map"], ["org.apache.avro.io.parsing.Symbol", "org.apache.avro.io.parsing.Symbol[]"], [""], ["java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""], [""], ["org.apache.avro.io.parsing.Symbol[]", "java.lang.String[]"], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getFixedSize": "If this is fixed, returns its size."}, {"org.apache.avro.Schema.getEnumSymbols": "If this is an enum, return its symbols."}, {"org.apache.avro.Schema.getElementType": "If this is an array, returns its element type."}, {"org.apache.avro.io.parsing.ValidatingGrammarGenerator.generate": "Returns the non-terminal that is the start symbol for the grammar for the given schema <tt>sc</tt>. If there is already an entry for the given schema in the given map <tt>seen</tt> then that entry is returned. Otherwise a new symbol is generated and an entry is inserted into the map."}, {"org.apache.avro.Schema.getValueType": "If this is a map, returns its value type."}, {"org.apache.avro.Schema.getFields": "If this is a record, returns the fields in it. The returned list is in the order of their positions."}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}, {"org.apache.avro.Schema.getFullName": "If this is a record, enum or fixed, returns its namespace-qualified name, otherwise returns the name of the primitive type."}, {"org.apache.avro.io.parsing.Symbol.alt": "A convenience method to construct a union."}]}, {"index": "515", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java", "methodName": "org.apache.avro.io.parsing.ResolvingGrammarGenerator.generate", "methodParameterType": "Schema#Schema#", "methodParameterName": "writer#reader#", "methodBody": "public final Symbol generate(Schema writer, Schema reader) throws IOException {\n    Resolver.Action r = Resolver.resolve(writer, reader);\n    return Symbol.root(generate(r, new HashMap<>()));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves the writer schema <tt>writer</tt> and the reader schema <tt>reader</tt> and returns the start symbol for the grammar generated.", "call_func_name": ["org.apache.avro.Resolver.resolve", "java.util.HashMap.<init>", "org.apache.avro.io.parsing.Symbol.root"], "call_func_parameter": [["org.apache.avro.Schema", "org.apache.avro.Schema"], [""], ["org.apache.avro.io.parsing.Symbol[]"]], "passed_comments": [{"org.apache.avro.Resolver.resolve": "Uses <tt>GenericData.get()</tt> for the <tt>data</tt> param."}]}, {"index": "516", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java", "methodName": "org.apache.avro.io.parsing.ResolvingGrammarGenerator.generate", "methodParameterType": "Resolver.Action#Map<Object,Symbol>#", "methodParameterName": "action#seen#", "methodBody": "private Symbol generate(Resolver.Action action, Map<Object, Symbol> seen) throws IOException {\n    if (action instanceof Resolver.DoNothing) {\n      return simpleGen(action.writer, seen);\n\n    } else if (action instanceof Resolver.ErrorAction) {\n      return Symbol.error(action.toString());\n\n    } else if (action instanceof Resolver.Skip) {\n      return Symbol.skipAction(simpleGen(action.writer, seen));\n\n    } else if (action instanceof Resolver.Promote) {\n      return Symbol.resolve(simpleGen(action.writer, seen), simpleGen(action.reader, seen));\n\n    } else if (action instanceof Resolver.ReaderUnion) {\n      Resolver.ReaderUnion ru = (Resolver.ReaderUnion) action;\n      Symbol s = generate(ru.actualAction, seen);\n      return Symbol.seq(Symbol.unionAdjustAction(ru.firstMatch, s), Symbol.UNION);\n\n    } else if (action.writer.getType() == Schema.Type.ARRAY) {\n      Symbol es = generate(((Resolver.Container) action).elementAction, seen);\n      return Symbol.seq(Symbol.repeat(Symbol.ARRAY_END, es), Symbol.ARRAY_START);\n\n    } else if (action.writer.getType() == Schema.Type.MAP) {\n      Symbol es = generate(((Resolver.Container) action).elementAction, seen);\n      return Symbol.seq(Symbol.repeat(Symbol.MAP_END, es, Symbol.STRING), Symbol.MAP_START);\n\n    } else if (action.writer.getType() == Schema.Type.UNION) {\n      if (((Resolver.WriterUnion) action).unionEquiv)\n        return simpleGen(action.writer, seen);\n      Resolver.Action[] branches = ((Resolver.WriterUnion) action).actions;\n      Symbol[] symbols = new Symbol[branches.length];\n      String[] labels = new String[branches.length];\n      int i = 0;\n      for (Resolver.Action branch : branches) {\n        symbols[i] = generate(branch, seen);\n        labels[i] = action.writer.getTypes().get(i).getFullName();\n        i++;\n      }\n      return Symbol.seq(Symbol.alt(symbols, labels), Symbol.WRITER_UNION_ACTION);\n    } else if (action instanceof Resolver.EnumAdjust) {\n      Resolver.EnumAdjust e = (Resolver.EnumAdjust) action;\n      Object[] adjs = new Object[e.adjustments.length];\n      for (int i = 0; i < adjs.length; i++)\n        adjs[i] = (0 <= e.adjustments[i] ? new Integer(e.adjustments[i])\n            : \"No match for \" + e.writer.getEnumSymbols().get(i));\n      return Symbol.seq(Symbol.enumAdjustAction(e.reader.getEnumSymbols().size(), adjs), Symbol.ENUM);\n\n    } else if (action instanceof Resolver.RecordAdjust) {\n      Symbol result = seen.get(action);\n      if (result == null) {\n        final Resolver.RecordAdjust ra = (Resolver.RecordAdjust) action;\n        int defaultCount = ra.readerOrder.length - ra.firstDefault;\n        int count = 1 + ra.fieldActions.length + 3 * defaultCount;\n        Symbol[] production = new Symbol[count];\n        result = Symbol.seq(production);\n        seen.put(action, result);\n        production[--count] = Symbol.fieldOrderAction(ra.readerOrder);\n        for (Resolver.Action wfa : ra.fieldActions)\n          production[--count] = generate(wfa, seen);\n        for (int i = ra.firstDefault; i < ra.readerOrder.length; i++) {\n          Schema.Field rf = ra.readerOrder[i];\n          byte[] bb = getBinary(rf.schema(), Accessor.defaultValue(rf));\n          production[--count] = Symbol.defaultStartAction(bb);\n          production[--count] = simpleGen(rf.schema(), seen);\n          production[--count] = Symbol.DEFAULT_END_ACTION;\n        }\n      }\n      return result;\n    }\n\n    throw new IllegalArgumentException(\"Unrecognized Resolver.Action: \" + action);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#InstanceofExpression#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#InstanceofExpression#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#ClassInstanceCreation#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ConditionalExpression#ParenthesizedExpression#Assignment#ExpressionStatement#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#NumberLiteral#SimpleName#InfixExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#PrefixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#PrefixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#EnhancedForStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#PrefixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PrefixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PrefixExpression#ArrayAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#ForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block(IfStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(IfStatement(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess(ReturnStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ParenthesizedExpression(CastExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ParenthesizedExpression(ConditionalExpression(InfixExpression(NumberLiteral)NumberLiteral(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)InfixExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ConditionalExpression)ParenthesizedExpression)Assignment)ExpressionStatement)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)EnhancedForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)ForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Takes a  {@link Resolver.Action} for resolving two schemas and returns thestart symbol for a grammar that implements that resolution. If the action is for a record and there's already a symbol for that record in <tt>seen</tt>, then that symbol is returned. Otherwise a new symbol is generated and returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "517", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java", "methodName": "org.apache.avro.io.parsing.ResolvingGrammarGenerator.getBinary", "methodParameterType": "Schema#JsonNode#", "methodParameterName": "s#n#", "methodBody": "private static byte[] getBinary(Schema s, JsonNode n) throws IOException {\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    Encoder e = factory.binaryEncoder(out, null);\n    encode(e, s, n);\n    e.flush();\n    return out.toByteArray();\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Avro binary encoded version of <tt>n</tt> according to the schema <tt>s</tt>.", "call_func_name": ["java.io.ByteArrayOutputStream.<init>", "org.apache.avro.io.EncoderFactory.binaryEncoder", "org.apache.avro.io.parsing.ResolvingGrammarGenerator.encode", "org.apache.avro.io.Encoder.flush", "java.io.ByteArrayOutputStream.toByteArray"], "call_func_parameter": [[""], ["java.io.OutputStream", "org.apache.avro.io.BinaryEncoder"], ["org.apache.avro.io.Encoder", "org.apache.avro.Schema", "com.fasterxml.jackson.databind.JsonNode"], [""], [""]], "passed_comments": [{"org.apache.avro.io.EncoderFactory.binaryEncoder": "Creates or reinitializes a  {@link BinaryEncoder} with the OutputStreamprovided as the destination for written data. If <i>reuse</i> is provided, an attempt will be made to reconfigure <i>reuse</i> rather than construct a new instance, but this is not guaranteed, a new instance may be returned. <p/> The  {@link BinaryEncoder} implementation returned may buffer its output. Datamay not appear on the underlying OutputStream until  {@link Encoder#flush()}is called. The buffer size is configured with {@link #configureBufferSize(int)}. </p> If buffering is not desired, and lower performance is acceptable, use {@link #directBinaryEncoder(OutputStream,BinaryEncoder)}<p/> {@link BinaryEncoder} instances returned by this method are not thread-safe"}, {"org.apache.avro.io.parsing.ResolvingGrammarGenerator.encode": "Encodes the given Json node <tt>n</tt> on to the encoder <tt>e</tt> according to the schema <tt>s</tt>."}]}, {"index": "518", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/parsing/ResolvingGrammarGenerator.java", "methodName": "org.apache.avro.io.parsing.ResolvingGrammarGenerator.encode", "methodParameterType": "Encoder#Schema#JsonNode#", "methodParameterName": "e#s#n#", "methodBody": "static void encode(Encoder e, Schema s, JsonNode n) throws IOException {\n    switch (s.getType()) {\n    case RECORD:\n      for (Field f : s.getFields()) {\n        String name = f.name();\n        JsonNode v = n.get(name);\n        if (v == null) {\n          v = Accessor.defaultValue(f);\n        }\n        if (v == null) {\n          throw new AvroTypeException(\"No default value for: \" + name);\n        }\n        encode(e, f.schema(), v);\n      }\n      break;\n    case ENUM:\n      e.writeEnum(s.getEnumOrdinal(n.textValue()));\n      break;\n    case ARRAY:\n      e.writeArrayStart();\n      e.setItemCount(n.size());\n      Schema i = s.getElementType();\n      for (JsonNode node : n) {\n        e.startItem();\n        encode(e, i, node);\n      }\n      e.writeArrayEnd();\n      break;\n    case MAP:\n      e.writeMapStart();\n      e.setItemCount(n.size());\n      Schema v = s.getValueType();\n      for (Iterator<String> it = n.fieldNames(); it.hasNext();) {\n        e.startItem();\n        String key = it.next();\n        e.writeString(key);\n        encode(e, v, n.get(key));\n      }\n      e.writeMapEnd();\n      break;\n    case UNION:\n      e.writeIndex(0);\n      encode(e, s.getTypes().get(0), n);\n      break;\n    case FIXED:\n      if (!n.isTextual())\n        throw new AvroTypeException(\"Non-string default value for fixed: \" + n);\n      byte[] bb = n.textValue().getBytes(StandardCharsets.ISO_8859_1);\n      if (bb.length != s.getFixedSize()) {\n        bb = Arrays.copyOf(bb, s.getFixedSize());\n      }\n      e.writeFixed(bb);\n      break;\n    case STRING:\n      if (!n.isTextual())\n        throw new AvroTypeException(\"Non-string default value for string: \" + n);\n      e.writeString(n.textValue());\n      break;\n    case BYTES:\n      if (!n.isTextual())\n        throw new AvroTypeException(\"Non-string default value for bytes: \" + n);\n      e.writeBytes(n.textValue().getBytes(StandardCharsets.ISO_8859_1));\n      break;\n    case INT:\n      if (!n.isNumber())\n        throw new AvroTypeException(\"Non-numeric default value for int: \" + n);\n      e.writeInt(n.intValue());\n      break;\n    case LONG:\n      if (!n.isNumber())\n        throw new AvroTypeException(\"Non-numeric default value for long: \" + n);\n      e.writeLong(n.longValue());\n      break;\n    case FLOAT:\n      if (!n.isNumber())\n        throw new AvroTypeException(\"Non-numeric default value for float: \" + n);\n      e.writeFloat((float) n.doubleValue());\n      break;\n    case DOUBLE:\n      if (!n.isNumber())\n        throw new AvroTypeException(\"Non-numeric default value for double: \" + n);\n      e.writeDouble(n.doubleValue());\n      break;\n    case BOOLEAN:\n      if (!n.isBoolean())\n        throw new AvroTypeException(\"Non-boolean default for boolean: \" + n);\n      e.writeBoolean(n.booleanValue());\n      break;\n    case NULL:\n      if (!n.isNull())\n        throw new AvroTypeException(\"Non-null default value for null type: \" + n);\n      e.writeNull();\n      break;\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#PrimitiveType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Encodes the given Json node <tt>n</tt> on to the encoder <tt>e</tt> according to the schema <tt>s</tt>.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.Schema.getFields", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.fasterxml.jackson.databind.JsonNode.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroTypeException.<init>", "org.apache.avro.io.parsing.ResolvingGrammarGenerator.encode", "com.fasterxml.jackson.databind.JsonNode.textValue", "org.apache.avro.Schema.getEnumOrdinal", "org.apache.avro.io.Encoder.writeEnum", "org.apache.avro.io.Encoder.writeArrayStart", "com.fasterxml.jackson.databind.JsonNode.size", "org.apache.avro.io.Encoder.setItemCount", "org.apache.avro.Schema.getElementType", "com.fasterxml.jackson.databind.JsonNode.iterator", "org.apache.avro.io.Encoder.startItem", "org.apache.avro.io.Encoder.writeArrayEnd", "org.apache.avro.io.Encoder.writeMapStart", "org.apache.avro.Schema.getValueType", "com.fasterxml.jackson.databind.JsonNode.fieldNames", "org.apache.avro.io.Encoder.writeString", "org.apache.avro.io.Encoder.writeMapEnd", "org.apache.avro.io.Encoder.writeIndex", "org.apache.avro.Schema.getTypes", "java.util.List.get", "com.fasterxml.jackson.databind.JsonNode.isTextual", "java.lang.StringBuilder.append", "java.lang.String.getBytes", "org.apache.avro.Schema.getFixedSize", "java.util.Arrays.copyOf", "org.apache.avro.io.Encoder.writeFixed", "org.apache.avro.io.Encoder.writeBytes", "com.fasterxml.jackson.databind.JsonNode.isNumber", "com.fasterxml.jackson.databind.JsonNode.intValue", "org.apache.avro.io.Encoder.writeInt", "com.fasterxml.jackson.databind.JsonNode.longValue", "org.apache.avro.io.Encoder.writeLong", "com.fasterxml.jackson.databind.JsonNode.doubleValue", "org.apache.avro.io.Encoder.writeFloat", "org.apache.avro.io.Encoder.writeDouble", "com.fasterxml.jackson.databind.JsonNode.isBoolean", "com.fasterxml.jackson.databind.JsonNode.booleanValue", "org.apache.avro.io.Encoder.writeBoolean", "com.fasterxml.jackson.databind.JsonNode.isNull", "org.apache.avro.io.Encoder.writeNull"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["org.apache.avro.io.Encoder", "org.apache.avro.Schema", "com.fasterxml.jackson.databind.JsonNode"], [""], ["java.lang.String"], ["int"], [""], [""], ["long"], [""], [""], [""], [""], [""], [""], [""], ["java.lang.String"], [""], ["int"], [""], ["int"], [""], ["java.lang.Object"], ["java.nio.charset.Charset"], [""], ["byte[]", "int"], ["byte[]"], ["byte[]"], [""], [""], ["int"], [""], ["long"], [""], ["float"], ["double"], [""], [""], ["boolean"], [""], [""]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getFields": "If this is a record, returns the fields in it. The returned list is in the order of their positions."}, {"org.apache.avro.io.parsing.ResolvingGrammarGenerator.encode": "Encodes the given Json node <tt>n</tt> on to the encoder <tt>e</tt> according to the schema <tt>s</tt>."}, {"org.apache.avro.Schema.getEnumOrdinal": "If this is an enum, return a symbol's ordinal value."}, {"org.apache.avro.io.Encoder.writeEnum": "Writes an enumeration."}, {"org.apache.avro.io.Encoder.writeArrayStart": "Call this method to start writing an array. When starting to serialize an array, call  {@link #writeArrayStart}. Then, before writing any data for any item call  {@link #setItemCount} followed by asequence of  {@link #startItem()} and the item itself. The number of{@link #startItem()} should match the number specified in{@link #setItemCount}. When actually writing the data of the item, you can call any  {@link Encoder} method (e.g., {@link #writeLong}). When all items of the array have been written, call  {@link #writeArrayEnd}. As an example, let's say you want to write an array of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeArrayStart(); out.setItemCount(list.size()); for (Record r : list) { out.startItem(); out.writeLong(r.longField); out.writeBoolean(r.boolField); } out.writeArrayEnd(); </pre>"}, {"org.apache.avro.io.Encoder.setItemCount": "Call this method before writing a batch of items in an array or a map. Then for each item, call  {@link #startItem()} followed by any of the other writemethods of  {@link Encoder}. The number of calls to  {@link #startItem()} mustbe equal to the count specified in  {@link #setItemCount}. Once a batch is completed you can start another batch with  {@link #setItemCount}."}, {"org.apache.avro.Schema.getElementType": "If this is an array, returns its element type."}, {"org.apache.avro.io.Encoder.startItem": "Start a new item of an array or map. See  {@link #writeArrayStart} for usageinformation."}, {"org.apache.avro.io.Encoder.writeArrayEnd": "Call this method to finish writing an array. See  {@link #writeArrayStart} forusage information."}, {"org.apache.avro.io.Encoder.writeMapStart": "Call this to start a new map. See  {@link #writeArrayStart} for details onusage. As an example of usage, let's say you want to write a map of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeMapStart(); out.setItemCount(list.size()); for (Map.Entry<String, Record> entry : map.entrySet()) { out.startItem(); out.writeString(entry.getKey()); out.writeLong(entry.getValue().longField); out.writeBoolean(entry.getValue().boolField); } out.writeMapEnd(); </pre>"}, {"org.apache.avro.Schema.getValueType": "If this is a map, returns its value type."}, {"org.apache.avro.io.Encoder.writeString": "Write a Unicode character string. The default implementation converts the String to a  {@link org.apache.avro.util.Utf8}. Some Encoder implementations may want to do something different as a performance optimization."}, {"org.apache.avro.io.Encoder.writeMapEnd": "Call this method to terminate the inner-most, currently-opened map. See {@link #writeArrayStart} for more details."}, {"org.apache.avro.io.Encoder.writeIndex": "Call this method to write the tag of a union. As an example of usage, let's say you want to write a union, whose second branch is a record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeIndex(1); out.writeLong(record.longField); out.writeBoolean(record.boolField); </pre>"}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}, {"org.apache.avro.Schema.getFixedSize": "If this is fixed, returns its size."}, {"org.apache.avro.io.Encoder.writeFixed": "A shorthand for <tt>writeFixed(bytes, 0, bytes.length)</tt>"}, {"org.apache.avro.io.Encoder.writeBytes": "Writes a byte string. Equivalent to <tt>writeBytes(bytes, 0, bytes.length)</tt>"}, {"org.apache.avro.io.Encoder.writeInt": "Writes a 32-bit integer."}, {"org.apache.avro.io.Encoder.writeLong": "Write a 64-bit integer."}, {"org.apache.avro.io.Encoder.writeFloat": "Write a float."}, {"org.apache.avro.io.Encoder.writeDouble": "Write a double."}, {"org.apache.avro.io.Encoder.writeBoolean": "Write a boolean value."}, {"org.apache.avro.io.Encoder.writeNull": "\"Writes\" a null value. (Doesn't actually write anything, but advances the state of the parser if this class is stateful.)"}]}, {"index": "519", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DatumReader.java", "methodName": "org.apache.avro.io.DatumReader.setSchema", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "void setSchema(Schema schema);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the writer's schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "520", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DatumReader.java", "methodName": "org.apache.avro.io.DatumReader.read", "methodParameterType": "D#Decoder#", "methodParameterName": "reuse#in#", "methodBody": "D read(D reuse, Decoder in) throws IOException;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Read a datum. Traverse the schema, depth-first, reading all leaf values in the schema into a datum that is returned. If the provided datum is non-null it may be reused and returned.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "521", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeNull", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract void writeNull() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "\"Writes\" a null value. (Doesn't actually write anything, but advances the state of the parser if this class is stateful.)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "522", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeBoolean", "methodParameterType": "boolean#", "methodParameterName": "b#", "methodBody": "public abstract void writeBoolean(boolean b) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write a boolean value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "523", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeInt", "methodParameterType": "int#", "methodParameterName": "n#", "methodBody": "public abstract void writeInt(int n) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Writes a 32-bit integer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "524", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeLong", "methodParameterType": "long#", "methodParameterName": "n#", "methodBody": "public abstract void writeLong(long n) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write a 64-bit integer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "525", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeFloat", "methodParameterType": "float#", "methodParameterName": "f#", "methodBody": "public abstract void writeFloat(float f) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write a float.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "526", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeDouble", "methodParameterType": "double#", "methodParameterName": "d#", "methodBody": "public abstract void writeDouble(double d) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write a double.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "527", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeString", "methodParameterType": "Utf8#", "methodParameterName": "utf8#", "methodBody": "public abstract void writeString(Utf8 utf8) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write a Unicode character string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "528", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeString", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "public void writeString(String str) throws IOException {\n    writeString(new Utf8(str));\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Write a Unicode character string. The default implementation converts the String to a  {@link org.apache.avro.util.Utf8}. Some Encoder implementations may want to do something different as a performance optimization.", "call_func_name": ["org.apache.avro.util.Utf8.<init>", "org.apache.avro.io.Encoder.writeString"], "call_func_parameter": [["java.lang.String"], ["org.apache.avro.util.Utf8"]], "passed_comments": [{"org.apache.avro.io.Encoder.writeString": "Write a Unicode character string."}]}, {"index": "529", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeString", "methodParameterType": "CharSequence#", "methodParameterName": "charSequence#", "methodBody": "public void writeString(CharSequence charSequence) throws IOException {\n    if (charSequence instanceof Utf8)\n      writeString((Utf8) charSequence);\n    else\n      writeString(charSequence.toString());\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Write a Unicode character string. If the CharSequence is an {@link org.apache.avro.util.Utf8} it writes this directly, otherwise theCharSequence is converted to a String via toString() and written.", "call_func_name": ["org.apache.avro.io.Encoder.writeString", "java.lang.CharSequence.toString", "org.apache.avro.io.Encoder.writeString"], "call_func_parameter": [["org.apache.avro.util.Utf8"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.io.Encoder.writeString": "Write a Unicode character string."}, {"org.apache.avro.io.Encoder.writeString": "Write a Unicode character string. The default implementation converts the String to a  {@link org.apache.avro.util.Utf8}. Some Encoder implementations may want to do something different as a performance optimization."}]}, {"index": "530", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeBytes", "methodParameterType": "ByteBuffer#", "methodParameterName": "bytes#", "methodBody": "public abstract void writeBytes(ByteBuffer bytes) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write a byte string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "531", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeBytes", "methodParameterType": "byte[]#int#int#", "methodParameterName": "bytes#start#len#", "methodBody": "public abstract void writeBytes(byte[] bytes, int start, int len) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Write a byte string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "532", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeBytes", "methodParameterType": "byte[]#", "methodParameterName": "bytes#", "methodBody": "public void writeBytes(byte[] bytes) throws IOException {\n    writeBytes(bytes, 0, bytes.length);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Writes a byte string. Equivalent to <tt>writeBytes(bytes, 0, bytes.length)</tt>", "call_func_name": ["org.apache.avro.io.Encoder.writeBytes"], "call_func_parameter": [["byte[]", "int", "int"]], "passed_comments": [{"org.apache.avro.io.Encoder.writeBytes": "Write a byte string."}]}, {"index": "533", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeFixed", "methodParameterType": "byte[]#int#int#", "methodParameterName": "bytes#start#len#", "methodBody": "public abstract void writeFixed(byte[] bytes, int start, int len) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Writes a fixed size binary object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "534", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeFixed", "methodParameterType": "byte[]#", "methodParameterName": "bytes#", "methodBody": "public void writeFixed(byte[] bytes) throws IOException {\n    writeFixed(bytes, 0, bytes.length);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "A shorthand for <tt>writeFixed(bytes, 0, bytes.length)</tt>", "call_func_name": ["org.apache.avro.io.Encoder.writeFixed"], "call_func_parameter": [["byte[]", "int", "int"]], "passed_comments": [{"org.apache.avro.io.Encoder.writeFixed": "Writes a fixed size binary object."}]}, {"index": "535", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeFixed", "methodParameterType": "ByteBuffer#", "methodParameterName": "bytes#", "methodBody": "public void writeFixed(ByteBuffer bytes) throws IOException {\n    int pos = bytes.position();\n    int len = bytes.limit() - pos;\n    if (bytes.hasArray()) {\n      writeFixed(bytes.array(), bytes.arrayOffset() + pos, len);\n    } else {\n      byte[] b = new byte[len];\n      bytes.duplicate().get(b, 0, len);\n      writeFixed(b, 0, len);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Writes a fixed from a ByteBuffer.", "call_func_name": ["java.nio.ByteBuffer.position", "java.nio.ByteBuffer.limit", "java.nio.ByteBuffer.hasArray", "java.nio.ByteBuffer.array", "java.nio.ByteBuffer.arrayOffset", "org.apache.avro.io.Encoder.writeFixed", "java.nio.ByteBuffer.duplicate", "java.nio.ByteBuffer.get"], "call_func_parameter": [[""], [""], [""], [""], [""], ["byte[]", "int", "int"], [""], ["byte[]", "int", "int"]], "passed_comments": [{"org.apache.avro.io.Encoder.writeFixed": "Writes a fixed size binary object."}]}, {"index": "536", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeEnum", "methodParameterType": "int#", "methodParameterName": "e#", "methodBody": "public abstract void writeEnum(int e) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Writes an enumeration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "537", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeArrayStart", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract void writeArrayStart() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Call this method to start writing an array. When starting to serialize an array, call  {@link #writeArrayStart}. Then, before writing any data for any item call  {@link #setItemCount} followed by asequence of  {@link #startItem()} and the item itself. The number of{@link #startItem()} should match the number specified in{@link #setItemCount}. When actually writing the data of the item, you can call any  {@link Encoder} method (e.g., {@link #writeLong}). When all items of the array have been written, call  {@link #writeArrayEnd}. As an example, let's say you want to write an array of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeArrayStart(); out.setItemCount(list.size()); for (Record r : list) { out.startItem(); out.writeLong(r.longField); out.writeBoolean(r.boolField); } out.writeArrayEnd(); </pre>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "538", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.setItemCount", "methodParameterType": "long#", "methodParameterName": "itemCount#", "methodBody": "public abstract void setItemCount(long itemCount) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Call this method before writing a batch of items in an array or a map. Then for each item, call  {@link #startItem()} followed by any of the other writemethods of  {@link Encoder}. The number of calls to  {@link #startItem()} mustbe equal to the count specified in  {@link #setItemCount}. Once a batch is completed you can start another batch with  {@link #setItemCount}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "539", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.startItem", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract void startItem() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Start a new item of an array or map. See  {@link #writeArrayStart} for usageinformation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "540", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeArrayEnd", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract void writeArrayEnd() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Call this method to finish writing an array. See  {@link #writeArrayStart} forusage information.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "541", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeMapStart", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract void writeMapStart() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Call this to start a new map. See  {@link #writeArrayStart} for details onusage. As an example of usage, let's say you want to write a map of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeMapStart(); out.setItemCount(list.size()); for (Map.Entry<String, Record> entry : map.entrySet()) { out.startItem(); out.writeString(entry.getKey()); out.writeLong(entry.getValue().longField); out.writeBoolean(entry.getValue().boolField); } out.writeMapEnd(); </pre>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "542", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeMapEnd", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract void writeMapEnd() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Call this method to terminate the inner-most, currently-opened map. See {@link #writeArrayStart} for more details.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "543", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Encoder.java", "methodName": "org.apache.avro.io.Encoder.writeIndex", "methodParameterType": "int#", "methodParameterName": "unionIndex#", "methodBody": "public abstract void writeIndex(int unionIndex) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Call this method to write the tag of a union. As an example of usage, let's say you want to write a union, whose second branch is a record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> out.writeIndex(1); out.writeLong(record.longField); out.writeBoolean(record.boolField); </pre>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "544", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readNull", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract void readNull() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "\"Reads\" a null value. (Doesn't actually read anything, but advances the state of the parser if the implementation is stateful.)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "545", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readBoolean", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract boolean readBoolean() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads a boolean value written by  {@link Encoder#writeBoolean}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "546", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readInt", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract int readInt() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads an integer written by  {@link Encoder#writeInt}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "547", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readLong", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract long readLong() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads a long written by  {@link Encoder#writeLong}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "548", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readFloat", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract float readFloat() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads a float written by  {@link Encoder#writeFloat}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "549", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readDouble", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract double readDouble() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads a double written by  {@link Encoder#writeDouble}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "550", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readString", "methodParameterType": "Utf8#", "methodParameterName": "old#", "methodBody": "public abstract Utf8 readString(Utf8 old) throws IOException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads a char-string written by  {@link Encoder#writeString}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "551", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String readString() throws IOException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads a char-string written by  {@link Encoder#writeString}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "552", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.skipString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract void skipString() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Discards a char-string written by  {@link Encoder#writeString}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "553", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readBytes", "methodParameterType": "ByteBuffer#", "methodParameterName": "old#", "methodBody": "public abstract ByteBuffer readBytes(ByteBuffer old) throws IOException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads a byte-string written by  {@link Encoder#writeBytes}. if <tt>old</tt> is not null and has sufficient capacity to take in the bytes being read, the bytes are returned in <tt>old</tt>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "554", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.skipBytes", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract void skipBytes() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Discards a byte-string written by  {@link Encoder#writeBytes}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "555", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readFixed", "methodParameterType": "byte[]#int#int#", "methodParameterName": "bytes#start#length#", "methodBody": "public abstract void readFixed(byte[] bytes, int start, int length) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads fixed sized binary object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "556", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readFixed", "methodParameterType": "byte[]#", "methodParameterName": "bytes#", "methodBody": "public void readFixed(byte[] bytes) throws IOException {\n    readFixed(bytes, 0, bytes.length);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "A shorthand for <tt>readFixed(bytes, 0, bytes.length)</tt>.", "call_func_name": ["org.apache.avro.io.Decoder.readFixed"], "call_func_parameter": [["byte[]", "int", "int"]], "passed_comments": [{"org.apache.avro.io.Decoder.readFixed": "Reads fixed sized binary object."}]}, {"index": "557", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.skipFixed", "methodParameterType": "int#", "methodParameterName": "length#", "methodBody": "public abstract void skipFixed(int length) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Discards fixed sized binary object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "558", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readEnum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract int readEnum() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads an enumeration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "559", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readArrayStart", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract long readArrayStart() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads and returns the size of the first block of an array. If this method returns non-zero, then the caller should read the indicated number of items, and then call  {@link #arrayNext} to find out the number of items in the nextblock. The typical pattern for consuming an array looks like: <pre> for(long i = in.readArrayStart(); i != 0; i = in.arrayNext()) { for (long j = 0; j < i; j++) { read next element of the array; } } </pre>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "560", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.arrayNext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract long arrayNext() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Processes the next block of an array and returns the number of items in the block and let's the caller read those items.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "561", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.skipArray", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract long skipArray() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Used for quickly skipping through an array. Note you can either skip the entire array, or read the entire array (with  {@link #readArrayStart}), but you can't mix the two on the same array. This method will skip through as many items as it can, all of them if possible. It will return zero if there are no more items to skip through, or an item count if it needs the client's help in skipping. The typical usage pattern is: <pre> for(long i = in.skipArray(); i != 0; i = i.skipArray()) { for (long j = 0; j < i; j++) { read and discard the next element of the array; } } </pre> Note that this method can automatically skip through items if a byte-count is found in the underlying data, or if a schema has been provided to the implementation, but otherwise the client will have to skip through items itself.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "562", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readMapStart", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract long readMapStart() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads and returns the size of the next block of map-entries. Similar to {@link #readArrayStart}. As an example, let's say you want to read a map of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> Map<String, Record> m = new HashMap<String, Record>(); Record reuse = new Record(); for (long i = in.readMapStart(); i != 0; i = in.readMapNext()) { for (long j = 0; j < i; j++) { String key = in.readString(); reuse.intField = in.readInt(); reuse.boolField = in.readBoolean(); m.put(key, reuse); } } </pre>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "563", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.mapNext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract long mapNext() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Processes the next block of map entries and returns the count of them. Similar to  {@link #arrayNext}. See  {@link #readMapStart} for details.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "564", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.skipMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract long skipMap() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Support for quickly skipping through a map similar to  {@link #skipArray}. As an example, let's say you want to skip a map of records, the record consisting of an Long field and a Boolean field. Your code would look something like this: <pre> for (long i = in.skipMap(); i != 0; i = in.skipMap()) { for (long j = 0; j < i; j++) { in.skipString(); // Discard key in.readInt(); // Discard int-field of value in.readBoolean(); // Discard boolean-field of value } } </pre>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "565", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/Decoder.java", "methodName": "org.apache.avro.io.Decoder.readIndex", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract int readIndex() throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads the tag of a union written by  {@link Encoder#writeIndex}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "566", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BlockingBinaryEncoder.java", "methodName": "org.apache.avro.io.BlockingBinaryEncoder.finishOverflow", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void finishOverflow() throws IOException {\n    BlockedValue s = blockStack[stackTop];\n    if (s.state != BlockedValue.State.OVERFLOW) {\n      throw new IllegalStateException(\"Not an overflow block\");\n    }\n    assert check();\n\n    // Flush any remaining data for this block\n    super.writeFixed(buf, 0, pos);\n    pos = 0;\n\n    // Reset top of stack to be in REGULAR mode\n    s.state = BlockedValue.State.REGULAR;\n    s.start = s.lastFullItem = 0;\n    s.items = 0;\n    assert check();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#MethodInvocation#AssertStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SuperMethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#NumberLiteral#Assignment#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#MethodInvocation#AssertStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(AssertStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)AssertStatement(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)Assignment)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(AssertStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)AssertStatement)Block)MethodDeclaration", "methodDoc": "Called when we've finished writing the last item in an overflow buffer. When this is finished, the top of the stack will be an empty block in the \"regular\" state.", "call_func_name": ["java.lang.IllegalStateException.<init>", "org.apache.avro.io.BlockingBinaryEncoder.check", "java.lang.AssertionError.<init>", "org.apache.avro.io.BufferedBinaryEncoder.writeFixed"], "call_func_parameter": [["java.lang.String"], [""], [""], ["byte[]", "int", "int"]], "passed_comments": "/"}, {"index": "567", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BlockingBinaryEncoder.java", "methodName": "org.apache.avro.io.BlockingBinaryEncoder.compact", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void compact() throws IOException {\n    assert check();\n\n    // Find first REGULAR-state value\n    BlockedValue s = null;\n    int i;\n    for (i = 1; i <= stackTop; i++) {\n      s = blockStack[i];\n      if (s.state == BlockedValue.State.REGULAR)\n        break;\n    }\n    assert s != null;\n\n    // We're going to transition \"s\" into the overflow state. To do\n    // this, We're going to flush any bytes prior to \"s\", then write\n    // any full items of \"s\" into a block, start an overflow\n    // block, write any remaining bytes of \"s\" up to the start of the\n    // next more deeply-nested blocked-value, and finally move over\n    // any remaining bytes (which will be from more deeply-nested\n    // blocked values).\n\n    // Flush any bytes prios to \"s\"\n    super.writeFixed(buf, 0, s.start);\n\n    // Write any full items of \"s\"\n    if (1 < s.items) {\n      super.writeInt(-(s.items - 1));\n      super.writeInt(s.lastFullItem - s.start);\n      super.writeFixed(buf, s.start, s.lastFullItem - s.start);\n      s.start = s.lastFullItem;\n      s.items = 1;\n    }\n\n    // Start an overflow block for s\n    super.writeInt(1);\n\n    // Write any remaining bytes for \"s\", up to the next-most\n    // deeply-nested value\n    BlockedValue n = ((i + 1) <= stackTop ? blockStack[i + 1] : null);\n    int end = (n == null ? pos : n.start);\n    super.writeFixed(buf, s.lastFullItem, end - s.lastFullItem);\n\n    // Move over any bytes that remain (and adjust indices)\n    System.arraycopy(buf, end, buf, 0, pos - end);\n    for (int j = i + 1; j <= stackTop; j++) {\n      n = blockStack[j];\n      n.start -= end;\n      n.lastFullItem -= end;\n    }\n    pos -= end;\n\n    assert s.items == 1;\n    s.start = s.lastFullItem = 0;\n    s.state = BlockedValue.State.OVERFLOW;\n\n    assert check();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#AssertStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#Assignment#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#BreakStatement#IfStatement#Block#ForStatement#SimpleName#NullLiteral#InfixExpression#AssertStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#SuperMethodInvocation#ExpressionStatement#NumberLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ParenthesizedExpression#PrefixExpression#SuperMethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#SuperMethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#SuperMethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#SuperMethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#NullLiteral#ConditionalExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#ConditionalExpression#ParenthesizedExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SuperMethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#AssertStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#NumberLiteral#Assignment#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#AssertStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(AssertStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)AssertStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(BreakStatement)BreakStatement)IfStatement)Block)ForStatement(AssertStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)AssertStatement(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SuperMethodInvocation)ExpressionStatement(IfStatement(InfixExpression(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(PrefixExpression(ParenthesizedExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)PrefixExpression)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)SuperMethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(ConditionalExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(NullLiteral)NullLiteral)ConditionalExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)ParenthesizedExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)SuperMethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(AssertStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)Assignment)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(AssertStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)AssertStatement)Block)MethodDeclaration", "methodDoc": "Only call if you're there are REGULAR-state values on the stack.", "call_func_name": ["org.apache.avro.io.BlockingBinaryEncoder.check", "java.lang.AssertionError.<init>", "org.apache.avro.io.BufferedBinaryEncoder.writeFixed", "org.apache.avro.io.BufferedBinaryEncoder.writeInt", "java.lang.System.arraycopy"], "call_func_parameter": [[""], [""], ["byte[]", "int", "int"], ["int"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": "/"}, {"index": "568", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java", "methodName": "org.apache.avro.io.EncoderFactory.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static EncoderFactory get() {\n    return DEFAULT_FACTORY;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an immutable static DecoderFactory with default configuration. All configuration methods throw AvroRuntimeExceptions if called.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "569", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java", "methodName": "org.apache.avro.io.EncoderFactory.configureBufferSize", "methodParameterType": "int#", "methodParameterName": "size#", "methodBody": "public EncoderFactory configureBufferSize(int size) {\n    if (size < 32)\n      size = 32;\n    if (size > 16 * 1024 * 1024)\n      size = 16 * 1024 * 1024;\n    this.binaryBufferSize = size;\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#IfStatement#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#InfixExpression#InfixExpression#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Configures this factory to use the specified buffer size when creating Encoder instances that buffer their output. The default buffer size is 2048 bytes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "570", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java", "methodName": "org.apache.avro.io.EncoderFactory.getBufferSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getBufferSize() {\n    return this.binaryBufferSize;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns this factory's configured default buffer size. Used when creating Encoder instances that buffer writes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "571", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java", "methodName": "org.apache.avro.io.EncoderFactory.configureBlockSize", "methodParameterType": "int#", "methodParameterName": "size#", "methodBody": "public EncoderFactory configureBlockSize(int size) {\n    if (size < MIN_BLOCK_BUFFER_SIZE)\n      size = MIN_BLOCK_BUFFER_SIZE;\n    if (size > MAX_BLOCK_BUFFER_SIZE)\n      size = MAX_BLOCK_BUFFER_SIZE;\n    this.binaryBlockSize = size;\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Configures this factory to construct blocking BinaryEncoders with the specified block buffer size. The default buffer size is 64", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "572", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java", "methodName": "org.apache.avro.io.EncoderFactory.getBlockSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getBlockSize() {\n    return this.binaryBlockSize;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns this factory's configured default block buffer size. {@link BinaryEncoder} instances created with#blockingBinaryEncoder(OutputStream, BinaryEncoder) will have block buffers of this size. <p/>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "573", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java", "methodName": "org.apache.avro.io.EncoderFactory.binaryEncoder", "methodParameterType": "OutputStream#BinaryEncoder#", "methodParameterName": "out#reuse#", "methodBody": "public BinaryEncoder binaryEncoder(OutputStream out, BinaryEncoder reuse) {\n    if (null == reuse || !reuse.getClass().equals(BufferedBinaryEncoder.class)) {\n      return new BufferedBinaryEncoder(out, this.binaryBufferSize);\n    } else {\n      return ((BufferedBinaryEncoder) reuse).configure(out, this.binaryBufferSize);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates or reinitializes a  {@link BinaryEncoder} with the OutputStreamprovided as the destination for written data. If <i>reuse</i> is provided, an attempt will be made to reconfigure <i>reuse</i> rather than construct a new instance, but this is not guaranteed, a new instance may be returned. <p/> The  {@link BinaryEncoder} implementation returned may buffer its output. Datamay not appear on the underlying OutputStream until  {@link Encoder#flush()}is called. The buffer size is configured with {@link #configureBufferSize(int)}. </p> If buffering is not desired, and lower performance is acceptable, use {@link #directBinaryEncoder(OutputStream,BinaryEncoder)}<p/> {@link BinaryEncoder} instances returned by this method are not thread-safe", "call_func_name": ["java.lang.Object.getClass", "java.lang.Object.equals", "org.apache.avro.io.BufferedBinaryEncoder.<init>", "org.apache.avro.io.BufferedBinaryEncoder.configure"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.io.OutputStream", "int"], ["java.io.OutputStream", "int"]], "passed_comments": "/"}, {"index": "574", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java", "methodName": "org.apache.avro.io.EncoderFactory.directBinaryEncoder", "methodParameterType": "OutputStream#BinaryEncoder#", "methodParameterName": "out#reuse#", "methodBody": "public BinaryEncoder directBinaryEncoder(OutputStream out, BinaryEncoder reuse) {\n    if (null == reuse || !reuse.getClass().equals(DirectBinaryEncoder.class)) {\n      return new DirectBinaryEncoder(out);\n    } else {\n      return ((DirectBinaryEncoder) reuse).configure(out);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates or reinitializes a  {@link BinaryEncoder} with the OutputStreamprovided as the destination for written data. If <i>reuse</i> is provided, an attempt will be made to reconfigure <i>reuse</i> rather than construct a new instance, but this is not guaranteed, a new instance may be returned. <p/> The  {@link BinaryEncoder} implementation returned does not buffer its output,calling  {@link Encoder#flush()} will simply cause the wrapped OutputStream tobe flushed. <p/> Performance of unbuffered writes can be significantly slower than buffered writes.  {@link #binaryEncoder(OutputStream,BinaryEncoder)} returnsBinaryEncoder instances that are tuned for performance but may buffer output. The unbuffered, 'direct' encoder may be desired when buffering semantics are problematic, or if the lifetime of the encoder is so short that the buffer would not be useful. <p/> {@link BinaryEncoder} instances returned by this method are not thread-safe.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Object.equals", "org.apache.avro.io.DirectBinaryEncoder.<init>", "org.apache.avro.io.DirectBinaryEncoder.configure"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.io.OutputStream"], ["java.io.OutputStream"]], "passed_comments": "/"}, {"index": "575", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java", "methodName": "org.apache.avro.io.EncoderFactory.blockingBinaryEncoder", "methodParameterType": "OutputStream#BinaryEncoder#", "methodParameterName": "out#reuse#", "methodBody": "public BinaryEncoder blockingBinaryEncoder(OutputStream out, BinaryEncoder reuse) {\n    int blockSize = this.binaryBlockSize;\n    int bufferSize = (blockSize * 2 >= this.binaryBufferSize) ? 32 : this.binaryBufferSize;\n    if (null == reuse || !reuse.getClass().equals(BlockingBinaryEncoder.class)) {\n      return new BlockingBinaryEncoder(out, blockSize, bufferSize);\n    } else {\n      return ((BlockingBinaryEncoder) reuse).configure(out, blockSize, bufferSize);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#InfixExpression#ParenthesizedExpression#NumberLiteral#ThisExpression#SimpleName#FieldAccess#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates or reinitializes a  {@link BinaryEncoder} with the OutputStreamprovided as the destination for written data. If <i>reuse</i> is provided, an attempt will be made to reconfigure <i>reuse</i> rather than construct a new instance, but this is not guaranteed, a new instance may be returned. <p/> The  {@link BinaryEncoder} implementation returned buffers its output, calling{@link Encoder#flush()} is required for output to appear on the underlyingOutputStream. <p/> The returned BinaryEncoder implements the Avro binary encoding using blocks delimited with byte sizes for Arrays and Maps. This allows for some decoders to skip over large Arrays or Maps without decoding the contents, but adds some overhead. The default block size is configured with {@link #configureBlockSize(int)}<p/> {@link BinaryEncoder} instances returned by this method are not thread-safe.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Object.equals", "org.apache.avro.io.BlockingBinaryEncoder.<init>", "org.apache.avro.io.BlockingBinaryEncoder.configure"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.io.OutputStream", "int", "int"], ["java.io.OutputStream", "int", "int"]], "passed_comments": "/"}, {"index": "576", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java", "methodName": "org.apache.avro.io.EncoderFactory.jsonEncoder", "methodParameterType": "Schema#OutputStream#", "methodParameterName": "schema#out#", "methodBody": "public JsonEncoder jsonEncoder(Schema schema, OutputStream out) throws IOException {\n    return new JsonEncoder(schema, out);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link JsonEncoder} using the OutputStream provided for writingdata conforming to the Schema provided. <p/> {@link JsonEncoder} buffers its output. Data may not appear on the underlyingOutputStream until  {@link Encoder#flush()} is called.<p/> {@link JsonEncoder} is not thread-safe.", "call_func_name": ["org.apache.avro.io.JsonEncoder.<init>"], "call_func_parameter": [["org.apache.avro.Schema", "java.io.OutputStream"]], "passed_comments": "/"}, {"index": "577", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java", "methodName": "org.apache.avro.io.EncoderFactory.jsonEncoder", "methodParameterType": "Schema#OutputStream#boolean#", "methodParameterName": "schema#out#pretty#", "methodBody": "public JsonEncoder jsonEncoder(Schema schema, OutputStream out, boolean pretty) throws IOException {\n    return new JsonEncoder(schema, out, pretty);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link JsonEncoder} using the OutputStream provided for writingdata conforming to the Schema provided with optional pretty printing. <p/> {@link JsonEncoder} buffers its output. Data may not appear on the underlyingOutputStream until  {@link Encoder#flush()} is called.<p/> {@link JsonEncoder} is not thread-safe.", "call_func_name": ["org.apache.avro.io.JsonEncoder.<init>"], "call_func_parameter": [["org.apache.avro.Schema", "java.io.OutputStream", "boolean"]], "passed_comments": "/"}, {"index": "578", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java", "methodName": "org.apache.avro.io.EncoderFactory.jsonEncoder", "methodParameterType": "Schema#JsonGenerator#", "methodParameterName": "schema#gen#", "methodBody": "JsonEncoder jsonEncoder(Schema schema, JsonGenerator gen) throws IOException {\n    return new JsonEncoder(schema, gen);\n  }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link JsonEncoder} using the {@link JsonGenerator} provided foroutput of data conforming to the Schema provided. <p/> {@link JsonEncoder} buffers its output. Data may not appear on the underlyingoutput until  {@link Encoder#flush()} is called.<p/> {@link JsonEncoder} is not thread-safe.", "call_func_name": ["org.apache.avro.io.JsonEncoder.<init>"], "call_func_parameter": [["org.apache.avro.Schema", "com.fasterxml.jackson.core.JsonGenerator"]], "passed_comments": "/"}, {"index": "579", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/EncoderFactory.java", "methodName": "org.apache.avro.io.EncoderFactory.validatingEncoder", "methodParameterType": "Schema#Encoder#", "methodParameterName": "schema#encoder#", "methodBody": "public ValidatingEncoder validatingEncoder(Schema schema, Encoder encoder) throws IOException {\n    return new ValidatingEncoder(schema, encoder);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link ValidatingEncoder} that wraps the Encoder provided. ThisValidatingEncoder will ensure that operations against it conform to the schema provided. <p/> Many  {@link Encoder}s buffer their output. Data may not appear on the underlying output until  {@link Encoder#flush()} is called.<p/> {@link ValidatingEncoder} is not thread-safe.", "call_func_name": ["org.apache.avro.io.ValidatingEncoder.<init>"], "call_func_parameter": [["org.apache.avro.Schema", "org.apache.avro.io.Encoder"]], "passed_comments": "/"}, {"index": "580", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BufferedBinaryEncoder.java", "methodName": "org.apache.avro.io.BufferedBinaryEncoder.flushBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void flushBuffer() throws IOException {\n    if (pos > 0) {\n      try {\n        sink.innerWrite(buf, 0, pos);\n      } finally {\n        pos = 0;\n      }\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Flushes the internal buffer to the underlying output. Does not flush the underlying output.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "581", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/BufferedBinaryEncoder.java", "methodName": "org.apache.avro.io.BufferedBinaryEncoder.ensureBounds", "methodParameterType": "int#", "methodParameterName": "num#", "methodBody": "private void ensureBounds(int num) throws IOException {\n    int remaining = buf.length - pos;\n    if (remaining < num) {\n      flushBuffer();\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Ensures that the buffer has at least num bytes free to write to between its current position and the end. This will not expand the buffer larger than its current size, for writes larger than or near to the size of the buffer, we flush the buffer and write directly to the output, bypassing the buffer.", "call_func_name": ["org.apache.avro.io.BufferedBinaryEncoder.flushBuffer"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.io.BufferedBinaryEncoder.flushBuffer": "Flushes the internal buffer to the underlying output. Does not flush the underlying output."}]}, {"index": "582", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.DecoderFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DecoderFactory() {\n    super();\n  }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor for factory instances", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "583", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.defaultFactory", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Deprecated\n  public static DecoderFactory defaultFactory() {\n    return get();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated use the equivalent {@link #get()} instead", "call_func_name": ["org.apache.avro.io.DecoderFactory.get"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.io.DecoderFactory.get": "Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions. All creator methods create objects with default settings."}]}, {"index": "584", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static DecoderFactory get() {\n    return DEFAULT_FACTORY;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions. All creator methods create objects with default settings.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "585", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.configureDecoderBufferSize", "methodParameterType": "int#", "methodParameterName": "size#", "methodBody": "public DecoderFactory configureDecoderBufferSize(int size) {\n    if (size < 32)\n      size = 32;\n    if (size > 16 * 1024 * 1024)\n      size = 16 * 1024 * 1024;\n    this.binaryDecoderBufferSize = size;\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#IfStatement#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#InfixExpression#InfixExpression#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Configures this factory to use the specified buffer size when creating Decoder instances that buffer their input. The default buffer size is 8192 bytes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "586", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.getConfiguredBufferSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getConfiguredBufferSize() {\n    return this.binaryDecoderBufferSize;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns this factory's configured preferred buffer size. Used when creating Decoder instances that buffer. See  {@link #configureDecoderBufferSize}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "587", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.createBinaryDecoder", "methodParameterType": "InputStream#BinaryDecoder#", "methodParameterName": "in#reuse#", "methodBody": "@Deprecated\n  public BinaryDecoder createBinaryDecoder(InputStream in, BinaryDecoder reuse) {\n    return binaryDecoder(in, reuse);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated use the equivalent{@link #binaryDecoder(InputStream,BinaryDecoder)} instead", "call_func_name": ["org.apache.avro.io.DecoderFactory.binaryDecoder"], "call_func_parameter": [["java.io.InputStream", "org.apache.avro.io.BinaryDecoder"]], "passed_comments": [{"org.apache.avro.io.DecoderFactory.binaryDecoder": "Creates or reinitializes a  {@link BinaryDecoder} with the input streamprovided as the source of data. If <i>reuse</i> is provided, it will be reinitialized to the given input stream. <p/> {@link BinaryDecoder} instances returned by this method buffer their input,reading up to  {@link #getConfiguredBufferSize()} bytes past the minimumrequired to satisfy read requests in order to achieve better performance. If the buffering is not desired, use {@link #directBinaryDecoder(InputStream,BinaryDecoder)}. <p/> {@link BinaryDecoder#inputStream()} provides a view on the data that isbuffer-aware, for users that need to interleave access to data with the Decoder API."}]}, {"index": "588", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.binaryDecoder", "methodParameterType": "InputStream#BinaryDecoder#", "methodParameterName": "in#reuse#", "methodBody": "public BinaryDecoder binaryDecoder(InputStream in, BinaryDecoder reuse) {\n    if (null == reuse || !reuse.getClass().equals(BinaryDecoder.class)) {\n      return new BinaryDecoder(in, binaryDecoderBufferSize);\n    } else {\n      return reuse.configure(in, binaryDecoderBufferSize);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates or reinitializes a  {@link BinaryDecoder} with the input streamprovided as the source of data. If <i>reuse</i> is provided, it will be reinitialized to the given input stream. <p/> {@link BinaryDecoder} instances returned by this method buffer their input,reading up to  {@link #getConfiguredBufferSize()} bytes past the minimumrequired to satisfy read requests in order to achieve better performance. If the buffering is not desired, use {@link #directBinaryDecoder(InputStream,BinaryDecoder)}. <p/> {@link BinaryDecoder#inputStream()} provides a view on the data that isbuffer-aware, for users that need to interleave access to data with the Decoder API.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Object.equals", "org.apache.avro.io.BinaryDecoder.<init>", "org.apache.avro.io.BinaryDecoder.configure"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.io.InputStream", "int"], ["java.io.InputStream", "int"]], "passed_comments": "/"}, {"index": "589", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.directBinaryDecoder", "methodParameterType": "InputStream#BinaryDecoder#", "methodParameterName": "in#reuse#", "methodBody": "public BinaryDecoder directBinaryDecoder(InputStream in, BinaryDecoder reuse) {\n    if (null == reuse || !reuse.getClass().equals(DirectBinaryDecoder.class)) {\n      return new DirectBinaryDecoder(in);\n    } else {\n      return ((DirectBinaryDecoder) reuse).configure(in);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates or reinitializes a  {@link BinaryDecoder} with the input streamprovided as the source of data. If <i>reuse</i> is provided, it will be reinitialized to the given input stream. <p/> {@link BinaryDecoder} instances returned by this method do not buffer theirinput. In most cases a buffering BinaryDecoder is sufficient in combination with  {@link BinaryDecoder#inputStream()} which provides a buffer-aware viewon the data. <p/> A \"direct\" BinaryDecoder does not read ahead from an InputStream or other data source that cannot be rewound. From the perspective of a client, a \"direct\" decoder must never read beyond the minimum necessary bytes to service a  {@link BinaryDecoder} API read request.<p/> In the case that the improved performance of a buffering implementation does not outweigh the inconvenience of its buffering semantics, a \"direct\" decoder can be used.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Object.equals", "org.apache.avro.io.DirectBinaryDecoder.<init>", "org.apache.avro.io.DirectBinaryDecoder.configure"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.io.InputStream"], ["java.io.InputStream"]], "passed_comments": "/"}, {"index": "590", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.createBinaryDecoder", "methodParameterType": "byte[]#int#int#BinaryDecoder#", "methodParameterName": "bytes#offset#length#reuse#", "methodBody": "@Deprecated\n  public BinaryDecoder createBinaryDecoder(byte[] bytes, int offset, int length, BinaryDecoder reuse) {\n    if (null == reuse || !reuse.getClass().equals(BinaryDecoder.class)) {\n      return new BinaryDecoder(bytes, offset, length);\n    } else {\n      return reuse.configure(bytes, offset, length);\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "@deprecated use {@link #binaryDecoder(byte[],int,int,BinaryDecoder)}instead", "call_func_name": ["java.lang.Object.getClass", "java.lang.Object.equals", "org.apache.avro.io.BinaryDecoder.<init>", "org.apache.avro.io.BinaryDecoder.configure"], "call_func_parameter": [[""], ["java.lang.Object"], ["byte[]", "int", "int"], ["byte[]", "int", "int"]], "passed_comments": "/"}, {"index": "591", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.binaryDecoder", "methodParameterType": "byte[]#int#int#BinaryDecoder#", "methodParameterName": "bytes#offset#length#reuse#", "methodBody": "public BinaryDecoder binaryDecoder(byte[] bytes, int offset, int length, BinaryDecoder reuse) {\n    if (null == reuse || !reuse.getClass().equals(BinaryDecoder.class)) {\n      return new BinaryDecoder(bytes, offset, length);\n    } else {\n      return reuse.configure(bytes, offset, length);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates or reinitializes a  {@link BinaryDecoder} with the byte array providedas the source of data. If <i>reuse</i> is provided, it will attempt to reinitialize <i>reuse</i> to the new byte array. This instance will use the provided byte array as its buffer. <p/> {@link BinaryDecoder#inputStream()} provides a view on the data that isbuffer-aware and can provide a view of the data not yet read by Decoder API methods.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Object.equals", "org.apache.avro.io.BinaryDecoder.<init>", "org.apache.avro.io.BinaryDecoder.configure"], "call_func_parameter": [[""], ["java.lang.Object"], ["byte[]", "int", "int"], ["byte[]", "int", "int"]], "passed_comments": "/"}, {"index": "592", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.createBinaryDecoder", "methodParameterType": "byte[]#BinaryDecoder#", "methodParameterName": "bytes#reuse#", "methodBody": "@Deprecated\n  public BinaryDecoder createBinaryDecoder(byte[] bytes, BinaryDecoder reuse) {\n    return binaryDecoder(bytes, 0, bytes.length, reuse);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@deprecated use {@link #binaryDecoder(byte[],BinaryDecoder)} instead", "call_func_name": ["org.apache.avro.io.DecoderFactory.binaryDecoder"], "call_func_parameter": [["byte[]", "int", "int", "org.apache.avro.io.BinaryDecoder"]], "passed_comments": [{"org.apache.avro.io.DecoderFactory.binaryDecoder": "Creates or reinitializes a  {@link BinaryDecoder} with the byte array providedas the source of data. If <i>reuse</i> is provided, it will attempt to reinitialize <i>reuse</i> to the new byte array. This instance will use the provided byte array as its buffer. <p/> {@link BinaryDecoder#inputStream()} provides a view on the data that isbuffer-aware and can provide a view of the data not yet read by Decoder API methods."}]}, {"index": "593", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.binaryDecoder", "methodParameterType": "byte[]#BinaryDecoder#", "methodParameterName": "bytes#reuse#", "methodBody": "public BinaryDecoder binaryDecoder(byte[] bytes, BinaryDecoder reuse) {\n    return binaryDecoder(bytes, 0, bytes.length, reuse);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method is shorthand for <pre> createBinaryDecoder(bytes, 0, bytes.length, reuse); </pre> {@link #binaryDecoder(byte[],int,int,BinaryDecoder)}", "call_func_name": ["org.apache.avro.io.DecoderFactory.binaryDecoder"], "call_func_parameter": [["byte[]", "int", "int", "org.apache.avro.io.BinaryDecoder"]], "passed_comments": [{"org.apache.avro.io.DecoderFactory.binaryDecoder": "Creates or reinitializes a  {@link BinaryDecoder} with the byte array providedas the source of data. If <i>reuse</i> is provided, it will attempt to reinitialize <i>reuse</i> to the new byte array. This instance will use the provided byte array as its buffer. <p/> {@link BinaryDecoder#inputStream()} provides a view on the data that isbuffer-aware and can provide a view of the data not yet read by Decoder API methods."}]}, {"index": "594", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.jsonDecoder", "methodParameterType": "Schema#InputStream#", "methodParameterName": "schema#input#", "methodBody": "public JsonDecoder jsonDecoder(Schema schema, InputStream input) throws IOException {\n    return new JsonDecoder(schema, input);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link JsonDecoder} using the InputStream provided for reading datathat conforms to the Schema provided. <p/>", "call_func_name": ["org.apache.avro.io.JsonDecoder.<init>"], "call_func_parameter": [["org.apache.avro.Schema", "java.io.InputStream"]], "passed_comments": "/"}, {"index": "595", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.jsonDecoder", "methodParameterType": "Schema#String#", "methodParameterName": "schema#input#", "methodBody": "public JsonDecoder jsonDecoder(Schema schema, String input) throws IOException {\n    return new JsonDecoder(schema, input);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link JsonDecoder} using the String provided for reading data thatconforms to the Schema provided. <p/>", "call_func_name": ["org.apache.avro.io.JsonDecoder.<init>"], "call_func_parameter": [["org.apache.avro.Schema", "java.lang.String"]], "passed_comments": "/"}, {"index": "596", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.validatingDecoder", "methodParameterType": "Schema#Decoder#", "methodParameterName": "schema#wrapped#", "methodBody": "public ValidatingDecoder validatingDecoder(Schema schema, Decoder wrapped) throws IOException {\n    return new ValidatingDecoder(schema, wrapped);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link ValidatingDecoder} wrapping the Decoder provided. ThisValidatingDecoder will ensure that operations against it conform to the schema provided.", "call_func_name": ["org.apache.avro.io.ValidatingDecoder.<init>"], "call_func_parameter": [["org.apache.avro.Schema", "org.apache.avro.io.Decoder"]], "passed_comments": "/"}, {"index": "597", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/DecoderFactory.java", "methodName": "org.apache.avro.io.DecoderFactory.resolvingDecoder", "methodParameterType": "Schema#Schema#Decoder#", "methodParameterName": "writer#reader#wrapped#", "methodBody": "public ResolvingDecoder resolvingDecoder(Schema writer, Schema reader, Decoder wrapped) throws IOException {\n    return new ResolvingDecoder(writer, reader, wrapped);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a  {@link ResolvingDecoder} wrapping the Decoder provided. ThisResolvingDecoder will resolve input conforming to the <i>writer</i> schema from the wrapped Decoder, and present it as the <i>reader</i> schema.", "call_func_name": ["org.apache.avro.io.ResolvingDecoder.<init>"], "call_func_parameter": [["org.apache.avro.Schema", "org.apache.avro.Schema", "org.apache.avro.io.Decoder"]], "passed_comments": "/"}, {"index": "598", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/JsonEncoder.java", "methodName": "org.apache.avro.io.JsonEncoder.configure", "methodParameterType": "OutputStream#", "methodParameterName": "out#", "methodBody": "public JsonEncoder configure(OutputStream out) throws IOException {\n    this.configure(getJsonGenerator(out, false));\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Reconfigures this JsonEncoder to use the output stream provided. <p/> If the OutputStream provided is null, a NullPointerException is thrown. <p/> Otherwise, this JsonEncoder will flush its current output and then reconfigure its output to use a default UTF8 JsonGenerator that writes to the provided OutputStream.", "call_func_name": ["org.apache.avro.io.JsonEncoder.getJsonGenerator", "org.apache.avro.io.JsonEncoder.configure"], "call_func_parameter": [["java.io.OutputStream", "boolean"], ["com.fasterxml.jackson.core.JsonGenerator"]], "passed_comments": [{"org.apache.avro.io.JsonEncoder.configure": "Reconfigures this JsonEncoder to output to the JsonGenerator provided. <p/> If the JsonGenerator provided is null, a NullPointerException is thrown. <p/> Otherwise, this JsonEncoder will flush its current output and then reconfigure its output to use the provided JsonGenerator."}]}, {"index": "599", "file": "/root/repos/repos8/avro/lang/java/avro/src/main/java/org/apache/avro/io/JsonEncoder.java", "methodName": "org.apache.avro.io.JsonEncoder.configure", "methodParameterType": "JsonGenerator#", "methodParameterName": "generator#", "methodBody": "private JsonEncoder configure(JsonGenerator generator) throws IOException {\n    if (null == generator)\n      throw new NullPointerException(\"JsonGenerator cannot be null\");\n    if (null != parser) {\n      flush();\n    }\n    this.out = generator;\n    return this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Reconfigures this JsonEncoder to output to the JsonGenerator provided. <p/> If the JsonGenerator provided is null, a NullPointerException is thrown. <p/> Otherwise, this JsonEncoder will flush its current output and then reconfigure its output to use the provided JsonGenerator.", "call_func_name": ["java.lang.NullPointerException.<init>", "org.apache.avro.io.JsonEncoder.flush"], "call_func_parameter": [["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "600", "file": "/root/repos/repos8/avro/lang/java/protobuf/src/main/java/org/apache/avro/protobuf/ProtobufData.java", "methodName": "org.apache.avro.protobuf.ProtobufData.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ProtobufData get() {\n    return INSTANCE;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the singleton instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "601", "file": "/root/repos/repos8/avro/lang/java/protobuf/src/main/java/org/apache/avro/protobuf/ProtobufData.java", "methodName": "org.apache.avro.protobuf.ProtobufData.getSchema", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "public Schema getSchema(Class c) {\n    Schema schema = schemaCache.get(c);\n\n    if (schema == null) { // cache miss\n      try {\n        Object descriptor = c.getMethod(\"getDescriptor\").invoke(null);\n        if (c.isEnum())\n          schema = getSchema((EnumDescriptor) descriptor);\n        else\n          schema = getSchema((Descriptor) descriptor);\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      schemaCache.put(c, schema); // update cache\n    }\n    return schema;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#Assignment#ExpressionStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)Assignment)ExpressionStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a record schema given a protobuf message class.", "call_func_name": ["java.util.Map.get", "java.lang.Class.getMethod", "java.lang.reflect.Method.invoke", "java.lang.Class.isEnum", "java.lang.RuntimeException.<init>", "java.util.Map.put"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String", "java.lang.Class[]"], ["java.lang.Object", "java.lang.Object[]"], [""], ["java.lang.Throwable"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "602", "file": "/root/repos/repos8/avro/lang/java/protobuf/src/main/java/org/apache/avro/protobuf/ProtobufData.java", "methodName": "org.apache.avro.protobuf.ProtobufData.getConversionByDescriptor", "methodParameterType": "Descriptor#", "methodParameterName": "descriptor#", "methodBody": "private Conversion getConversionByDescriptor(Descriptor descriptor) {\n    String namespace = getNamespace(descriptor.getFile(), descriptor.getContainingType());\n    String name = descriptor.getName();\n    String dot = namespace.endsWith(\"$\") ? \"\" : \".\"; // back-compatibly handle $\n\n    try {\n      Class clazz = ClassUtils.forName(getClassLoader(), namespace + dot + name);\n      return getConversionByClass(clazz);\n    } catch (ClassNotFoundException e) {\n      return null;\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#StringLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Get Conversion from protobuf descriptor via protobuf classname.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "603", "file": "/root/repos/repos8/avro/lang/java/protobuf/src/main/java/org/apache/avro/protobuf/ProtobufDatumReader.java", "methodName": "org.apache.avro.protobuf.ProtobufDatumReader.ProtobufDatumReader", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public ProtobufDatumReader(Schema schema) {\n    this(schema, schema, ProtobufData.get());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct where the writer's and reader's schemas are the same.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "604", "file": "/root/repos/repos8/avro/lang/java/protobuf/src/main/java/org/apache/avro/protobuf/ProtobufDatumReader.java", "methodName": "org.apache.avro.protobuf.ProtobufDatumReader.ProtobufDatumReader", "methodParameterType": "Schema#Schema#", "methodParameterName": "writer#reader#", "methodBody": "public ProtobufDatumReader(Schema writer, Schema reader) {\n    this(writer, reader, ProtobufData.get());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct given writer's and reader's schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "605", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Responder.java", "methodName": "org.apache.avro.ipc.Responder.getRemote", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static Protocol getRemote() {\n    return REMOTE.get();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the remote protocol. Accesses a  {@link ThreadLocal} that's set aroundcalls to  {@link #respond(Protocol.Message,Object)}.", "call_func_name": ["java.lang.ThreadLocal.get"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "606", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Responder.java", "methodName": "org.apache.avro.ipc.Responder.getLocal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Protocol getLocal() {\n    return local;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the local protocol.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "607", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Responder.java", "methodName": "org.apache.avro.ipc.Responder.addRPCPlugin", "methodParameterType": "RPCPlugin#", "methodParameterName": "plugin#", "methodBody": "public void addRPCPlugin(RPCPlugin plugin) {\n    rpcMetaPlugins.add(plugin);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a new plugin to manipulate per-call metadata. Plugins are executed in the order that they are added.", "call_func_name": ["java.util.List.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "608", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Responder.java", "methodName": "org.apache.avro.ipc.Responder.respond", "methodParameterType": "List<ByteBuffer>#", "methodParameterName": "buffers#", "methodBody": "public List<ByteBuffer> respond(List<ByteBuffer> buffers) throws IOException {\n    return respond(buffers, null);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by a server to deserialize a request, compute and serialize a response or error.", "call_func_name": ["org.apache.avro.ipc.Responder.respond"], "call_func_parameter": [["java.util.List", "org.apache.avro.ipc.Transceiver"]], "passed_comments": [{"org.apache.avro.ipc.Responder.respond": "Called by a server to deserialize a request, compute and serialize a response or error. Transceiver is used by connection-based servers to track handshake status of connection."}]}, {"index": "609", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Responder.java", "methodName": "org.apache.avro.ipc.Responder.respond", "methodParameterType": "List<ByteBuffer>#Transceiver#", "methodParameterName": "buffers#connection#", "methodBody": "public List<ByteBuffer> respond(List<ByteBuffer> buffers, Transceiver connection) throws IOException {\n    Decoder in = DecoderFactory.get().binaryDecoder(new ByteBufferInputStream(buffers), null);\n    ByteBufferOutputStream bbo = new ByteBufferOutputStream();\n    BinaryEncoder out = EncoderFactory.get().binaryEncoder(bbo, null);\n    Exception error = null;\n    RPCContext context = new RPCContext();\n    List<ByteBuffer> payload = null;\n    List<ByteBuffer> handshake = null;\n    boolean wasConnected = connection != null && connection.isConnected();\n    try {\n      Protocol remote = handshake(in, out, connection);\n      out.flush();\n      if (remote == null) // handshake failed\n        return bbo.getBufferList();\n      handshake = bbo.getBufferList();\n\n      // read request using remote protocol specification\n      context.setRequestCallMeta(META_READER.read(null, in));\n      String messageName = in.readString(null).toString();\n      if (messageName.equals(\"\")) // a handshake ping\n        return handshake;\n      Message rm = remote.getMessages().get(messageName);\n      if (rm == null)\n        throw new AvroRuntimeException(\"No such remote message: \" + messageName);\n      Message m = getLocal().getMessages().get(messageName);\n      if (m == null)\n        throw new AvroRuntimeException(\"No message named \" + messageName + \" in \" + getLocal());\n\n      Object request = readRequest(rm.getRequest(), m.getRequest(), in);\n\n      context.setMessage(rm);\n      for (RPCPlugin plugin : rpcMetaPlugins) {\n        plugin.serverReceiveRequest(context);\n      }\n\n      // create response using local protocol specification\n      if ((m.isOneWay() != rm.isOneWay()) && wasConnected)\n        throw new AvroRuntimeException(\"Not both one-way: \" + messageName);\n\n      Object response = null;\n\n      try {\n        REMOTE.set(remote);\n        response = respond(m, request);\n        context.setResponse(response);\n      } catch (Exception e) {\n        error = e;\n        context.setError(error);\n        LOG.warn(\"user error\", e);\n      } finally {\n        REMOTE.set(null);\n      }\n\n      if (m.isOneWay() && wasConnected) // no response data\n        return null;\n\n      out.writeBoolean(error != null);\n      if (error == null)\n        writeResponse(m.getResponse(), response, out);\n      else\n        try {\n          writeError(m.getErrors(), error, out);\n        } catch (UnresolvedUnionException e) { // unexpected error\n          throw error;\n        }\n    } catch (Exception e) { // system error\n      LOG.warn(\"system error\", e);\n      context.setError(e);\n      bbo = new ByteBufferOutputStream();\n      out = EncoderFactory.get().binaryEncoder(bbo, null);\n      out.writeBoolean(true);\n      writeError(Protocol.SYSTEM_ERRORS, new Utf8(e.toString()), out);\n      if (null == handshake) {\n        handshake = new ByteBufferOutputStream().getBufferList();\n      }\n    }\n    out.flush();\n    payload = bbo.getBufferList();\n\n    // Grab meta-data from plugins\n    context.setResponsePayload(payload);\n    for (RPCPlugin plugin : rpcMetaPlugins) {\n      plugin.serverSendResponse(context);\n    }\n    META_WRITER.write(context.responseCallMeta(), out);\n    out.flush();\n    // Prepend handshake and append payload\n    bbo.prepend(handshake);\n    bbo.append(payload);\n\n    return bbo.getBufferList();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)TryStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Called by a server to deserialize a request, compute and serialize a response or error. Transceiver is used by connection-based servers to track handshake status of connection.", "call_func_name": ["org.apache.avro.io.DecoderFactory.get", "org.apache.avro.util.ByteBufferInputStream.<init>", "org.apache.avro.io.DecoderFactory.binaryDecoder", "org.apache.avro.util.ByteBufferOutputStream.<init>", "org.apache.avro.io.EncoderFactory.get", "org.apache.avro.io.EncoderFactory.binaryEncoder", "org.apache.avro.ipc.RPCContext.<init>", "org.apache.avro.ipc.Transceiver.isConnected", "org.apache.avro.ipc.Responder.handshake", "org.apache.avro.io.BinaryEncoder.flush", "org.apache.avro.util.ByteBufferOutputStream.getBufferList", "org.apache.avro.generic.GenericDatumReader.read", "org.apache.avro.ipc.RPCContext.setRequestCallMeta", "org.apache.avro.io.Decoder.readString", "org.apache.avro.util.Utf8.toString", "java.lang.String.equals", "org.apache.avro.Protocol.getMessages", "java.util.Map.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>", "org.apache.avro.ipc.Responder.getLocal", "java.lang.StringBuilder.append", "org.apache.avro.ipc.Responder.readRequest", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.ipc.RPCPlugin.serverReceiveRequest", "java.lang.ThreadLocal.set", "org.apache.avro.ipc.RPCContext.setResponse", "org.apache.avro.ipc.RPCContext.setError", "org.slf4j.Logger.warn", "org.apache.avro.io.BinaryEncoder.writeBoolean", "org.apache.avro.ipc.Responder.writeResponse", "org.apache.avro.ipc.Responder.writeError", "java.lang.Exception.toString", "org.apache.avro.util.Utf8.<init>", "org.apache.avro.ipc.RPCContext.setResponsePayload", "org.apache.avro.ipc.RPCPlugin.serverSendResponse", "org.apache.avro.ipc.RPCContext.responseCallMeta", "org.apache.avro.generic.GenericDatumWriter.write", "org.apache.avro.util.ByteBufferOutputStream.prepend", "org.apache.avro.util.ByteBufferOutputStream.append"], "call_func_parameter": [[""], ["java.util.List"], ["java.io.InputStream", "org.apache.avro.io.BinaryDecoder"], [""], [""], ["java.io.OutputStream", "org.apache.avro.io.BinaryEncoder"], [""], [""], ["org.apache.avro.io.Decoder", "org.apache.avro.io.Encoder", "org.apache.avro.ipc.Transceiver"], [""], [""], ["java.lang.Object", "org.apache.avro.io.Decoder"], ["java.util.Map"], ["org.apache.avro.util.Utf8"], [""], ["java.lang.Object"], [""], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["org.apache.avro.Schema", "org.apache.avro.Schema", "org.apache.avro.io.Decoder"], [""], [""], [""], ["org.apache.avro.ipc.RPCContext"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Exception"], ["java.lang.String", "java.lang.Throwable"], ["boolean"], ["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"], ["org.apache.avro.Schema", "java.lang.Object", "org.apache.avro.io.Encoder"], [""], ["java.lang.String"], ["java.util.List"], ["org.apache.avro.ipc.RPCContext"], [""], ["java.lang.Object", "org.apache.avro.io.Encoder"], ["java.util.List"], ["java.util.List"]], "passed_comments": [{"org.apache.avro.io.DecoderFactory.get": "Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions. All creator methods create objects with default settings."}, {"org.apache.avro.io.DecoderFactory.binaryDecoder": "Creates or reinitializes a  {@link BinaryDecoder} with the input streamprovided as the source of data. If <i>reuse</i> is provided, it will be reinitialized to the given input stream. <p/> {@link BinaryDecoder} instances returned by this method buffer their input,reading up to  {@link #getConfiguredBufferSize()} bytes past the minimumrequired to satisfy read requests in order to achieve better performance. If the buffering is not desired, use {@link #directBinaryDecoder(InputStream,BinaryDecoder)}. <p/> {@link BinaryDecoder#inputStream()} provides a view on the data that isbuffer-aware, for users that need to interleave access to data with the Decoder API."}, {"org.apache.avro.io.EncoderFactory.get": "Returns an immutable static DecoderFactory with default configuration. All configuration methods throw AvroRuntimeExceptions if called."}, {"org.apache.avro.io.EncoderFactory.binaryEncoder": "Creates or reinitializes a  {@link BinaryEncoder} with the OutputStreamprovided as the destination for written data. If <i>reuse</i> is provided, an attempt will be made to reconfigure <i>reuse</i> rather than construct a new instance, but this is not guaranteed, a new instance may be returned. <p/> The  {@link BinaryEncoder} implementation returned may buffer its output. Datamay not appear on the underlying OutputStream until  {@link Encoder#flush()}is called. The buffer size is configured with {@link #configureBufferSize(int)}. </p> If buffering is not desired, and lower performance is acceptable, use {@link #directBinaryEncoder(OutputStream,BinaryEncoder)}<p/> {@link BinaryEncoder} instances returned by this method are not thread-safe"}, {"org.apache.avro.ipc.Transceiver.isConnected": "True if a handshake has been completed for this connection. Used to determine whether a handshake need be completed prior to a one-way message. Requests and responses are always prefixed by handshakes, but one-way messages. If the first request sent over a connection is one-way, then a handshake-only response is returned. Subsequent one-way messages over the connection will have no response data sent. Returns false by default."}, {"org.apache.avro.util.ByteBufferOutputStream.getBufferList": "Returns all data written and resets the stream to be empty."}, {"org.apache.avro.io.Decoder.readString": "Reads a char-string written by  {@link Encoder#writeString}."}, {"org.apache.avro.Protocol.getMessages": "The messages of this protocol."}, {"org.apache.avro.ipc.Responder.getLocal": "Return the local protocol."}, {"org.apache.avro.ipc.Responder.readRequest": "Reads a request message."}, {"org.apache.avro.ipc.RPCPlugin.serverReceiveRequest": "This method is invoked at the RPC server when the request is received, but before the call itself is executed"}, {"org.apache.avro.ipc.Responder.writeResponse": "Writes a response message."}, {"org.apache.avro.ipc.Responder.writeError": "Writes an error message."}, {"org.apache.avro.ipc.RPCContext.setResponsePayload": "Sets the serialized payload of the response in this RPC. Will not include handshake or meta-data."}, {"org.apache.avro.ipc.RPCPlugin.serverSendResponse": "This method is invoked at the server before the response is executed, but before the response has been formulated"}, {"org.apache.avro.ipc.RPCContext.responseCallMeta": "This is an access method for the per-call state provided by the server back to the client."}, {"org.apache.avro.util.ByteBufferOutputStream.prepend": "Prepend a list of ByteBuffers to this stream."}, {"org.apache.avro.util.ByteBufferOutputStream.append": "Append a list of ByteBuffers to this stream."}]}, {"index": "610", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Responder.java", "methodName": "org.apache.avro.ipc.Responder.respond", "methodParameterType": "Message#Object#", "methodParameterName": "message#request#", "methodBody": "public abstract Object respond(Message message, Object request) throws Exception;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Computes the response for a message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "611", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Responder.java", "methodName": "org.apache.avro.ipc.Responder.readRequest", "methodParameterType": "Schema#Schema#Decoder#", "methodParameterName": "actual#expected#in#", "methodBody": "public abstract Object readRequest(Schema actual, Schema expected, Decoder in) throws IOException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads a request message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "612", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Responder.java", "methodName": "org.apache.avro.ipc.Responder.writeResponse", "methodParameterType": "Schema#Object#Encoder#", "methodParameterName": "schema#response#out#", "methodBody": "public abstract void writeResponse(Schema schema, Object response, Encoder out) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Writes a response message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "613", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Responder.java", "methodName": "org.apache.avro.ipc.Responder.writeError", "methodParameterType": "Schema#Object#Encoder#", "methodParameterName": "schema#error#out#", "methodBody": "public abstract void writeError(Schema schema, Object error, Encoder out) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Writes an error message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "614", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Ipc.java", "methodName": "org.apache.avro.ipc.Ipc.createTransceiver", "methodParameterType": "URI#", "methodParameterName": "uri#", "methodBody": "public static Transceiver createTransceiver(URI uri) throws IOException {\n    if (\"http\".equals(uri.getScheme()))\n      return new HttpTransceiver(uri.toURL());\n    else if (\"avro\".equals(uri.getScheme()))\n      return new SaslSocketTransceiver(new InetSocketAddress(uri.getHost(), uri.getPort()));\n    else\n      throw new IOException(\"unknown uri scheme: \" + uri);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Create a client  {@link Transceiver} connecting to the provided URI.", "call_func_name": ["java.net.URI.getScheme", "java.lang.String.equals", "java.net.URI.toURL", "org.apache.avro.ipc.HttpTransceiver.<init>", "java.net.URI.getHost", "java.net.URI.getPort", "java.net.InetSocketAddress.<init>", "org.apache.avro.ipc.SaslSocketTransceiver.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.io.IOException.<init>"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.net.URL"], [""], [""], ["java.lang.String", "int"], ["java.net.SocketAddress"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "615", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Ipc.java", "methodName": "org.apache.avro.ipc.Ipc.createServer", "methodParameterType": "Responder#URI#", "methodParameterName": "responder#uri#", "methodBody": "public static Server createServer(Responder responder, URI uri) throws IOException {\n    if (\"avro\".equals(uri.getScheme())) {\n      return new SaslSocketServer(responder, new InetSocketAddress(uri.getHost(), uri.getPort()));\n    } else if (\"http\".equals(uri.getScheme())) {\n      if (!warned) {\n        LoggerFactory.getLogger(Ipc.class)\n            .error(\"Using Ipc.createServer to create http instances is deprecated.  Create \"\n                + \" an instance of org.apache.avro.ipc.jetty.HttpServer directly.\");\n        warned = true;\n      }\n      try {\n        Class<?> cls = Class.forName(\"org.apache.avro.ipc.jetty.HttpServer\");\n        return (Server) cls.getConstructor(Responder.class, Integer.TYPE).newInstance(responder, uri.getPort());\n      } catch (Throwable t) {\n        // ignore, exception will be thrown\n      }\n    }\n    throw new IOException(\"unknown uri scheme: \" + uri);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#IfStatement#IfStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)CastExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)IfStatement)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Create a  {@link Server} listening at the named URI using the providedresponder.", "call_func_name": ["java.net.URI.getScheme", "java.lang.String.equals", "java.net.URI.getHost", "java.net.URI.getPort", "java.net.InetSocketAddress.<init>", "org.apache.avro.ipc.SaslSocketServer.<init>", "org.slf4j.LoggerFactory.getLogger", "org.slf4j.Logger.error", "java.lang.Class.forName", "java.lang.Class.getConstructor", "java.lang.Integer.valueOf", "java.lang.reflect.Constructor.newInstance", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.io.IOException.<init>"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""], ["java.lang.String", "int"], ["org.apache.avro.ipc.Responder", "java.net.SocketAddress"], ["java.lang.Class"], ["java.lang.String"], ["java.lang.String"], ["java.lang.Class[]"], ["int"], ["java.lang.Object[]"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "616", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/SaslSocketTransceiver.java", "methodName": "org.apache.avro.ipc.SaslSocketTransceiver.SaslSocketTransceiver", "methodParameterType": "SocketAddress#", "methodParameterName": "address#", "methodBody": "public SaslSocketTransceiver(SocketAddress address) throws IOException {\n    this(address, new AnonymousClient());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create using SASL's anonymous (<a href=\"https://www.ietf.org/rfc/rfc2245.txt\">RFC 2245) mechanism.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "617", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/SaslSocketTransceiver.java", "methodName": "org.apache.avro.ipc.SaslSocketTransceiver.SaslSocketTransceiver", "methodParameterType": "SocketAddress#SaslClient#", "methodParameterName": "address#saslClient#", "methodBody": "public SaslSocketTransceiver(SocketAddress address, SaslClient saslClient) throws IOException {\n    this.sasl = new SaslParticipant(saslClient);\n    this.channel = SocketChannel.open(address);\n    this.channel.socket().setTcpNoDelay(true);\n    LOG.debug(\"open to {}\", getRemoteName());\n    open(true);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create using the specified  {@link SaslClient}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "618", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/SaslSocketTransceiver.java", "methodName": "org.apache.avro.ipc.SaslSocketTransceiver.SaslSocketTransceiver", "methodParameterType": "SocketChannel#SaslServer#", "methodParameterName": "channel#saslServer#", "methodBody": "public SaslSocketTransceiver(SocketChannel channel, SaslServer saslServer) throws IOException {\n    this.sasl = new SaslParticipant(saslServer);\n    this.channel = channel;\n    LOG.debug(\"open from {}\", getRemoteName());\n    open(false);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create using the specified  {@link SaslServer}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "619", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Requestor.java", "methodName": "org.apache.avro.ipc.Requestor.addRPCPlugin", "methodParameterType": "RPCPlugin#", "methodParameterName": "plugin#", "methodBody": "public void addRPCPlugin(RPCPlugin plugin) {\n    rpcMetaPlugins.add(plugin);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a new plugin to manipulate RPC metadata. Plugins are executed in the order that they are added.", "call_func_name": ["java.util.List.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "620", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Requestor.java", "methodName": "org.apache.avro.ipc.Requestor.request", "methodParameterType": "String#Object#", "methodParameterName": "messageName#request#", "methodBody": "public Object request(String messageName, Object request) throws Exception {\n    // Initialize request\n    Request rpcRequest = new Request(messageName, request, new RPCContext());\n    CallFuture<Object> future = /* only need a Future for two-way messages */\n        rpcRequest.getMessage().isOneWay() ? null : new CallFuture<>();\n\n    // Send request\n    request(rpcRequest, future);\n\n    if (future == null) // the message is one-way, so return immediately\n      return null;\n    try { // the message is two-way, wait for the result\n      return future.get();\n    } catch (ExecutionException e) {\n      Throwable error = e.getCause();\n      if (error instanceof Exception) {\n        throw (Exception) error;\n      } else {\n        throw new AvroRuntimeException(error);\n      }\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ThrowStatement#Block#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ThrowStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ThrowStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Writes a request message and reads a response or error message.", "call_func_name": ["org.apache.avro.ipc.RPCContext.<init>", "org.apache.avro.ipc.CallFuture.<init>", "org.apache.avro.ipc.CallFuture.get", "java.util.concurrent.ExecutionException.getCause", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "621", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Requestor.java", "methodName": "org.apache.avro.ipc.Requestor.request", "methodParameterType": "String#Object#Callback<T>#", "methodParameterName": "messageName#request#callback#", "methodBody": "public <T> void request(String messageName, Object request, Callback<T> callback)\n      throws AvroRemoteException, IOException {\n    request(new Request(messageName, request, new RPCContext()), callback);\n  }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Writes a request message and returns the result through a Callback. Clients can also use a Future interface by creating a new CallFuture<T>, passing it in as the Callback parameter, and then waiting on that Future.", "call_func_name": ["org.apache.avro.ipc.RPCContext.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "622", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Requestor.java", "methodName": "org.apache.avro.ipc.Requestor.request", "methodParameterType": "Request#Callback<T>#", "methodParameterName": "request#callback#", "methodBody": "<T> void request(Request request, Callback<T> callback) throws AvroRemoteException, IOException {\n    Transceiver t = getTransceiver();\n    if (!t.isConnected()) {\n      // Acquire handshake lock so that only one thread is performing the\n      // handshake and other threads block until the handshake is completed\n      handshakeLock.lock();\n      try {\n        if (t.isConnected()) {\n          // Another thread already completed the handshake; no need to hold\n          // the write lock\n          handshakeLock.unlock();\n        } else {\n          CallFuture<T> callFuture = new CallFuture<>(callback);\n          t.transceive(request.getBytes(), new TransceiverCallback<>(request, callFuture));\n          try {\n            // Block until handshake complete\n            callFuture.await();\n          } catch (InterruptedException e) {\n            // Restore the interrupted status\n            Thread.currentThread().interrupt();\n          }\n          if (request.getMessage().isOneWay()) {\n            Throwable error = callFuture.getError();\n            if (error != null) {\n              if (error instanceof AvroRemoteException) {\n                throw (AvroRemoteException) error;\n              } else if (error instanceof AvroRuntimeException) {\n                throw (AvroRuntimeException) error;\n              } else if (error instanceof IOException) {\n                throw (IOException) error;\n              } else {\n                throw new AvroRuntimeException(error);\n              }\n            }\n          }\n          return;\n        }\n      } finally {\n        if (handshakeLock.isHeldByCurrentThread()) {\n          handshakeLock.unlock();\n        }\n      }\n    }\n\n    if (request.getMessage().isOneWay()) {\n      t.lockChannel();\n      try {\n        t.writeBuffers(request.getBytes());\n        if (callback != null) {\n          callback.handleResult(null);\n        }\n      } finally {\n        t.unlockChannel();\n      }\n    } else {\n      t.transceive(request.getBytes(), new TransceiverCallback<>(request, callback));\n    }\n\n  }", "AST": "Javadoc#SimpleName#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ThrowStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ThrowStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ThrowStatement#Block#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#IfStatement#Block#IfStatement#Block#IfStatement#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ThrowStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ThrowStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ThrowStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ThrowStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ThrowStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ThrowStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)IfStatement)Block)IfStatement)Block)IfStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Writes a request message and returns the result through a Callback.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "623", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Requestor.java", "methodName": "org.apache.avro.ipc.Requestor.getRemote", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Protocol getRemote() throws IOException {\n    if (remote != null)\n      return remote; // already have it\n    MD5 remoteHash = REMOTE_HASHES.get(transceiver.getRemoteName());\n    if (remoteHash != null) {\n      remote = REMOTE_PROTOCOLS.get(remoteHash);\n      if (remote != null)\n        return remote; // already cached\n    }\n    handshakeLock.lock();\n    try {\n      // force handshake\n      ByteBufferOutputStream bbo = new ByteBufferOutputStream();\n      // direct because the payload is tiny.\n      Encoder out = ENCODER_FACTORY.directBinaryEncoder(bbo, null);\n      writeHandshake(out);\n      out.writeInt(0); // empty metadata\n      out.writeString(\"\"); // bogus message name\n      List<ByteBuffer> response = getTransceiver().transceive(bbo.getBufferList());\n      ByteBufferInputStream bbi = new ByteBufferInputStream(response);\n      BinaryDecoder in = DecoderFactory.get().binaryDecoder(bbi, null);\n      readHandshake(in);\n      return this.remote;\n    } finally {\n      handshakeLock.unlock();\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Return the remote protocol. Force a handshake if required.", "call_func_name": ["org.apache.avro.ipc.Transceiver.getRemoteName", "java.util.concurrent.ConcurrentMap.get", "java.util.concurrent.locks.ReentrantLock.lock", "org.apache.avro.util.ByteBufferOutputStream.<init>", "org.apache.avro.io.EncoderFactory.directBinaryEncoder", "org.apache.avro.ipc.Requestor.writeHandshake", "org.apache.avro.io.Encoder.writeInt", "org.apache.avro.io.Encoder.writeString", "org.apache.avro.ipc.Requestor.getTransceiver", "org.apache.avro.util.ByteBufferOutputStream.getBufferList", "org.apache.avro.ipc.Transceiver.transceive", "org.apache.avro.util.ByteBufferInputStream.<init>", "org.apache.avro.io.DecoderFactory.get", "org.apache.avro.io.DecoderFactory.binaryDecoder", "org.apache.avro.ipc.Requestor.readHandshake", "java.util.concurrent.locks.ReentrantLock.unlock"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""], ["java.io.OutputStream", "org.apache.avro.io.BinaryEncoder"], ["org.apache.avro.io.Encoder"], ["int"], ["java.lang.String"], [""], [""], ["java.util.List"], ["java.util.List"], [""], ["java.io.InputStream", "org.apache.avro.io.BinaryDecoder"], ["org.apache.avro.io.Decoder"], [""]], "passed_comments": [{"org.apache.avro.io.EncoderFactory.directBinaryEncoder": "Creates or reinitializes a  {@link BinaryEncoder} with the OutputStreamprovided as the destination for written data. If <i>reuse</i> is provided, an attempt will be made to reconfigure <i>reuse</i> rather than construct a new instance, but this is not guaranteed, a new instance may be returned. <p/> The  {@link BinaryEncoder} implementation returned does not buffer its output,calling  {@link Encoder#flush()} will simply cause the wrapped OutputStream tobe flushed. <p/> Performance of unbuffered writes can be significantly slower than buffered writes.  {@link #binaryEncoder(OutputStream,BinaryEncoder)} returnsBinaryEncoder instances that are tuned for performance but may buffer output. The unbuffered, 'direct' encoder may be desired when buffering semantics are problematic, or if the lifetime of the encoder is so short that the buffer would not be useful. <p/> {@link BinaryEncoder} instances returned by this method are not thread-safe."}, {"org.apache.avro.io.Encoder.writeInt": "Writes a 32-bit integer."}, {"org.apache.avro.io.Encoder.writeString": "Write a Unicode character string. The default implementation converts the String to a  {@link org.apache.avro.util.Utf8}. Some Encoder implementations may want to do something different as a performance optimization."}, {"org.apache.avro.util.ByteBufferOutputStream.getBufferList": "Returns all data written and resets the stream to be empty."}, {"org.apache.avro.ipc.Transceiver.transceive": "Called by  {@link Requestor#request(String,Object)} for two-way messages. Bydefault calls  {@link #writeBuffers(List)} followed by {@link #readBuffers()}."}, {"org.apache.avro.io.DecoderFactory.get": "Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions. All creator methods create objects with default settings."}, {"org.apache.avro.io.DecoderFactory.binaryDecoder": "Creates or reinitializes a  {@link BinaryDecoder} with the input streamprovided as the source of data. If <i>reuse</i> is provided, it will be reinitialized to the given input stream. <p/> {@link BinaryDecoder} instances returned by this method buffer their input,reading up to  {@link #getConfiguredBufferSize()} bytes past the minimumrequired to satisfy read requests in order to achieve better performance. If the buffering is not desired, use {@link #directBinaryDecoder(InputStream,BinaryDecoder)}. <p/> {@link BinaryDecoder#inputStream()} provides a view on the data that isbuffer-aware, for users that need to interleave access to data with the Decoder API."}]}, {"index": "624", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Requestor.java", "methodName": "org.apache.avro.ipc.Requestor.writeRequest", "methodParameterType": "Schema#Object#Encoder#", "methodParameterName": "schema#request#out#", "methodBody": "public abstract void writeRequest(Schema schema, Object request, Encoder out) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Writes a request message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "625", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Requestor.java", "methodName": "org.apache.avro.ipc.Requestor.readResponse", "methodParameterType": "Schema#Schema#Decoder#", "methodParameterName": "writer#reader#in#", "methodBody": "public abstract Object readResponse(Schema writer, Schema reader, Decoder in) throws IOException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads a response message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "626", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Requestor.java", "methodName": "org.apache.avro.ipc.Requestor.readError", "methodParameterType": "Schema#Schema#Decoder#", "methodParameterName": "writer#reader#in#", "methodBody": "public abstract Exception readError(Schema writer, Schema reader, Decoder in) throws IOException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Reads an error message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "627", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCPlugin.java", "methodName": "org.apache.avro.ipc.RPCPlugin.clientStartConnect", "methodParameterType": "RPCContext#", "methodParameterName": "context#", "methodBody": "public void clientStartConnect(RPCContext context) {\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Called on the client before the initial RPC handshake to setup any handshake metadata for this plugin", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "628", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCPlugin.java", "methodName": "org.apache.avro.ipc.RPCPlugin.serverConnecting", "methodParameterType": "RPCContext#", "methodParameterName": "context#", "methodBody": "public void serverConnecting(RPCContext context) {\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Called on the server during the RPC handshake", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "629", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCPlugin.java", "methodName": "org.apache.avro.ipc.RPCPlugin.clientFinishConnect", "methodParameterType": "RPCContext#", "methodParameterName": "context#", "methodBody": "public void clientFinishConnect(RPCContext context) {\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Called on the client after the initial RPC handshake", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "630", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCPlugin.java", "methodName": "org.apache.avro.ipc.RPCPlugin.clientSendRequest", "methodParameterType": "RPCContext#", "methodParameterName": "context#", "methodBody": "public void clientSendRequest(RPCContext context) {\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "This method is invoked at the client before it issues the RPC call.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "631", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCPlugin.java", "methodName": "org.apache.avro.ipc.RPCPlugin.serverReceiveRequest", "methodParameterType": "RPCContext#", "methodParameterName": "context#", "methodBody": "public void serverReceiveRequest(RPCContext context) {\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "This method is invoked at the RPC server when the request is received, but before the call itself is executed", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "632", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCPlugin.java", "methodName": "org.apache.avro.ipc.RPCPlugin.serverSendResponse", "methodParameterType": "RPCContext#", "methodParameterName": "context#", "methodBody": "public void serverSendResponse(RPCContext context) {\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "This method is invoked at the server before the response is executed, but before the response has been formulated", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "633", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCPlugin.java", "methodName": "org.apache.avro.ipc.RPCPlugin.clientReceiveResponse", "methodParameterType": "RPCContext#", "methodParameterName": "context#", "methodBody": "public void clientReceiveResponse(RPCContext context) {\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "This method is invoked at the client after the call is executed, and after the client receives the response", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "634", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Callback.java", "methodName": "org.apache.avro.ipc.Callback.handleResult", "methodParameterType": "T#", "methodParameterName": "result#", "methodBody": "void handleResult(T result);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Receives a callback result.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "635", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Callback.java", "methodName": "org.apache.avro.ipc.Callback.handleError", "methodParameterType": "Throwable#", "methodParameterName": "error#", "methodBody": "void handleError(Throwable error);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Receives an error.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "636", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/SaslSocketServer.java", "methodName": "org.apache.avro.ipc.SaslSocketServer.SaslSocketServer", "methodParameterType": "Responder#SocketAddress#", "methodParameterName": "responder#addr#", "methodBody": "public SaslSocketServer(Responder responder, SocketAddress addr) throws IOException {\n    this(responder, addr, new SaslServerFactory() {\n      @Override\n      public SaslServer getServer() {\n        return new AnonymousServer();\n      }\n    });\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create using SASL's anonymous (<a href=\"https://www.ietf.org/rfc/rfc2245.txt\">RFC 2245) mechanism.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "637", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/SaslSocketServer.java", "methodName": "org.apache.avro.ipc.SaslSocketServer.SaslSocketServer", "methodParameterType": "Responder#SocketAddress#String#String#String#Map<String,?>#CallbackHandler#", "methodParameterName": "responder#addr#mechanism#protocol#serverName#props#cbh#", "methodBody": "public SaslSocketServer(Responder responder, SocketAddress addr, final String mechanism, final String protocol,\n      final String serverName, final Map<String, ?> props, final CallbackHandler cbh) throws IOException {\n    this(responder, addr, new SaslServerFactory() {\n      @Override\n      public SaslServer getServer() throws SaslException {\n        return Sasl.createSaslServer(mechanism, protocol, serverName, props, cbh);\n      }\n    });\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create using the specified  {@link SaslServer} parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "638", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Server.java", "methodName": "org.apache.avro.ipc.Server.getPort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getPort();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The port this server runs on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "639", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Server.java", "methodName": "org.apache.avro.ipc.Server.start", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void start();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Start this server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "640", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Server.java", "methodName": "org.apache.avro.ipc.Server.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void close();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Stop this server.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "641", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Server.java", "methodName": "org.apache.avro.ipc.Server.join", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void join() throws InterruptedException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Wait for this server to exit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "642", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/reflect/ReflectRequestor.java", "methodName": "org.apache.avro.ipc.reflect.ReflectRequestor.getClient", "methodParameterType": "Class<T>#Transceiver#", "methodParameterName": "iface#transceiver#", "methodBody": "public static <T> T getClient(Class<T> iface, Transceiver transceiver) throws IOException {\n    return getClient(iface, transceiver, new ReflectData(iface.getClassLoader()));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a proxy instance whose methods invoke RPCs.", "call_func_name": ["java.lang.Class.getClassLoader", "org.apache.avro.reflect.ReflectData.<init>", "org.apache.avro.ipc.reflect.ReflectRequestor.getClient"], "call_func_parameter": [[""], ["java.lang.ClassLoader"], ["java.lang.Class", "org.apache.avro.ipc.Transceiver", "org.apache.avro.reflect.ReflectData"]], "passed_comments": [{"org.apache.avro.ipc.reflect.ReflectRequestor.getClient": "Create a proxy instance whose methods invoke RPCs."}]}, {"index": "643", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/reflect/ReflectRequestor.java", "methodName": "org.apache.avro.ipc.reflect.ReflectRequestor.getClient", "methodParameterType": "Class<T>#Transceiver#ReflectData#", "methodParameterName": "iface#transceiver#reflectData#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public static <T> T getClient(Class<T> iface, Transceiver transceiver, ReflectData reflectData) throws IOException {\n    Protocol protocol = reflectData.getProtocol(iface);\n    return (T) Proxy.newProxyInstance(reflectData.getClassLoader(), new Class[] { iface },\n        new ReflectRequestor(protocol, transceiver, reflectData));\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a proxy instance whose methods invoke RPCs.", "call_func_name": ["org.apache.avro.reflect.ReflectData.getProtocol", "org.apache.avro.reflect.ReflectData.getClassLoader", "org.apache.avro.ipc.reflect.ReflectRequestor.<init>", "java.lang.reflect.Proxy.newProxyInstance"], "call_func_parameter": [["java.lang.Class"], [""], ["org.apache.avro.Protocol", "org.apache.avro.ipc.Transceiver", "org.apache.avro.reflect.ReflectData"], ["java.lang.ClassLoader", "java.lang.Class[]", "java.lang.reflect.InvocationHandler"]], "passed_comments": [{"org.apache.avro.reflect.ReflectData.getProtocol": "Return the protocol for a Java interface. <p> The correct name of the method parameters needs the <code>-parameters</code> java compiler argument. More info at https://openjdk.java.net/jeps/118"}]}, {"index": "644", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/reflect/ReflectRequestor.java", "methodName": "org.apache.avro.ipc.reflect.ReflectRequestor.getClient", "methodParameterType": "Class<T>#ReflectRequestor#", "methodParameterName": "iface#rreq#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public static <T> T getClient(Class<T> iface, ReflectRequestor rreq) throws IOException {\n    return (T) Proxy.newProxyInstance(rreq.getReflectData().getClassLoader(), new Class[] { iface }, rreq);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a proxy instance whose methods invoke RPCs.", "call_func_name": ["org.apache.avro.ipc.reflect.ReflectRequestor.getReflectData", "org.apache.avro.reflect.ReflectData.getClassLoader", "java.lang.reflect.Proxy.newProxyInstance"], "call_func_parameter": [[""], [""], ["java.lang.ClassLoader", "java.lang.Class[]", "java.lang.reflect.InvocationHandler"]], "passed_comments": "/"}, {"index": "645", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Transceiver.java", "methodName": "org.apache.avro.ipc.Transceiver.lockChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void lockChannel() {\n    channelLock.lock();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Acquires an exclusive lock on the transceiver's channel.", "call_func_name": ["java.util.concurrent.locks.ReentrantLock.lock"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "646", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Transceiver.java", "methodName": "org.apache.avro.ipc.Transceiver.unlockChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void unlockChannel() {\n    if (channelLock.isHeldByCurrentThread()) {\n      channelLock.unlock();\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Releases the lock on the transceiver's channel if held by the calling thread.", "call_func_name": ["java.util.concurrent.locks.ReentrantLock.isHeldByCurrentThread", "java.util.concurrent.locks.ReentrantLock.unlock"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "647", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Transceiver.java", "methodName": "org.apache.avro.ipc.Transceiver.transceive", "methodParameterType": "List<ByteBuffer>#", "methodParameterName": "request#", "methodBody": "public List<ByteBuffer> transceive(List<ByteBuffer> request) throws IOException {\n    lockChannel();\n    try {\n      writeBuffers(request);\n      return readBuffers();\n    } finally {\n      unlockChannel();\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Called by  {@link Requestor#request(String,Object)} for two-way messages. Bydefault calls  {@link #writeBuffers(List)} followed by {@link #readBuffers()}.", "call_func_name": ["org.apache.avro.ipc.Transceiver.lockChannel", "org.apache.avro.ipc.Transceiver.writeBuffers", "org.apache.avro.ipc.Transceiver.readBuffers", "org.apache.avro.ipc.Transceiver.unlockChannel"], "call_func_parameter": [[""], ["java.util.List"], [""], [""]], "passed_comments": [{"org.apache.avro.ipc.Transceiver.lockChannel": "Acquires an exclusive lock on the transceiver's channel."}, {"org.apache.avro.ipc.Transceiver.writeBuffers": "Called by  {@link Requestor#request(String,Object)} for one-way messages."}, {"org.apache.avro.ipc.Transceiver.readBuffers": "Called by the default definition of  {@link #transceive(List)}."}, {"org.apache.avro.ipc.Transceiver.unlockChannel": "Releases the lock on the transceiver's channel if held by the calling thread."}]}, {"index": "648", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Transceiver.java", "methodName": "org.apache.avro.ipc.Transceiver.transceive", "methodParameterType": "List<ByteBuffer>#Callback<List<ByteBuffer>>#", "methodParameterName": "request#callback#", "methodBody": "public void transceive(List<ByteBuffer> request, Callback<List<ByteBuffer>> callback) throws IOException {\n    // The default implementation works synchronously\n    try {\n      List<ByteBuffer> response = transceive(request);\n      callback.handleResult(response);\n    } catch (IOException e) {\n      callback.handleError(e);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Called by  {@link Requestor#request(String,Object,Callback)} for two-waymessages using callbacks.", "call_func_name": ["org.apache.avro.ipc.Transceiver.transceive", "org.apache.avro.ipc.Callback.handleResult", "org.apache.avro.ipc.Callback.handleError"], "call_func_parameter": [["java.util.List"], ["java.lang.Object"], ["java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.ipc.Transceiver.transceive": "Called by  {@link Requestor#request(String,Object)} for two-way messages. Bydefault calls  {@link #writeBuffers(List)} followed by {@link #readBuffers()}."}, {"org.apache.avro.ipc.Callback.handleError": "Receives an error."}]}, {"index": "649", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Transceiver.java", "methodName": "org.apache.avro.ipc.Transceiver.readBuffers", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract List<ByteBuffer> readBuffers() throws IOException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Called by the default definition of  {@link #transceive(List)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "650", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Transceiver.java", "methodName": "org.apache.avro.ipc.Transceiver.writeBuffers", "methodParameterType": "List<ByteBuffer>#", "methodParameterName": "buffers#", "methodBody": "public abstract void writeBuffers(List<ByteBuffer> buffers) throws IOException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Called by  {@link Requestor#request(String,Object)} for one-way messages.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "651", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Transceiver.java", "methodName": "org.apache.avro.ipc.Transceiver.isConnected", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isConnected() {\n    return false;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if a handshake has been completed for this connection. Used to determine whether a handshake need be completed prior to a one-way message. Requests and responses are always prefixed by handshakes, but one-way messages. If the first request sent over a connection is one-way, then a handshake-only response is returned. Subsequent one-way messages over the connection will have no response data sent. Returns false by default.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "652", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Transceiver.java", "methodName": "org.apache.avro.ipc.Transceiver.setRemote", "methodParameterType": "Protocol#", "methodParameterName": "protocol#", "methodBody": "public void setRemote(Protocol protocol) {\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Called with the remote protocol when a handshake has been completed. After this has been called and while a connection is maintained, {@link #isConnected()} should return true and #getRemote() should return thisprotocol. Does nothing by default.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "653", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/Transceiver.java", "methodName": "org.apache.avro.ipc.Transceiver.getRemote", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Protocol getRemote() {\n    throw new IllegalStateException(\"Not connected.\");\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Returns the protocol passed to  {@link #setRemote(Protocol)}. Throws IllegalStateException by default.", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "654", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StatsPlugin.java", "methodName": "org.apache.avro.ipc.stats.StatsPlugin.StatsPlugin", "methodParameterType": "Ticks#Segmenter<?,Float>#Segmenter<?,Integer>#", "methodParameterName": "ticks#floatSegmenter#integerSegmenter#", "methodBody": "public StatsPlugin(Ticks ticks, Segmenter<?, Float> floatSegmenter, Segmenter<?, Integer> integerSegmenter) {\n    this.floatSegmenter = floatSegmenter;\n    this.integerSegmenter = integerSegmenter;\n    this.ticks = ticks;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct a plugin with custom Ticks and Segmenter implementations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "655", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StatsPlugin.java", "methodName": "org.apache.avro.ipc.stats.StatsPlugin.StatsPlugin", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StatsPlugin() {\n    this(Stopwatch.SYSTEM_TICKS, LATENCY_SEGMENTER, PAYLOAD_SEGMENTER);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct a plugin with default (system) ticks, and default histogram segmentation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "656", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StatsPlugin.java", "methodName": "org.apache.avro.ipc.stats.StatsPlugin.getPayloadSize", "methodParameterType": "List<ByteBuffer>#", "methodParameterName": "payload#", "methodBody": "private int getPayloadSize(List<ByteBuffer> payload) {\n    if (payload == null) {\n      return 0;\n    }\n\n    int size = 0;\n    for (ByteBuffer bb : payload) {\n      size = size + bb.limit();\n    }\n\n    return size;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NumberLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper to get the size of an RPC payload.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.nio.ByteBuffer.limit"], "call_func_parameter": [[""], [""], [""], [""]], "passed_comments": "/"}, {"index": "657", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StatsPlugin.java", "methodName": "org.apache.avro.ipc.stats.StatsPlugin.publish", "methodParameterType": "RPCContext#Stopwatch#", "methodParameterName": "context#t#", "methodBody": "private void publish(RPCContext context, Stopwatch t) {\n    Message message = context.getMessage();\n    if (message == null)\n      throw new IllegalArgumentException();\n    synchronized (methodTimings) {\n      FloatHistogram<?> h = methodTimings.get(context.getMessage());\n      if (h == null) {\n        h = createNewFloatHistogram();\n        methodTimings.put(context.getMessage(), h);\n      }\n      h.add(nanosToMillis(t.elapsedNanos()));\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(SynchronizedStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Adds timing to the histograms.", "call_func_name": ["org.apache.avro.ipc.RPCContext.getMessage", "java.lang.IllegalArgumentException.<init>", "java.util.Map.get", "org.apache.avro.ipc.stats.StatsPlugin.createNewFloatHistogram", "java.util.Map.put", "org.apache.avro.ipc.stats.Stopwatch.elapsedNanos", "org.apache.avro.ipc.stats.StatsPlugin.nanosToMillis", "java.lang.Float.valueOf", "org.apache.avro.ipc.stats.FloatHistogram.add"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"], [""], ["long"], ["float"], ["java.lang.Float"]], "passed_comments": [{"org.apache.avro.ipc.RPCContext.getMessage": "Returns the  {@link Message} corresponding to this RPC"}, {"org.apache.avro.ipc.stats.Stopwatch.elapsedNanos": "Returns seconds that have elapsed since start()"}, {"org.apache.avro.ipc.stats.StatsPlugin.nanosToMillis": "Converts nanoseconds to milliseconds."}]}, {"index": "658", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/StatsPlugin.java", "methodName": "org.apache.avro.ipc.stats.StatsPlugin.nanosToMillis", "methodParameterType": "long#", "methodParameterName": "elapsedNanos#", "methodBody": "static float nanosToMillis(long elapsedNanos) {\n    return elapsedNanos / 1000000.0f;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts nanoseconds to milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "659", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/Histogram.java", "methodName": "org.apache.avro.ipc.stats.Histogram.Histogram", "methodParameterType": "Segmenter<B,T>#", "methodParameterName": "segmenter#", "methodBody": "public Histogram(Segmenter<B, T> segmenter) {\n    this.segmenter = segmenter;\n    this.counts = new int[segmenter.size()];\n    this.recentAdditions = new LinkedList<>();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a histogram using the specified segmenter.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "660", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/Histogram.java", "methodName": "org.apache.avro.ipc.stats.Histogram.add", "methodParameterType": "T#", "methodParameterName": "value#", "methodBody": "public void add(T value) {\n    int i = segmenter.segment(value);\n    counts[i]++;\n    totalCount++;\n    if (this.recentAdditions.size() > Histogram.MAX_HISTORY_SIZE) {\n      this.recentAdditions.pollLast();\n    }\n    this.recentAdditions.push(value);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#PostfixExpression#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(PostfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)PostfixExpression)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Tallies a value in the histogram.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "661", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/Histogram.java", "methodName": "org.apache.avro.ipc.stats.Histogram.getHistogram", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int[] getHistogram() {\n    return counts;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the underlying bucket values.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "662", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/Histogram.java", "methodName": "org.apache.avro.ipc.stats.Histogram.getSegmenter", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Segmenter<B, T> getSegmenter() {\n    return this.segmenter;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the underlying segmenter used for this histogram.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "663", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/Histogram.java", "methodName": "org.apache.avro.ipc.stats.Histogram.getRecentAdditions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<T> getRecentAdditions() {\n    return this.recentAdditions;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns values recently added to this histogram. These are in reverse order (most recent first).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "664", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/Histogram.java", "methodName": "org.apache.avro.ipc.stats.Histogram.getCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getCount() {\n    return totalCount;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the total count of entries.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "665", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/Stopwatch.java", "methodName": "org.apache.avro.ipc.stats.Stopwatch.elapsedNanos", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long elapsedNanos() {\n    if (running) {\n      return this.ticks.ticks() - start;\n    } else {\n      if (elapsed == -1)\n        throw new IllegalStateException();\n      return elapsed;\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#InfixExpression#ReturnStatement#Block#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block(Block(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Returns seconds that have elapsed since start()", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "666", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/Stopwatch.java", "methodName": "org.apache.avro.ipc.stats.Stopwatch.start", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void start() {\n    if (running)\n      throw new IllegalStateException();\n    start = ticks.ticks();\n    running = true;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Starts the stopwatch.", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "667", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/stats/Stopwatch.java", "methodName": "org.apache.avro.ipc.stats.Stopwatch.stop", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void stop() {\n    if (!running)\n      throw new IllegalStateException();\n    elapsed = ticks.ticks() - start;\n    running = false;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Stops the stopwatch and calculates the elapsed time.", "call_func_name": ["java.lang.IllegalStateException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "668", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/CallFuture.java", "methodName": "org.apache.avro.ipc.CallFuture.CallFuture", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CallFuture() {\n    this(null);\n  }", "AST": "Javadoc#Modifier#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a CallFuture.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "669", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/CallFuture.java", "methodName": "org.apache.avro.ipc.CallFuture.CallFuture", "methodParameterType": "Callback<T>#", "methodParameterName": "chainedCallback#", "methodBody": "public CallFuture(Callback<T> chainedCallback) {\n    this.chainedCallback = chainedCallback;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a CallFuture with a chained Callback which will be invoked when this CallFuture's Callback methods are invoked.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "670", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/CallFuture.java", "methodName": "org.apache.avro.ipc.CallFuture.handleResult", "methodParameterType": "T#", "methodParameterName": "result#", "methodBody": "@Override\n  public void handleResult(T result) {\n    this.result = result;\n    latch.countDown();\n    if (chainedCallback != null) {\n      chainedCallback.handleResult(result);\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sets the RPC response, and unblocks all threads waiting on  {@link #get()} or{@link #get(long,TimeUnit)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "671", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/CallFuture.java", "methodName": "org.apache.avro.ipc.CallFuture.handleError", "methodParameterType": "Throwable#", "methodParameterName": "error#", "methodBody": "@Override\n  public void handleError(Throwable error) {\n    this.error = error;\n    latch.countDown();\n    if (chainedCallback != null) {\n      chainedCallback.handleError(error);\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Sets an error thrown during RPC execution, and unblocks all threads waiting on  {@link #get()} or {@link #get(long,TimeUnit)}.", "call_func_name": ["java.util.concurrent.CountDownLatch.countDown", "org.apache.avro.ipc.Callback.handleError"], "call_func_parameter": [[""], ["java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.ipc.Callback.handleError": "Receives an error."}]}, {"index": "672", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/CallFuture.java", "methodName": "org.apache.avro.ipc.CallFuture.getResult", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public T getResult() {\n    return result;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the RPC result without blocking. Using  {@link #get()} or{@link #get(long,TimeUnit)} is usually preferred because these methods blockuntil the result is available or an error occurs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "673", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/CallFuture.java", "methodName": "org.apache.avro.ipc.CallFuture.getError", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Throwable getError() {\n    return error;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the error that was thrown during RPC execution. Does not block. Either {@link #get()} or {@link #get(long,TimeUnit)} should be called first becausethese methods block until the RPC has completed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "674", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/CallFuture.java", "methodName": "org.apache.avro.ipc.CallFuture.await", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void await() throws InterruptedException {\n    latch.await();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Waits for the CallFuture to complete without returning the result.", "call_func_name": ["java.util.concurrent.CountDownLatch.await"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "675", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/CallFuture.java", "methodName": "org.apache.avro.ipc.CallFuture.await", "methodParameterType": "long#TimeUnit#", "methodParameterName": "timeout#unit#", "methodBody": "public void await(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {\n    if (!latch.await(timeout, unit)) {\n      throw new TimeoutException();\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Waits for the CallFuture to complete without returning the result.", "call_func_name": ["java.util.concurrent.CountDownLatch.await", "java.util.concurrent.TimeoutException.<init>"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"], [""]], "passed_comments": "/"}, {"index": "676", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/SocketServer.java", "methodName": "org.apache.avro.ipc.SocketServer.getTransceiver", "methodParameterType": "SocketChannel#", "methodParameterName": "channel#", "methodBody": "protected Transceiver getTransceiver(SocketChannel channel) throws IOException {\n    return new SocketTransceiver(channel);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates an appropriate  {@link Transceiver} for this server. Returns a{@link SocketTransceiver} by default.", "call_func_name": ["org.apache.avro.ipc.SocketTransceiver.<init>"], "call_func_parameter": [["java.nio.channels.SocketChannel"]], "passed_comments": "/"}, {"index": "677", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/HttpTransceiver.java", "methodName": "org.apache.avro.ipc.HttpTransceiver.setTimeout", "methodParameterType": "int#", "methodParameterName": "timeout#", "methodBody": "public void setTimeout(int timeout) {\n    this.timeout = timeout;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the connect and read timeouts, in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "678", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/specific/SpecificRequestor.java", "methodName": "org.apache.avro.ipc.specific.SpecificRequestor.getClient", "methodParameterType": "Class<T>#Transceiver#", "methodParameterName": "iface#transceiver#", "methodBody": "public static <T> T getClient(Class<T> iface, Transceiver transceiver) throws IOException {\n    return getClient(iface, transceiver, new SpecificData(iface.getClassLoader()));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a proxy instance whose methods invoke RPCs.", "call_func_name": ["java.lang.Class.getClassLoader", "org.apache.avro.specific.SpecificData.<init>", "org.apache.avro.ipc.specific.SpecificRequestor.getClient"], "call_func_parameter": [[""], ["java.lang.ClassLoader"], ["java.lang.Class", "org.apache.avro.ipc.Transceiver", "org.apache.avro.specific.SpecificData"]], "passed_comments": [{"org.apache.avro.ipc.specific.SpecificRequestor.getClient": "Create a proxy instance whose methods invoke RPCs."}]}, {"index": "679", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/specific/SpecificRequestor.java", "methodName": "org.apache.avro.ipc.specific.SpecificRequestor.getClient", "methodParameterType": "Class<T>#Transceiver#SpecificData#", "methodParameterName": "iface#transceiver#data#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public static <T> T getClient(Class<T> iface, Transceiver transceiver, SpecificData data) throws IOException {\n    Protocol protocol = data.getProtocol(iface);\n    return (T) Proxy.newProxyInstance(data.getClassLoader(), new Class[] { iface },\n        new SpecificRequestor(protocol, transceiver, data));\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a proxy instance whose methods invoke RPCs.", "call_func_name": ["org.apache.avro.specific.SpecificData.getProtocol", "org.apache.avro.specific.SpecificData.getClassLoader", "org.apache.avro.ipc.specific.SpecificRequestor.<init>", "java.lang.reflect.Proxy.newProxyInstance"], "call_func_parameter": [["java.lang.Class"], [""], ["org.apache.avro.Protocol", "org.apache.avro.ipc.Transceiver", "org.apache.avro.specific.SpecificData"], ["java.lang.ClassLoader", "java.lang.Class[]", "java.lang.reflect.InvocationHandler"]], "passed_comments": [{"org.apache.avro.specific.SpecificData.getProtocol": "Return the protocol for a Java interface."}]}, {"index": "680", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/specific/SpecificRequestor.java", "methodName": "org.apache.avro.ipc.specific.SpecificRequestor.getClient", "methodParameterType": "Class<T>#SpecificRequestor#", "methodParameterName": "iface#requestor#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public static <T> T getClient(Class<T> iface, SpecificRequestor requestor) throws IOException {\n    return (T) Proxy.newProxyInstance(requestor.data.getClassLoader(), new Class[] { iface }, requestor);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a proxy instance whose methods invoke RPCs.", "call_func_name": ["org.apache.avro.specific.SpecificData.getClassLoader", "java.lang.reflect.Proxy.newProxyInstance"], "call_func_parameter": [[""], ["java.lang.ClassLoader", "java.lang.Class[]", "java.lang.reflect.InvocationHandler"]], "passed_comments": "/"}, {"index": "681", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/specific/SpecificRequestor.java", "methodName": "org.apache.avro.ipc.specific.SpecificRequestor.getRemote", "methodParameterType": "Object#", "methodParameterName": "proxy#", "methodBody": "public static Protocol getRemote(Object proxy) throws IOException {\n    return ((Requestor) Proxy.getInvocationHandler(proxy)).getRemote();\n\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the remote protocol for a proxy.", "call_func_name": ["java.lang.reflect.Proxy.getInvocationHandler", "org.apache.avro.ipc.Requestor.getRemote"], "call_func_parameter": [["java.lang.Object"], [""]], "passed_comments": [{"org.apache.avro.ipc.Requestor.getRemote": "Return the remote protocol. Force a handshake if required."}]}, {"index": "682", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.setHandshakeRequest", "methodParameterType": "HandshakeRequest#", "methodParameterName": "handshakeRequest#", "methodBody": "public void setHandshakeRequest(HandshakeRequest handshakeRequest) {\n    this.handshakeRequest = handshakeRequest;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the handshake request of this RPC.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "683", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.getHandshakeRequest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public HandshakeRequest getHandshakeRequest() {\n    return this.handshakeRequest;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the handshake request of this RPC.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "684", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.setHandshakeResponse", "methodParameterType": "HandshakeResponse#", "methodParameterName": "handshakeResponse#", "methodBody": "public void setHandshakeResponse(HandshakeResponse handshakeResponse) {\n    this.handshakeResponse = handshakeResponse;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the handshake response of this RPC.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "685", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.getHandshakeResponse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public HandshakeResponse getHandshakeResponse() {\n    return this.handshakeResponse;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the handshake response of this RPC.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "686", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.requestHandshakeMeta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, ByteBuffer> requestHandshakeMeta() {\n    if (handshakeRequest.getMeta() == null)\n      handshakeRequest.setMeta(new HashMap<>());\n    return handshakeRequest.getMeta();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This is an access method for the handshake state provided by the client to the server.", "call_func_name": ["org.apache.avro.ipc.HandshakeRequest.getMeta", "java.util.HashMap.<init>", "org.apache.avro.ipc.HandshakeRequest.setMeta"], "call_func_parameter": [[""], [""], ["java.util.Map"]], "passed_comments": [{"org.apache.avro.ipc.HandshakeRequest.getMeta": "Gets the value of the 'meta' field."}, {"org.apache.avro.ipc.HandshakeRequest.setMeta": "Sets the value of the 'meta' field."}]}, {"index": "687", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.responseHandshakeMeta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, ByteBuffer> responseHandshakeMeta() {\n    if (handshakeResponse.getMeta() == null)\n      handshakeResponse.setMeta(new HashMap<>());\n    return handshakeResponse.getMeta();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This is an access method for the handshake state provided by the server back to the client", "call_func_name": ["org.apache.avro.ipc.HandshakeResponse.getMeta", "java.util.HashMap.<init>", "org.apache.avro.ipc.HandshakeResponse.setMeta"], "call_func_parameter": [[""], [""], ["java.util.Map"]], "passed_comments": [{"org.apache.avro.ipc.HandshakeResponse.getMeta": "Gets the value of the 'meta' field."}, {"org.apache.avro.ipc.HandshakeResponse.setMeta": "Sets the value of the 'meta' field."}]}, {"index": "688", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.requestCallMeta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, ByteBuffer> requestCallMeta() {\n    if (requestCallMeta == null) {\n      requestCallMeta = new HashMap<>();\n    }\n    return requestCallMeta;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This is an access method for the per-call state provided by the client to the server.", "call_func_name": ["java.util.HashMap.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "689", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.responseCallMeta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, ByteBuffer> responseCallMeta() {\n    if (responseCallMeta == null) {\n      responseCallMeta = new HashMap<>();\n    }\n    return responseCallMeta;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This is an access method for the per-call state provided by the server back to the client.", "call_func_name": ["java.util.HashMap.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "690", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.response", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Object response() {\n    return response;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The response object generated at the server, if it exists. If an exception was generated, this will be null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "691", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.error", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Exception error() {\n    return error;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The exception generated at the server, or null if no such exception has occurred", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "692", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.isError", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isError() {\n    return error != null;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Indicates whether an exception was generated at the server", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "693", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.setMessage", "methodParameterType": "Message#", "methodParameterName": "message#", "methodBody": "public void setMessage(Message message) {\n    this.message = message;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the  {@link Message} corresponding to this RPC", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "694", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Message getMessage() {\n    return message;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link Message} corresponding to this RPC", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "695", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.setRequestPayload", "methodParameterType": "List<ByteBuffer>#", "methodParameterName": "payload#", "methodBody": "public void setRequestPayload(List<ByteBuffer> payload) {\n    this.requestPayload = payload;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the serialized payload of the request in this RPC. Will not include handshake or meta-data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "696", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.getRequestPayload", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<ByteBuffer> getRequestPayload() {\n    return this.requestPayload;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the serialized payload of the request in this RPC. Will only be generated from a Requestor and will not include handshake or meta-data. If the request payload has not been set yet, returns null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "697", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.getResponsePayload", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<ByteBuffer> getResponsePayload() {\n    return this.responsePayload;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the serialized payload of the response in this RPC. Will only be generated from a Responder and will not include handshake or meta-data. If the response payload has not been set yet, returns null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "698", "file": "/root/repos/repos8/avro/lang/java/ipc/src/main/java/org/apache/avro/ipc/RPCContext.java", "methodName": "org.apache.avro.ipc.RPCContext.setResponsePayload", "methodParameterType": "List<ByteBuffer>#", "methodParameterName": "payload#", "methodBody": "public void setResponsePayload(List<ByteBuffer> payload) {\n    this.responsePayload = payload;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the serialized payload of the response in this RPC. Will not include handshake or meta-data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "699", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<HandshakeRequest> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "700", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<HandshakeRequest> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "701", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<HandshakeRequest> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<HandshakeRequest>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": ["org.apache.avro.message.BinaryMessageDecoder.<init>"], "call_func_parameter": [["org.apache.avro.generic.GenericData", "org.apache.avro.Schema", "org.apache.avro.message.SchemaStore"]], "passed_comments": "/"}, {"index": "702", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this HandshakeRequest to a ByteBuffer.", "call_func_name": ["org.apache.avro.message.BinaryMessageEncoder.encode"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "703", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static HandshakeRequest fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a HandshakeRequest from a ByteBuffer.", "call_func_name": ["org.apache.avro.message.BinaryMessageDecoder.decode"], "call_func_parameter": [["java.nio.ByteBuffer"]], "passed_comments": "/"}, {"index": "704", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.HandshakeRequest", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public HandshakeRequest() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "705", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.HandshakeRequest", "methodParameterType": "org.apache.avro.ipc.MD5#java.lang.String#org.apache.avro.ipc.MD5#java.util.Map<java.lang.String,java.nio.ByteBuffer>#", "methodParameterName": "clientHash#clientProtocol#serverHash#meta#", "methodBody": "public HandshakeRequest(org.apache.avro.ipc.MD5 clientHash, java.lang.String clientProtocol, org.apache.avro.ipc.MD5 serverHash, java.util.Map<java.lang.String,java.nio.ByteBuffer> meta) {\n    this.clientHash = clientHash;\n    this.clientProtocol = clientProtocol;\n    this.serverHash = serverHash;\n    this.meta = meta;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "706", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.getClientHash", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.ipc.MD5 getClientHash() {\n    return clientHash;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'clientHash' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "707", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.getOptionalClientHash", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.ipc.MD5> getOptionalClientHash() {\n    return Optional.<org.apache.avro.ipc.MD5>ofNullable(clientHash);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'clientHash' field as an Optional<org.apache.avro.ipc.MD5>.", "call_func_name": ["java.util.Optional.ofNullable"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "708", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.setClientHash", "methodParameterType": "org.apache.avro.ipc.MD5#", "methodParameterName": "value#", "methodBody": "public void setClientHash(org.apache.avro.ipc.MD5 value) {\n    this.clientHash = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'clientHash' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "709", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.getClientProtocol", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getClientProtocol() {\n    return clientProtocol;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'clientProtocol' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "710", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.getOptionalClientProtocol", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalClientProtocol() {\n    return Optional.<java.lang.String>ofNullable(clientProtocol);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'clientProtocol' field as an Optional<java.lang.String>.", "call_func_name": ["java.util.Optional.ofNullable"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "711", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.setClientProtocol", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setClientProtocol(java.lang.String value) {\n    this.clientProtocol = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'clientProtocol' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "712", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.getServerHash", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.ipc.MD5 getServerHash() {\n    return serverHash;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'serverHash' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "713", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.getOptionalServerHash", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.ipc.MD5> getOptionalServerHash() {\n    return Optional.<org.apache.avro.ipc.MD5>ofNullable(serverHash);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'serverHash' field as an Optional<org.apache.avro.ipc.MD5>.", "call_func_name": ["java.util.Optional.ofNullable"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "714", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.setServerHash", "methodParameterType": "org.apache.avro.ipc.MD5#", "methodParameterName": "value#", "methodBody": "public void setServerHash(org.apache.avro.ipc.MD5 value) {\n    this.serverHash = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'serverHash' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "715", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.getMeta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.Map<java.lang.String,java.nio.ByteBuffer> getMeta() {\n    return meta;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'meta' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "716", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.getOptionalMeta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.util.Map<java.lang.String,java.nio.ByteBuffer>> getOptionalMeta() {\n    return Optional.<java.util.Map<java.lang.String,java.nio.ByteBuffer>>ofNullable(meta);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'meta' field as an Optional<java.util.Map<java.lang.String,java.nio.ByteBuffer>>.", "call_func_name": ["java.util.Optional.ofNullable"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "717", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.setMeta", "methodParameterType": "java.util.Map<java.lang.String,java.nio.ByteBuffer>#", "methodParameterName": "value#", "methodBody": "public void setMeta(java.util.Map<java.lang.String,java.nio.ByteBuffer> value) {\n    this.meta = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'meta' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "718", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.ipc.HandshakeRequest.Builder newBuilder() {\n    return new org.apache.avro.ipc.HandshakeRequest.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HandshakeRequest RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "719", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.newBuilder", "methodParameterType": "org.apache.avro.ipc.HandshakeRequest.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.HandshakeRequest.Builder newBuilder(org.apache.avro.ipc.HandshakeRequest.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.HandshakeRequest.Builder();\n    } else {\n      return new org.apache.avro.ipc.HandshakeRequest.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HandshakeRequest RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "720", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeRequest.java", "methodName": "org.apache.avro.ipc.HandshakeRequest.newBuilder", "methodParameterType": "org.apache.avro.ipc.HandshakeRequest#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.HandshakeRequest.Builder newBuilder(org.apache.avro.ipc.HandshakeRequest other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.HandshakeRequest.Builder();\n    } else {\n      return new org.apache.avro.ipc.HandshakeRequest.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HandshakeRequest RecordBuilder by copying an existing HandshakeRequest instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "721", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/MD5.java", "methodName": "org.apache.avro.ipc.MD5.MD5", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MD5() {\n    super();\n  }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new MD5", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "722", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/MD5.java", "methodName": "org.apache.avro.ipc.MD5.MD5", "methodParameterType": "byte[]#", "methodParameterName": "bytes#", "methodBody": "public MD5(byte[] bytes) {\n    super(bytes);\n  }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new MD5 with the given bytes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "723", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<HandshakeResponse> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "724", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<HandshakeResponse> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "725", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<HandshakeResponse> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<HandshakeResponse>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": ["org.apache.avro.message.BinaryMessageDecoder.<init>"], "call_func_parameter": [["org.apache.avro.generic.GenericData", "org.apache.avro.Schema", "org.apache.avro.message.SchemaStore"]], "passed_comments": "/"}, {"index": "726", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this HandshakeResponse to a ByteBuffer.", "call_func_name": ["org.apache.avro.message.BinaryMessageEncoder.encode"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "727", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static HandshakeResponse fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a HandshakeResponse from a ByteBuffer.", "call_func_name": ["org.apache.avro.message.BinaryMessageDecoder.decode"], "call_func_parameter": [["java.nio.ByteBuffer"]], "passed_comments": "/"}, {"index": "728", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.HandshakeResponse", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public HandshakeResponse() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "729", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.HandshakeResponse", "methodParameterType": "org.apache.avro.ipc.HandshakeMatch#java.lang.String#org.apache.avro.ipc.MD5#java.util.Map<java.lang.String,java.nio.ByteBuffer>#", "methodParameterName": "match#serverProtocol#serverHash#meta#", "methodBody": "public HandshakeResponse(org.apache.avro.ipc.HandshakeMatch match, java.lang.String serverProtocol, org.apache.avro.ipc.MD5 serverHash, java.util.Map<java.lang.String,java.nio.ByteBuffer> meta) {\n    this.match = match;\n    this.serverProtocol = serverProtocol;\n    this.serverHash = serverHash;\n    this.meta = meta;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "730", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.getMatch", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.ipc.HandshakeMatch getMatch() {\n    return match;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'match' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "731", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.getOptionalMatch", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.ipc.HandshakeMatch> getOptionalMatch() {\n    return Optional.<org.apache.avro.ipc.HandshakeMatch>ofNullable(match);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'match' field as an Optional<org.apache.avro.ipc.HandshakeMatch>.", "call_func_name": ["java.util.Optional.ofNullable"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "732", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.setMatch", "methodParameterType": "org.apache.avro.ipc.HandshakeMatch#", "methodParameterName": "value#", "methodBody": "public void setMatch(org.apache.avro.ipc.HandshakeMatch value) {\n    this.match = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'match' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "733", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.getServerProtocol", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getServerProtocol() {\n    return serverProtocol;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'serverProtocol' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "734", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.getOptionalServerProtocol", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalServerProtocol() {\n    return Optional.<java.lang.String>ofNullable(serverProtocol);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'serverProtocol' field as an Optional<java.lang.String>.", "call_func_name": ["java.util.Optional.ofNullable"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "735", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.setServerProtocol", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setServerProtocol(java.lang.String value) {\n    this.serverProtocol = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'serverProtocol' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "736", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.getServerHash", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.ipc.MD5 getServerHash() {\n    return serverHash;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'serverHash' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "737", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.getOptionalServerHash", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.ipc.MD5> getOptionalServerHash() {\n    return Optional.<org.apache.avro.ipc.MD5>ofNullable(serverHash);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'serverHash' field as an Optional<org.apache.avro.ipc.MD5>.", "call_func_name": ["java.util.Optional.ofNullable"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "738", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.setServerHash", "methodParameterType": "org.apache.avro.ipc.MD5#", "methodParameterName": "value#", "methodBody": "public void setServerHash(org.apache.avro.ipc.MD5 value) {\n    this.serverHash = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'serverHash' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "739", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.getMeta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.Map<java.lang.String,java.nio.ByteBuffer> getMeta() {\n    return meta;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'meta' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "740", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.getOptionalMeta", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.util.Map<java.lang.String,java.nio.ByteBuffer>> getOptionalMeta() {\n    return Optional.<java.util.Map<java.lang.String,java.nio.ByteBuffer>>ofNullable(meta);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'meta' field as an Optional<java.util.Map<java.lang.String,java.nio.ByteBuffer>>.", "call_func_name": ["java.util.Optional.ofNullable"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "741", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.setMeta", "methodParameterType": "java.util.Map<java.lang.String,java.nio.ByteBuffer>#", "methodParameterName": "value#", "methodBody": "public void setMeta(java.util.Map<java.lang.String,java.nio.ByteBuffer> value) {\n    this.meta = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'meta' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "742", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.ipc.HandshakeResponse.Builder newBuilder() {\n    return new org.apache.avro.ipc.HandshakeResponse.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HandshakeResponse RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "743", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.newBuilder", "methodParameterType": "org.apache.avro.ipc.HandshakeResponse.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.HandshakeResponse.Builder newBuilder(org.apache.avro.ipc.HandshakeResponse.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.HandshakeResponse.Builder();\n    } else {\n      return new org.apache.avro.ipc.HandshakeResponse.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HandshakeResponse RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "744", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-sources/java/org/apache/avro/ipc/HandshakeResponse.java", "methodName": "org.apache.avro.ipc.HandshakeResponse.newBuilder", "methodParameterType": "org.apache.avro.ipc.HandshakeResponse#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.HandshakeResponse.Builder newBuilder(org.apache.avro.ipc.HandshakeResponse other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.HandshakeResponse.Builder();\n    } else {\n      return new org.apache.avro.ipc.HandshakeResponse.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HandshakeResponse RecordBuilder by copying an existing HandshakeResponse instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "745", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<Foo> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "746", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<Foo> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "747", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<Foo> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<Foo>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "748", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this Foo to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "749", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static Foo fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a Foo from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "750", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.Foo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Foo() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "751", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.Foo", "methodParameterType": "java.lang.String#", "methodParameterName": "label#", "methodBody": "public Foo(java.lang.String label) {\n    this.label = label;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "752", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.getLabel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getLabel() {\n    return label;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'label' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "753", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.getOptionalLabel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalLabel() {\n    return Optional.<java.lang.String>ofNullable(label);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'label' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "754", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.setLabel", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setLabel(java.lang.String value) {\n    this.label = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'label' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "755", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.Foo.Builder newBuilder() {\n    return new org.apache.avro.Foo.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Foo RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "756", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.newBuilder", "methodParameterType": "org.apache.avro.Foo.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.Foo.Builder newBuilder(org.apache.avro.Foo.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.Foo.Builder();\n    } else {\n      return new org.apache.avro.Foo.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Foo RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "757", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.newBuilder", "methodParameterType": "org.apache.avro.Foo#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.Foo.Builder newBuilder(org.apache.avro.Foo other) {\n    if (other == null) {\n      return new org.apache.avro.Foo.Builder();\n    } else {\n      return new org.apache.avro.Foo.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Foo RecordBuilder by copying an existing Foo instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "758", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<FooBarSpecificRecord> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "759", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<FooBarSpecificRecord> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "760", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<FooBarSpecificRecord> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<FooBarSpecificRecord>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "761", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this FooBarSpecificRecord to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "762", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static FooBarSpecificRecord fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a FooBarSpecificRecord from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "763", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.FooBarSpecificRecord", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public FooBarSpecificRecord() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "764", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.FooBarSpecificRecord", "methodParameterType": "java.lang.Integer#java.lang.String#java.util.List<java.lang.String>#java.util.List<java.lang.Integer>#org.apache.avro.TypeEnum#", "methodParameterName": "id#name#nicknames#relatedids#typeEnum#", "methodBody": "public FooBarSpecificRecord(java.lang.Integer id, java.lang.String name, java.util.List<java.lang.String> nicknames, java.util.List<java.lang.Integer> relatedids, org.apache.avro.TypeEnum typeEnum) {\n    this.id = id;\n    this.name = name;\n    this.nicknames = nicknames;\n    this.relatedids = relatedids;\n    this.typeEnum = typeEnum;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "765", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getId() {\n    return id;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'id' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "766", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getOptionalId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Integer> getOptionalId() {\n    return Optional.<java.lang.Integer>ofNullable(id);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'id' field as an Optional<java.lang.Integer>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "767", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.setId", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "public void setId(int value) {\n    this.id = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'id' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "768", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getName() {\n    return name;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "769", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getOptionalName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalName() {\n    return Optional.<java.lang.String>ofNullable(name);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'name' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "770", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.setName", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setName(java.lang.String value) {\n    this.name = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "771", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getNicknames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.List<java.lang.String> getNicknames() {\n    return nicknames;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nicknames' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "772", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getOptionalNicknames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.util.List<java.lang.String>> getOptionalNicknames() {\n    return Optional.<java.util.List<java.lang.String>>ofNullable(nicknames);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nicknames' field as an Optional<java.util.List<java.lang.String>>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "773", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.setNicknames", "methodParameterType": "java.util.List<java.lang.String>#", "methodParameterName": "value#", "methodBody": "public void setNicknames(java.util.List<java.lang.String> value) {\n    this.nicknames = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'nicknames' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "774", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getRelatedids", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.List<java.lang.Integer> getRelatedids() {\n    return relatedids;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'relatedids' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "775", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getOptionalRelatedids", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.util.List<java.lang.Integer>> getOptionalRelatedids() {\n    return Optional.<java.util.List<java.lang.Integer>>ofNullable(relatedids);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'relatedids' field as an Optional<java.util.List<java.lang.Integer>>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "776", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.setRelatedids", "methodParameterType": "java.util.List<java.lang.Integer>#", "methodParameterName": "value#", "methodBody": "public void setRelatedids(java.util.List<java.lang.Integer> value) {\n    this.relatedids = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'relatedids' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "777", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getTypeEnum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.TypeEnum getTypeEnum() {\n    return typeEnum;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'typeEnum' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "778", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getOptionalTypeEnum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.TypeEnum> getOptionalTypeEnum() {\n    return Optional.<org.apache.avro.TypeEnum>ofNullable(typeEnum);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'typeEnum' field as an Optional<org.apache.avro.TypeEnum>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "779", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.setTypeEnum", "methodParameterType": "org.apache.avro.TypeEnum#", "methodParameterName": "value#", "methodBody": "public void setTypeEnum(org.apache.avro.TypeEnum value) {\n    this.typeEnum = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'typeEnum' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "780", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.FooBarSpecificRecord.Builder newBuilder() {\n    return new org.apache.avro.FooBarSpecificRecord.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new FooBarSpecificRecord RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "781", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.newBuilder", "methodParameterType": "org.apache.avro.FooBarSpecificRecord.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.FooBarSpecificRecord.Builder newBuilder(org.apache.avro.FooBarSpecificRecord.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.FooBarSpecificRecord.Builder();\n    } else {\n      return new org.apache.avro.FooBarSpecificRecord.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new FooBarSpecificRecord RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "782", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.newBuilder", "methodParameterType": "org.apache.avro.FooBarSpecificRecord#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.FooBarSpecificRecord.Builder newBuilder(org.apache.avro.FooBarSpecificRecord other) {\n    if (other == null) {\n      return new org.apache.avro.FooBarSpecificRecord.Builder();\n    } else {\n      return new org.apache.avro.FooBarSpecificRecord.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new FooBarSpecificRecord RecordBuilder by copying an existing FooBarSpecificRecord instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "783", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/HomePage.java", "methodName": "org.apache.avro.ipc.specific.HomePage.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<HomePage> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "784", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/HomePage.java", "methodName": "org.apache.avro.ipc.specific.HomePage.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<HomePage> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "785", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/HomePage.java", "methodName": "org.apache.avro.ipc.specific.HomePage.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<HomePage> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<HomePage>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "786", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/HomePage.java", "methodName": "org.apache.avro.ipc.specific.HomePage.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this HomePage to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "787", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/HomePage.java", "methodName": "org.apache.avro.ipc.specific.HomePage.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static HomePage fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a HomePage from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "788", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/HomePage.java", "methodName": "org.apache.avro.ipc.specific.HomePage.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.ipc.specific.HomePage.Builder newBuilder() {\n    return new org.apache.avro.ipc.specific.HomePage.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HomePage RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "789", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/HomePage.java", "methodName": "org.apache.avro.ipc.specific.HomePage.newBuilder", "methodParameterType": "org.apache.avro.ipc.specific.HomePage.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.specific.HomePage.Builder newBuilder(org.apache.avro.ipc.specific.HomePage.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.specific.HomePage.Builder();\n    } else {\n      return new org.apache.avro.ipc.specific.HomePage.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HomePage RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "790", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/HomePage.java", "methodName": "org.apache.avro.ipc.specific.HomePage.newBuilder", "methodParameterType": "org.apache.avro.ipc.specific.HomePage#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.specific.HomePage.Builder newBuilder(org.apache.avro.ipc.specific.HomePage other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.specific.HomePage.Builder();\n    } else {\n      return new org.apache.avro.ipc.specific.HomePage.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new HomePage RecordBuilder by copying an existing HomePage instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "791", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/UnknownPage.java", "methodName": "org.apache.avro.ipc.specific.UnknownPage.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<UnknownPage> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "792", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/UnknownPage.java", "methodName": "org.apache.avro.ipc.specific.UnknownPage.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<UnknownPage> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "793", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/UnknownPage.java", "methodName": "org.apache.avro.ipc.specific.UnknownPage.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<UnknownPage> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<UnknownPage>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "794", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/UnknownPage.java", "methodName": "org.apache.avro.ipc.specific.UnknownPage.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this UnknownPage to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "795", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/UnknownPage.java", "methodName": "org.apache.avro.ipc.specific.UnknownPage.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static UnknownPage fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a UnknownPage from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "796", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/UnknownPage.java", "methodName": "org.apache.avro.ipc.specific.UnknownPage.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.ipc.specific.UnknownPage.Builder newBuilder() {\n    return new org.apache.avro.ipc.specific.UnknownPage.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new UnknownPage RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "797", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/UnknownPage.java", "methodName": "org.apache.avro.ipc.specific.UnknownPage.newBuilder", "methodParameterType": "org.apache.avro.ipc.specific.UnknownPage.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.specific.UnknownPage.Builder newBuilder(org.apache.avro.ipc.specific.UnknownPage.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.specific.UnknownPage.Builder();\n    } else {\n      return new org.apache.avro.ipc.specific.UnknownPage.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new UnknownPage RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "798", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/UnknownPage.java", "methodName": "org.apache.avro.ipc.specific.UnknownPage.newBuilder", "methodParameterType": "org.apache.avro.ipc.specific.UnknownPage#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.specific.UnknownPage.Builder newBuilder(org.apache.avro.ipc.specific.UnknownPage other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.specific.UnknownPage.Builder();\n    } else {\n      return new org.apache.avro.ipc.specific.UnknownPage.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new UnknownPage RecordBuilder by copying an existing UnknownPage instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "799", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<Person> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "800", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<Person> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "801", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<Person> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<Person>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "802", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this Person to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "803", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static Person fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a Person from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "804", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.Person", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Person() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "805", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.Person", "methodParameterType": "java.lang.String#java.lang.Integer#java.lang.String#java.lang.String#java.util.List<org.apache.avro.ipc.specific.Person>#java.util.List<java.lang.String>#org.apache.avro.ipc.specific.PrivacyType#", "methodParameterName": "name#year_of_birth#country#state#friends#languages#defaultPrivacy#", "methodBody": "public Person(java.lang.String name, java.lang.Integer year_of_birth, java.lang.String country, java.lang.String state, java.util.List<org.apache.avro.ipc.specific.Person> friends, java.util.List<java.lang.String> languages, org.apache.avro.ipc.specific.PrivacyType defaultPrivacy) {\n    this.name = name;\n    this.year_of_birth = year_of_birth;\n    this.country = country;\n    this.state = state;\n    this.friends = friends;\n    this.languages = languages;\n    this.defaultPrivacy = defaultPrivacy;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "806", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getName() {\n    return name;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "807", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getOptionalName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalName() {\n    return Optional.<java.lang.String>ofNullable(name);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'name' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "808", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.setName", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setName(java.lang.String value) {\n    this.name = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "809", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getYearOfBirth", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getYearOfBirth() {\n    return year_of_birth;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'year_of_birth' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "810", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getOptionalYearOfBirth", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Integer> getOptionalYearOfBirth() {\n    return Optional.<java.lang.Integer>ofNullable(year_of_birth);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'year_of_birth' field as an Optional<java.lang.Integer>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "811", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.setYearOfBirth", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "public void setYearOfBirth(int value) {\n    this.year_of_birth = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'year_of_birth' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "812", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getCountry", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getCountry() {\n    return country;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'country' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "813", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getOptionalCountry", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalCountry() {\n    return Optional.<java.lang.String>ofNullable(country);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'country' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "814", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.setCountry", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setCountry(java.lang.String value) {\n    this.country = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'country' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "815", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getState() {\n    return state;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'state' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "816", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getOptionalState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalState() {\n    return Optional.<java.lang.String>ofNullable(state);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'state' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "817", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.setState", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setState(java.lang.String value) {\n    this.state = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'state' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "818", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getFriends", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.List<org.apache.avro.ipc.specific.Person> getFriends() {\n    return friends;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'friends' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "819", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getOptionalFriends", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.util.List<org.apache.avro.ipc.specific.Person>> getOptionalFriends() {\n    return Optional.<java.util.List<org.apache.avro.ipc.specific.Person>>ofNullable(friends);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'friends' field as an Optional<java.util.List<org.apache.avro.ipc.specific.Person>>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "820", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.setFriends", "methodParameterType": "java.util.List<org.apache.avro.ipc.specific.Person>#", "methodParameterName": "value#", "methodBody": "public void setFriends(java.util.List<org.apache.avro.ipc.specific.Person> value) {\n    this.friends = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'friends' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "821", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getLanguages", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.List<java.lang.String> getLanguages() {\n    return languages;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'languages' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "822", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getOptionalLanguages", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.util.List<java.lang.String>> getOptionalLanguages() {\n    return Optional.<java.util.List<java.lang.String>>ofNullable(languages);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'languages' field as an Optional<java.util.List<java.lang.String>>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "823", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.setLanguages", "methodParameterType": "java.util.List<java.lang.String>#", "methodParameterName": "value#", "methodBody": "public void setLanguages(java.util.List<java.lang.String> value) {\n    this.languages = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'languages' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "824", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getDefaultPrivacy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.ipc.specific.PrivacyType getDefaultPrivacy() {\n    return defaultPrivacy;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'defaultPrivacy' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "825", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.getOptionalDefaultPrivacy", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.ipc.specific.PrivacyType> getOptionalDefaultPrivacy() {\n    return Optional.<org.apache.avro.ipc.specific.PrivacyType>ofNullable(defaultPrivacy);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'defaultPrivacy' field as an Optional<org.apache.avro.ipc.specific.PrivacyType>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "826", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.setDefaultPrivacy", "methodParameterType": "org.apache.avro.ipc.specific.PrivacyType#", "methodParameterName": "value#", "methodBody": "public void setDefaultPrivacy(org.apache.avro.ipc.specific.PrivacyType value) {\n    this.defaultPrivacy = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'defaultPrivacy' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "827", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.ipc.specific.Person.Builder newBuilder() {\n    return new org.apache.avro.ipc.specific.Person.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Person RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "828", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.newBuilder", "methodParameterType": "org.apache.avro.ipc.specific.Person.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.specific.Person.Builder newBuilder(org.apache.avro.ipc.specific.Person.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.specific.Person.Builder();\n    } else {\n      return new org.apache.avro.ipc.specific.Person.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Person RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "829", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/Person.java", "methodName": "org.apache.avro.ipc.specific.Person.newBuilder", "methodParameterType": "org.apache.avro.ipc.specific.Person#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.specific.Person.Builder newBuilder(org.apache.avro.ipc.specific.Person other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.specific.Person.Builder();\n    } else {\n      return new org.apache.avro.ipc.specific.Person.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Person RecordBuilder by copying an existing Person instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "830", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<PageView> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "831", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<PageView> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "832", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<PageView> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<PageView>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "833", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this PageView to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "834", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static PageView fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a PageView from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "835", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.PageView", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PageView() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "836", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.PageView", "methodParameterType": "java.lang.Long#java.lang.Object#", "methodParameterName": "datetime#pageContext#", "methodBody": "public PageView(java.lang.Long datetime, java.lang.Object pageContext) {\n    this.datetime = datetime;\n    this.pageContext = pageContext;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "837", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.getDatetime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getDatetime() {\n    return datetime;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'datetime' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "838", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.getOptionalDatetime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Long> getOptionalDatetime() {\n    return Optional.<java.lang.Long>ofNullable(datetime);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'datetime' field as an Optional<java.lang.Long>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "839", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.setDatetime", "methodParameterType": "long#", "methodParameterName": "value#", "methodBody": "public void setDatetime(long value) {\n    this.datetime = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'datetime' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "840", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.getPageContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.Object getPageContext() {\n    return pageContext;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'pageContext' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "841", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.getOptionalPageContext", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Object> getOptionalPageContext() {\n    return Optional.<java.lang.Object>ofNullable(pageContext);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'pageContext' field as an Optional<java.lang.Object>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "842", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.setPageContext", "methodParameterType": "java.lang.Object#", "methodParameterName": "value#", "methodBody": "public void setPageContext(java.lang.Object value) {\n    this.pageContext = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'pageContext' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "843", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.ipc.specific.PageView.Builder newBuilder() {\n    return new org.apache.avro.ipc.specific.PageView.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new PageView RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "844", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.newBuilder", "methodParameterType": "org.apache.avro.ipc.specific.PageView.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.specific.PageView.Builder newBuilder(org.apache.avro.ipc.specific.PageView.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.specific.PageView.Builder();\n    } else {\n      return new org.apache.avro.ipc.specific.PageView.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new PageView RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "845", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/PageView.java", "methodName": "org.apache.avro.ipc.specific.PageView.newBuilder", "methodParameterType": "org.apache.avro.ipc.specific.PageView#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.specific.PageView.Builder newBuilder(org.apache.avro.ipc.specific.PageView other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.specific.PageView.Builder();\n    } else {\n      return new org.apache.avro.ipc.specific.PageView.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new PageView RecordBuilder by copying an existing PageView instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "846", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<CartPage> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "847", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<CartPage> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "848", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<CartPage> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<CartPage>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "849", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this CartPage to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "850", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static CartPage fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a CartPage from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "851", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.CartPage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CartPage() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "852", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.CartPage", "methodParameterType": "java.util.List<java.lang.String>#", "methodParameterName": "productsInCart#", "methodBody": "public CartPage(java.util.List<java.lang.String> productsInCart) {\n    this.productsInCart = productsInCart;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "853", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.getProductsInCart", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.List<java.lang.String> getProductsInCart() {\n    return productsInCart;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'productsInCart' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "854", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.getOptionalProductsInCart", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.util.List<java.lang.String>> getOptionalProductsInCart() {\n    return Optional.<java.util.List<java.lang.String>>ofNullable(productsInCart);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'productsInCart' field as an Optional<java.util.List<java.lang.String>>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "855", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.setProductsInCart", "methodParameterType": "java.util.List<java.lang.String>#", "methodParameterName": "value#", "methodBody": "public void setProductsInCart(java.util.List<java.lang.String> value) {\n    this.productsInCart = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'productsInCart' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "856", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.ipc.specific.CartPage.Builder newBuilder() {\n    return new org.apache.avro.ipc.specific.CartPage.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new CartPage RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "857", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.newBuilder", "methodParameterType": "org.apache.avro.ipc.specific.CartPage.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.specific.CartPage.Builder newBuilder(org.apache.avro.ipc.specific.CartPage.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.specific.CartPage.Builder();\n    } else {\n      return new org.apache.avro.ipc.specific.CartPage.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new CartPage RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "858", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/CartPage.java", "methodName": "org.apache.avro.ipc.specific.CartPage.newBuilder", "methodParameterType": "org.apache.avro.ipc.specific.CartPage#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.specific.CartPage.Builder newBuilder(org.apache.avro.ipc.specific.CartPage other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.specific.CartPage.Builder();\n    } else {\n      return new org.apache.avro.ipc.specific.CartPage.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new CartPage RecordBuilder by copying an existing CartPage instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "859", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<ProductPage> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "860", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<ProductPage> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "861", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<ProductPage> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<ProductPage>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "862", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this ProductPage to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "863", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static ProductPage fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a ProductPage from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "864", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.ProductPage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ProductPage() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "865", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.ProductPage", "methodParameterType": "java.lang.String#", "methodParameterName": "product#", "methodBody": "public ProductPage(java.lang.String product) {\n    this.product = product;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "866", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.getProduct", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getProduct() {\n    return product;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'product' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "867", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.getOptionalProduct", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalProduct() {\n    return Optional.<java.lang.String>ofNullable(product);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'product' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "868", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.setProduct", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setProduct(java.lang.String value) {\n    this.product = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'product' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "869", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.ipc.specific.ProductPage.Builder newBuilder() {\n    return new org.apache.avro.ipc.specific.ProductPage.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ProductPage RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "870", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.newBuilder", "methodParameterType": "org.apache.avro.ipc.specific.ProductPage.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.specific.ProductPage.Builder newBuilder(org.apache.avro.ipc.specific.ProductPage.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.specific.ProductPage.Builder();\n    } else {\n      return new org.apache.avro.ipc.specific.ProductPage.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ProductPage RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "871", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/ipc/specific/ProductPage.java", "methodName": "org.apache.avro.ipc.specific.ProductPage.newBuilder", "methodParameterType": "org.apache.avro.ipc.specific.ProductPage#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.ipc.specific.ProductPage.Builder newBuilder(org.apache.avro.ipc.specific.ProductPage other) {\n    if (other == null) {\n      return new org.apache.avro.ipc.specific.ProductPage.Builder();\n    } else {\n      return new org.apache.avro.ipc.specific.ProductPage.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new ProductPage RecordBuilder by copying an existing ProductPage instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "872", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<Interop> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "873", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<Interop> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "874", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<Interop> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<Interop>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "875", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this Interop to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "876", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static Interop fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a Interop from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "877", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.Interop", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Interop() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "878", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.Interop", "methodParameterType": "java.lang.Integer#java.lang.Long#java.lang.String#java.lang.Boolean#java.lang.Float#java.lang.Double#java.nio.ByteBuffer#java.lang.Void#java.util.List<java.lang.Double>#java.util.Map<java.lang.String,org.apache.avro.Foo>#java.lang.Object#org.apache.avro.Kind#org.apache.avro.MD5#org.apache.avro.Node#", "methodParameterName": "intField#longField#stringField#boolField#floatField#doubleField#bytesField#nullField#arrayField#mapField#unionField#enumField#fixedField#recordField#", "methodBody": "public Interop(java.lang.Integer intField, java.lang.Long longField, java.lang.String stringField, java.lang.Boolean boolField, java.lang.Float floatField, java.lang.Double doubleField, java.nio.ByteBuffer bytesField, java.lang.Void nullField, java.util.List<java.lang.Double> arrayField, java.util.Map<java.lang.String,org.apache.avro.Foo> mapField, java.lang.Object unionField, org.apache.avro.Kind enumField, org.apache.avro.MD5 fixedField, org.apache.avro.Node recordField) {\n    this.intField = intField;\n    this.longField = longField;\n    this.stringField = stringField;\n    this.boolField = boolField;\n    this.floatField = floatField;\n    this.doubleField = doubleField;\n    this.bytesField = bytesField;\n    this.nullField = nullField;\n    this.arrayField = arrayField;\n    this.mapField = mapField;\n    this.unionField = unionField;\n    this.enumField = enumField;\n    this.fixedField = fixedField;\n    this.recordField = recordField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "879", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getIntField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getIntField() {\n    return intField;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'intField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "880", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalIntField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Integer> getOptionalIntField() {\n    return Optional.<java.lang.Integer>ofNullable(intField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'intField' field as an Optional<java.lang.Integer>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "881", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setIntField", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "public void setIntField(int value) {\n    this.intField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'intField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "882", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getLongField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getLongField() {\n    return longField;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'longField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "883", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalLongField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Long> getOptionalLongField() {\n    return Optional.<java.lang.Long>ofNullable(longField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'longField' field as an Optional<java.lang.Long>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "884", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setLongField", "methodParameterType": "long#", "methodParameterName": "value#", "methodBody": "public void setLongField(long value) {\n    this.longField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'longField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "885", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getStringField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getStringField() {\n    return stringField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'stringField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "886", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalStringField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalStringField() {\n    return Optional.<java.lang.String>ofNullable(stringField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'stringField' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "887", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setStringField", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setStringField(java.lang.String value) {\n    this.stringField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'stringField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "888", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getBoolField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean getBoolField() {\n    return boolField;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'boolField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "889", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalBoolField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Boolean> getOptionalBoolField() {\n    return Optional.<java.lang.Boolean>ofNullable(boolField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'boolField' field as an Optional<java.lang.Boolean>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "890", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setBoolField", "methodParameterType": "boolean#", "methodParameterName": "value#", "methodBody": "public void setBoolField(boolean value) {\n    this.boolField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'boolField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "891", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getFloatField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public float getFloatField() {\n    return floatField;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'floatField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "892", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalFloatField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Float> getOptionalFloatField() {\n    return Optional.<java.lang.Float>ofNullable(floatField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'floatField' field as an Optional<java.lang.Float>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "893", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setFloatField", "methodParameterType": "float#", "methodParameterName": "value#", "methodBody": "public void setFloatField(float value) {\n    this.floatField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'floatField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "894", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getDoubleField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public double getDoubleField() {\n    return doubleField;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'doubleField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "895", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalDoubleField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Double> getOptionalDoubleField() {\n    return Optional.<java.lang.Double>ofNullable(doubleField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'doubleField' field as an Optional<java.lang.Double>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "896", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setDoubleField", "methodParameterType": "double#", "methodParameterName": "value#", "methodBody": "public void setDoubleField(double value) {\n    this.doubleField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'doubleField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "897", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getBytesField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer getBytesField() {\n    return bytesField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'bytesField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "898", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalBytesField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.nio.ByteBuffer> getOptionalBytesField() {\n    return Optional.<java.nio.ByteBuffer>ofNullable(bytesField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'bytesField' field as an Optional<java.nio.ByteBuffer>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "899", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setBytesField", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "value#", "methodBody": "public void setBytesField(java.nio.ByteBuffer value) {\n    this.bytesField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'bytesField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "900", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getNullField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.Void getNullField() {\n    return nullField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nullField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "901", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalNullField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Void> getOptionalNullField() {\n    return Optional.<java.lang.Void>ofNullable(nullField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nullField' field as an Optional<java.lang.Void>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "902", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setNullField", "methodParameterType": "java.lang.Void#", "methodParameterName": "value#", "methodBody": "public void setNullField(java.lang.Void value) {\n    this.nullField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'nullField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "903", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getArrayField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.List<java.lang.Double> getArrayField() {\n    return arrayField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'arrayField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "904", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalArrayField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.util.List<java.lang.Double>> getOptionalArrayField() {\n    return Optional.<java.util.List<java.lang.Double>>ofNullable(arrayField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'arrayField' field as an Optional<java.util.List<java.lang.Double>>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "905", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setArrayField", "methodParameterType": "java.util.List<java.lang.Double>#", "methodParameterName": "value#", "methodBody": "public void setArrayField(java.util.List<java.lang.Double> value) {\n    this.arrayField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'arrayField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "906", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getMapField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.Map<java.lang.String,org.apache.avro.Foo> getMapField() {\n    return mapField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'mapField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "907", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalMapField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.util.Map<java.lang.String,org.apache.avro.Foo>> getOptionalMapField() {\n    return Optional.<java.util.Map<java.lang.String,org.apache.avro.Foo>>ofNullable(mapField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'mapField' field as an Optional<java.util.Map<java.lang.String,org.apache.avro.Foo>>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "908", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setMapField", "methodParameterType": "java.util.Map<java.lang.String,org.apache.avro.Foo>#", "methodParameterName": "value#", "methodBody": "public void setMapField(java.util.Map<java.lang.String,org.apache.avro.Foo> value) {\n    this.mapField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'mapField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "909", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getUnionField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.Object getUnionField() {\n    return unionField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'unionField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "910", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalUnionField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Object> getOptionalUnionField() {\n    return Optional.<java.lang.Object>ofNullable(unionField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'unionField' field as an Optional<java.lang.Object>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "911", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setUnionField", "methodParameterType": "java.lang.Object#", "methodParameterName": "value#", "methodBody": "public void setUnionField(java.lang.Object value) {\n    this.unionField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'unionField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "912", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getEnumField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.Kind getEnumField() {\n    return enumField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'enumField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "913", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalEnumField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.Kind> getOptionalEnumField() {\n    return Optional.<org.apache.avro.Kind>ofNullable(enumField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'enumField' field as an Optional<org.apache.avro.Kind>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "914", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setEnumField", "methodParameterType": "org.apache.avro.Kind#", "methodParameterName": "value#", "methodBody": "public void setEnumField(org.apache.avro.Kind value) {\n    this.enumField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'enumField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "915", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getFixedField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.MD5 getFixedField() {\n    return fixedField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'fixedField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "916", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalFixedField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.MD5> getOptionalFixedField() {\n    return Optional.<org.apache.avro.MD5>ofNullable(fixedField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'fixedField' field as an Optional<org.apache.avro.MD5>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "917", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setFixedField", "methodParameterType": "org.apache.avro.MD5#", "methodParameterName": "value#", "methodBody": "public void setFixedField(org.apache.avro.MD5 value) {\n    this.fixedField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'fixedField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "918", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getRecordField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.Node getRecordField() {\n    return recordField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'recordField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "919", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getOptionalRecordField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.Node> getOptionalRecordField() {\n    return Optional.<org.apache.avro.Node>ofNullable(recordField);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'recordField' field as an Optional<org.apache.avro.Node>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "920", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setRecordField", "methodParameterType": "org.apache.avro.Node#", "methodParameterName": "value#", "methodBody": "public void setRecordField(org.apache.avro.Node value) {\n    this.recordField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'recordField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "921", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.Interop.Builder newBuilder() {\n    return new org.apache.avro.Interop.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Interop RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "922", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.newBuilder", "methodParameterType": "org.apache.avro.Interop.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.Interop.Builder newBuilder(org.apache.avro.Interop.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.Interop.Builder();\n    } else {\n      return new org.apache.avro.Interop.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Interop RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "923", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.newBuilder", "methodParameterType": "org.apache.avro.Interop#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.Interop.Builder newBuilder(org.apache.avro.Interop other) {\n    if (other == null) {\n      return new org.apache.avro.Interop.Builder();\n    } else {\n      return new org.apache.avro.Interop.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Interop RecordBuilder by copying an existing Interop instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "924", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<Node> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "925", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<Node> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "926", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<Node> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<Node>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "927", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this Node to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "928", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static Node fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a Node from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "929", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.Node", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Node() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "930", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.Node", "methodParameterType": "java.lang.String#java.util.List<org.apache.avro.Node>#", "methodParameterName": "label#children#", "methodBody": "public Node(java.lang.String label, java.util.List<org.apache.avro.Node> children) {\n    this.label = label;\n    this.children = children;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "931", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.getLabel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getLabel() {\n    return label;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'label' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "932", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.getOptionalLabel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalLabel() {\n    return Optional.<java.lang.String>ofNullable(label);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'label' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "933", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.setLabel", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setLabel(java.lang.String value) {\n    this.label = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'label' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "934", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.getChildren", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.List<org.apache.avro.Node> getChildren() {\n    return children;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'children' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "935", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.getOptionalChildren", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.util.List<org.apache.avro.Node>> getOptionalChildren() {\n    return Optional.<java.util.List<org.apache.avro.Node>>ofNullable(children);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'children' field as an Optional<java.util.List<org.apache.avro.Node>>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "936", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.setChildren", "methodParameterType": "java.util.List<org.apache.avro.Node>#", "methodParameterName": "value#", "methodBody": "public void setChildren(java.util.List<org.apache.avro.Node> value) {\n    this.children = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'children' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "937", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.Node.Builder newBuilder() {\n    return new org.apache.avro.Node.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Node RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "938", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.newBuilder", "methodParameterType": "org.apache.avro.Node.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.Node.Builder newBuilder(org.apache.avro.Node.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.Node.Builder();\n    } else {\n      return new org.apache.avro.Node.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Node RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "939", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.newBuilder", "methodParameterType": "org.apache.avro.Node#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.Node.Builder newBuilder(org.apache.avro.Node other) {\n    if (other == null) {\n      return new org.apache.avro.Node.Builder();\n    } else {\n      return new org.apache.avro.Node.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Node RecordBuilder by copying an existing Node instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "940", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<TestRecord2> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "941", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<TestRecord2> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "942", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<TestRecord2> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<TestRecord2>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "943", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this TestRecord2 to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "944", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static TestRecord2 fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a TestRecord2 from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "945", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.TestRecord2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TestRecord2() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "946", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.TestRecord2", "methodParameterType": "java.lang.String#java.lang.Long#java.lang.String#", "methodParameterName": "name#value#data#", "methodBody": "public TestRecord2(java.lang.String name, java.lang.Long value, java.lang.String data) {\n    this.name = name;\n    this.value = value;\n    this.data = data;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "947", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getName() {\n    return name;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "948", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.getOptionalName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalName() {\n    return Optional.<java.lang.String>ofNullable(name);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'name' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "949", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.setName", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setName(java.lang.String value) {\n    this.name = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "950", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getValue() {\n    return value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'value' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "951", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.getOptionalValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Long> getOptionalValue() {\n    return Optional.<java.lang.Long>ofNullable(value);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'value' field as an Optional<java.lang.Long>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "952", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.setValue", "methodParameterType": "long#", "methodParameterName": "value#", "methodBody": "public void setValue(long value) {\n    this.value = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'value' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "953", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.getData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getData() {\n    return data;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'data' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "954", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.getOptionalData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalData() {\n    return Optional.<java.lang.String>ofNullable(data);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'data' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "955", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.setData", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setData(java.lang.String value) {\n    this.data = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'data' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "956", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.compiler.schema.evolve.TestRecord2.Builder newBuilder() {\n    return new org.apache.avro.compiler.schema.evolve.TestRecord2.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TestRecord2 RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "957", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.newBuilder", "methodParameterType": "org.apache.avro.compiler.schema.evolve.TestRecord2.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.compiler.schema.evolve.TestRecord2.Builder newBuilder(org.apache.avro.compiler.schema.evolve.TestRecord2.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.compiler.schema.evolve.TestRecord2.Builder();\n    } else {\n      return new org.apache.avro.compiler.schema.evolve.TestRecord2.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TestRecord2 RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "958", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord2.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord2.newBuilder", "methodParameterType": "org.apache.avro.compiler.schema.evolve.TestRecord2#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.compiler.schema.evolve.TestRecord2.Builder newBuilder(org.apache.avro.compiler.schema.evolve.TestRecord2 other) {\n    if (other == null) {\n      return new org.apache.avro.compiler.schema.evolve.TestRecord2.Builder();\n    } else {\n      return new org.apache.avro.compiler.schema.evolve.TestRecord2.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TestRecord2 RecordBuilder by copying an existing TestRecord2 instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "959", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<NestedEvolve2> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "960", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<NestedEvolve2> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "961", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<NestedEvolve2> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<NestedEvolve2>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "962", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this NestedEvolve2 to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "963", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static NestedEvolve2 fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a NestedEvolve2 from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "964", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.NestedEvolve2", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NestedEvolve2() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "965", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.NestedEvolve2", "methodParameterType": "java.lang.String#org.apache.avro.compiler.schema.evolve.TestRecord2#", "methodParameterName": "rootName#nested#", "methodBody": "public NestedEvolve2(java.lang.String rootName, org.apache.avro.compiler.schema.evolve.TestRecord2 nested) {\n    this.rootName = rootName;\n    this.nested = nested;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "966", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.getRootName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getRootName() {\n    return rootName;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'rootName' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "967", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.getOptionalRootName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalRootName() {\n    return Optional.<java.lang.String>ofNullable(rootName);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'rootName' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "968", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.setRootName", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setRootName(java.lang.String value) {\n    this.rootName = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'rootName' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "969", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.getNested", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.compiler.schema.evolve.TestRecord2 getNested() {\n    return nested;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nested' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "970", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.getOptionalNested", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.compiler.schema.evolve.TestRecord2> getOptionalNested() {\n    return Optional.<org.apache.avro.compiler.schema.evolve.TestRecord2>ofNullable(nested);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nested' field as an Optional<org.apache.avro.compiler.schema.evolve.TestRecord2>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "971", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.setNested", "methodParameterType": "org.apache.avro.compiler.schema.evolve.TestRecord2#", "methodParameterName": "value#", "methodBody": "public void setNested(org.apache.avro.compiler.schema.evolve.TestRecord2 value) {\n    this.nested = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'nested' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "972", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.compiler.schema.evolve.NestedEvolve2.Builder newBuilder() {\n    return new org.apache.avro.compiler.schema.evolve.NestedEvolve2.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedEvolve2 RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "973", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.newBuilder", "methodParameterType": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.compiler.schema.evolve.NestedEvolve2.Builder newBuilder(org.apache.avro.compiler.schema.evolve.NestedEvolve2.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.compiler.schema.evolve.NestedEvolve2.Builder();\n    } else {\n      return new org.apache.avro.compiler.schema.evolve.NestedEvolve2.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedEvolve2 RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "974", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve2.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve2.newBuilder", "methodParameterType": "org.apache.avro.compiler.schema.evolve.NestedEvolve2#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.compiler.schema.evolve.NestedEvolve2.Builder newBuilder(org.apache.avro.compiler.schema.evolve.NestedEvolve2 other) {\n    if (other == null) {\n      return new org.apache.avro.compiler.schema.evolve.NestedEvolve2.Builder();\n    } else {\n      return new org.apache.avro.compiler.schema.evolve.NestedEvolve2.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedEvolve2 RecordBuilder by copying an existing NestedEvolve2 instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "975", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<NestedEvolve3> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "976", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<NestedEvolve3> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "977", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<NestedEvolve3> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<NestedEvolve3>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "978", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this NestedEvolve3 to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "979", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static NestedEvolve3 fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a NestedEvolve3 from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "980", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.NestedEvolve3", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NestedEvolve3() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "981", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.NestedEvolve3", "methodParameterType": "java.lang.String#org.apache.avro.compiler.schema.evolve.TestRecord3#", "methodParameterName": "rootName#nested#", "methodBody": "public NestedEvolve3(java.lang.String rootName, org.apache.avro.compiler.schema.evolve.TestRecord3 nested) {\n    this.rootName = rootName;\n    this.nested = nested;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "982", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.getRootName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getRootName() {\n    return rootName;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'rootName' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "983", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.getOptionalRootName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalRootName() {\n    return Optional.<java.lang.String>ofNullable(rootName);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'rootName' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "984", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.setRootName", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setRootName(java.lang.String value) {\n    this.rootName = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'rootName' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "985", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.getNested", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.compiler.schema.evolve.TestRecord3 getNested() {\n    return nested;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nested' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "986", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.getOptionalNested", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.compiler.schema.evolve.TestRecord3> getOptionalNested() {\n    return Optional.<org.apache.avro.compiler.schema.evolve.TestRecord3>ofNullable(nested);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nested' field as an Optional<org.apache.avro.compiler.schema.evolve.TestRecord3>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "987", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.setNested", "methodParameterType": "org.apache.avro.compiler.schema.evolve.TestRecord3#", "methodParameterName": "value#", "methodBody": "public void setNested(org.apache.avro.compiler.schema.evolve.TestRecord3 value) {\n    this.nested = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'nested' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "988", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.compiler.schema.evolve.NestedEvolve3.Builder newBuilder() {\n    return new org.apache.avro.compiler.schema.evolve.NestedEvolve3.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedEvolve3 RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "989", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.newBuilder", "methodParameterType": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.compiler.schema.evolve.NestedEvolve3.Builder newBuilder(org.apache.avro.compiler.schema.evolve.NestedEvolve3.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.compiler.schema.evolve.NestedEvolve3.Builder();\n    } else {\n      return new org.apache.avro.compiler.schema.evolve.NestedEvolve3.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedEvolve3 RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "990", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve3.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve3.newBuilder", "methodParameterType": "org.apache.avro.compiler.schema.evolve.NestedEvolve3#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.compiler.schema.evolve.NestedEvolve3.Builder newBuilder(org.apache.avro.compiler.schema.evolve.NestedEvolve3 other) {\n    if (other == null) {\n      return new org.apache.avro.compiler.schema.evolve.NestedEvolve3.Builder();\n    } else {\n      return new org.apache.avro.compiler.schema.evolve.NestedEvolve3.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedEvolve3 RecordBuilder by copying an existing NestedEvolve3 instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "991", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<TestRecord3> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "992", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<TestRecord3> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "993", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<TestRecord3> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<TestRecord3>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "994", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this TestRecord3 to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "995", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static TestRecord3 fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a TestRecord3 from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "996", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.TestRecord3", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TestRecord3() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "997", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.TestRecord3", "methodParameterType": "java.lang.String#java.lang.String#", "methodParameterName": "name#data#", "methodBody": "public TestRecord3(java.lang.String name, java.lang.String data) {\n    this.name = name;\n    this.data = data;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "998", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getName() {\n    return name;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "999", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.getOptionalName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalName() {\n    return Optional.<java.lang.String>ofNullable(name);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'name' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1000", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.setName", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setName(java.lang.String value) {\n    this.name = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1001", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.getData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getData() {\n    return data;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'data' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1002", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.getOptionalData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalData() {\n    return Optional.<java.lang.String>ofNullable(data);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'data' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1003", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.setData", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setData(java.lang.String value) {\n    this.data = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'data' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1004", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.compiler.schema.evolve.TestRecord3.Builder newBuilder() {\n    return new org.apache.avro.compiler.schema.evolve.TestRecord3.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TestRecord3 RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1005", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.newBuilder", "methodParameterType": "org.apache.avro.compiler.schema.evolve.TestRecord3.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.compiler.schema.evolve.TestRecord3.Builder newBuilder(org.apache.avro.compiler.schema.evolve.TestRecord3.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.compiler.schema.evolve.TestRecord3.Builder();\n    } else {\n      return new org.apache.avro.compiler.schema.evolve.TestRecord3.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TestRecord3 RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1006", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord3.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord3.newBuilder", "methodParameterType": "org.apache.avro.compiler.schema.evolve.TestRecord3#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.compiler.schema.evolve.TestRecord3.Builder newBuilder(org.apache.avro.compiler.schema.evolve.TestRecord3 other) {\n    if (other == null) {\n      return new org.apache.avro.compiler.schema.evolve.TestRecord3.Builder();\n    } else {\n      return new org.apache.avro.compiler.schema.evolve.TestRecord3.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TestRecord3 RecordBuilder by copying an existing TestRecord3 instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1007", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<NestedEvolve1> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1008", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<NestedEvolve1> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1009", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<NestedEvolve1> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<NestedEvolve1>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1010", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this NestedEvolve1 to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1011", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static NestedEvolve1 fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a NestedEvolve1 from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1012", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.NestedEvolve1", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NestedEvolve1() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1013", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.NestedEvolve1", "methodParameterType": "java.lang.String#org.apache.avro.compiler.schema.evolve.TestRecord1#", "methodParameterName": "rootName#nested#", "methodBody": "public NestedEvolve1(java.lang.String rootName, org.apache.avro.compiler.schema.evolve.TestRecord1 nested) {\n    this.rootName = rootName;\n    this.nested = nested;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1014", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.getRootName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getRootName() {\n    return rootName;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'rootName' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1015", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.getOptionalRootName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalRootName() {\n    return Optional.<java.lang.String>ofNullable(rootName);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'rootName' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1016", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.setRootName", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setRootName(java.lang.String value) {\n    this.rootName = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'rootName' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1017", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.getNested", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.compiler.schema.evolve.TestRecord1 getNested() {\n    return nested;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nested' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1018", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.getOptionalNested", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.compiler.schema.evolve.TestRecord1> getOptionalNested() {\n    return Optional.<org.apache.avro.compiler.schema.evolve.TestRecord1>ofNullable(nested);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nested' field as an Optional<org.apache.avro.compiler.schema.evolve.TestRecord1>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1019", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.setNested", "methodParameterType": "org.apache.avro.compiler.schema.evolve.TestRecord1#", "methodParameterName": "value#", "methodBody": "public void setNested(org.apache.avro.compiler.schema.evolve.TestRecord1 value) {\n    this.nested = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'nested' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1020", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.compiler.schema.evolve.NestedEvolve1.Builder newBuilder() {\n    return new org.apache.avro.compiler.schema.evolve.NestedEvolve1.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedEvolve1 RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1021", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.newBuilder", "methodParameterType": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.compiler.schema.evolve.NestedEvolve1.Builder newBuilder(org.apache.avro.compiler.schema.evolve.NestedEvolve1.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.compiler.schema.evolve.NestedEvolve1.Builder();\n    } else {\n      return new org.apache.avro.compiler.schema.evolve.NestedEvolve1.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedEvolve1 RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1022", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/NestedEvolve1.java", "methodName": "org.apache.avro.compiler.schema.evolve.NestedEvolve1.newBuilder", "methodParameterType": "org.apache.avro.compiler.schema.evolve.NestedEvolve1#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.compiler.schema.evolve.NestedEvolve1.Builder newBuilder(org.apache.avro.compiler.schema.evolve.NestedEvolve1 other) {\n    if (other == null) {\n      return new org.apache.avro.compiler.schema.evolve.NestedEvolve1.Builder();\n    } else {\n      return new org.apache.avro.compiler.schema.evolve.NestedEvolve1.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedEvolve1 RecordBuilder by copying an existing NestedEvolve1 instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1023", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<TestRecord1> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1024", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<TestRecord1> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1025", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<TestRecord1> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<TestRecord1>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1026", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this TestRecord1 to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1027", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static TestRecord1 fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a TestRecord1 from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1028", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.TestRecord1", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TestRecord1() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1029", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.TestRecord1", "methodParameterType": "java.lang.String#java.lang.Long#", "methodParameterName": "name#value#", "methodBody": "public TestRecord1(java.lang.String name, java.lang.Long value) {\n    this.name = name;\n    this.value = value;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1030", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getName() {\n    return name;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1031", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.getOptionalName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalName() {\n    return Optional.<java.lang.String>ofNullable(name);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'name' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1032", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.setName", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setName(java.lang.String value) {\n    this.name = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1033", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getValue() {\n    return value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'value' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1034", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.getOptionalValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Long> getOptionalValue() {\n    return Optional.<java.lang.Long>ofNullable(value);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'value' field as an Optional<java.lang.Long>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1035", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.setValue", "methodParameterType": "long#", "methodParameterName": "value#", "methodBody": "public void setValue(long value) {\n    this.value = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'value' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1036", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.compiler.schema.evolve.TestRecord1.Builder newBuilder() {\n    return new org.apache.avro.compiler.schema.evolve.TestRecord1.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TestRecord1 RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1037", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.newBuilder", "methodParameterType": "org.apache.avro.compiler.schema.evolve.TestRecord1.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.compiler.schema.evolve.TestRecord1.Builder newBuilder(org.apache.avro.compiler.schema.evolve.TestRecord1.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.compiler.schema.evolve.TestRecord1.Builder();\n    } else {\n      return new org.apache.avro.compiler.schema.evolve.TestRecord1.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TestRecord1 RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1038", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/compiler/schema/evolve/TestRecord1.java", "methodName": "org.apache.avro.compiler.schema.evolve.TestRecord1.newBuilder", "methodParameterType": "org.apache.avro.compiler.schema.evolve.TestRecord1#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.compiler.schema.evolve.TestRecord1.Builder newBuilder(org.apache.avro.compiler.schema.evolve.TestRecord1 other) {\n    if (other == null) {\n      return new org.apache.avro.compiler.schema.evolve.TestRecord1.Builder();\n    } else {\n      return new org.apache.avro.compiler.schema.evolve.TestRecord1.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TestRecord1 RecordBuilder by copying an existing TestRecord1 instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1039", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Echo.java", "methodName": "org.apache.avro.echo.Echo.ping", "methodParameterType": "org.apache.avro.echo.Ping#", "methodParameterName": "ping#", "methodBody": "org.apache.avro.echo.Pong ping(org.apache.avro.echo.Ping ping);", "AST": "Javadoc#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "/", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1040", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<Pong> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1041", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<Pong> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1042", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<Pong> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<Pong>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1043", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this Pong to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1044", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static Pong fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a Pong from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1045", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.Pong", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Pong() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1046", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.Pong", "methodParameterType": "java.lang.Long#org.apache.avro.echo.Ping#", "methodParameterName": "timestamp#ping#", "methodBody": "public Pong(java.lang.Long timestamp, org.apache.avro.echo.Ping ping) {\n    this.timestamp = timestamp;\n    this.ping = ping;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1047", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.getTimestamp", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getTimestamp() {\n    return timestamp;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'timestamp' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1048", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.getOptionalTimestamp", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Long> getOptionalTimestamp() {\n    return Optional.<java.lang.Long>ofNullable(timestamp);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'timestamp' field as an Optional<java.lang.Long>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1049", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.setTimestamp", "methodParameterType": "long#", "methodParameterName": "value#", "methodBody": "public void setTimestamp(long value) {\n    this.timestamp = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'timestamp' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1050", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.getPing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.echo.Ping getPing() {\n    return ping;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'ping' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1051", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.getOptionalPing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<org.apache.avro.echo.Ping> getOptionalPing() {\n    return Optional.<org.apache.avro.echo.Ping>ofNullable(ping);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'ping' field as an Optional<org.apache.avro.echo.Ping>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1052", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.setPing", "methodParameterType": "org.apache.avro.echo.Ping#", "methodParameterName": "value#", "methodBody": "public void setPing(org.apache.avro.echo.Ping value) {\n    this.ping = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'ping' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1053", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.echo.Pong.Builder newBuilder() {\n    return new org.apache.avro.echo.Pong.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Pong RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1054", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.newBuilder", "methodParameterType": "org.apache.avro.echo.Pong.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.echo.Pong.Builder newBuilder(org.apache.avro.echo.Pong.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.echo.Pong.Builder();\n    } else {\n      return new org.apache.avro.echo.Pong.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Pong RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1055", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Pong.java", "methodName": "org.apache.avro.echo.Pong.newBuilder", "methodParameterType": "org.apache.avro.echo.Pong#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.echo.Pong.Builder newBuilder(org.apache.avro.echo.Pong other) {\n    if (other == null) {\n      return new org.apache.avro.echo.Pong.Builder();\n    } else {\n      return new org.apache.avro.echo.Pong.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Pong RecordBuilder by copying an existing Pong instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1056", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<Ping> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1057", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<Ping> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1058", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<Ping> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<Ping>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1059", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this Ping to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1060", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static Ping fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a Ping from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1061", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.Ping", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Ping() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1062", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.Ping", "methodParameterType": "java.lang.Long#java.lang.String#", "methodParameterName": "timestamp#text#", "methodBody": "public Ping(java.lang.Long timestamp, java.lang.String text) {\n    this.timestamp = timestamp;\n    this.text = text;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1063", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.getTimestamp", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getTimestamp() {\n    return timestamp;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'timestamp' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1064", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.getOptionalTimestamp", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.Long> getOptionalTimestamp() {\n    return Optional.<java.lang.Long>ofNullable(timestamp);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'timestamp' field as an Optional<java.lang.Long>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1065", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.setTimestamp", "methodParameterType": "long#", "methodParameterName": "value#", "methodBody": "public void setTimestamp(long value) {\n    this.timestamp = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'timestamp' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1066", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.getText", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.String getText() {\n    return text;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'text' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1067", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.getOptionalText", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Optional<java.lang.String> getOptionalText() {\n    return Optional.<java.lang.String>ofNullable(text);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'text' field as an Optional<java.lang.String>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1068", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.setText", "methodParameterType": "java.lang.String#", "methodParameterName": "value#", "methodBody": "public void setText(java.lang.String value) {\n    this.text = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'text' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1069", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.echo.Ping.Builder newBuilder() {\n    return new org.apache.avro.echo.Ping.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Ping RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1070", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.newBuilder", "methodParameterType": "org.apache.avro.echo.Ping.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.echo.Ping.Builder newBuilder(org.apache.avro.echo.Ping.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.echo.Ping.Builder();\n    } else {\n      return new org.apache.avro.echo.Ping.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Ping RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1071", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/echo/Ping.java", "methodName": "org.apache.avro.echo.Ping.newBuilder", "methodParameterType": "org.apache.avro.echo.Ping#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.echo.Ping.Builder newBuilder(org.apache.avro.echo.Ping other) {\n    if (other == null) {\n      return new org.apache.avro.echo.Ping.Builder();\n    } else {\n      return new org.apache.avro.echo.Ping.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Ping RecordBuilder by copying an existing Ping instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1072", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/MD5.java", "methodName": "org.apache.avro.MD5.MD5", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MD5() {\n    super();\n  }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new MD5", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1073", "file": "/root/repos/repos8/avro/lang/java/ipc/target/generated-test-sources/java/org/apache/avro/MD5.java", "methodName": "org.apache.avro.MD5.MD5", "methodParameterType": "byte[]#", "methodParameterName": "bytes#", "methodBody": "public MD5(byte[] bytes) {\n    super(bytes);\n  }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new MD5 with the given bytes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1074", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/schema/SchemaVisitor.java", "methodName": "org.apache.avro.compiler.schema.SchemaVisitor.visitTerminal", "methodParameterType": "Schema#", "methodParameterName": "terminal#", "methodBody": "SchemaVisitorAction visitTerminal(Schema terminal);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked for schemas that do not have \"child\" schemas (like string, int ...) or for a previously encountered schema with children, which will be treated as a terminal. (to avoid circular recursion)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1075", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/schema/SchemaVisitor.java", "methodName": "org.apache.avro.compiler.schema.SchemaVisitor.visitNonTerminal", "methodParameterType": "Schema#", "methodParameterName": "nonTerminal#", "methodBody": "SchemaVisitorAction visitNonTerminal(Schema nonTerminal);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked for schema with children before proceeding to visit the children.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1076", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/schema/SchemaVisitor.java", "methodName": "org.apache.avro.compiler.schema.SchemaVisitor.afterVisitNonTerminal", "methodParameterType": "Schema#", "methodParameterName": "nonTerminal#", "methodBody": "SchemaVisitorAction afterVisitNonTerminal(Schema nonTerminal);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoked for schemas with children after its children have been visited.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1077", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/schema/SchemaVisitor.java", "methodName": "org.apache.avro.compiler.schema.SchemaVisitor.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "T get();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Invoked when visiting is complete.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1078", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/schema/CloningVisitor.java", "methodName": "org.apache.avro.compiler.schema.CloningVisitor.CloningVisitor", "methodParameterType": "Schema#", "methodParameterName": "root#", "methodBody": "public CloningVisitor(final Schema root) {\n    this(new PropertyCopier() {\n      @Override\n      public void copy(final Schema first, final Schema second) {\n        Schemas.copyLogicalTypes(first, second);\n        Schemas.copyAliases(first, second);\n      }\n\n      @Override\n      public void copy(final Schema.Field first, final Schema.Field second) {\n        Schemas.copyAliases(first, second);\n      }\n    }, false, root);\n  }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#BooleanLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "copy only serialization necessary fields.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1079", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/schema/Schemas.java", "methodName": "org.apache.avro.compiler.schema.Schemas.visit", "methodParameterType": "Schema#SchemaVisitor<T>#", "methodParameterName": "start#visitor#", "methodBody": "public static <T> T visit(final Schema start, final SchemaVisitor<T> visitor) {\n    // Set of Visited Schemas\n    IdentityHashMap<Schema, Schema> visited = new IdentityHashMap<>();\n    // Stack that contains the Schams to process and afterVisitNonTerminal\n    // functions.\n    // Deque<Either<Schema, Supplier<SchemaVisitorAction>>>\n    // Using either has a cost which we want to avoid...\n    Deque<Object> dq = new ArrayDeque<>();\n    dq.addLast(start);\n    Object current;\n    while ((current = dq.pollLast()) != null) {\n      if (current instanceof Supplier) {\n        // we are executing a non terminal post visit.\n        SchemaVisitorAction action = ((Supplier<SchemaVisitorAction>) current).get();\n        switch (action) {\n        case CONTINUE:\n          break;\n        case SKIP_SUBTREE:\n          throw new UnsupportedOperationException();\n        case SKIP_SIBLINGS:\n          while (dq.getLast() instanceof Schema) {\n            dq.removeLast();\n          }\n          break;\n        case TERMINATE:\n          return visitor.get();\n        default:\n          throw new UnsupportedOperationException(\"Invalid action \" + action);\n        }\n      } else {\n        Schema schema = (Schema) current;\n        boolean terminate;\n        if (!visited.containsKey(schema)) {\n          Schema.Type type = schema.getType();\n          switch (type) {\n          case ARRAY:\n            terminate = visitNonTerminal(visitor, schema, dq, Collections.singleton(schema.getElementType()));\n            visited.put(schema, schema);\n            break;\n          case RECORD:\n            Iterator<Schema> reverseSchemas = schema.getFields().stream().map(Field::schema)\n                .collect(Collectors.toCollection(ArrayDeque::new)).descendingIterator();\n            terminate = visitNonTerminal(visitor, schema, dq, () -> reverseSchemas);\n            visited.put(schema, schema);\n            break;\n          case UNION:\n            terminate = visitNonTerminal(visitor, schema, dq, schema.getTypes());\n            visited.put(schema, schema);\n            break;\n          case MAP:\n            terminate = visitNonTerminal(visitor, schema, dq, Collections.singleton(schema.getValueType()));\n            visited.put(schema, schema);\n            break;\n          case NULL:\n          case BOOLEAN:\n          case BYTES:\n          case DOUBLE:\n          case ENUM:\n          case FIXED:\n          case FLOAT:\n          case INT:\n          case LONG:\n          case STRING:\n            terminate = visitTerminal(visitor, schema, dq);\n            break;\n          default:\n            throw new UnsupportedOperationException(\"Invalid type \" + type);\n          }\n\n        } else {\n          terminate = visitTerminal(visitor, schema, dq);\n        }\n        if (terminate) {\n          return visitor.get();\n        }\n      }\n    }\n    return visitor.get();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SwitchCase#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#CreationReference#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#LambdaExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(WhileStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CreationReference(SimpleType(SimpleName)SimpleName)SimpleType)CreationReference)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(SimpleName)SimpleName)LambdaExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "depth first visit.", "call_func_name": ["java.util.IdentityHashMap.<init>", "java.util.ArrayDeque.<init>", "java.util.Deque.addLast", "java.util.Deque.pollLast", "java.util.function.Supplier.get", "org.apache.avro.compiler.schema.SchemaVisitorAction.ordinal", "java.lang.UnsupportedOperationException.<init>", "java.util.Deque.getLast", "java.util.Deque.removeLast", "org.apache.avro.compiler.schema.SchemaVisitor.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.UnsupportedOperationException.<init>", "java.util.IdentityHashMap.containsKey", "org.apache.avro.Schema.getType", "org.apache.avro.Schema.getElementType", "java.util.Collections.singleton", "org.apache.avro.compiler.schema.Schemas.visitNonTerminal", "java.util.IdentityHashMap.put", "org.apache.avro.Schema.getFields", "java.util.List.stream", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.stream.Collectors.toCollection", "java.util.stream.Stream.collect", "java.util.ArrayDeque.descendingIterator", "java.lang.Iterable.iterator", "org.apache.avro.Schema.getTypes", "org.apache.avro.Schema.getValueType", "org.apache.avro.compiler.schema.Schemas.visitTerminal"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], [""], [""], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object"], [""], [""], ["java.lang.Object"], ["org.apache.avro.compiler.schema.SchemaVisitor", "org.apache.avro.Schema", "java.util.Deque", "java.lang.Iterable"], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], ["java.util.function.Function"], ["java.util.function.Supplier"], ["java.util.stream.Collector"], [""], ["java.util.Iterator"], [""], [""], ["org.apache.avro.compiler.schema.SchemaVisitor", "org.apache.avro.Schema", "java.util.Deque"]], "passed_comments": [{"org.apache.avro.compiler.schema.SchemaVisitor.get": "Invoked when visiting is complete."}, {"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getElementType": "If this is an array, returns its element type."}, {"org.apache.avro.Schema.getFields": "If this is a record, returns the fields in it. The returned list is in the order of their positions."}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}, {"org.apache.avro.Schema.getValueType": "If this is a map, returns its value type."}]}, {"index": "1080", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java", "methodName": "org.apache.avro.compiler.specific.ProtocolTask.setFile", "methodParameterType": "File#", "methodParameterName": "file#", "methodBody": "public void setFile(File file) {\n    this.src = file;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the schema file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1081", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java", "methodName": "org.apache.avro.compiler.specific.ProtocolTask.setDestdir", "methodParameterType": "File#", "methodParameterName": "dir#", "methodBody": "public void setDestdir(File dir) {\n    this.dest = dir;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the output directory", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1082", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java", "methodName": "org.apache.avro.compiler.specific.ProtocolTask.setStringType", "methodParameterType": "StringType#", "methodParameterName": "type#", "methodBody": "public void setStringType(StringType type) {\n    this.stringType = type;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the string type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1083", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java", "methodName": "org.apache.avro.compiler.specific.ProtocolTask.getStringType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public StringType getStringType() {\n    return this.stringType;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the string type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1084", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java", "methodName": "org.apache.avro.compiler.specific.ProtocolTask.addFileset", "methodParameterType": "FileSet#", "methodParameterName": "set#", "methodBody": "public void addFileset(FileSet set) {\n    filesets.add(set);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a fileset.", "call_func_name": ["java.util.ArrayList.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1085", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/ProtocolTask.java", "methodName": "org.apache.avro.compiler.specific.ProtocolTask.execute", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void execute() {\n    if (src == null && filesets.size() == 0)\n      throw new BuildException(\"No file or fileset specified.\");\n\n    if (src != null)\n      compile(src);\n\n    Project myProject = getProject();\n    for (FileSet fs : filesets) {\n      DirectoryScanner ds = fs.getDirectoryScanner(myProject);\n      File dir = fs.getDir(myProject);\n      String[] srcs = ds.getIncludedFiles();\n      for (String src1 : srcs) {\n        compile(new File(dir, src1));\n      }\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Run the compiler.", "call_func_name": ["java.util.ArrayList.size", "org.apache.tools.ant.BuildException.<init>", "org.apache.avro.compiler.specific.ProtocolTask.compile", "org.apache.avro.compiler.specific.ProtocolTask.getProject", "java.util.ArrayList.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.tools.ant.types.FileSet.getDirectoryScanner", "org.apache.tools.ant.types.FileSet.getDir", "org.apache.tools.ant.DirectoryScanner.getIncludedFiles", "java.io.File.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["java.io.File"], [""], [""], [""], [""], ["org.apache.tools.ant.Project"], ["org.apache.tools.ant.Project"], [""], ["java.io.File", "java.lang.String"]], "passed_comments": "/"}, {"index": "1086", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.SpecificCompiler", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "SpecificCompiler() {\n    this.templateDir = System.getProperty(\"org.apache.avro.specific.templates\",\n        \"/org/apache/avro/compiler/specific/templates/java/classic/\");\n    initializeVelocity();\n    initializeSpecificData();\n  }", "AST": "Javadoc#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a specific compiler with the given type to use for date/time related logical types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1087", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.setAdditionalVelocityTools", "methodParameterType": "List<Object>#", "methodParameterName": "additionalVelocityTools#", "methodBody": "public void setAdditionalVelocityTools(List<Object> additionalVelocityTools) {\n    this.additionalVelocityTools = additionalVelocityTools;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set additional Velocity tools (simple POJOs) to be injected into the Velocity template context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1088", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.setTemplateDir", "methodParameterType": "String#", "methodParameterName": "templateDir#", "methodBody": "public void setTemplateDir(String templateDir) {\n    this.templateDir = templateDir;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the resource directory where templates reside. First, the compiler checks the system path for the specified file, if not it is assumed that it is present on the classpath.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1089", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.setSuffix", "methodParameterType": "String#", "methodParameterName": "suffix#", "methodBody": "public void setSuffix(String suffix) {\n    this.suffix = suffix;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the resource file suffix, .java or .xxx", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1090", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.deprecatedFields", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean deprecatedFields() {\n    return (this.fieldVisibility == FieldVisibility.PUBLIC_DEPRECATED);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if the record fields should be marked as deprecated", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1091", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.publicFields", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean publicFields() {\n    return (this.fieldVisibility == FieldVisibility.PUBLIC\n        || this.fieldVisibility == FieldVisibility.PUBLIC_DEPRECATED);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if the record fields should be public", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1092", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.privateFields", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean privateFields() {\n    return (this.fieldVisibility == FieldVisibility.PRIVATE);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if the record fields should be private", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1093", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.setFieldVisibility", "methodParameterType": "FieldVisibility#", "methodParameterName": "fieldVisibility#", "methodBody": "public void setFieldVisibility(FieldVisibility fieldVisibility) {\n    this.fieldVisibility = fieldVisibility;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the field visibility option.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1094", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.setCreateSetters", "methodParameterType": "boolean#", "methodParameterName": "createSetters#", "methodBody": "public void setCreateSetters(boolean createSetters) {\n    this.createSetters = createSetters;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set to false to not create setter methods for the fields of the record.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1095", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.setCreateOptionalGetters", "methodParameterType": "boolean#", "methodParameterName": "createOptionalGetters#", "methodBody": "public void setCreateOptionalGetters(boolean createOptionalGetters) {\n    this.createOptionalGetters = createOptionalGetters;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set to false to not create the getters that return an Optional.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1096", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.setGettersReturnOptional", "methodParameterType": "boolean#", "methodParameterName": "gettersReturnOptional#", "methodBody": "public void setGettersReturnOptional(boolean gettersReturnOptional) {\n    this.gettersReturnOptional = gettersReturnOptional;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set to false to not create the getters that return an Optional.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1097", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.setEnableDecimalLogicalType", "methodParameterType": "boolean#", "methodParameterName": "enableDecimalLogicalType#", "methodBody": "public void setEnableDecimalLogicalType(boolean enableDecimalLogicalType) {\n    this.enableDecimalLogicalType = enableDecimalLogicalType;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set to true to use  {@link java.math.BigDecimal} instead of{@link java.nio.ByteBuffer} for logical type \"decimal\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1098", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.compileProtocol", "methodParameterType": "File#File#", "methodParameterName": "src#dest#", "methodBody": "public static void compileProtocol(File src, File dest) throws IOException {\n    compileProtocol(new File[] { src }, dest);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Generates Java interface and classes for a protocol.", "call_func_name": ["org.apache.avro.compiler.specific.SpecificCompiler.compileProtocol"], "call_func_parameter": [["java.io.File[]", "java.io.File"]], "passed_comments": [{"org.apache.avro.compiler.specific.SpecificCompiler.compileProtocol": "Generates Java interface and classes for a number of protocol files."}]}, {"index": "1099", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.compileProtocol", "methodParameterType": "File[]#File#", "methodParameterName": "srcFiles#dest#", "methodBody": "public static void compileProtocol(File[] srcFiles, File dest) throws IOException {\n    for (File src : srcFiles) {\n      Protocol protocol = Protocol.parse(src);\n      SpecificCompiler compiler = new SpecificCompiler(protocol);\n      compiler.compileToDestination(src, dest);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Generates Java interface and classes for a number of protocol files.", "call_func_name": ["org.apache.avro.Protocol.parse", "org.apache.avro.compiler.specific.SpecificCompiler.<init>", "org.apache.avro.compiler.specific.SpecificCompiler.compileToDestination"], "call_func_parameter": [["java.io.File"], ["org.apache.avro.Protocol"], ["java.io.File", "java.io.File"]], "passed_comments": [{"org.apache.avro.Protocol.parse": "Read a protocol from a Json file."}, {"org.apache.avro.compiler.specific.SpecificCompiler.compileToDestination": "Generate output under dst, unless existing file is newer than src."}]}, {"index": "1100", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.compileSchema", "methodParameterType": "File#File#", "methodParameterName": "src#dest#", "methodBody": "public static void compileSchema(File src, File dest) throws IOException {\n    compileSchema(new File[] { src }, dest);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Generates Java classes for a schema.", "call_func_name": ["org.apache.avro.compiler.specific.SpecificCompiler.compileSchema"], "call_func_parameter": [["java.io.File[]", "java.io.File"]], "passed_comments": [{"org.apache.avro.compiler.specific.SpecificCompiler.compileSchema": "Generates Java classes for a number of schema files."}]}, {"index": "1101", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.compileSchema", "methodParameterType": "File[]#File#", "methodParameterName": "srcFiles#dest#", "methodBody": "public static void compileSchema(File[] srcFiles, File dest) throws IOException {\n    Schema.Parser parser = new Schema.Parser();\n\n    for (File src : srcFiles) {\n      Schema schema = parser.parse(src);\n      SpecificCompiler compiler = new SpecificCompiler(schema);\n      compiler.compileToDestination(src, dest);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Generates Java classes for a number of schema files.", "call_func_name": ["org.apache.avro.compiler.specific.SpecificCompiler.<init>", "org.apache.avro.compiler.specific.SpecificCompiler.compileToDestination"], "call_func_parameter": [["org.apache.avro.Schema"], ["java.io.File", "java.io.File"]], "passed_comments": [{"org.apache.avro.compiler.specific.SpecificCompiler.compileToDestination": "Generate output under dst, unless existing file is newer than src."}]}, {"index": "1102", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.enqueue", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "private void enqueue(Schema schema) {\n    if (queue.contains(schema))\n      return;\n    switch (schema.getType()) {\n    case RECORD:\n      queue.add(schema);\n      for (Schema.Field field : schema.getFields())\n        enqueue(field.schema());\n      break;\n    case MAP:\n      enqueue(schema.getValueType());\n      break;\n    case ARRAY:\n      enqueue(schema.getElementType());\n      break;\n    case UNION:\n      for (Schema s : schema.getTypes())\n        enqueue(s);\n      break;\n    case ENUM:\n    case FIXED:\n      queue.add(schema);\n      break;\n    case STRING:\n    case BYTES:\n    case INT:\n    case LONG:\n    case FLOAT:\n    case DOUBLE:\n    case BOOLEAN:\n    case NULL:\n      break;\n    default:\n      throw new RuntimeException(\"Unknown type: \" + schema);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#EnhancedForStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#EnhancedForStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#BreakStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement)ReturnStatement)IfStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)EnhancedForStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)EnhancedForStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Recursively enqueue schemas that need a class generated.", "call_func_name": ["java.util.Set.contains", "org.apache.avro.Schema.getType", "java.util.Set.add", "org.apache.avro.Schema.getFields", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.compiler.specific.SpecificCompiler.enqueue", "org.apache.avro.Schema.getValueType", "org.apache.avro.Schema.getElementType", "org.apache.avro.Schema.getTypes", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.Object"], [""], [""], [""], [""], ["org.apache.avro.Schema"], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getFields": "If this is a record, returns the fields in it. The returned list is in the order of their positions."}, {"org.apache.avro.compiler.specific.SpecificCompiler.enqueue": "Recursively enqueue schemas that need a class generated."}, {"org.apache.avro.Schema.getValueType": "If this is a map, returns its value type."}, {"org.apache.avro.Schema.getElementType": "If this is an array, returns its element type."}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}]}, {"index": "1103", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.compile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Collection<OutputFile> compile() {\n    List<OutputFile> out = new ArrayList<>();\n    for (Schema schema : queue) {\n      out.add(compile(schema));\n    }\n    if (protocol != null) {\n      out.add(compileInterface(protocol));\n    }\n    return out;\n  }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate java classes for enqueued schemas.", "call_func_name": ["java.util.ArrayList.<init>", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.compiler.specific.SpecificCompiler.compile", "java.util.List.add", "org.apache.avro.compiler.specific.SpecificCompiler.compileInterface"], "call_func_parameter": [[""], [""], [""], [""], ["org.apache.avro.Schema"], ["java.lang.Object"], ["org.apache.avro.Protocol"]], "passed_comments": "/"}, {"index": "1104", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.compileToDestination", "methodParameterType": "File#File#", "methodParameterName": "src#dst#", "methodBody": "public void compileToDestination(File src, File dst) throws IOException {\n    for (Schema schema : queue) {\n      OutputFile o = compile(schema);\n      o.writeToDestination(src, dst);\n    }\n    if (protocol != null) {\n      compileInterface(protocol).writeToDestination(src, dst);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Generate output under dst, unless existing file is newer than src.", "call_func_name": ["java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.compiler.specific.SpecificCompiler.compile", "org.apache.avro.compiler.specific.SpecificCompiler.compileInterface"], "call_func_parameter": [[""], [""], [""], ["org.apache.avro.Schema"], ["org.apache.avro.Protocol"]], "passed_comments": "/"}, {"index": "1105", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.calcAllArgConstructorParameterUnits", "methodParameterType": "Schema#", "methodParameterName": "record#", "methodBody": "protected int calcAllArgConstructorParameterUnits(Schema record) {\n\n    if (record.getType() != Schema.Type.RECORD)\n      throw new RuntimeException(\"This method must only be called for record schemas.\");\n\n    return record.getFields().size();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of parameter units required by fields for the AllArgsConstructor.", "call_func_name": ["org.apache.avro.Schema.getType", "java.lang.RuntimeException.<init>", "org.apache.avro.Schema.getFields", "java.util.List.size"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getFields": "If this is a record, returns the fields in it. The returned list is in the order of their positions."}]}, {"index": "1106", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.setStringType", "methodParameterType": "StringType#", "methodParameterName": "t#", "methodBody": "public void setStringType(StringType t) {\n    this.stringType = t;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the Java type to be emitted for string schemas.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1107", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.getStringType", "methodParameterType": "Schema#", "methodParameterName": "s#", "methodBody": "public String getStringType(Schema s) {\n    String prop;\n    switch (s.getType()) {\n    case MAP:\n      prop = SpecificData.KEY_CLASS_PROP;\n      break;\n    case STRING:\n      prop = SpecificData.CLASS_PROP;\n      break;\n    default:\n      throw new IllegalArgumentException(\"Can't check string-type of non-string/map type: \" + s);\n    }\n    return getStringType(s.getObjectProp(prop));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)SwitchStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use (and also internal use). Returns a string giving the FQN of the Java type to be used for a string schema or for the key of a map schema. (It's an error to call this on a schema other than a string or map.)", "call_func_name": ["org.apache.avro.Schema.getType", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.apache.avro.Schema.getObjectProp", "org.apache.avro.compiler.specific.SpecificCompiler.getStringType"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}]}, {"index": "1108", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.isStringable", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public boolean isStringable(Schema schema) {\n    String t = getStringType(schema);\n    return !(t.equals(\"java.lang.String\") || t.equals(\"java.lang.CharSequence\")\n        || t.equals(\"org.apache.avro.util.Utf8\"));\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#ParenthesizedExpression#PrefixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(PrefixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)ParenthesizedExpression)PrefixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Returns true iff a STRING-schema or the key of a MAP-schema is what SpecificData defines as \"stringable\" (which means we need to call toString on it before before writing it).", "call_func_name": ["org.apache.avro.compiler.specific.SpecificCompiler.getStringType", "java.lang.String.equals"], "call_func_parameter": [["org.apache.avro.Schema"], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.compiler.specific.SpecificCompiler.getStringType": "Utility for template use (and also internal use). Returns a string giving the FQN of the Java type to be used for a string schema or for the key of a map schema. (It's an error to call this on a schema other than a string or map.)"}]}, {"index": "1109", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.javaType", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public String javaType(Schema schema) {\n    return javaType(schema, true);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Returns the java type for a Schema.", "call_func_name": ["org.apache.avro.compiler.specific.SpecificCompiler.javaType"], "call_func_parameter": [["org.apache.avro.Schema", "boolean"]], "passed_comments": "/"}, {"index": "1110", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.generateSetterCode", "methodParameterType": "Schema#String#String#", "methodParameterName": "schema#name#pname#", "methodBody": "public String generateSetterCode(Schema schema, String name, String pname) {\n    Conversion<?> conversion = specificData.getConversionFor(schema.getLogicalType());\n    if (conversion != null) {\n      return conversion.adjustAndSetValue(\"this.\" + name, pname);\n    }\n    return \"this.\" + name + \" = \" + pname + \";\";\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use.", "call_func_name": ["org.apache.avro.Schema.getLogicalType", "org.apache.avro.specific.SpecificData.getConversionFor", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.Conversion.adjustAndSetValue"], "call_func_parameter": [[""], ["org.apache.avro.LogicalType"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.apache.avro.Conversion.adjustAndSetValue": "Certain logical types may require adjusting the code within the \"setter\" methods to make sure the data that is set is properly formatted. This method allows the Conversion to generate custom setter code if required."}]}, {"index": "1111", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.javaUnbox", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public String javaUnbox(Schema schema) {\n    return javaUnbox(schema, false);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Returns the unboxed java type for a Schema.", "call_func_name": ["org.apache.avro.compiler.specific.SpecificCompiler.javaUnbox"], "call_func_parameter": [["org.apache.avro.Schema", "boolean"]], "passed_comments": [{"org.apache.avro.compiler.specific.SpecificCompiler.javaUnbox": "Utility for template use. Returns the unboxed java type for a Schema including the void type."}]}, {"index": "1112", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.javaUnbox", "methodParameterType": "Schema#boolean#", "methodParameterName": "schema#unboxNullToVoid#", "methodBody": "public String javaUnbox(Schema schema, boolean unboxNullToVoid) {\n    String convertedLogicalType = getConvertedLogicalType(schema);\n    if (convertedLogicalType != null) {\n      return convertedLogicalType;\n    }\n\n    switch (schema.getType()) {\n    case INT:\n      return \"int\";\n    case LONG:\n      return \"long\";\n    case FLOAT:\n      return \"float\";\n    case DOUBLE:\n      return \"double\";\n    case BOOLEAN:\n      return \"boolean\";\n    case NULL:\n      if (unboxNullToVoid) {\n        // Used for preventing unnecessary returns for RPC methods without response but\n        // with error(s)\n        return \"void\";\n      }\n    default:\n      return javaType(schema, false);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#StringLiteral#ReturnStatement#SimpleName#SwitchCase#StringLiteral#ReturnStatement#SimpleName#SwitchCase#StringLiteral#ReturnStatement#SimpleName#SwitchCase#StringLiteral#ReturnStatement#SimpleName#SwitchCase#StringLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#StringLiteral#ReturnStatement#Block#IfStatement#SwitchCase#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(SwitchCase)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Returns the unboxed java type for a Schema including the void type.", "call_func_name": ["org.apache.avro.compiler.specific.SpecificCompiler.getConvertedLogicalType", "org.apache.avro.Schema.getType", "org.apache.avro.compiler.specific.SpecificCompiler.javaType"], "call_func_parameter": [["org.apache.avro.Schema"], [""], ["org.apache.avro.Schema", "boolean"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}]}, {"index": "1113", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.indent", "methodParameterType": "int#", "methodParameterName": "n#", "methodBody": "public String indent(int n) {\n    return new String(new char[n]).replace('\\0', ' ');\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#ClassInstanceCreation#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)ClassInstanceCreation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Return a string with a given number of spaces to be used for indentation purposes.", "call_func_name": ["java.lang.String.<init>", "java.lang.String.replace"], "call_func_parameter": [["char[]"], ["char", "char"]], "passed_comments": "/"}, {"index": "1114", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.getNonNullIndex", "methodParameterType": "Schema#", "methodParameterName": "s#", "methodBody": "public int getNonNullIndex(Schema s) {\n    if (s.getType() != Schema.Type.UNION || s.getTypes().size() != 2 || !s.getTypes().contains(NULL_SCHEMA))\n      throw new IllegalArgumentException(\"Can only be used on 2-branch union with a null branch: \" + s);\n    return (s.getTypes().get(0).equals(NULL_SCHEMA) ? 1 : 0);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#NumberLiteral#ConditionalExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ReturnStatement(ParenthesizedExpression(ConditionalExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ConditionalExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. For a two-branch union type with one null branch, returns the index of the null branch. It's an error to use on anything other than a two-branch union with on null branch.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.Schema.getTypes", "java.util.List.size", "java.util.List.contains", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "java.util.List.get", "org.apache.avro.Schema.equals"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["int"], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}]}, {"index": "1115", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.isCustomCodable", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public boolean isCustomCodable(Schema schema) {\n    if (schema.isError())\n      return false;\n    return isCustomCodable(schema, new HashSet<>());\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Returns true if the encode/decode logic in record.vm can handle the schema being presented.", "call_func_name": ["org.apache.avro.Schema.isError", "java.util.HashSet.<init>", "org.apache.avro.compiler.specific.SpecificCompiler.isCustomCodable"], "call_func_parameter": [[""], [""], ["org.apache.avro.Schema", "java.util.Set"]], "passed_comments": [{"org.apache.avro.Schema.isError": "Returns true if this record is an error type."}]}, {"index": "1116", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.javaAnnotations", "methodParameterType": "JsonProperties#", "methodParameterName": "props#", "methodBody": "public String[] javaAnnotations(JsonProperties props) {\n    final Object value = props.getObjectProp(\"javaAnnotation\");\n    if (value == null)\n      return new String[0];\n    if (value instanceof String)\n      return new String[] { value.toString() };\n    if (value instanceof List) {\n      final List<?> list = (List<?>) value;\n      final List<String> annots = new ArrayList<>();\n      for (Object o : list) {\n        annots.add(o.toString());\n      }\n      return annots.toArray(new String[0]);\n    }\n    return new String[0];\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayInitializer#ArrayCreation#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)ReturnStatement)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(ReturnStatement(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayInitializer)ArrayCreation)ReturnStatement)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Returns the java annotations for a schema.", "call_func_name": ["org.apache.avro.JsonProperties.getObjectProp", "java.lang.Object.toString", "java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.util.List.add", "java.util.List.toArray"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object[]"]], "passed_comments": [{"org.apache.avro.JsonProperties.getObjectProp": "Returns the value of the named property in this schema. Returns <tt>null</tt> if there is no property with that name."}]}, {"index": "1117", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.javaSplit", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public String javaSplit(String s) throws IOException {\n    StringBuilder b = new StringBuilder(\"\\\"\"); // initial quote\n    for (int i = 0; i < s.length(); i += maxStringChars) {\n      if (i != 0)\n        b.append(\"\\\",\\\"\"); // insert quote-comma-quote\n      String chunk = s.substring(i, Math.min(s.length(), i + maxStringChars));\n      b.append(javaEscape(chunk)); // escape chunks\n    }\n    b.append(\"\\\"\"); // final quote\n    return b.toString();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#Assignment#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Takes a (potentially overly long) string and splits it into a quoted, comma-separted sequence of escaped strings.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.String.length", "java.lang.StringBuilder.append", "java.lang.Math.min", "java.lang.String.substring", "org.apache.avro.compiler.specific.SpecificCompiler.javaEscape", "java.lang.StringBuilder.toString"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], ["int", "int"], ["int", "int"], ["java.lang.Object"], [""]], "passed_comments": [{"org.apache.avro.compiler.specific.SpecificCompiler.javaEscape": "Utility for template use. Escapes quotes and backslashes."}]}, {"index": "1118", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.javaEscape", "methodParameterType": "Object#", "methodParameterName": "o#", "methodBody": "public static String javaEscape(Object o) {\n    return o.toString().replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\\"\", \"\\\\\\\"\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Escapes quotes and backslashes.", "call_func_name": ["java.lang.Object.toString", "java.lang.String.replace"], "call_func_parameter": [[""], ["java.lang.CharSequence", "java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "1119", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.escapeForJavadoc", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public static String escapeForJavadoc(String s) {\n    return s.replace(\"*/\", \"*&#47;\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Escapes comment end with HTML entities.", "call_func_name": ["java.lang.String.replace"], "call_func_parameter": [["java.lang.CharSequence", "java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "1120", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.nullToEmpty", "methodParameterType": "String#", "methodParameterName": "x#", "methodBody": "public static String nullToEmpty(String x) {\n    return x == null ? \"\" : x;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#StringLiteral#SimpleName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Returns empty string for null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1121", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.mangle", "methodParameterType": "String#", "methodParameterName": "word#", "methodBody": "public static String mangle(String word) {\n    return mangle(word, false);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Adds a dollar sign to reserved words.", "call_func_name": ["org.apache.avro.compiler.specific.SpecificCompiler.mangle"], "call_func_parameter": [["java.lang.String", "boolean"]], "passed_comments": [{"org.apache.avro.compiler.specific.SpecificCompiler.mangle": "Utility for template use. Adds a dollar sign to reserved words."}]}, {"index": "1122", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.mangle", "methodParameterType": "String#boolean#", "methodParameterName": "word#isError#", "methodBody": "public static String mangle(String word, boolean isError) {\n    return mangle(word, isError ? ERROR_RESERVED_WORDS : RESERVED_WORDS);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ConditionalExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Adds a dollar sign to reserved words.", "call_func_name": ["org.apache.avro.compiler.specific.SpecificCompiler.mangle"], "call_func_parameter": [["java.lang.String", "java.util.Set"]], "passed_comments": [{"org.apache.avro.compiler.specific.SpecificCompiler.mangle": "Utility for template use. Adds a dollar sign to reserved words."}]}, {"index": "1123", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.mangle", "methodParameterType": "String#Set<String>#", "methodParameterName": "word#reservedWords#", "methodBody": "public static String mangle(String word, Set<String> reservedWords) {\n    return mangle(word, reservedWords, false);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Adds a dollar sign to reserved words.", "call_func_name": ["org.apache.avro.compiler.specific.SpecificCompiler.mangle"], "call_func_parameter": [["java.lang.String", "java.util.Set", "boolean"]], "passed_comments": [{"org.apache.avro.compiler.specific.SpecificCompiler.mangle": "Utility for template use. Adds a dollar sign to reserved words."}]}, {"index": "1124", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.mangle", "methodParameterType": "String#Set<String>#boolean#", "methodParameterName": "word#reservedWords#isMethod#", "methodBody": "public static String mangle(String word, Set<String> reservedWords, boolean isMethod) {\n    if (word.contains(\".\")) {\n      // If the 'word' is really a full path of a class we must mangle just the\n      // classname\n      int lastDot = word.lastIndexOf(\".\");\n      String packageName = word.substring(0, lastDot + 1);\n      String className = word.substring(lastDot + 1);\n      return packageName + mangle(className, reservedWords, isMethod);\n    }\n    if (reservedWords.contains(word) || (isMethod && reservedWords\n        .contains(Character.toLowerCase(word.charAt(0)) + ((word.length() > 1) ? word.substring(1) : \"\")))) {\n      return word + \"$\";\n    }\n    return word;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#StringLiteral#ConditionalExpression#ParenthesizedExpression#InfixExpression#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#StringLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation(ParenthesizedExpression(ConditionalExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression)InfixExpression)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for template use. Adds a dollar sign to reserved words.", "call_func_name": ["java.lang.String.contains", "java.lang.String.lastIndexOf", "java.lang.String.substring", "java.lang.String.substring", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.apache.avro.compiler.specific.SpecificCompiler.mangle", "java.lang.StringBuilder.toString", "java.util.Set.contains", "java.lang.String.charAt", "java.lang.Character.toLowerCase", "java.lang.StringBuilder.append", "java.lang.String.length"], "call_func_parameter": [["java.lang.CharSequence"], ["java.lang.String"], ["int", "int"], ["int"], [""], ["java.lang.String"], ["java.lang.String", "java.util.Set", "boolean"], [""], ["java.lang.Object"], ["int"], ["char"], ["char"], [""]], "passed_comments": [{"org.apache.avro.compiler.specific.SpecificCompiler.mangle": "Utility for template use. Adds a dollar sign to reserved words."}]}, {"index": "1125", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.fingerprint64", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public static long fingerprint64(Schema schema) {\n    return SchemaNormalization.parsingFingerprint64(schema);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Utility for use by templates. Return schema fingerprint as a long.", "call_func_name": ["org.apache.avro.SchemaNormalization.parsingFingerprint64"], "call_func_parameter": [["org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.SchemaNormalization.parsingFingerprint64": "Returns  {@link #fingerprint64} applied to the parsing canonical form of thesupplied schema."}]}, {"index": "1126", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.generateGetMethod", "methodParameterType": "Schema#Field#", "methodParameterName": "schema#field#", "methodBody": "public static String generateGetMethod(Schema schema, Field field) {\n    return generateMethodName(schema, field, \"get\", \"\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the name of a field accessor method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1127", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.generateGetOptionalMethod", "methodParameterType": "Schema#Field#", "methodParameterName": "schema#field#", "methodBody": "public static String generateGetOptionalMethod(Schema schema, Field field) {\n    return generateMethodName(schema, field, \"getOptional\", \"\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the name of a field accessor method that returns a Java 8 Optional.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1128", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.generateSetMethod", "methodParameterType": "Schema#Field#", "methodParameterName": "schema#field#", "methodBody": "public static String generateSetMethod(Schema schema, Field field) {\n    return generateMethodName(schema, field, \"set\", \"\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the name of a field mutator method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1129", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.generateHasMethod", "methodParameterType": "Schema#Field#", "methodParameterName": "schema#field#", "methodBody": "public static String generateHasMethod(Schema schema, Field field) {\n    return generateMethodName(schema, field, \"has\", \"\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the name of a field \"has\" method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1130", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.generateClearMethod", "methodParameterType": "Schema#Field#", "methodParameterName": "schema#field#", "methodBody": "public static String generateClearMethod(Schema schema, Field field) {\n    return generateMethodName(schema, field, \"clear\", \"\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the name of a field \"clear\" method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1131", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.hasBuilder", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public static boolean hasBuilder(Schema schema) {\n    switch (schema.getType()) {\n    case RECORD:\n      return true;\n\n    case UNION:\n      List<Schema> types = schema.getTypes(); // elide unions with null\n      if ((types.size() == 2) && types.contains(NULL_SCHEMA)) {\n        return hasBuilder(types.get(types.get(0).equals(NULL_SCHEMA) ? 1 : 0));\n      }\n      return false;\n\n    default:\n      return false;\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#NumberLiteral#ConditionalExpression#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#SwitchCase#BooleanLiteral#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ConditionalExpression)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Utility for use by templates. Does this schema have a Builder method?", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.Schema.getTypes", "java.util.List.size", "java.util.List.contains", "java.util.List.get", "org.apache.avro.Schema.equals", "org.apache.avro.compiler.specific.SpecificCompiler.hasBuilder"], "call_func_parameter": [[""], [""], [""], ["java.lang.Object"], ["int"], ["java.lang.Object"], ["org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getTypes": "If this is a union, returns its types."}, {"org.apache.avro.compiler.specific.SpecificCompiler.hasBuilder": "Utility for use by templates. Does this schema have a Builder method?"}]}, {"index": "1132", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.generateGetBuilderMethod", "methodParameterType": "Schema#Field#", "methodParameterName": "schema#field#", "methodBody": "public static String generateGetBuilderMethod(Schema schema, Field field) {\n    return generateMethodName(schema, field, \"get\", \"Builder\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the name of a field Builder accessor method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1133", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.generateSetBuilderMethod", "methodParameterType": "Schema#Field#", "methodParameterName": "schema#field#", "methodBody": "public static String generateSetBuilderMethod(Schema schema, Field field) {\n    return generateMethodName(schema, field, \"set\", \"Builder\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the name of a field Builder mutator method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1134", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.generateHasBuilderMethod", "methodParameterType": "Schema#Field#", "methodParameterName": "schema#field#", "methodBody": "public static String generateHasBuilderMethod(Schema schema, Field field) {\n    return generateMethodName(schema, field, \"has\", \"Builder\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates the name of a field Builder \"has\" method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1135", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.generateMethodName", "methodParameterType": "Schema#Field#String#String#", "methodParameterName": "schema#field#prefix#postfix#", "methodBody": "private static String generateMethodName(Schema schema, Field field, String prefix, String postfix) {\n\n    // Check for the special case in which the schema defines two fields whose\n    // names are identical except for the case of the first character:\n    char firstChar = field.name().charAt(0);\n    String conflictingFieldName = (Character.isLowerCase(firstChar) ? Character.toUpperCase(firstChar)\n        : Character.toLowerCase(firstChar)) + (field.name().length() > 1 ? field.name().substring(1) : \"\");\n    boolean fieldNameConflict = schema.getField(conflictingFieldName) != null;\n\n    StringBuilder methodBuilder = new StringBuilder(prefix);\n    String fieldName = mangle(field.name(), schema.isError() ? ERROR_RESERVED_WORDS : ACCESSOR_MUTATOR_RESERVED_WORDS,\n        true);\n\n    boolean nextCharToUpper = true;\n    for (int ii = 0; ii < fieldName.length(); ii++) {\n      if (fieldName.charAt(ii) == '_') {\n        nextCharToUpper = true;\n      } else if (nextCharToUpper) {\n        methodBuilder.append(Character.toUpperCase(fieldName.charAt(ii)));\n        nextCharToUpper = false;\n      } else {\n        methodBuilder.append(fieldName.charAt(ii));\n      }\n    }\n    methodBuilder.append(postfix);\n\n    // If there is a field name conflict append $0 or $1\n    if (fieldNameConflict) {\n      if (methodBuilder.charAt(methodBuilder.length() - 1) != '$') {\n        methodBuilder.append('$');\n      }\n      methodBuilder.append(Character.isLowerCase(firstChar) ? '0' : '1');\n    }\n\n    return methodBuilder.toString();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#StringLiteral#ConditionalExpression#ParenthesizedExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ConditionalExpression#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#CharacterLiteral#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#CharacterLiteral#ConditionalExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ParenthesizedExpression(ParenthesizedExpression(ConditionalExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)ConditionalExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generates a method name from a field name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1136", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.isUnboxedJavaTypeNullable", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public static boolean isUnboxedJavaTypeNullable(Schema schema) {\n    switch (schema.getType()) {\n    // Primitives can't be null; assume anything else can\n    case INT:\n    case LONG:\n    case FLOAT:\n    case DOUBLE:\n    case BOOLEAN:\n      return false;\n    default:\n      return true;\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#BooleanLiteral#ReturnStatement#SwitchCase#BooleanLiteral#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Tests whether an unboxed Java type can be set to null", "call_func_name": ["org.apache.avro.Schema.getType"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}]}, {"index": "1137", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/specific/SpecificCompiler.java", "methodName": "org.apache.avro.compiler.specific.SpecificCompiler.setOutputCharacterEncoding", "methodParameterType": "String#", "methodParameterName": "outputCharacterEncoding#", "methodBody": "public void setOutputCharacterEncoding(String outputCharacterEncoding) {\n    this.outputCharacterEncoding = outputCharacterEncoding;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets character encoding for generated java file", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1138", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/idl/SchemaResolver.java", "methodName": "org.apache.avro.compiler.idl.SchemaResolver.unresolvedSchema", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "static Schema unresolvedSchema(final String name) {\n    Schema schema = Schema.createRecord(UR_SCHEMA_NAME, \"unresolved schema\", UR_SCHEMA_NS, false,\n        Collections.EMPTY_LIST);\n    schema.addProp(UR_SCHEMA_ATTR, name);\n    return schema;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#BooleanLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a schema to represent a \"unresolved\" schema. (used to represent a schema where the definition is not known at the time) This concept might be generalizable...", "call_func_name": ["org.apache.avro.Schema.createRecord", "org.apache.avro.Schema.addProp"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "boolean", "java.util.List"], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.createRecord": "Create a named record schema with fields already set."}]}, {"index": "1139", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/idl/SchemaResolver.java", "methodName": "org.apache.avro.compiler.idl.SchemaResolver.isUnresolvedSchema", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "static boolean isUnresolvedSchema(final Schema schema) {\n    return (schema.getType() == Schema.Type.RECORD && schema.getProp(UR_SCHEMA_ATTR) != null\n        && UR_SCHEMA_NAME.equals(schema.getName()) && UR_SCHEMA_NS.equals(schema.getNamespace()));\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Is this a unresolved schema.", "call_func_name": ["org.apache.avro.Schema.getType", "org.apache.avro.Schema.getProp", "org.apache.avro.Schema.getName", "java.lang.String.equals", "org.apache.avro.Schema.getNamespace"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.Object"], [""]], "passed_comments": [{"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.getName": "If this is a record, enum or fixed, returns its name, otherwise the name of the primitive type."}, {"org.apache.avro.Schema.getNamespace": "If this is a record, enum or fixed, returns its namespace, if any."}]}, {"index": "1140", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/idl/SchemaResolver.java", "methodName": "org.apache.avro.compiler.idl.SchemaResolver.getUnresolvedSchemaName", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "static String getUnresolvedSchemaName(final Schema schema) {\n    if (!isUnresolvedSchema(schema)) {\n      throw new IllegalArgumentException(\"Not a unresolved schema: \" + schema);\n    }\n    return schema.getProp(UR_SCHEMA_ATTR);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "get the unresolved schema name.", "call_func_name": ["org.apache.avro.compiler.idl.SchemaResolver.isUnresolvedSchema", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.apache.avro.Schema.getProp"], "call_func_parameter": [["org.apache.avro.Schema"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.compiler.idl.SchemaResolver.isUnresolvedSchema": "Is this a unresolved schema."}]}, {"index": "1141", "file": "/root/repos/repos8/avro/lang/java/compiler/src/main/java/org/apache/avro/compiler/idl/SchemaResolver.java", "methodName": "org.apache.avro.compiler.idl.SchemaResolver.resolve", "methodParameterType": "Protocol#", "methodParameterName": "protocol#", "methodBody": "static Protocol resolve(final Protocol protocol) {\n    Protocol result = new Protocol(protocol.getName(), protocol.getDoc(), protocol.getNamespace());\n    final Collection<Schema> types = protocol.getTypes();\n    // replace unresolved schemas.\n    List<Schema> newSchemas = new ArrayList<>(types.size());\n    IdentityHashMap<Schema, Schema> replacements = new IdentityHashMap<>();\n    for (Schema schema : types) {\n      newSchemas.add(Schemas.visit(schema, new ResolvingVisitor(schema, replacements, new SymbolTable(protocol))));\n    }\n    result.setTypes(newSchemas); // replace types with resolved ones\n\n    // Resolve all schemas referenced by protocol Messages.\n    for (Map.Entry<String, Protocol.Message> entry : protocol.getMessages().entrySet()) {\n      Protocol.Message value = entry.getValue();\n      Protocol.Message nvalue;\n      if (value.isOneWay()) {\n        Schema replacement = resolve(replacements, value.getRequest(), protocol);\n        nvalue = result.createMessage(value.getName(), value.getDoc(), value, replacement);\n      } else {\n        Schema request = resolve(replacements, value.getRequest(), protocol);\n        Schema response = resolve(replacements, value.getResponse(), protocol);\n        Schema errors = resolve(replacements, value.getErrors(), protocol);\n        nvalue = result.createMessage(value.getName(), value.getDoc(), value, request, response, errors);\n      }\n      result.getMessages().put(entry.getKey(), nvalue);\n    }\n    Schemas.copyProperties(protocol, result);\n    return result;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Will clone the provided protocol while resolving all unreferenced schemas", "call_func_name": ["org.apache.avro.Protocol.getName", "org.apache.avro.Protocol.getDoc", "org.apache.avro.Protocol.getNamespace", "org.apache.avro.Protocol.<init>", "org.apache.avro.Protocol.getTypes", "java.util.Collection.size", "java.util.ArrayList.<init>", "java.util.IdentityHashMap.<init>", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.compiler.idl.ResolvingVisitor.<init>", "org.apache.avro.compiler.schema.Schemas.visit", "java.util.List.add", "org.apache.avro.Protocol.setTypes", "org.apache.avro.Protocol.getMessages", "java.util.Map.entrySet", "java.util.Set.iterator", "org.apache.avro.compiler.idl.SchemaResolver.resolve", "org.apache.avro.Protocol.createMessage", "org.apache.avro.Protocol.createMessage", "java.util.Map.put", "org.apache.avro.compiler.schema.Schemas.copyProperties"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int"], [""], [""], [""], [""], ["org.apache.avro.Schema", "java.util.IdentityHashMap", "java.util.function.Function"], ["org.apache.avro.Schema", "org.apache.avro.compiler.schema.SchemaVisitor"], ["java.lang.Object"], ["java.util.Collection"], [""], [""], [""], ["java.util.IdentityHashMap", "org.apache.avro.Schema", "org.apache.avro.Protocol"], ["java.lang.String", "java.lang.String", "org.apache.avro.JsonProperties", "org.apache.avro.Schema"], ["java.lang.String", "java.lang.String", "org.apache.avro.JsonProperties", "org.apache.avro.Schema", "org.apache.avro.Schema", "org.apache.avro.Schema"], ["java.lang.Object", "java.lang.Object"], ["org.apache.avro.JsonProperties", "org.apache.avro.JsonProperties"]], "passed_comments": [{"org.apache.avro.Protocol.getName": "The name of this protocol."}, {"org.apache.avro.Protocol.getDoc": "Doc string for this protocol."}, {"org.apache.avro.Protocol.getNamespace": "The namespace of this protocol. Qualifies its name."}, {"org.apache.avro.Protocol.getTypes": "The types of this protocol."}, {"org.apache.avro.compiler.schema.Schemas.visit": "depth first visit."}, {"org.apache.avro.Protocol.setTypes": "Set the types of this protocol."}, {"org.apache.avro.Protocol.getMessages": "The messages of this protocol."}, {"org.apache.avro.Protocol.createMessage": "Create a one-way message."}, {"org.apache.avro.Protocol.createMessage": "Create a two-way message."}]}, {"index": "1142", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/ParseException.java", "methodName": "org.apache.avro.compiler.idl.ParseException.ParseException", "methodParameterType": "Token#int[][]#String[]#", "methodParameterName": "currentTokenVal#expectedTokenSequencesVal#tokenImageVal#", "methodBody": "public ParseException(Token currentTokenVal,\n                        int[][] expectedTokenSequencesVal,\n                        String[] tokenImageVal\n                       )\n  {\n    super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));\n    currentToken = currentTokenVal;\n    expectedTokenSequences = expectedTokenSequencesVal;\n    tokenImage = tokenImageVal;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "This constructor is used by the method \"generateParseException\" in the generated parser.  Calling this constructor generates a new object of this type with the fields \"currentToken\", \"expectedTokenSequences\", and \"tokenImage\" set.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1143", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/ParseException.java", "methodName": "org.apache.avro.compiler.idl.ParseException.ParseException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ParseException() {\n    super();\n  }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "The following constructors are for use by you for whatever purpose you can think of.  Constructing the exception in this manner makes the exception behave in the normal way - i.e., as documented in the class \"Throwable\".  The fields \"errorToken\", \"expectedTokenSequences\", and \"tokenImage\" do not contain relevant information.  The JavaCC generated code does not use these constructors.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1144", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/ParseException.java", "methodName": "org.apache.avro.compiler.idl.ParseException.ParseException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public ParseException(String message) {\n    super(message);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor with message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1145", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/ParseException.java", "methodName": "org.apache.avro.compiler.idl.ParseException.initialise", "methodParameterType": "Token#int[][]#String[]#", "methodParameterName": "currentToken#expectedTokenSequences#tokenImage#", "methodBody": "private static String initialise(Token currentToken,\n                           int[][] expectedTokenSequences,\n                           String[] tokenImage) {\n    String eol = System.getProperty(\"line.separator\", \"\\n\");\n    StringBuffer expected = new StringBuffer();\n    int maxSize = 0;\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\n      if (maxSize < expectedTokenSequences[i].length) {\n        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;\n    for (int i = 0; i < maxSize; i++) {\n      if (i != 0) retval += \" \";\n      if (tok.kind == 0) {\n        retval += tokenImage[0];\n        break;\n      }\n      retval += \" \" + tokenImage[tok.kind];\n      retval += \" \\\"\";\n      retval += add_escapes(tok.image);\n      retval += \" \\\"\";\n      tok = tok.next;\n    }\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n    retval += \".\" + eol;\n    if (expectedTokenSequences.length == 1) {\n      retval += \"Was expecting:\" + eol + \"    \";\n    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#FieldAccess#InfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#FieldAccess#Assignment#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#FieldAccess#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#ArrayAccess#ArrayAccess#MethodInvocation#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#SimpleName#FieldAccess#NumberLiteral#InfixExpression#ArrayAccess#NumberLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#ArrayAccess#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#ArrayAccess#InfixExpression#Assignment#ExpressionStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(FieldAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)FieldAccess)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(FieldAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement)Block)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(FieldAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)FieldAccess)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)ArrayAccess)ArrayAccess)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)ForStatement(IfStatement(InfixExpression(ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(InfixExpression(FieldAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)ForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(ArrayAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayAccess)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "It uses \"currentToken\" and \"expectedTokenSequences\" to generate a parse error message and returns it.  If this object has been created due to a parse error, and you do not catch it (it gets thrown from the parser) the correct error message gets displayed.", "call_func_name": ["java.lang.System.getProperty", "java.lang.StringBuffer.<init>", "java.lang.StringBuffer.append", "java.lang.StringBuffer.append", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.compiler.idl.ParseException.add_escapes", "java.lang.StringBuilder.append", "java.lang.StringBuffer.toString"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], ["char"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["int"], [""]], "passed_comments": [{"org.apache.avro.compiler.idl.ParseException.add_escapes": "Used to convert raw characters to their escaped version when these raw version cannot be used as part of an ASCII string literal."}]}, {"index": "1146", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/ParseException.java", "methodName": "org.apache.avro.compiler.idl.ParseException.add_escapes", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "static String add_escapes(String str) {\n      StringBuffer retval = new StringBuffer();\n      char ch;\n      for (int i = 0; i < str.length(); i++) {\n        switch (str.charAt(i))\n        {\n           case 0 :\n              continue;\n           case '\\b':\n              retval.append(\"\\\\b\");\n              continue;\n           case '\\t':\n              retval.append(\"\\\\t\");\n              continue;\n           case '\\n':\n              retval.append(\"\\\\n\");\n              continue;\n           case '\\f':\n              retval.append(\"\\\\f\");\n              continue;\n           case '\\r':\n              retval.append(\"\\\\r\");\n              continue;\n           case '\\\"':\n              retval.append(\"\\\\\\\"\");\n              continue;\n           case '\\'':\n              retval.append(\"\\\\\\'\");\n              continue;\n           case '\\\\':\n              retval.append(\"\\\\\\\\\");\n              continue;\n           default:\n              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                 String s = \"0000\" + Integer.toString(ch, 16);\n                 retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n              } else {\n                 retval.append(ch);\n              }\n              continue;\n        }\n      }\n      return retval.toString();\n   }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#SwitchCase#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ContinueStatement#SwitchStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase)SwitchCase(IfStatement(InfixExpression(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ContinueStatement)ContinueStatement)SwitchStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Used to convert raw characters to their escaped version when these raw version cannot be used as part of an ASCII string literal.", "call_func_name": ["java.lang.StringBuffer.<init>", "java.lang.String.length", "java.lang.String.charAt", "java.lang.StringBuffer.append", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Integer.toString", "java.lang.StringBuilder.toString", "java.lang.String.substring", "java.lang.StringBuffer.append", "java.lang.StringBuffer.toString"], "call_func_parameter": [[""], [""], ["int"], ["java.lang.String"], [""], ["java.lang.String"], ["int", "int"], [""], ["int", "int"], ["char"], [""]], "passed_comments": "/"}, {"index": "1147", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/TokenMgrError.java", "methodName": "org.apache.avro.compiler.idl.TokenMgrError.addEscapes", "methodParameterType": "String#", "methodParameterName": "str#", "methodBody": "protected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n      switch (str.charAt(i))\n      {\n        case 0 :\n          continue;\n        case '\\b':\n          retval.append(\"\\\\b\");\n          continue;\n        case '\\t':\n          retval.append(\"\\\\t\");\n          continue;\n        case '\\n':\n          retval.append(\"\\\\n\");\n          continue;\n        case '\\f':\n          retval.append(\"\\\\f\");\n          continue;\n        case '\\r':\n          retval.append(\"\\\\r\");\n          continue;\n        case '\\\"':\n          retval.append(\"\\\\\\\"\");\n          continue;\n        case '\\'':\n          retval.append(\"\\\\\\'\");\n          continue;\n        case '\\\\':\n          retval.append(\"\\\\\\\\\");\n          continue;\n        default:\n          if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n            String s = \"0000\" + Integer.toString(ch, 16);\n            retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n          } else {\n            retval.append(ch);\n          }\n          continue;\n      }\n    }\n    return retval.toString();\n  }", "AST": "Javadoc#Modifier#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#SwitchCase#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#CharacterLiteral#SwitchCase#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ContinueStatement#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ContinueStatement#SwitchStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase(CharacterLiteral)CharacterLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement(SwitchCase)SwitchCase(IfStatement(InfixExpression(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ContinueStatement)ContinueStatement)SwitchStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Replaces unprintable characters by their escaped (or unicode escaped) equivalents in the given string", "call_func_name": ["java.lang.StringBuffer.<init>", "java.lang.String.length", "java.lang.String.charAt", "java.lang.StringBuffer.append", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Integer.toString", "java.lang.StringBuilder.toString", "java.lang.String.substring", "java.lang.StringBuffer.append", "java.lang.StringBuffer.toString"], "call_func_parameter": [[""], [""], ["int"], ["java.lang.String"], [""], ["java.lang.String"], ["int", "int"], [""], ["int", "int"], ["char"], [""]], "passed_comments": "/"}, {"index": "1148", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/TokenMgrError.java", "methodName": "org.apache.avro.compiler.idl.TokenMgrError.LexicalError", "methodParameterType": "boolean#int#int#int#String#char#", "methodParameterName": "EOFSeen#lexState#errorLine#errorColumn#errorAfter#curChar#", "methodBody": "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return(\"Lexical error at line \" +\n          errorLine + \", column \" +\n          errorColumn + \".  Encountered: \" +\n          (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n          \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#StringLiteral#InfixExpression#ParenthesizedExpression#StringLiteral#PrimitiveType#SimpleName#CastExpression#StringLiteral#InfixExpression#ConditionalExpression#ParenthesizedExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(ParenthesizedExpression(ConditionalExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(ParenthesizedExpression(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ParenthesizedExpression(StringLiteral)StringLiteral(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression(StringLiteral)StringLiteral)InfixExpression)ConditionalExpression)ParenthesizedExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a detailed message for the Error when it is thrown by the token manager to indicate a lexical error. Parameters : EOFSeen     : indicates if EOF caused the lexical error curLexState : lexical state in which this error occurred errorLine   : line number when the error occurred errorColumn : column number when the error occurred errorAfter  : prefix that was seen before this error occurred curchar     : the offending character Note: You can customize the lexical error message by modifying this method.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.String.valueOf", "org.apache.avro.compiler.idl.TokenMgrError.addEscapes", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], ["char"], ["java.lang.String"], [""]], "passed_comments": [{"org.apache.avro.compiler.idl.TokenMgrError.addEscapes": "Replaces unprintable characters by their escaped (or unicode escaped) equivalents in the given string"}]}, {"index": "1149", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/TokenMgrError.java", "methodName": "org.apache.avro.compiler.idl.TokenMgrError.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage() {\n    return super.getMessage();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SuperMethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "You can also modify the body of this method to customize your error messages. For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not of end-users concern, so you can return something like : \"Internal Error : Please file a bug report .... \" from this method for such cases in the release version of your parser.", "call_func_name": ["java.lang.Error.getMessage"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1150", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/TokenMgrError.java", "methodName": "org.apache.avro.compiler.idl.TokenMgrError.TokenMgrError", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TokenMgrError() {\n  }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "No arg constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1151", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/TokenMgrError.java", "methodName": "org.apache.avro.compiler.idl.TokenMgrError.TokenMgrError", "methodParameterType": "String#int#", "methodParameterName": "message#reason#", "methodBody": "public TokenMgrError(String message, int reason) {\n    super(message);\n    errorCode = reason;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor with message and reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1152", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/TokenMgrError.java", "methodName": "org.apache.avro.compiler.idl.TokenMgrError.TokenMgrError", "methodParameterType": "boolean#int#int#int#String#char#int#", "methodParameterName": "EOFSeen#lexState#errorLine#errorColumn#errorAfter#curChar#reason#", "methodBody": "public TokenMgrError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason) {\n    this(LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar), reason);\n  }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Full Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1153", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.BeginToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public char BeginToken() throws java.io.IOException\n  {\n    if (inBuf > 0)\n    {\n      --inBuf;\n\n      if (++bufpos == bufsize)\n        bufpos = 0;\n\n      tokenBegin = bufpos;\n      return buffer[bufpos];\n    }\n\n    tokenBegin = 0;\n    bufpos = -1;\n\n    return readChar();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#PrefixExpression#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#IfStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return starting character for token.", "call_func_name": ["org.apache.avro.compiler.idl.JavaCharStream.readChar"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.readChar": "Read a character."}]}, {"index": "1154", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.readChar", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public char readChar() throws java.io.IOException\n  {\n    if (inBuf > 0)\n    {\n      --inBuf;\n\n      if (++bufpos == bufsize)\n        bufpos = 0;\n\n      return buffer[bufpos];\n    }\n\n    char c;\n\n    if (++bufpos == available)\n      AdjustBuffSize();\n\n    if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n    {\n      UpdateLineColumn(c);\n\n      int backSlashCnt = 1;\n\n      for (;;) // Read all the backslashes\n      {\n        if (++bufpos == available)\n          AdjustBuffSize();\n\n        try\n        {\n          if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n          {\n            UpdateLineColumn(c);\n            // found a non-backslash char.\n            if ((c == 'u') && ((backSlashCnt & 1) == 1))\n            {\n              if (--bufpos < 0)\n                bufpos = bufsize - 1;\n\n              break;\n            }\n\n            backup(backSlashCnt);\n            return '\\\\';\n          }\n        }\n        catch(java.io.IOException e)\n        {\n\t  // We are returning one backslash so we should only backup (count-1)\n          if (backSlashCnt > 1)\n            backup(backSlashCnt-1);\n\n          return '\\\\';\n        }\n\n        UpdateLineColumn(c);\n        backSlashCnt++;\n      }\n\n      // Here, we have seen an odd number of backslash's followed by a 'u'\n      try\n      {\n        while ((c = ReadByte()) == 'u')\n          ++column;\n\n        buffer[bufpos] = c = (char)(hexval(c) << 12 |\n                                    hexval(ReadByte()) << 8 |\n                                    hexval(ReadByte()) << 4 |\n                                    hexval(ReadByte()));\n\n        column += 4;\n      }\n      catch(java.io.IOException e)\n      {\n        throw new Error(\"Invalid escape character at line \" + line +\n                                         \" column \" + column + \".\");\n      }\n\n      if (backSlashCnt == 1)\n        return c;\n      else\n      {\n        backup(backSlashCnt - 1);\n        return '\\\\';\n      }\n    }\n    else\n    {\n      UpdateLineColumn(c);\n      return c;\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#PrefixExpression#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#Assignment#ParenthesizedExpression#CharacterLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#Assignment#ParenthesizedExpression#CharacterLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#PrefixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#IfStatement#BreakStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#CharacterLiteral#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#IfStatement#CharacterLiteral#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#CharacterLiteral#InfixExpression#SimpleName#PrefixExpression#ExpressionStatement#WhileStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#PrimitiveType#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ParenthesizedExpression#CastExpression#Assignment#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#CharacterLiteral#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(SimpleName)SimpleName)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)IfStatement(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(SimpleName)SimpleName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)Assignment)ParenthesizedExpression(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(SimpleName)SimpleName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(TryStatement(Block(IfStatement(InfixExpression(ParenthesizedExpression(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)Assignment)ParenthesizedExpression(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)IfStatement(BreakStatement)BreakStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(CharacterLiteral)CharacterLiteral)ReturnStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)IfStatement(ReturnStatement(CharacterLiteral)CharacterLiteral)ReturnStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)ForStatement(TryStatement(Block(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(CharacterLiteral)CharacterLiteral)InfixExpression(ExpressionStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ExpressionStatement)WhileStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(Assignment(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(ParenthesizedExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ParenthesizedExpression)CastExpression)Assignment)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(ReturnStatement(SimpleName)SimpleName)ReturnStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(CharacterLiteral)CharacterLiteral)ReturnStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Read a character.", "call_func_name": ["org.apache.avro.compiler.idl.JavaCharStream.AdjustBuffSize", "org.apache.avro.compiler.idl.JavaCharStream.ReadByte", "org.apache.avro.compiler.idl.JavaCharStream.UpdateLineColumn", "org.apache.avro.compiler.idl.JavaCharStream.backup", "org.apache.avro.compiler.idl.JavaCharStream.hexval", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.Error.<init>"], "call_func_parameter": [[""], [""], ["char"], ["int"], ["char"], [""], ["java.lang.String"], ["int"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.backup": "Retreat."}]}, {"index": "1155", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.getEndColumn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getEndColumn() {\n    return bufcolumn[bufpos];\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get end column.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1156", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.getEndLine", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getEndLine() {\n    return bufline[bufpos];\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get end line.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1157", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.getBeginColumn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getBeginColumn() {\n    return bufcolumn[tokenBegin];\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return column of token start", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1158", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.getBeginLine", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getBeginLine() {\n    return bufline[tokenBegin];\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return line number of token start", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1159", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.backup", "methodParameterType": "int#", "methodParameterName": "amount#", "methodBody": "public void backup(int amount) {\n\n    inBuf += amount;\n    if ((bufpos -= amount) < 0)\n      bufpos += bufsize;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Retreat.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1160", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.JavaCharStream", "methodParameterType": "java.io.Reader#int#int#int#", "methodParameterName": "dstream#startline#startcolumn#buffersize#", "methodBody": "public JavaCharStream(java.io.Reader dstream,\n                 int startline, int startcolumn, int buffersize)\n  {\n    inputStream = dstream;\n    line = startline;\n    column = startcolumn - 1;\n\n    available = bufsize = buffersize;\n    buffer = new char[buffersize];\n    bufline = new int[buffersize];\n    bufcolumn = new int[buffersize];\n    nextCharBuf = new char[4096];\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#Assignment#Assignment#ExpressionStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#ArrayCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1161", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.JavaCharStream", "methodParameterType": "java.io.Reader#int#int#", "methodParameterName": "dstream#startline#startcolumn#", "methodBody": "public JavaCharStream(java.io.Reader dstream,\n                                        int startline, int startcolumn)\n  {\n    this(dstream, startline, startcolumn, 4096);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1162", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.JavaCharStream", "methodParameterType": "java.io.Reader#", "methodParameterName": "dstream#", "methodBody": "public JavaCharStream(java.io.Reader dstream)\n  {\n    this(dstream, 1, 1, 4096);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1163", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.ReInit", "methodParameterType": "java.io.Reader#int#int#int#", "methodParameterName": "dstream#startline#startcolumn#buffersize#", "methodBody": "public void ReInit(java.io.Reader dstream,\n                 int startline, int startcolumn, int buffersize)\n  {\n    inputStream = dstream;\n    line = startline;\n    column = startcolumn - 1;\n\n    if (buffer == null || buffersize != buffer.length)\n    {\n      available = bufsize = buffersize;\n      buffer = new char[buffersize];\n      bufline = new int[buffersize];\n      bufcolumn = new int[buffersize];\n      nextCharBuf = new char[4096];\n    }\n    prevCharIsLF = prevCharIsCR = false;\n    tokenBegin = inBuf = maxNextCharInd = 0;\n    nextCharInd = bufpos = -1;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#Assignment#Assignment#ExpressionStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#ArrayCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#BooleanLiteral#Assignment#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#Assignment#Assignment#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#PrefixExpression#Assignment#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)Assignment)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1164", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.ReInit", "methodParameterType": "java.io.Reader#int#int#", "methodParameterName": "dstream#startline#startcolumn#", "methodBody": "public void ReInit(java.io.Reader dstream,\n                                        int startline, int startcolumn)\n  {\n    ReInit(dstream, startline, startcolumn, 4096);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": ["org.apache.avro.compiler.idl.JavaCharStream.ReInit"], "call_func_parameter": [["java.io.Reader", "int", "int", "int"]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.ReInit": "Reinitialise."}]}, {"index": "1165", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.ReInit", "methodParameterType": "java.io.Reader#", "methodParameterName": "dstream#", "methodBody": "public void ReInit(java.io.Reader dstream)\n  {\n    ReInit(dstream, 1, 1, 4096);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": ["org.apache.avro.compiler.idl.JavaCharStream.ReInit"], "call_func_parameter": [["java.io.Reader", "int", "int", "int"]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.ReInit": "Reinitialise."}]}, {"index": "1166", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.JavaCharStream", "methodParameterType": "java.io.InputStream#String#int#int#int#", "methodParameterName": "dstream#encoding#startline#startcolumn#buffersize#", "methodBody": "public JavaCharStream(java.io.InputStream dstream, String encoding, int startline,\n  int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException\n  {\n    this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ConditionalExpression#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ConstructorInvocation(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ConditionalExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1167", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.JavaCharStream", "methodParameterType": "java.io.InputStream#int#int#int#", "methodParameterName": "dstream#startline#startcolumn#buffersize#", "methodBody": "public JavaCharStream(java.io.InputStream dstream, int startline,\n  int startcolumn, int buffersize)\n  {\n    this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1168", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.JavaCharStream", "methodParameterType": "java.io.InputStream#String#int#int#", "methodParameterName": "dstream#encoding#startline#startcolumn#", "methodBody": "public JavaCharStream(java.io.InputStream dstream, String encoding, int startline,\n                        int startcolumn) throws java.io.UnsupportedEncodingException\n  {\n    this(dstream, encoding, startline, startcolumn, 4096);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1169", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.JavaCharStream", "methodParameterType": "java.io.InputStream#int#int#", "methodParameterName": "dstream#startline#startcolumn#", "methodBody": "public JavaCharStream(java.io.InputStream dstream, int startline,\n                        int startcolumn)\n  {\n    this(dstream, startline, startcolumn, 4096);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1170", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.JavaCharStream", "methodParameterType": "java.io.InputStream#String#", "methodParameterName": "dstream#encoding#", "methodBody": "public JavaCharStream(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException\n  {\n    this(dstream, encoding, 1, 1, 4096);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1171", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.JavaCharStream", "methodParameterType": "java.io.InputStream#", "methodParameterName": "dstream#", "methodBody": "public JavaCharStream(java.io.InputStream dstream)\n  {\n    this(dstream, 1, 1, 4096);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1172", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.ReInit", "methodParameterType": "java.io.InputStream#String#int#int#int#", "methodParameterName": "dstream#encoding#startline#startcolumn#buffersize#", "methodBody": "public void ReInit(java.io.InputStream dstream, String encoding, int startline,\n  int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException\n  {\n    ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ConditionalExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ConditionalExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": ["java.io.InputStreamReader.<init>", "java.io.InputStreamReader.<init>", "org.apache.avro.compiler.idl.JavaCharStream.ReInit"], "call_func_parameter": [["java.io.InputStream"], ["java.io.InputStream", "java.lang.String"], ["java.io.Reader", "int", "int", "int"]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.ReInit": "Reinitialise."}]}, {"index": "1173", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.ReInit", "methodParameterType": "java.io.InputStream#int#int#int#", "methodParameterName": "dstream#startline#startcolumn#buffersize#", "methodBody": "public void ReInit(java.io.InputStream dstream, int startline,\n  int startcolumn, int buffersize)\n  {\n    ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": ["java.io.InputStreamReader.<init>", "org.apache.avro.compiler.idl.JavaCharStream.ReInit"], "call_func_parameter": [["java.io.InputStream"], ["java.io.Reader", "int", "int", "int"]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.ReInit": "Reinitialise."}]}, {"index": "1174", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.ReInit", "methodParameterType": "java.io.InputStream#String#int#int#", "methodParameterName": "dstream#encoding#startline#startcolumn#", "methodBody": "public void ReInit(java.io.InputStream dstream, String encoding, int startline,\n                     int startcolumn) throws java.io.UnsupportedEncodingException\n  {\n    ReInit(dstream, encoding, startline, startcolumn, 4096);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": ["org.apache.avro.compiler.idl.JavaCharStream.ReInit"], "call_func_parameter": [["java.io.InputStream", "java.lang.String", "int", "int", "int"]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.ReInit": "Reinitialise."}]}, {"index": "1175", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.ReInit", "methodParameterType": "java.io.InputStream#int#int#", "methodParameterName": "dstream#startline#startcolumn#", "methodBody": "public void ReInit(java.io.InputStream dstream, int startline,\n                     int startcolumn)\n  {\n    ReInit(dstream, startline, startcolumn, 4096);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": ["org.apache.avro.compiler.idl.JavaCharStream.ReInit"], "call_func_parameter": [["java.io.InputStream", "int", "int", "int"]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.ReInit": "Reinitialise."}]}, {"index": "1176", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.ReInit", "methodParameterType": "java.io.InputStream#String#", "methodParameterName": "dstream#encoding#", "methodBody": "public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException\n  {\n    ReInit(dstream, encoding, 1, 1, 4096);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": ["org.apache.avro.compiler.idl.JavaCharStream.ReInit"], "call_func_parameter": [["java.io.InputStream", "java.lang.String", "int", "int", "int"]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.ReInit": "Reinitialise."}]}, {"index": "1177", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.ReInit", "methodParameterType": "java.io.InputStream#", "methodParameterName": "dstream#", "methodBody": "public void ReInit(java.io.InputStream dstream)\n  {\n    ReInit(dstream, 1, 1, 4096);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": ["org.apache.avro.compiler.idl.JavaCharStream.ReInit"], "call_func_parameter": [["java.io.InputStream", "int", "int", "int"]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.ReInit": "Reinitialise."}]}, {"index": "1178", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.GetImage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String GetImage()\n  {\n    if (bufpos >= tokenBegin)\n      return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);\n    else\n      return new String(buffer, tokenBegin, bufsize - tokenBegin) +\n                              new String(buffer, 0, bufpos + 1);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#ClassInstanceCreation#ReturnStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#ClassInstanceCreation#InfixExpression#ReturnStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ClassInstanceCreation)ReturnStatement(ReturnStatement(InfixExpression(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ClassInstanceCreation)InfixExpression)ReturnStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "@return token image as String", "call_func_name": ["java.lang.String.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [["char[]", "int", "int"], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1179", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.GetSuffix", "methodParameterType": "int#", "methodParameterName": "len#", "methodBody": "public char[] GetSuffix(int len)\n  {\n    char[] ret = new char[len];\n\n    if ((bufpos + 1) >= len)\n      System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);\n    else\n    {\n      System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,\n                                                        len - bufpos - 1);\n      System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);\n    }\n\n    return ret;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#NumberLiteral#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return suffix", "call_func_name": ["java.lang.System.arraycopy"], "call_func_parameter": [["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": "/"}, {"index": "1180", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.Done", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void Done()\n  {\n    nextCharBuf = null;\n    buffer = null;\n    bufline = null;\n    bufcolumn = null;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set buffers back to null when finished.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1181", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/JavaCharStream.java", "methodName": "org.apache.avro.compiler.idl.JavaCharStream.adjustBeginLineColumn", "methodParameterType": "int#int#", "methodParameterName": "newLine#newCol#", "methodBody": "public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n    int start = tokenBegin;\n    int len;\n\n    if (bufpos >= tokenBegin)\n    {\n      len = bufpos - tokenBegin + inBuf + 1;\n    }\n    else\n    {\n      len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n    }\n\n    int i = 0, j = 0, k = 0;\n    int nextColDiff = 0, columnDiff = 0;\n\n    while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n    {\n      bufline[j] = newLine;\n      nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n      bufcolumn[j] = newCol + columnDiff;\n      columnDiff = nextColDiff;\n      i++;\n    }\n\n    if (i < len)\n    {\n      bufline[j] = newLine++;\n      bufcolumn[j] = newCol + columnDiff;\n\n      while (i++ < len)\n      {\n        if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n          bufline[j] = newLine++;\n        else\n          bufline[j] = newLine;\n      }\n    }\n\n    line = bufline[j];\n    column = bufcolumn[j];\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#InfixExpression#NumberLiteral#InfixExpression#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ArrayAccess#SimpleName#SimpleName#SimpleName#PrefixExpression#SimpleName#InfixExpression#Assignment#ArrayAccess#InfixExpression#InfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#InfixExpression#SimpleName#SimpleName#ArrayAccess#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#PostfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#PostfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ArrayAccess#SimpleName#SimpleName#PrefixExpression#SimpleName#InfixExpression#ArrayAccess#InfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#PostfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#WhileStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ArrayAccess(ArrayAccess(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(SimpleName)SimpleName)InfixExpression)Assignment)ArrayAccess)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PostfixExpression(SimpleName)SimpleName)PostfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(WhileStatement(InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(SimpleName)SimpleName)InfixExpression(Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(SimpleName)SimpleName)InfixExpression)ArrayAccess)InfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PostfixExpression(SimpleName)SimpleName)PostfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)WhileStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Method to adjust line and column numbers for the start of a token.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1182", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.CompilationUnit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "final public Protocol CompilationUnit() throws ParseException {\n  Protocol p;\n    p = ProtocolDeclaration();\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case 71:\n      jj_consume_token(71);\n      break;\n    default:\n      jj_la1[0] = jj_gen;\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case STUFF_TO_IGNORE:\n      jj_consume_token(STUFF_TO_IGNORE);\n      break;\n    default:\n      jj_la1[1] = jj_gen;\n      ;\n    }\n    jj_consume_token(0);\n    {if (true) return SchemaResolver.resolve(p);}\n    throw new Error(\"Missing return statement in function\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#ConditionalExpression#NumberLiteral#SwitchCase#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#EmptyStatement#SwitchStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#ConditionalExpression#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#EmptyStatement#SwitchStatement#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#IfStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(SwitchStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConditionalExpression(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(EmptyStatement)EmptyStatement)SwitchStatement(SwitchStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConditionalExpression(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(EmptyStatement)EmptyStatement)SwitchStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(Block(IfStatement(BooleanLiteral)BooleanLiteral(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)IfStatement)Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "The input to Idl is a CompilationUnit, which is currently just a single Protocol.", "call_func_name": ["org.apache.avro.compiler.idl.Idl.ProtocolDeclaration", "org.apache.avro.compiler.idl.Idl.jj_ntk", "org.apache.avro.compiler.idl.Idl.jj_consume_token", "org.apache.avro.compiler.idl.SchemaResolver.resolve"], "call_func_parameter": [[""], [""], ["int"], ["org.apache.avro.Protocol"]], "passed_comments": [{"org.apache.avro.compiler.idl.SchemaResolver.resolve": "Will clone the provided protocol while resolving all unreferenced schemas"}]}, {"index": "1183", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.ReferenceType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "final public Schema ReferenceType() throws ParseException {\n  String part;\n  Token tok;\n  StringBuilder sb = new StringBuilder();\n    part = Identifier();\n                          sb.append(part);\n    label_13:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case DOT:\n        ;\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        break label_13;\n      }\n      jj_consume_token(DOT);\n      tok = AnyIdentifier();\n                                 sb.append(\".\").append(tok.image);\n    }\n    String name = sb.toString();\n    if ((name.indexOf('.') == -1) && namespace != null)\n      name = namespace + \".\" + name;\n    Schema type = names.get(name);\n    if (type == null)\n    {\n      type = SchemaResolver.unresolvedSchema(name);\n    }\n    {if (true) return type;}\n    throw new Error(\"Missing return statement in function\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#ConditionalExpression#SimpleName#SwitchCase#EmptyStatement#BreakStatement#SwitchCase#SimpleName#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#BreakStatement#SwitchStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#WhileStatement#LabeledStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#ParenthesizedExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#BooleanLiteral#SimpleName#ReturnStatement#IfStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(LabeledStatement(SimpleName)SimpleName(WhileStatement(BooleanLiteral)BooleanLiteral(Block(SwitchStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConditionalExpression(SwitchCase(SimpleName)SimpleName)SwitchCase(EmptyStatement)EmptyStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(BreakStatement(SimpleName)SimpleName)BreakStatement)SwitchStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)WhileStatement)LabeledStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(Block(IfStatement(BooleanLiteral)BooleanLiteral(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement)Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "A reference to some other existing type", "call_func_name": ["java.lang.StringBuilder.<init>", "org.apache.avro.compiler.idl.Idl.Identifier", "java.lang.StringBuilder.append", "org.apache.avro.compiler.idl.Idl.jj_ntk", "org.apache.avro.compiler.idl.Idl.jj_consume_token", "org.apache.avro.compiler.idl.Idl.AnyIdentifier", "java.lang.StringBuilder.toString", "java.lang.String.indexOf", "java.util.Map.get", "org.apache.avro.compiler.idl.SchemaResolver.unresolvedSchema"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["int"], [""], [""], ["int"], ["java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.compiler.idl.SchemaResolver.unresolvedSchema": "Create a schema to represent a \"unresolved\" schema. (used to represent a schema where the definition is not known at the time) This concept might be generalizable..."}]}, {"index": "1184", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.ResultType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "final public Schema ResultType() throws ParseException {\n  Schema schema;\n    if (jj_2_3(2)) {\n      jj_consume_token(VOID);\n                      {if (true) return Schema.create(Type.NULL);}\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ARRAY:\n      case BOOLEAN:\n      case DOUBLE:\n      case FLOAT:\n      case INT:\n      case LONG:\n      case MAP:\n      case BYTES:\n      case STRING:\n      case NULL:\n      case UNION:\n      case DATE:\n      case TIME:\n      case TIMESTAMP:\n      case DECIMAL:\n      case LOCAL_TIMESTAMP:\n      case IDENTIFIER:\n      case AT:\n      case TICK:\n        schema = Type();\n                      {if (true) return schema;}\n        break;\n      default:\n        jj_la1[28] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n    throw new Error(\"Missing return statement in function\");\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#IfStatement#Block#Block#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#ConditionalExpression#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BooleanLiteral#SimpleName#ReturnStatement#IfStatement#Block#BreakStatement#SwitchCase#SimpleName#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(Block(IfStatement(BooleanLiteral)BooleanLiteral(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)IfStatement)Block)Block(Block(SwitchStatement(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConditionalExpression(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(Block(IfStatement(BooleanLiteral)BooleanLiteral(ReturnStatement(SimpleName)SimpleName)ReturnStatement)IfStatement)Block(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Result types are like other types, except we provide \"void\" as an alias of \"null\"", "call_func_name": ["org.apache.avro.compiler.idl.Idl.jj_2_3", "org.apache.avro.compiler.idl.Idl.jj_consume_token", "org.apache.avro.compiler.idl.Idl.jj_ntk", "org.apache.avro.compiler.idl.Idl.Type", "org.apache.avro.compiler.idl.ParseException.<init>"], "call_func_parameter": [["int"], ["int"], [""], [""], [""]], "passed_comments": "/"}, {"index": "1185", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.Idl", "methodParameterType": "java.io.InputStream#", "methodParameterName": "stream#", "methodBody": "public Idl(java.io.InputStream stream) {\n     this(stream, null);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor with InputStream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1186", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.Idl", "methodParameterType": "java.io.InputStream#String#", "methodParameterName": "stream#encoding#", "methodBody": "public Idl(java.io.InputStream stream, String encoding) {\n    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }\n    token_source = new IdlTokenManager(jj_input_stream);\n    token = new Token();\n    jj_ntk = -1;\n    jj_gen = 0;\n    for (int i = 0; i < 38; i++) jj_la1[i] = -1;\n    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#NumberLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#ForStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ClassInstanceCreation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)ForStatement)Block)MethodDeclaration", "methodDoc": "Constructor with InputStream and supplied encoding", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1187", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.ReInit", "methodParameterType": "java.io.InputStream#", "methodParameterName": "stream#", "methodBody": "public void ReInit(java.io.InputStream stream) {\n     ReInit(stream, null);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": ["org.apache.avro.compiler.idl.Idl.ReInit"], "call_func_parameter": [["java.io.InputStream", "java.lang.String"]], "passed_comments": [{"org.apache.avro.compiler.idl.Idl.ReInit": "Reinitialise."}]}, {"index": "1188", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.ReInit", "methodParameterType": "java.io.InputStream#String#", "methodParameterName": "stream#encoding#", "methodBody": "public void ReInit(java.io.InputStream stream, String encoding) {\n    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }\n    token_source.ReInit(jj_input_stream);\n    token = new Token();\n    jj_ntk = -1;\n    jj_gen = 0;\n    for (int i = 0; i < 38; i++) jj_la1[i] = -1;\n    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#ForStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)ForStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": ["org.apache.avro.compiler.idl.JavaCharStream.ReInit", "java.lang.RuntimeException.<init>", "org.apache.avro.compiler.idl.IdlTokenManager.ReInit", "org.apache.avro.compiler.idl.Token.<init>"], "call_func_parameter": [["java.io.InputStream", "java.lang.String", "int", "int"], ["java.lang.Throwable"], ["org.apache.avro.compiler.idl.JavaCharStream"], [""]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.ReInit": "Reinitialise."}, {"org.apache.avro.compiler.idl.IdlTokenManager.ReInit": "Reinitialise parser."}]}, {"index": "1189", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.Idl", "methodParameterType": "java.io.Reader#", "methodParameterName": "stream#", "methodBody": "public Idl(java.io.Reader stream) {\n    jj_input_stream = new JavaCharStream(stream, 1, 1);\n    token_source = new IdlTokenManager(jj_input_stream);\n    token = new Token();\n    jj_ntk = -1;\n    jj_gen = 0;\n    for (int i = 0; i < 38; i++) jj_la1[i] = -1;\n    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#NumberLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#ForStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)ForStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1190", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.ReInit", "methodParameterType": "java.io.Reader#", "methodParameterName": "stream#", "methodBody": "public void ReInit(java.io.Reader stream) {\n    jj_input_stream.ReInit(stream, 1, 1);\n    token_source.ReInit(jj_input_stream);\n    token = new Token();\n    jj_ntk = -1;\n    jj_gen = 0;\n    for (int i = 0; i < 38; i++) jj_la1[i] = -1;\n    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#ForStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)ForStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": ["org.apache.avro.compiler.idl.JavaCharStream.ReInit", "org.apache.avro.compiler.idl.IdlTokenManager.ReInit", "org.apache.avro.compiler.idl.Token.<init>"], "call_func_parameter": [["java.io.Reader", "int", "int"], ["org.apache.avro.compiler.idl.JavaCharStream"], [""]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.ReInit": "Reinitialise."}, {"org.apache.avro.compiler.idl.IdlTokenManager.ReInit": "Reinitialise parser."}]}, {"index": "1191", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.Idl", "methodParameterType": "IdlTokenManager#", "methodParameterName": "tm#", "methodBody": "public Idl(IdlTokenManager tm) {\n    token_source = tm;\n    token = new Token();\n    jj_ntk = -1;\n    jj_gen = 0;\n    for (int i = 0; i < 38; i++) jj_la1[i] = -1;\n    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#ForStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)ForStatement)Block)MethodDeclaration", "methodDoc": "Constructor with generated Token Manager.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1192", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.ReInit", "methodParameterType": "IdlTokenManager#", "methodParameterName": "tm#", "methodBody": "public void ReInit(IdlTokenManager tm) {\n    token_source = tm;\n    token = new Token();\n    jj_ntk = -1;\n    jj_gen = 0;\n    for (int i = 0; i < 38; i++) jj_la1[i] = -1;\n    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#ForStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)ForStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise.", "call_func_name": ["org.apache.avro.compiler.idl.Token.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1193", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.getNextToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "final public Token getNextToken() {\n    if (token.next != null) token = token.next;\n    else token = token.next = token_source.getNextToken();\n    jj_ntk = -1;\n    jj_gen++;\n    return token;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#Assignment#ExpressionStatement#IfStatement#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the next Token.", "call_func_name": ["org.apache.avro.compiler.idl.IdlTokenManager.getNextToken"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.compiler.idl.IdlTokenManager.getNextToken": "Get the next Token."}]}, {"index": "1194", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.getToken", "methodParameterType": "int#", "methodParameterName": "index#", "methodBody": "final public Token getToken(int index) {\n    Token t = token;\n    for (int i = 0; i < index; i++) {\n      if (t.next != null) t = t.next;\n      else t = t.next = token_source.getNextToken();\n    }\n    return t;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#Assignment#Assignment#ExpressionStatement#IfStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)Assignment)ExpressionStatement)IfStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the specific Token.", "call_func_name": ["org.apache.avro.compiler.idl.IdlTokenManager.getNextToken"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.compiler.idl.IdlTokenManager.getNextToken": "Get the next Token."}]}, {"index": "1195", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.generateParseException", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ParseException generateParseException() {\n    jj_expentries.clear();\n    boolean[] la1tokens = new boolean[73];\n    if (jj_kind >= 0) {\n      la1tokens[jj_kind] = true;\n      jj_kind = -1;\n    }\n    for (int i = 0; i < 38; i++) {\n      if (jj_la1[i] == jj_gen) {\n        for (int j = 0; j < 32; j++) {\n          if ((jj_la1_0[i] & (1<<j)) != 0) {\n            la1tokens[j] = true;\n          }\n          if ((jj_la1_1[i] & (1<<j)) != 0) {\n            la1tokens[32+j] = true;\n          }\n          if ((jj_la1_2[i] & (1<<j)) != 0) {\n            la1tokens[64+j] = true;\n          }\n        }\n      }\n    }\n    for (int i = 0; i < 73; i++) {\n      if (la1tokens[i]) {\n        jj_expentry = new int[1];\n        jj_expentry[0] = i;\n        jj_expentries.add(jj_expentry);\n      }\n    }\n    jj_endpos = 0;\n    jj_rescan_token();\n    jj_add_error_token(0, 0);\n    int[][] exptokseq = new int[jj_expentries.size()][];\n    for (int i = 0; i < jj_expentries.size(); i++) {\n      exptokseq[i] = jj_expentries.get(i);\n    }\n    return new ParseException(token, exptokseq, tokenImage);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#ArrayAccess#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#PrefixExpression#Assignment#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#InfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#ArrayAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#ArrayAccess#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#SimpleName#InfixExpression#ArrayAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#ArrayAccess#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#SimpleName#InfixExpression#ArrayAccess#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#ForStatement#Block#IfStatement#Block#ForStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#PrimitiveType#Dimension#ArrayType#NumberLiteral#ArrayCreation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)Assignment)ExpressionStatement)Block)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)InfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ArrayAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ArrayAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)ForStatement)Block)IfStatement)Block)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate ParseException.", "call_func_name": ["java.util.List.clear", "java.util.List.add", "org.apache.avro.compiler.idl.Idl.jj_rescan_token", "org.apache.avro.compiler.idl.Idl.jj_add_error_token", "java.util.List.size", "java.util.List.get", "org.apache.avro.compiler.idl.ParseException.<init>"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["int", "int"], [""], ["int"], ["org.apache.avro.compiler.idl.Token", "int[][]", "java.lang.String[]"]], "passed_comments": "/"}, {"index": "1196", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.enable_tracing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "final public void enable_tracing() {\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Enable tracing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1197", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Idl.java", "methodName": "org.apache.avro.compiler.idl.Idl.disable_tracing", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "final public void disable_tracing() {\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Disable tracing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1198", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/IdlTokenManager.java", "methodName": "org.apache.avro.compiler.idl.IdlTokenManager.setDebugStream", "methodParameterType": "java.io.PrintStream#", "methodParameterName": "ds#", "methodBody": "public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set debug output.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1199", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/IdlTokenManager.java", "methodName": "org.apache.avro.compiler.idl.IdlTokenManager.IdlTokenManager", "methodParameterType": "JavaCharStream#", "methodParameterName": "stream#", "methodBody": "public IdlTokenManager(JavaCharStream stream){\n   if (JavaCharStream.staticFlag)\n      throw new Error(\"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.\");\n   input_stream = stream;\n}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1200", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/IdlTokenManager.java", "methodName": "org.apache.avro.compiler.idl.IdlTokenManager.IdlTokenManager", "methodParameterType": "JavaCharStream#int#", "methodParameterName": "stream#lexState#", "methodBody": "public IdlTokenManager(JavaCharStream stream, int lexState){\n   this(stream);\n   SwitchTo(lexState);\n}", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#ConstructorInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName)ConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1201", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/IdlTokenManager.java", "methodName": "org.apache.avro.compiler.idl.IdlTokenManager.ReInit", "methodParameterType": "JavaCharStream#", "methodParameterName": "stream#", "methodBody": "public void ReInit(JavaCharStream stream)\n{\n   jjmatchedPos = jjnewStateCnt = 0;\n   curLexState = defaultLexState;\n   input_stream = stream;\n   ReInitRounds();\n}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#Assignment#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise parser.", "call_func_name": ["org.apache.avro.compiler.idl.IdlTokenManager.ReInitRounds"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1202", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/IdlTokenManager.java", "methodName": "org.apache.avro.compiler.idl.IdlTokenManager.ReInit", "methodParameterType": "JavaCharStream#int#", "methodParameterName": "stream#lexState#", "methodBody": "public void ReInit(JavaCharStream stream, int lexState)\n{\n   ReInit(stream);\n   SwitchTo(lexState);\n}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reinitialise parser.", "call_func_name": ["org.apache.avro.compiler.idl.IdlTokenManager.ReInit", "org.apache.avro.compiler.idl.IdlTokenManager.SwitchTo"], "call_func_parameter": [["org.apache.avro.compiler.idl.JavaCharStream"], ["int"]], "passed_comments": [{"org.apache.avro.compiler.idl.IdlTokenManager.ReInit": "Reinitialise parser."}, {"org.apache.avro.compiler.idl.IdlTokenManager.SwitchTo": "Switch to specified lex state."}]}, {"index": "1203", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/IdlTokenManager.java", "methodName": "org.apache.avro.compiler.idl.IdlTokenManager.SwitchTo", "methodParameterType": "int#", "methodParameterName": "lexState#", "methodBody": "public void SwitchTo(int lexState)\n{\n   if (lexState >= 3 || lexState < 0)\n      throw new TokenMgrError(\"Error: Ignoring invalid lexical state : \" + lexState + \". State unchanged.\", TokenMgrError.INVALID_LEXICAL_STATE);\n   else\n      curLexState = lexState;\n}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Switch to specified lex state.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.compiler.idl.TokenMgrError.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["java.lang.String", "int"]], "passed_comments": "/"}, {"index": "1204", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/IdlTokenManager.java", "methodName": "org.apache.avro.compiler.idl.IdlTokenManager.getNextToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Token getNextToken() \n{\n  Token specialToken = null;\n  Token matchedToken;\n  int curPos = 0;\n\n  EOFLoop :\n  for (;;)\n  {\n   try\n   {\n      curChar = input_stream.BeginToken();\n   }\n   catch(java.io.IOException e)\n   {\n      jjmatchedKind = 0;\n      matchedToken = jjFillToken();\n      matchedToken.specialToken = specialToken;\n      return matchedToken;\n   }\n   image = jjimage;\n   image.setLength(0);\n   jjimageLen = 0;\n\n   for (;;)\n   {\n     switch(curLexState)\n     {\n       case 0:\n         try { input_stream.backup(0);\n            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)\n               curChar = input_stream.BeginToken();\n         }\n         catch (java.io.IOException e1) { continue EOFLoop; }\n         jjmatchedKind = 0x7fffffff;\n         jjmatchedPos = 0;\n         curPos = jjMoveStringLiteralDfa0_0();\n         if (jjmatchedPos == 0 && jjmatchedKind > 72)\n         {\n            jjmatchedKind = 72;\n         }\n         break;\n       case 1:\n         jjmatchedKind = 0x7fffffff;\n         jjmatchedPos = 0;\n         curPos = jjMoveStringLiteralDfa0_1();\n         if (jjmatchedPos == 0 && jjmatchedKind > 9)\n         {\n            jjmatchedKind = 9;\n         }\n         break;\n       case 2:\n         jjmatchedKind = 0x7fffffff;\n         jjmatchedPos = 0;\n         curPos = jjMoveStringLiteralDfa0_2();\n         if (jjmatchedPos == 0 && jjmatchedKind > 9)\n         {\n            jjmatchedKind = 9;\n         }\n         break;\n     }\n     if (jjmatchedKind != 0x7fffffff)\n     {\n        if (jjmatchedPos + 1 < curPos)\n           input_stream.backup(curPos - jjmatchedPos - 1);\n        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n        {\n           matchedToken = jjFillToken();\n           matchedToken.specialToken = specialToken;\n       if (jjnewLexState[jjmatchedKind] != -1)\n         curLexState = jjnewLexState[jjmatchedKind];\n           return matchedToken;\n        }\n        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n        {\n           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)\n           {\n              matchedToken = jjFillToken();\n              if (specialToken == null)\n                 specialToken = matchedToken;\n              else\n              {\n                 matchedToken.specialToken = specialToken;\n                 specialToken = (specialToken.next = matchedToken);\n              }\n              SkipLexicalActions(matchedToken);\n           }\n           else\n              SkipLexicalActions(null);\n         if (jjnewLexState[jjmatchedKind] != -1)\n           curLexState = jjnewLexState[jjmatchedKind];\n           continue EOFLoop;\n        }\n        jjimageLen += jjmatchedPos + 1;\n      if (jjnewLexState[jjmatchedKind] != -1)\n        curLexState = jjnewLexState[jjmatchedKind];\n        curPos = 0;\n        jjmatchedKind = 0x7fffffff;\n        try {\n           curChar = input_stream.readChar();\n           continue;\n        }\n        catch (java.io.IOException e1) { }\n     }\n     int error_line = input_stream.getEndLine();\n     int error_column = input_stream.getEndColumn();\n     String error_after = null;\n     boolean EOFSeen = false;\n     try { input_stream.readChar(); input_stream.backup(1); }\n     catch (java.io.IOException e1) {\n        EOFSeen = true;\n        error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n        if (curChar == '\\n' || curChar == '\\r') {\n           error_line++;\n           error_column = 0;\n        }\n        else\n           error_column++;\n     }\n     if (!EOFSeen) {\n        input_stream.backup(1);\n        error_after = curPos <= 1 ? \"\" : input_stream.GetImage();\n     }\n     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);\n   }\n  }\n}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#SwitchCase#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#WhileStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ContinueStatement#Block#CatchClause#TryStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#BreakStatement#NumberLiteral#SwitchCase#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#BreakStatement#NumberLiteral#SwitchCase#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#BreakStatement#SwitchStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#IfStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ParenthesizedExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#ArrayAccess#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#IfStatement#SimpleName#ContinueStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#IfStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ContinueStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#CharacterLiteral#InfixExpression#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#SimpleName#PostfixExpression#ExpressionStatement#IfStatement#Block#CatchClause#TryStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ThrowStatement#Block#ForStatement#Block#ForStatement#LabeledStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(LabeledStatement(SimpleName)SimpleName(ForStatement(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)CatchClause)TryStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ForStatement(Block(SwitchStatement(SimpleName)SimpleName(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)WhileStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ContinueStatement(SimpleName)SimpleName)ContinueStatement)Block)CatchClause)TryStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(BreakStatement)BreakStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(BreakStatement)BreakStatement(SwitchCase(NumberLiteral)NumberLiteral)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(BreakStatement)BreakStatement)SwitchStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ParenthesizedExpression(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ParenthesizedExpression)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)IfStatement(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)IfStatement(ContinueStatement(SimpleName)SimpleName)ContinueStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ContinueStatement)ContinueStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)IfStatement)Block)CatchClause)TryStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ThrowStatement)Block)ForStatement)Block)ForStatement)LabeledStatement)Block)MethodDeclaration", "methodDoc": "Get the next Token.", "call_func_name": ["org.apache.avro.compiler.idl.JavaCharStream.BeginToken", "org.apache.avro.compiler.idl.IdlTokenManager.jjFillToken", "java.lang.StringBuilder.setLength", "org.apache.avro.compiler.idl.JavaCharStream.backup", "org.apache.avro.compiler.idl.IdlTokenManager.jjMoveStringLiteralDfa0_0", "org.apache.avro.compiler.idl.IdlTokenManager.jjMoveStringLiteralDfa0_1", "org.apache.avro.compiler.idl.IdlTokenManager.jjMoveStringLiteralDfa0_2", "org.apache.avro.compiler.idl.IdlTokenManager.SkipLexicalActions", "org.apache.avro.compiler.idl.JavaCharStream.readChar", "org.apache.avro.compiler.idl.JavaCharStream.getEndLine", "org.apache.avro.compiler.idl.JavaCharStream.getEndColumn", "org.apache.avro.compiler.idl.JavaCharStream.GetImage", "org.apache.avro.compiler.idl.TokenMgrError.<init>"], "call_func_parameter": [[""], [""], ["int"], ["int"], [""], [""], [""], ["org.apache.avro.compiler.idl.Token"], [""], [""], [""], [""], ["boolean", "int", "int", "int", "java.lang.String", "char", "int"]], "passed_comments": [{"org.apache.avro.compiler.idl.JavaCharStream.BeginToken": "@return starting character for token."}, {"org.apache.avro.compiler.idl.JavaCharStream.backup": "Retreat."}, {"org.apache.avro.compiler.idl.JavaCharStream.readChar": "Read a character."}, {"org.apache.avro.compiler.idl.JavaCharStream.getEndLine": "Get end line."}, {"org.apache.avro.compiler.idl.JavaCharStream.getEndColumn": "Get end column."}, {"org.apache.avro.compiler.idl.JavaCharStream.GetImage": "@return token image as String"}]}, {"index": "1205", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Token.java", "methodName": "org.apache.avro.compiler.idl.Token.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Object getValue() {\n    return null;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "An optional attribute value of the Token. Tokens which are not used as syntactic sugar will often contain meaningful values that will be used later on by the compiler or interpreter. This attribute value is often different from the image. Any subclass of Token that actually wants to return a non-null value can override this method as appropriate.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1206", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Token.java", "methodName": "org.apache.avro.compiler.idl.Token.Token", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Token() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "No-argument constructor", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1207", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Token.java", "methodName": "org.apache.avro.compiler.idl.Token.Token", "methodParameterType": "int#", "methodParameterName": "kind#", "methodBody": "public Token(int kind)\n  {\n    this(kind, null);\n  }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a new token for the specified Image.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1208", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Token.java", "methodName": "org.apache.avro.compiler.idl.Token.Token", "methodParameterType": "int#String#", "methodParameterName": "kind#image#", "methodBody": "public Token(int kind, String image)\n  {\n    this.kind = kind;\n    this.image = image;\n  }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new token for the specified Image and Kind.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1209", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Token.java", "methodName": "org.apache.avro.compiler.idl.Token.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String toString()\n  {\n    return image;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the image.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1210", "file": "/root/repos/repos8/avro/lang/java/compiler/target/generated-sources/javacc/org/apache/avro/compiler/idl/Token.java", "methodName": "org.apache.avro.compiler.idl.Token.newToken", "methodParameterType": "int#String#", "methodParameterName": "ofKind#image#", "methodBody": "public static Token newToken(int ofKind, String image)\n  {\n    switch(ofKind)\n    {\n      default : return new Token(ofKind, image);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(SimpleName)SimpleName(SwitchCase)SwitchCase(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Returns a new Token object, by default. However, if you want, you can create and return subclass objects based on the value of ofKind. Simply add the cases to the switch for all those special cases. For example, if you have a subclass of Token called IDToken that you want to create if ofKind is ID, simply add something like : case MyParserConstants.ID : return new IDToken(ofKind, image); to the following switch statement. Then you can cast matchedToken variable to the appropriate type and use sit in your lexical actions.", "call_func_name": ["org.apache.avro.compiler.idl.Token.<init>"], "call_func_parameter": [["int", "java.lang.String"]], "passed_comments": "/"}, {"index": "1211", "file": "/root/repos/repos8/avro/lang/java/ipc-jetty/src/main/java/org/apache/avro/ipc/jetty/HttpServer.java", "methodName": "org.apache.avro.ipc.jetty.HttpServer.HttpServer", "methodParameterType": "Responder#int#", "methodParameterName": "responder#port#", "methodBody": "public HttpServer(Responder responder, int port) throws IOException {\n    this(new ResponderServlet(responder), null, port);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#NullLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(NullLiteral)NullLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a server to run on the named port.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1212", "file": "/root/repos/repos8/avro/lang/java/ipc-jetty/src/main/java/org/apache/avro/ipc/jetty/HttpServer.java", "methodName": "org.apache.avro.ipc.jetty.HttpServer.HttpServer", "methodParameterType": "ResponderServlet#int#", "methodParameterName": "servlet#port#", "methodBody": "public HttpServer(ResponderServlet servlet, int port) throws IOException {\n    this(servlet, null, port);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a server to run on the named port.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1213", "file": "/root/repos/repos8/avro/lang/java/ipc-jetty/src/main/java/org/apache/avro/ipc/jetty/HttpServer.java", "methodName": "org.apache.avro.ipc.jetty.HttpServer.HttpServer", "methodParameterType": "Responder#InetSocketAddress#", "methodParameterName": "responder#addr#", "methodBody": "public HttpServer(Responder responder, InetSocketAddress addr) throws IOException {\n    this(new ResponderServlet(responder), addr.getHostString(), addr.getPort());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a server to run on the named port on the specified address.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1214", "file": "/root/repos/repos8/avro/lang/java/ipc-jetty/src/main/java/org/apache/avro/ipc/jetty/HttpServer.java", "methodName": "org.apache.avro.ipc.jetty.HttpServer.HttpServer", "methodParameterType": "Responder#String#int#", "methodParameterName": "responder#bindAddress#port#", "methodBody": "public HttpServer(Responder responder, String bindAddress, int port) throws IOException {\n    this(new ResponderServlet(responder), bindAddress, port);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a server to run on the named port on the specified address.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1215", "file": "/root/repos/repos8/avro/lang/java/ipc-jetty/src/main/java/org/apache/avro/ipc/jetty/HttpServer.java", "methodName": "org.apache.avro.ipc.jetty.HttpServer.HttpServer", "methodParameterType": "ResponderServlet#String#int#", "methodParameterName": "servlet#bindAddress#port#", "methodBody": "public HttpServer(ResponderServlet servlet, String bindAddress, int port) throws IOException {\n    this.server = new org.eclipse.jetty.server.Server();\n    ServerConnector connector = new ServerConnector(this.server);\n    connector.setAcceptQueueSize(128);\n    connector.setIdleTimeout(10000);\n    if (bindAddress != null) {\n      connector.setHost(bindAddress);\n    }\n    connector.setPort(port);\n    server.addConnector(connector);\n\n    ServletHandler handler = new ServletHandler();\n    handler.addServletWithMapping(new ServletHolder(servlet), \"/*\");\n    ServletContextHandler sch = new ServletContextHandler();\n    sch.setServletHandler(handler);\n    server.setHandler(sch);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a server to run on the named port on the specified address.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1216", "file": "/root/repos/repos8/avro/lang/java/ipc-jetty/src/main/java/org/apache/avro/ipc/jetty/HttpServer.java", "methodName": "org.apache.avro.ipc.jetty.HttpServer.HttpServer", "methodParameterType": "Responder#ConnectionFactory#String#int#", "methodParameterName": "responder#connectionFactory#bindAddress#port#", "methodBody": "public HttpServer(Responder responder, ConnectionFactory connectionFactory, String bindAddress, int port)\n      throws IOException {\n    this(new ResponderServlet(responder), connectionFactory, bindAddress, port);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a server to run with the given ConnectionFactory on the given address/port.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1217", "file": "/root/repos/repos8/avro/lang/java/ipc-jetty/src/main/java/org/apache/avro/ipc/jetty/HttpServer.java", "methodName": "org.apache.avro.ipc.jetty.HttpServer.HttpServer", "methodParameterType": "ResponderServlet#ConnectionFactory#String#int#", "methodParameterName": "servlet#connectionFactory#bindAddress#port#", "methodBody": "public HttpServer(ResponderServlet servlet, ConnectionFactory connectionFactory, String bindAddress, int port)\n      throws IOException {\n    this.server = new org.eclipse.jetty.server.Server();\n    HttpConfiguration httpConfig = new HttpConfiguration();\n    HttpConnectionFactory httpFactory = new HttpConnectionFactory(httpConfig);\n    ServerConnector connector = new ServerConnector(this.server, connectionFactory, httpFactory);\n    if (bindAddress != null) {\n      connector.setHost(bindAddress);\n    }\n    connector.setPort(port);\n\n    server.addConnector(connector);\n    ServletHandler handler = new ServletHandler();\n    server.setHandler(handler);\n    handler.addServletWithMapping(new ServletHolder(servlet), \"/*\");\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a server to run with the given ConnectionFactory on the given address/port.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1218", "file": "/root/repos/repos8/avro/lang/java/ipc-jetty/src/main/java/org/apache/avro/ipc/jetty/HttpServer.java", "methodName": "org.apache.avro.ipc.jetty.HttpServer.HttpServer", "methodParameterType": "ResponderServlet#Connector#", "methodParameterName": "servlet#connector#", "methodBody": "@Deprecated\n  public HttpServer(ResponderServlet servlet, Connector connector) throws IOException {\n    this.server = connector.getServer();\n    if (server.getConnectors().length == 0 || Arrays.asList(server.getConnectors()).contains(connector)) {\n      server.addConnector(connector);\n    }\n    ServletHandler handler = new ServletHandler();\n    server.setHandler(handler);\n    handler.addServletWithMapping(new ServletHolder(servlet), \"/*\");\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a server to run with the given connector.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1219", "file": "/root/repos/repos8/avro/lang/java/ipc-jetty/src/main/java/org/apache/avro/ipc/jetty/HttpServer.java", "methodName": "org.apache.avro.ipc.jetty.HttpServer.HttpServer", "methodParameterType": "Responder#Connector#", "methodParameterName": "responder#connector#", "methodBody": "@Deprecated\n  public HttpServer(Responder responder, Connector connector) throws IOException {\n    this(new ResponderServlet(responder), connector);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a server to run with the given connector.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1220", "file": "/root/repos/repos8/avro/lang/java/ipc-jetty/src/main/java/org/apache/avro/ipc/jetty/HttpServer.java", "methodName": "org.apache.avro.ipc.jetty.HttpServer.start", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void start() {\n    try {\n      server.start();\n    } catch (Exception e) {\n      throw new AvroRuntimeException(e);\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Start the server.", "call_func_name": ["org.eclipse.jetty.server.Server.start", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [[""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "1221", "file": "/root/repos/repos8/avro/lang/java/maven-plugin/target/generated-sources/plugin/org/apache/avro/mojo/HelpMojo.java", "methodName": "org.apache.avro.mojo.HelpMojo.execute", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void execute()\n        throws MojoExecutionException\n    {\n        if ( lineLength <= 0 )\n        {\n            getLog().warn( \"The parameter 'lineLength' should be positive, using '80' as default.\" );\n            lineLength = DEFAULT_LINE_LENGTH;\n        }\n        if ( indentSize <= 0 )\n        {\n            getLog().warn( \"The parameter 'indentSize' should be positive, using '2' as default.\" );\n            indentSize = 2;\n        }\n\n        Document doc = build();\n\n        StringBuilder sb = new StringBuilder();\n        Node plugin = getSingleChild( doc, \"plugin\" );\n\n\n        String name = getValue( plugin, \"name\" );\n        String version = getValue( plugin, \"version\" );\n        String id = getValue( plugin, \"groupId\" ) + \":\" + getValue( plugin, \"artifactId\" ) + \":\" + version;\n        if ( isNotEmpty( name ) && !name.contains( id ) )\n        {\n            append( sb, name + \" \" + version, 0 );\n        }\n        else\n        {\n            if ( isNotEmpty( name ) )\n            {\n                append( sb, name, 0 );\n            }\n            else\n            {\n                append( sb, id, 0 );\n            }\n        }\n        append( sb, getValue( plugin, \"description\" ), 1 );\n        append( sb, \"\", 0 );\n\n        //<goalPrefix>plugin</goalPrefix>\n        String goalPrefix = getValue( plugin, \"goalPrefix\" );\n\n        Node mojos1 = getSingleChild( plugin, \"mojos\" );\n\n        List<Node> mojos = findNamedChild( mojos1, \"mojo\" );\n\n        if ( goal == null || goal.length() <= 0 )\n        {\n            append( sb, \"This plugin has \" + mojos.size() + ( mojos.size() > 1 ? \" goals:\" : \" goal:\" ), 0 );\n            append( sb, \"\", 0 );\n        }\n\n        for ( Node mojo : mojos )\n        {\n            writeGoal( sb, goalPrefix, (Element) mojo );\n        }\n\n        if ( getLog().isInfoEnabled() )\n        {\n            getLog().info( sb.toString() );\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#StringLiteral#StringLiteral#ConditionalExpression#ParenthesizedExpression#InfixExpression#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#NumberLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression)InfixExpression(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.mojo.HelpMojo.getLog", "org.apache.maven.plugin.logging.Log.warn", "org.apache.avro.mojo.HelpMojo.build", "java.lang.StringBuilder.<init>", "org.apache.avro.mojo.HelpMojo.getSingleChild", "org.apache.avro.mojo.HelpMojo.getValue", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.mojo.HelpMojo.isNotEmpty", "java.lang.String.contains", "org.apache.avro.mojo.HelpMojo.append", "org.apache.avro.mojo.HelpMojo.findNamedChild", "java.lang.String.length", "java.util.List.size", "java.lang.StringBuilder.append", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.mojo.HelpMojo.writeGoal", "org.apache.maven.plugin.logging.Log.isInfoEnabled", "org.apache.maven.plugin.logging.Log.info"], "call_func_parameter": [[""], ["java.lang.CharSequence"], [""], [""], ["org.w3c.dom.Node", "java.lang.String"], ["org.w3c.dom.Node", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.CharSequence"], ["java.lang.StringBuilder", "java.lang.String", "int"], ["org.w3c.dom.Node", "java.lang.String"], [""], [""], ["int"], [""], [""], [""], ["java.lang.StringBuilder", "java.lang.String", "org.w3c.dom.Element"], [""], ["java.lang.CharSequence"]], "passed_comments": [{"org.apache.avro.mojo.HelpMojo.append": "Append a description to the buffer by respecting the indentSize and lineLength parameters. <b>Note</b>: The last character is always a new line."}]}, {"index": "1222", "file": "/root/repos/repos8/avro/lang/java/maven-plugin/target/generated-sources/plugin/org/apache/avro/mojo/HelpMojo.java", "methodName": "org.apache.avro.mojo.HelpMojo.repeat", "methodParameterType": "String#int#", "methodParameterName": "str#repeat#", "methodBody": "private static String repeat( String str, int repeat )\n    {\n        StringBuilder buffer = new StringBuilder( repeat * str.length() );\n\n        for ( int i = 0; i < repeat; i++ )\n        {\n            buffer.append( str );\n        }\n\n        return buffer.toString();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Repeat a String <code>n</code> times to form a new string.</p>", "call_func_name": ["java.lang.String.length", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["int"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "1223", "file": "/root/repos/repos8/avro/lang/java/maven-plugin/target/generated-sources/plugin/org/apache/avro/mojo/HelpMojo.java", "methodName": "org.apache.avro.mojo.HelpMojo.append", "methodParameterType": "StringBuilder#String#int#", "methodParameterName": "sb#description#indent#", "methodBody": "private void append( StringBuilder sb, String description, int indent )\n    {\n        for ( String line : toLines( description, indent, indentSize, lineLength ) )\n        {\n            sb.append( line ).append( '\\n' );\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Append a description to the buffer by respecting the indentSize and lineLength parameters. <b>Note</b>: The last character is always a new line.", "call_func_name": ["org.apache.avro.mojo.HelpMojo.toLines", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append"], "call_func_parameter": [["java.lang.String", "int", "int", "int"], [""], [""], [""], ["java.lang.String"], ["char"]], "passed_comments": [{"org.apache.avro.mojo.HelpMojo.toLines": "Splits the specified text into lines of convenient display length."}]}, {"index": "1224", "file": "/root/repos/repos8/avro/lang/java/maven-plugin/target/generated-sources/plugin/org/apache/avro/mojo/HelpMojo.java", "methodName": "org.apache.avro.mojo.HelpMojo.toLines", "methodParameterType": "String#int#int#int#", "methodParameterName": "text#indent#indentSize#lineLength#", "methodBody": "private static List<String> toLines( String text, int indent, int indentSize, int lineLength )\n    {\n        List<String> lines = new ArrayList<String>();\n\n        String ind = repeat( \"\\t\", indent );\n\n        String[] plainLines = text.split( \"(\\r\\n)|(\\r)|(\\n)\" );\n\n        for ( String plainLine : plainLines )\n        {\n            toLines( lines, ind + plainLine, indentSize, lineLength );\n        }\n\n        return lines;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Splits the specified text into lines of convenient display length.", "call_func_name": ["java.util.ArrayList.<init>", "org.apache.avro.mojo.HelpMojo.repeat", "java.lang.String.split", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.mojo.HelpMojo.toLines"], "call_func_parameter": [[""], ["java.lang.String", "int"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.util.List", "java.lang.String", "int", "int"]], "passed_comments": [{"org.apache.avro.mojo.HelpMojo.repeat": "<p>Repeat a String <code>n</code> times to form a new string.</p>"}, {"org.apache.avro.mojo.HelpMojo.toLines": "Adds the specified line to the output sequence, performing line wrapping if necessary."}]}, {"index": "1225", "file": "/root/repos/repos8/avro/lang/java/maven-plugin/target/generated-sources/plugin/org/apache/avro/mojo/HelpMojo.java", "methodName": "org.apache.avro.mojo.HelpMojo.toLines", "methodParameterType": "List<String>#String#int#int#", "methodParameterName": "lines#line#indentSize#lineLength#", "methodBody": "private static void toLines( List<String> lines, String line, int indentSize, int lineLength )\n    {\n        int lineIndent = getIndentLevel( line );\n        StringBuilder buf = new StringBuilder( 256 );\n\n        String[] tokens = line.split( \" +\" );\n\n        for ( String token : tokens )\n        {\n            if ( buf.length() > 0 )\n            {\n                if ( buf.length() + token.length() >= lineLength )\n                {\n                    lines.add( buf.toString() );\n                    buf.setLength( 0 );\n                    buf.append( repeat( \" \", lineIndent * indentSize ) );\n                }\n                else\n                {\n                    buf.append( ' ' );\n                }\n            }\n\n            for ( int j = 0; j < token.length(); j++ )\n            {\n                char c = token.charAt( j );\n                if ( c == '\\t' )\n                {\n                    buf.append( repeat( \" \", indentSize - buf.length() % indentSize ) );\n                }\n                else if ( c == '\\u00A0' )\n                {\n                    buf.append( ' ' );\n                }\n                else\n                {\n                    buf.append( c );\n                }\n            }\n        }\n        lines.add( buf.toString() );\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#InfixExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#CharacterLiteral#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#ForStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)InfixExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)ForStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the specified line to the output sequence, performing line wrapping if necessary.", "call_func_name": ["org.apache.avro.mojo.HelpMojo.getIndentLevel", "java.lang.StringBuilder.<init>", "java.lang.String.split", "java.lang.StringBuilder.length", "java.lang.String.length", "java.lang.StringBuilder.toString", "java.util.List.add", "java.lang.StringBuilder.setLength", "org.apache.avro.mojo.HelpMojo.repeat", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.String.charAt"], "call_func_parameter": [["java.lang.String"], ["int"], ["java.lang.String"], [""], [""], [""], ["java.lang.Object"], ["int"], ["java.lang.String", "int"], ["java.lang.String"], ["char"], ["int"]], "passed_comments": [{"org.apache.avro.mojo.HelpMojo.getIndentLevel": "Gets the indentation level of the specified line."}, {"org.apache.avro.mojo.HelpMojo.repeat": "<p>Repeat a String <code>n</code> times to form a new string.</p>"}]}, {"index": "1226", "file": "/root/repos/repos8/avro/lang/java/maven-plugin/target/generated-sources/plugin/org/apache/avro/mojo/HelpMojo.java", "methodName": "org.apache.avro.mojo.HelpMojo.getIndentLevel", "methodParameterType": "String#", "methodParameterName": "line#", "methodBody": "private static int getIndentLevel( String line )\n    {\n        int level = 0;\n        for ( int i = 0; i < line.length() && line.charAt( i ) == '\\t'; i++ )\n        {\n            level++;\n        }\n        for ( int i = level + 1; i <= level + 4 && i < line.length(); i++ )\n        {\n            if ( line.charAt( i ) == '\\t' )\n            {\n                level++;\n                break;\n            }\n        }\n        return level;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#InfixExpression#InfixExpression#SimpleName#PostfixExpression#SimpleName#PostfixExpression#ExpressionStatement#Block#ForStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#BreakStatement#Block#IfStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the indentation level of the specified line.", "call_func_name": ["java.lang.String.length", "java.lang.String.charAt"], "call_func_parameter": [[""], ["int"]], "passed_comments": "/"}, {"index": "1227", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/other/NestedOtherNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<NestedOtherNamespaceRecord> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1228", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/other/NestedOtherNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<NestedOtherNamespaceRecord> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1229", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/other/NestedOtherNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<NestedOtherNamespaceRecord> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<NestedOtherNamespaceRecord>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1230", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/other/NestedOtherNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this NestedOtherNamespaceRecord to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1231", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/other/NestedOtherNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static NestedOtherNamespaceRecord fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a NestedOtherNamespaceRecord from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1232", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/other/NestedOtherNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.NestedOtherNamespaceRecord", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NestedOtherNamespaceRecord() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1233", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/other/NestedOtherNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.NestedOtherNamespaceRecord", "methodParameterType": "java.lang.Integer#", "methodParameterName": "someField#", "methodBody": "public NestedOtherNamespaceRecord(java.lang.Integer someField) {\n    this.someField = someField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1234", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/other/NestedOtherNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.getSomeField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getSomeField() {\n    return someField;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'someField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1235", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/other/NestedOtherNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.setSomeField", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "public void setSomeField(int value) {\n    this.someField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'someField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1236", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/other/NestedOtherNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.Builder newBuilder() {\n    return new org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedOtherNamespaceRecord RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1237", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/other/NestedOtherNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.newBuilder", "methodParameterType": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.Builder newBuilder(org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.Builder();\n    } else {\n      return new org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedOtherNamespaceRecord RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1238", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/other/NestedOtherNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.newBuilder", "methodParameterType": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.Builder newBuilder(org.apache.avro.codegentest.other.NestedOtherNamespaceRecord other) {\n    if (other == null) {\n      return new org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.Builder();\n    } else {\n      return new org.apache.avro.codegentest.other.NestedOtherNamespaceRecord.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedOtherNamespaceRecord RecordBuilder by copying an existing NestedOtherNamespaceRecord instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1239", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/some/NestedSomeNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<NestedSomeNamespaceRecord> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1240", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/some/NestedSomeNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<NestedSomeNamespaceRecord> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1241", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/some/NestedSomeNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<NestedSomeNamespaceRecord> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<NestedSomeNamespaceRecord>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1242", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/some/NestedSomeNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this NestedSomeNamespaceRecord to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1243", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/some/NestedSomeNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static NestedSomeNamespaceRecord fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a NestedSomeNamespaceRecord from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1244", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/some/NestedSomeNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.NestedSomeNamespaceRecord", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NestedSomeNamespaceRecord() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1245", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/some/NestedSomeNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.NestedSomeNamespaceRecord", "methodParameterType": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord#", "methodParameterName": "nestedRecord#", "methodBody": "public NestedSomeNamespaceRecord(org.apache.avro.codegentest.other.NestedOtherNamespaceRecord nestedRecord) {\n    this.nestedRecord = nestedRecord;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1246", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/some/NestedSomeNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.getNestedRecord", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.codegentest.other.NestedOtherNamespaceRecord getNestedRecord() {\n    return nestedRecord;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nestedRecord' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1247", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/some/NestedSomeNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.setNestedRecord", "methodParameterType": "org.apache.avro.codegentest.other.NestedOtherNamespaceRecord#", "methodParameterName": "value#", "methodBody": "public void setNestedRecord(org.apache.avro.codegentest.other.NestedOtherNamespaceRecord value) {\n    this.nestedRecord = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'nestedRecord' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1248", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/some/NestedSomeNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.Builder newBuilder() {\n    return new org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedSomeNamespaceRecord RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1249", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/some/NestedSomeNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.newBuilder", "methodParameterType": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.Builder newBuilder(org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.Builder();\n    } else {\n      return new org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedSomeNamespaceRecord RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1250", "file": "/root/repos/repos8/avro/lang/java/integration-test/codegen-test/target/generated-test-sources/java/org/apache/avro/codegentest/some/NestedSomeNamespaceRecord.java", "methodName": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.newBuilder", "methodParameterType": "org.apache.avro.codegentest.some.NestedSomeNamespaceRecord#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.Builder newBuilder(org.apache.avro.codegentest.some.NestedSomeNamespaceRecord other) {\n    if (other == null) {\n      return new org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.Builder();\n    } else {\n      return new org.apache.avro.codegentest.some.NestedSomeNamespaceRecord.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new NestedSomeNamespaceRecord RecordBuilder by copying an existing NestedSomeNamespaceRecord instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1251", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.NettyTransceiver", "methodParameterType": "InetSocketAddress#", "methodParameterName": "addr#", "methodBody": "public NettyTransceiver(InetSocketAddress addr) throws IOException {\n    this(addr, DEFAULT_CONNECTION_TIMEOUT_MILLIS);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a NettyTransceiver, and attempts to connect to the given address. {@link #DEFAULT_CONNECTION_TIMEOUT_MILLIS} is used for the connectiontimeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1252", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.NettyTransceiver", "methodParameterType": "InetSocketAddress#Long#", "methodParameterName": "addr#connectTimeoutMillis#", "methodBody": "public NettyTransceiver(InetSocketAddress addr, Long connectTimeoutMillis) throws IOException {\n    this(addr,\n        new NioClientSocketChannelFactory(\n            Executors.newCachedThreadPool(\n                new NettyTransceiverThreadFactory(\"Avro \" + NettyTransceiver.class.getSimpleName() + \" Boss\")),\n            Executors.newCachedThreadPool(\n                new NettyTransceiverThreadFactory(\"Avro \" + NettyTransceiver.class.getSimpleName() + \" I/O Worker\"))),\n        connectTimeoutMillis);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#MethodInvocation#ClassInstanceCreation#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)MethodInvocation)ClassInstanceCreation(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a NettyTransceiver, and attempts to connect to the given address.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1253", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.NettyTransceiver", "methodParameterType": "InetSocketAddress#ChannelFactory#", "methodParameterName": "addr#channelFactory#", "methodBody": "public NettyTransceiver(InetSocketAddress addr, ChannelFactory channelFactory) throws IOException {\n    this(addr, channelFactory, buildDefaultBootstrapOptions(null));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a NettyTransceiver, and attempts to connect to the given address. {@link #DEFAULT_CONNECTION_TIMEOUT_MILLIS} is used for the connectiontimeout.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1254", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.NettyTransceiver", "methodParameterType": "InetSocketAddress#ChannelFactory#Long#", "methodParameterName": "addr#channelFactory#connectTimeoutMillis#", "methodBody": "public NettyTransceiver(InetSocketAddress addr, ChannelFactory channelFactory, Long connectTimeoutMillis)\n      throws IOException {\n    this(addr, channelFactory, buildDefaultBootstrapOptions(connectTimeoutMillis));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a NettyTransceiver, and attempts to connect to the given address.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1255", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.NettyTransceiver", "methodParameterType": "InetSocketAddress#ChannelFactory#Map<String,Object>#", "methodParameterName": "addr#channelFactory#nettyClientBootstrapOptions#", "methodBody": "public NettyTransceiver(InetSocketAddress addr, ChannelFactory channelFactory,\n      Map<String, Object> nettyClientBootstrapOptions) throws IOException {\n    if (channelFactory == null) {\n      throw new NullPointerException(\"channelFactory is null\");\n    }\n\n    // Set up.\n    this.channelFactory = channelFactory;\n    this.connectTimeoutMillis = (Long) nettyClientBootstrapOptions.get(NETTY_CONNECT_TIMEOUT_OPTION);\n    bootstrap = new ClientBootstrap(channelFactory);\n    remoteAddr = addr;\n\n    // Configure the event pipeline factory.\n    bootstrap.setPipelineFactory(() -> {\n      ChannelPipeline p = Channels.pipeline();\n      p.addLast(\"frameDecoder\", new NettyFrameDecoder());\n      p.addLast(\"frameEncoder\", new NettyFrameEncoder());\n      p.addLast(\"handler\", createNettyClientAvroHandler());\n      return p;\n    });\n\n    if (nettyClientBootstrapOptions != null) {\n      LOG.debug(\"Using Netty bootstrap options: \" + nettyClientBootstrapOptions);\n      bootstrap.setOptions(nettyClientBootstrapOptions);\n    }\n\n    // Make a new connection.\n    stateLock.readLock().lock();\n    try {\n      getChannel();\n    } catch (Throwable e) {\n      // must attempt to clean up any allocated channel future\n      if (channelFuture != null) {\n        channelFuture.getChannel().close();\n      }\n\n      if (e instanceof IOException)\n        throw (IOException) e;\n      if (e instanceof RuntimeException)\n        throw (RuntimeException) e;\n      // all that's left is Error\n      throw (Error) e;\n    } finally {\n      stateLock.readLock().unlock();\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ThrowStatement#IfStatement#SimpleName#SimpleType#SimpleName#CastExpression#ThrowStatement#Block#CatchClause#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(ThrowStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ThrowStatement)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(ThrowStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ThrowStatement)IfStatement(ThrowStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ThrowStatement)Block)CatchClause(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Creates a NettyTransceiver, and attempts to connect to the given address. It is strongly recommended that the  {@link #NETTY_CONNECT_TIMEOUT_OPTION} optionbe set to a reasonable timeout value (a Long value in milliseconds) to prevent connect/disconnect attempts from hanging indefinitely. It is also recommended that the  {@link #NETTY_TCP_NODELAY_OPTION} option be set to trueto minimize RPC latency.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1256", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.createNettyClientAvroHandler", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected ChannelUpstreamHandler createNettyClientAvroHandler() {\n    return new NettyClientAvroHandler();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a Netty ChannelUpstreamHandler for handling events on the Netty client channel.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1257", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.buildDefaultBootstrapOptions", "methodParameterType": "Long#", "methodParameterName": "connectTimeoutMillis#", "methodBody": "protected static Map<String, Object> buildDefaultBootstrapOptions(Long connectTimeoutMillis) {\n    Map<String, Object> options = new HashMap<>(3);\n    options.put(NETTY_TCP_NODELAY_OPTION, DEFAULT_TCP_NODELAY_VALUE);\n    options.put(NETTY_KEEPALIVE_OPTION, true);\n    options.put(NETTY_CONNECT_TIMEOUT_OPTION,\n        connectTimeoutMillis == null ? DEFAULT_CONNECTION_TIMEOUT_MILLIS : connectTimeoutMillis);\n    return options;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates the default options map for the Netty ClientBootstrap.", "call_func_name": ["java.util.HashMap.<init>", "java.lang.Boolean.valueOf", "java.util.Map.put", "java.lang.Long.longValue", "java.lang.Long.valueOf"], "call_func_parameter": [["int"], ["boolean"], ["java.lang.Object", "java.lang.Object"], [""], ["long"]], "passed_comments": "/"}, {"index": "1258", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.isChannelReady", "methodParameterType": "Channel#", "methodParameterName": "channel#", "methodBody": "private static boolean isChannelReady(Channel channel) {\n    return (channel != null) && channel.isOpen() && channel.isBound() && channel.isConnected();\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tests whether the given channel is ready for writing.", "call_func_name": ["org.jboss.netty.channel.Channel.isOpen", "org.jboss.netty.channel.Channel.isBound", "org.jboss.netty.channel.Channel.isConnected"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "1259", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.getChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private Channel getChannel() throws IOException {\n    if (!isChannelReady(channel)) {\n      // Need to reconnect\n      // Upgrade to write lock\n      stateLock.readLock().unlock();\n      stateLock.writeLock().lock();\n      try {\n        if (!isChannelReady(channel)) {\n          synchronized (channelFutureLock) {\n            if (!stopping) {\n              LOG.debug(\"Connecting to \" + remoteAddr);\n              channelFuture = bootstrap.connect(remoteAddr);\n            }\n          }\n          if (channelFuture != null) {\n            try {\n              channelFuture.await(connectTimeoutMillis);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt(); // Reset interrupt flag\n              throw new IOException(\"Interrupted while connecting to \" + remoteAddr);\n            }\n\n            synchronized (channelFutureLock) {\n              if (!channelFuture.isSuccess()) {\n                throw new IOException(\"Error connecting to \" + remoteAddr, channelFuture.getCause());\n              }\n              channel = channelFuture.getChannel();\n              channelFuture = null;\n            }\n          }\n        }\n      } finally {\n        // Downgrade to read lock:\n        stateLock.readLock().lock();\n        stateLock.writeLock().unlock();\n      }\n    }\n    return channel;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#SynchronizedStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)SynchronizedStatement)Block)IfStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the Netty channel. If the channel is not connected, first attempts to connect. NOTE: The stateLock read lock", "call_func_name": ["org.apache.avro.ipc.netty.NettyTransceiver.isChannelReady", "java.util.concurrent.locks.ReentrantReadWriteLock.readLock", "java.util.concurrent.locks.ReentrantReadWriteLock.writeLock", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.debug", "org.jboss.netty.bootstrap.ClientBootstrap.connect", "org.jboss.netty.channel.ChannelFuture.await", "java.lang.Thread.currentThread", "java.lang.Thread.interrupt", "java.io.IOException.<init>", "org.jboss.netty.channel.ChannelFuture.isSuccess", "org.jboss.netty.channel.ChannelFuture.getCause", "java.io.IOException.<init>", "org.jboss.netty.channel.ChannelFuture.getChannel"], "call_func_parameter": [["org.jboss.netty.channel.Channel"], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.net.SocketAddress"], ["long"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Throwable"], [""]], "passed_comments": [{"org.apache.avro.ipc.netty.NettyTransceiver.isChannelReady": "Tests whether the given channel is ready for writing."}]}, {"index": "1260", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.disconnect", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void disconnect() {\n    disconnect(false, false, null);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Closes the connection to the remote peer if connected.", "call_func_name": ["org.apache.avro.ipc.netty.NettyTransceiver.disconnect"], "call_func_parameter": [["boolean", "boolean", "java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.ipc.netty.NettyTransceiver.disconnect": "Closes the connection to the remote peer if connected."}]}, {"index": "1261", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.disconnect", "methodParameterType": "boolean#boolean#Throwable#", "methodParameterName": "awaitCompletion#cancelPendingRequests#cause#", "methodBody": "private void disconnect(boolean awaitCompletion, boolean cancelPendingRequests, Throwable cause) {\n    Channel channelToClose = null;\n    Map<Integer, Callback<List<ByteBuffer>>> requestsToCancel = null;\n    boolean stateReadLockHeld = stateLock.getReadHoldCount() != 0;\n\n    ChannelFuture channelFutureToCancel = null;\n    synchronized (channelFutureLock) {\n      if (stopping && channelFuture != null) {\n        channelFutureToCancel = channelFuture;\n        channelFuture = null;\n      }\n    }\n    if (channelFutureToCancel != null) {\n      channelFutureToCancel.cancel();\n    }\n\n    if (stateReadLockHeld) {\n      stateLock.readLock().unlock();\n    }\n    stateLock.writeLock().lock();\n    try {\n      if (channel != null) {\n        if (cause != null) {\n          LOG.debug(\"Disconnecting from \" + remoteAddr, cause);\n        } else {\n          LOG.debug(\"Disconnecting from \" + remoteAddr);\n        }\n        channelToClose = channel;\n        channel = null;\n        remote = null;\n        if (cancelPendingRequests) {\n          // Remove all pending requests (will be canceled after relinquishing\n          // write lock).\n          requestsToCancel = new ConcurrentHashMap<>(requests);\n          requests.clear();\n        }\n      }\n    } finally {\n      if (stateReadLockHeld) {\n        stateLock.readLock().lock();\n      }\n      stateLock.writeLock().unlock();\n    }\n\n    // Cancel any pending requests by sending errors to the callbacks:\n    if ((requestsToCancel != null) && !requestsToCancel.isEmpty()) {\n      LOG.debug(\"Removing \" + requestsToCancel.size() + \" pending request(s).\");\n      for (Callback<List<ByteBuffer>> request : requestsToCancel.values()) {\n        request.handleError(cause != null ? cause : new IOException(getClass().getSimpleName() + \" closed\"));\n      }\n    }\n\n    // Close the channel:\n    if (channelToClose != null) {\n      ChannelFuture closeFuture = channelToClose.close();\n      if (awaitCompletion && (closeFuture != null)) {\n        try {\n          closeFuture.await(connectTimeoutMillis);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt(); // Reset interrupt flag\n          LOG.warn(\"Interrupted while disconnecting\", e);\n        }\n      }\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ConditionalExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ConditionalExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Closes the connection to the remote peer if connected.", "call_func_name": ["java.util.concurrent.locks.ReentrantReadWriteLock.getReadHoldCount", "org.jboss.netty.channel.ChannelFuture.cancel", "java.util.concurrent.locks.ReentrantReadWriteLock.readLock", "java.util.concurrent.locks.ReentrantReadWriteLock.writeLock", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.debug", "org.slf4j.Logger.debug", "java.util.concurrent.ConcurrentHashMap.<init>", "java.util.Map.clear", "java.util.Map.isEmpty", "java.util.Map.size", "java.lang.StringBuilder.append", "java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Object.getClass", "java.lang.Class.getSimpleName", "java.io.IOException.<init>", "org.apache.avro.ipc.Callback.handleError", "org.jboss.netty.channel.Channel.close", "org.jboss.netty.channel.ChannelFuture.await", "java.lang.Thread.currentThread", "java.lang.Thread.interrupt", "org.slf4j.Logger.warn"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String"], ["java.util.Map"], [""], [""], [""], ["int"], [""], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Throwable"], [""], ["long"], [""], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.ipc.Callback.handleError": "Receives an error."}]}, {"index": "1262", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.lockChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void lockChannel() {\n\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Netty channels are thread-safe, so there is no need to acquire locks. This method is a no-op.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1263", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.unlockChannel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void unlockChannel() {\n\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Netty channels are thread-safe, so there is no need to acquire locks. This method is a no-op.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1264", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void close() {\n    close(true);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Closes this transceiver and disconnects from the remote peer. Cancels all pending RPCs, sends an IOException to all pending callbacks, and blocks until the close has completed.", "call_func_name": ["org.apache.avro.ipc.netty.NettyTransceiver.close"], "call_func_parameter": [["boolean"]], "passed_comments": [{"org.apache.avro.ipc.netty.NettyTransceiver.close": "Closes this transceiver and disconnects from the remote peer. Cancels all pending RPCs and sends an IOException to all pending callbacks."}]}, {"index": "1265", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.close", "methodParameterType": "boolean#", "methodParameterName": "awaitCompletion#", "methodBody": "public void close(boolean awaitCompletion) {\n    try {\n      // Close the connection:\n      stopping = true;\n      disconnect(awaitCompletion, true, null);\n    } finally {\n      // Shut down all thread pools to exit.\n      channelFactory.releaseExternalResources();\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Closes this transceiver and disconnects from the remote peer. Cancels all pending RPCs and sends an IOException to all pending callbacks.", "call_func_name": ["org.apache.avro.ipc.netty.NettyTransceiver.disconnect", "org.jboss.netty.channel.ChannelFactory.releaseExternalResources"], "call_func_parameter": [["boolean", "boolean", "java.lang.Throwable"], [""]], "passed_comments": [{"org.apache.avro.ipc.netty.NettyTransceiver.disconnect": "Closes the connection to the remote peer if connected."}]}, {"index": "1266", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.transceive", "methodParameterType": "List<ByteBuffer>#", "methodParameterName": "request#", "methodBody": "@Override\n  public List<ByteBuffer> transceive(List<ByteBuffer> request) throws IOException {\n    try {\n      CallFuture<List<ByteBuffer>> transceiverFuture = new CallFuture<>();\n      transceive(request, transceiverFuture);\n      return transceiverFuture.get();\n    } catch (InterruptedException | ExecutionException e) {\n      LOG.debug(\"failed to get the response\", e);\n      return null;\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Override as non-synchronized method because the method is thread safe.", "call_func_name": ["org.apache.avro.ipc.CallFuture.<init>", "org.apache.avro.ipc.netty.NettyTransceiver.transceive", "org.apache.avro.ipc.CallFuture.get", "org.slf4j.Logger.debug"], "call_func_parameter": [[""], ["java.util.List", "org.apache.avro.ipc.Callback"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "1267", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyTransceiver.java", "methodName": "org.apache.avro.ipc.netty.NettyTransceiver.writeDataPack", "methodParameterType": "NettyDataPack#", "methodParameterName": "dataPack#", "methodBody": "private ChannelFuture writeDataPack(NettyDataPack dataPack) throws IOException {\n    return getChannel().write(dataPack);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Writes a NettyDataPack, reconnecting to the remote peer if necessary. NOTE: The stateLock read lock", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1268", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyServer.java", "methodName": "org.apache.avro.ipc.netty.NettyServer.NettyServer", "methodParameterType": "Responder#InetSocketAddress#ChannelFactory#ChannelPipelineFactory#ExecutionHandler#", "methodParameterName": "responder#addr#channelFactory#pipelineFactory#executionHandler#", "methodBody": "public NettyServer(Responder responder, InetSocketAddress addr, ChannelFactory channelFactory,\n      final ChannelPipelineFactory pipelineFactory, final ExecutionHandler executionHandler) {\n    this.responder = responder;\n    this.channelFactory = channelFactory;\n    ExecutionHandler executionHandler1 = executionHandler;\n    ServerBootstrap bootstrap = new ServerBootstrap(channelFactory);\n    bootstrap.setPipelineFactory(() -> {\n      ChannelPipeline p = pipelineFactory.getPipeline();\n      p.addLast(\"frameDecoder\", new NettyFrameDecoder());\n      p.addLast(\"frameEncoder\", new NettyFrameEncoder());\n      if (executionHandler != null) {\n        p.addLast(\"executionHandler\", executionHandler);\n      }\n      p.addLast(\"handler\", new NettyServerAvroHandler());\n      return p;\n    });\n    serverChannel = bootstrap.bind(addr);\n    allChannels.add(serverChannel);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#LambdaExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)LambdaExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param executionHandler if not null, will be inserted into the Nettypipeline. Use this when your responder does long, non-cpu bound processing (see Netty's ExecutionHandler javadoc).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1269", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyServer.java", "methodName": "org.apache.avro.ipc.netty.NettyServer.NettyServer", "methodParameterType": "Responder#InetSocketAddress#ChannelFactory#ExecutionHandler#", "methodParameterName": "responder#addr#channelFactory#executionHandler#", "methodBody": "public NettyServer(Responder responder, InetSocketAddress addr, ChannelFactory channelFactory,\n      final ExecutionHandler executionHandler) {\n    this(responder, addr, channelFactory, Channels::pipeline, executionHandler);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param executionHandler if not null, will be inserted into the Nettypipeline. Use this when your responder does long, non-cpu bound processing (see Netty's ExecutionHandler javadoc).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1270", "file": "/root/repos/repos8/avro/lang/java/ipc-netty/src/main/java/org/apache/avro/ipc/netty/NettyServer.java", "methodName": "org.apache.avro.ipc.netty.NettyServer.getNumActiveConnections", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getNumActiveConnections() {\n    // allChannels also contains the server channel, so exclude that from the\n    // count.\n    return allChannels.size() - 1;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return The number of clients currently connected to this server.", "call_func_name": ["org.jboss.netty.channel.group.ChannelGroup.size"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1271", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/file/HadoopCodecFactory.java", "methodName": "org.apache.avro.hadoop.file.HadoopCodecFactory.fromHadoopString", "methodParameterType": "String#", "methodParameterName": "hadoopCodecClass#", "methodBody": "public static CodecFactory fromHadoopString(String hadoopCodecClass) {\n\n    CodecFactory o = null;\n    try {\n      String avroCodec = HADOOP_AVRO_NAME_MAP.get(hadoopCodecClass);\n      if (avroCodec != null) {\n        o = CodecFactory.fromString(avroCodec);\n      }\n    } catch (Exception e) {\n      throw new AvroRuntimeException(\"Unrecognized hadoop codec: \" + hadoopCodecClass, e);\n    }\n    return o;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Maps a hadoop codec name into a CodecFactory. Currently there are four hadoop codecs registered: <ul> <li> {@code org.apache.hadoop.io.compress.DeflateCodec} will map to{@code deflate}</li> <li> {@code org.apache.hadoop.io.compress.SnappyCodec} will map to{@code snappy}</li> <li> {@code org.apache.hadoop.io.compress.BZip2Codec} will map to{@code zbip2}</li> <li> {@code org.apache.hadoop.io.compress.GZipCodec} will map to{@code deflate}</li> </ul>", "call_func_name": ["java.util.Map.get", "org.apache.avro.file.CodecFactory.fromString", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.AvroRuntimeException.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.file.CodecFactory.fromString": "Maps a codec name into a CodecFactory. Currently there are six codecs registered by default: <ul> <li> {@code null}</li> <li> {@code deflate}</li> <li> {@code snappy}</li> <li> {@code bzip2}</li> <li> {@code xz}</li> <li> {@code zstandard}</li> </ul>"}]}, {"index": "1272", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/util/AvroCharSequenceComparator.java", "methodName": "org.apache.avro.hadoop.util.AvroCharSequenceComparator.compare", "methodParameterType": "T#T#", "methodParameterName": "o1#o2#", "methodBody": "@Override\n  public int compare(T o1, T o2) {\n    if (!(o1 instanceof CharSequence) || !(o2 instanceof CharSequence)) {\n      throw new RuntimeException(\"Attempted use of AvroCharSequenceComparator on non-CharSequence objects: \"\n          + o1.getClass().getName() + \" and \" + o2.getClass().getName());\n    }\n    return compareCharSequence((CharSequence) o1, (CharSequence) o2);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1273", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/util/AvroCharSequenceComparator.java", "methodName": "org.apache.avro.hadoop.util.AvroCharSequenceComparator.compareCharSequence", "methodParameterType": "CharSequence#CharSequence#", "methodParameterName": "o1#o2#", "methodBody": "private int compareCharSequence(CharSequence o1, CharSequence o2) {\n    for (int i = 0; i < Math.max(o1.length(), o2.length()); i++) {\n      int charComparison = compareCharacter(o1, o2, i);\n      if (0 != charComparison) {\n        return charComparison;\n      }\n    }\n    return 0;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NumberLiteral#SimpleName#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#ForStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Compares the CharSequences <code>o1</code> and <code>o2</code>.", "call_func_name": ["java.lang.CharSequence.length", "java.lang.Math.max", "org.apache.avro.hadoop.util.AvroCharSequenceComparator.compareCharacter"], "call_func_parameter": [[""], ["int", "int"], ["java.lang.CharSequence", "java.lang.CharSequence", "int"]], "passed_comments": [{"org.apache.avro.hadoop.util.AvroCharSequenceComparator.compareCharacter": "Compares the characters of <code>o1</code> and <code>o2</code> at index <code>index</code>."}]}, {"index": "1274", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/util/AvroCharSequenceComparator.java", "methodName": "org.apache.avro.hadoop.util.AvroCharSequenceComparator.compareCharacter", "methodParameterType": "CharSequence#CharSequence#int#", "methodParameterName": "o1#o2#index#", "methodBody": "private int compareCharacter(CharSequence o1, CharSequence o2, int index) {\n    if (index < o1.length() && index < o2.length()) {\n      return Character.compare(o1.charAt(index), o2.charAt(index));\n    }\n    if (index >= o1.length() && index >= o2.length()) {\n      return 0;\n    }\n    return o1.length() - o2.length();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#NumberLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Compares the characters of <code>o1</code> and <code>o2</code> at index <code>index</code>.", "call_func_name": ["java.lang.CharSequence.length", "java.lang.CharSequence.charAt", "java.lang.Character.compare"], "call_func_parameter": [[""], ["int"], ["char", "char"]], "passed_comments": "/"}, {"index": "1275", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyComparator.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyComparator.setConf", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "@Override\n  public void setConf(Configuration conf) {\n    super.setConf(conf);\n    if (null != conf) {\n      // The MapReduce framework will be using this comparator to sort AvroKey objects\n      // output from the map phase, so use the schema defined for the map output key\n      // and the data model non-raw compare() implementation.\n      mSchema = AvroJob.getMapOutputKeySchema(conf);\n      mDataModel = AvroSerialization.createDataModel(conf);\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperMethodInvocation#ExpressionStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ExpressionStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.hadoop.conf.Configured.setConf", "org.apache.avro.mapreduce.AvroJob.getMapOutputKeySchema", "org.apache.avro.hadoop.io.AvroSerialization.createDataModel"], "call_func_parameter": [["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.conf.Configuration"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroJob.getMapOutputKeySchema": "Gets the map output key schema."}, {"org.apache.avro.hadoop.io.AvroSerialization.createDataModel": "Gets an instance of data model implementation, defaulting to {@link ReflectData} if not explicitly specified."}]}, {"index": "1276", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyComparator.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyComparator.compare", "methodParameterType": "byte[]#int#int#byte[]#int#int#", "methodParameterName": "b1#s1#l1#b2#s2#l2#", "methodBody": "@Override\n  public int compare(byte[] b1, int s1, int l1, byte[] b2, int s2, int l2) {\n    return BinaryData.compare(b1, s1, b2, s2, mSchema);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.io.BinaryData.compare"], "call_func_parameter": [["byte[]", "int", "byte[]", "int", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.io.BinaryData.compare": "Compare binary encoded data. If equal, return zero. If greater-than, return 1, if less than return -1. Order is consistent with that of {@link org.apache.avro.generic.GenericData#compare(Object,Object,Schema)}."}]}, {"index": "1277", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyComparator.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyComparator.compare", "methodParameterType": "AvroKey<T>#AvroKey<T>#", "methodParameterName": "x#y#", "methodBody": "@Override\n  public int compare(AvroKey<T> x, AvroKey<T> y) {\n    return mDataModel.compare(x.datum(), y.datum(), mSchema);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.mapred.AvroKey.datum", "org.apache.avro.generic.GenericData.compare"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.generic.GenericData.compare": "Compare objects according to their schema. If equal, return zero. If greater-than, return 1, if less than return -1. Order is consistent with that of  {@link BinaryData#compare(byte[],int,byte[],int,Schema)}."}]}, {"index": "1278", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroDatumConverter.java", "methodName": "org.apache.avro.hadoop.io.AvroDatumConverter.getWriterSchema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract Schema getWriterSchema();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Gets the writer schema that should be used to serialize the output Avro datum.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1279", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyValue.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyValue.AvroKeyValue", "methodParameterType": "GenericRecord#", "methodParameterName": "keyValueRecord#", "methodBody": "public AvroKeyValue(GenericRecord keyValueRecord) {\n    mKeyValueRecord = keyValueRecord;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Wraps a GenericRecord that is a key value pair.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1280", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyValue.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyValue.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public GenericRecord get() {\n    return mKeyValueRecord;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the wrapped key/value GenericRecord.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1281", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyValue.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyValue.getKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public K getKey() {\n    return (K) mKeyValueRecord.get(KEY_FIELD);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Read the key.", "call_func_name": ["org.apache.avro.generic.GenericRecord.get"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.apache.avro.generic.GenericRecord.get": "Return the value of a field given its name."}]}, {"index": "1282", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyValue.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyValue.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public V getValue() {\n    return (V) mKeyValueRecord.get(VALUE_FIELD);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Read the value.", "call_func_name": ["org.apache.avro.generic.GenericRecord.get"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.apache.avro.generic.GenericRecord.get": "Return the value of a field given its name."}]}, {"index": "1283", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyValue.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyValue.setKey", "methodParameterType": "K#", "methodParameterName": "key#", "methodBody": "public void setKey(K key) {\n    mKeyValueRecord.put(KEY_FIELD, key);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1284", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyValue.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyValue.setValue", "methodParameterType": "V#", "methodParameterName": "value#", "methodBody": "public void setValue(V value) {\n    mKeyValueRecord.put(VALUE_FIELD, value);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1285", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyValue.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyValue.getSchema", "methodParameterType": "Schema#Schema#", "methodParameterName": "keySchema#valueSchema#", "methodBody": "public static Schema getSchema(Schema keySchema, Schema valueSchema) {\n    Schema schema = Schema.createRecord(KEY_VALUE_PAIR_RECORD_NAME, \"A key/value pair\", KEY_VALUE_PAIR_RECORD_NAMESPACE,\n        false);\n    schema.setFields(Arrays.asList(new Schema.Field(KEY_FIELD, keySchema, \"The key\", null),\n        new Schema.Field(VALUE_FIELD, valueSchema, \"The value\", null)));\n    return schema;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#StringLiteral#NullLiteral#ClassInstanceCreation#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#StringLiteral#NullLiteral#ClassInstanceCreation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NullLiteral)NullLiteral)ClassInstanceCreation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NullLiteral)NullLiteral)ClassInstanceCreation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a KeyValuePair generic record schema.", "call_func_name": ["org.apache.avro.Schema.createRecord", "java.util.Arrays.asList", "org.apache.avro.Schema.setFields"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "boolean"], ["java.lang.Object[]"], ["java.util.List"]], "passed_comments": [{"org.apache.avro.Schema.createRecord": "Create a named record schema."}, {"org.apache.avro.Schema.setFields": "If this is a record, set its fields. The fields can be set only once in a schema."}]}, {"index": "1286", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroValueDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroValueDeserializer.AvroValueDeserializer", "methodParameterType": "Schema#Schema#ClassLoader#", "methodParameterName": "writerSchema#readerSchema#classLoader#", "methodBody": "public AvroValueDeserializer(Schema writerSchema, Schema readerSchema, ClassLoader classLoader) {\n    super(writerSchema, readerSchema, classLoader);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1287", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroValueDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroValueDeserializer.AvroValueDeserializer", "methodParameterType": "Schema#Schema#DatumReader<D>#", "methodParameterName": "writerSchema#readerSchema#datumReader#", "methodBody": "public AvroValueDeserializer(Schema writerSchema, Schema readerSchema, DatumReader<D> datumReader) {\n    super(writerSchema, readerSchema, datumReader);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1288", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroValueDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroValueDeserializer.createAvroWrapper", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  protected AvroWrapper<D> createAvroWrapper() {\n    return new AvroValue<>(null);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NullLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NullLiteral)NullLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new empty <code>AvroValue</code> instance.", "call_func_name": ["org.apache.avro.mapred.AvroValue.<init>"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1289", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerializer.java", "methodName": "org.apache.avro.hadoop.io.AvroSerializer.AvroSerializer", "methodParameterType": "Schema#", "methodParameterName": "writerSchema#", "methodBody": "public AvroSerializer(Schema writerSchema) {\n    if (null == writerSchema) {\n      throw new IllegalArgumentException(\"Writer schema may not be null\");\n    }\n    mWriterSchema = writerSchema;\n    mAvroDatumWriter = new ReflectDatumWriter<>(writerSchema);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1290", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerializer.java", "methodName": "org.apache.avro.hadoop.io.AvroSerializer.AvroSerializer", "methodParameterType": "Schema#DatumWriter<T>#", "methodParameterName": "writerSchema#datumWriter#", "methodBody": "public AvroSerializer(Schema writerSchema, DatumWriter<T> datumWriter) {\n    if (null == writerSchema) {\n      throw new IllegalArgumentException(\"Writer schema may not be null\");\n    }\n    mWriterSchema = writerSchema;\n    mAvroDatumWriter = datumWriter;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1291", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerializer.java", "methodName": "org.apache.avro.hadoop.io.AvroSerializer.getWriterSchema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Schema getWriterSchema() {\n    return mWriterSchema;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the writer schema being used for serialization.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1292", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerializer.java", "methodName": "org.apache.avro.hadoop.io.AvroSerializer.open", "methodParameterType": "OutputStream#", "methodParameterName": "outputStream#", "methodBody": "@Override\n  public void open(OutputStream outputStream) throws IOException {\n    mOutputStream = outputStream;\n    mAvroEncoder = ENCODER_FACTORY.binaryEncoder(outputStream, mAvroEncoder);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.io.EncoderFactory.binaryEncoder"], "call_func_parameter": [["java.io.OutputStream", "org.apache.avro.io.BinaryEncoder"]], "passed_comments": [{"org.apache.avro.io.EncoderFactory.binaryEncoder": "Creates or reinitializes a  {@link BinaryEncoder} with the OutputStreamprovided as the destination for written data. If <i>reuse</i> is provided, an attempt will be made to reconfigure <i>reuse</i> rather than construct a new instance, but this is not guaranteed, a new instance may be returned. <p/> The  {@link BinaryEncoder} implementation returned may buffer its output. Datamay not appear on the underlying OutputStream until  {@link Encoder#flush()}is called. The buffer size is configured with {@link #configureBufferSize(int)}. </p> If buffering is not desired, and lower performance is acceptable, use {@link #directBinaryEncoder(OutputStream,BinaryEncoder)}<p/> {@link BinaryEncoder} instances returned by this method are not thread-safe"}]}, {"index": "1293", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerializer.java", "methodName": "org.apache.avro.hadoop.io.AvroSerializer.serialize", "methodParameterType": "AvroWrapper<T>#", "methodParameterName": "avroWrapper#", "methodBody": "@Override\n  public void serialize(AvroWrapper<T> avroWrapper) throws IOException {\n    mAvroDatumWriter.write(avroWrapper.datum(), mAvroEncoder);\n    // This would be a lot faster if the Serializer interface had a flush() method\n    // and the\n    // Hadoop framework called it when needed. For now, we'll have to flush on every\n    // record.\n    mAvroEncoder.flush();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.mapred.AvroWrapper.datum", "org.apache.avro.io.DatumWriter.write", "org.apache.avro.io.BinaryEncoder.flush"], "call_func_parameter": [[""], ["java.lang.Object", "org.apache.avro.io.Encoder"], [""]], "passed_comments": [{"org.apache.avro.mapred.AvroWrapper.datum": "Return the wrapped datum."}, {"org.apache.avro.mapred.AvroWrapper.datum": "Set the wrapped datum."}]}, {"index": "1294", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerializer.java", "methodName": "org.apache.avro.hadoop.io.AvroSerializer.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void close() throws IOException {\n    mOutputStream.close();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.io.OutputStream.close"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1295", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroDeserializer.AvroDeserializer", "methodParameterType": "Schema#Schema#ClassLoader#", "methodParameterName": "writerSchema#readerSchema#classLoader#", "methodBody": "protected AvroDeserializer(Schema writerSchema, Schema readerSchema, ClassLoader classLoader) {\n    mWriterSchema = writerSchema;\n    mReaderSchema = null != readerSchema ? readerSchema : writerSchema;\n    mAvroDatumReader = new ReflectDatumReader<>(mWriterSchema, mReaderSchema, new ReflectData(classLoader));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1296", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroDeserializer.AvroDeserializer", "methodParameterType": "Schema#Schema#DatumReader<D>#", "methodParameterName": "writerSchema#readerSchema#datumReader#", "methodBody": "protected AvroDeserializer(Schema writerSchema, Schema readerSchema, DatumReader<D> datumReader) {\n    mWriterSchema = writerSchema;\n    mReaderSchema = null != readerSchema ? readerSchema : writerSchema;\n    mAvroDatumReader = datumReader;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1297", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroDeserializer.getWriterSchema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Schema getWriterSchema() {\n    return mWriterSchema;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the writer schema used for deserializing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1298", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroDeserializer.getReaderSchema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Schema getReaderSchema() {\n    return mReaderSchema;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the reader schema used for deserializing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1299", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroDeserializer.open", "methodParameterType": "InputStream#", "methodParameterName": "inputStream#", "methodBody": "@Override\n  public void open(InputStream inputStream) throws IOException {\n    mAvroDecoder = DecoderFactory.get().directBinaryDecoder(inputStream, mAvroDecoder);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.io.DecoderFactory.get", "org.apache.avro.io.DecoderFactory.directBinaryDecoder"], "call_func_parameter": [[""], ["java.io.InputStream", "org.apache.avro.io.BinaryDecoder"]], "passed_comments": [{"org.apache.avro.io.DecoderFactory.get": "Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions. All creator methods create objects with default settings."}, {"org.apache.avro.io.DecoderFactory.directBinaryDecoder": "Creates or reinitializes a  {@link BinaryDecoder} with the input streamprovided as the source of data. If <i>reuse</i> is provided, it will be reinitialized to the given input stream. <p/> {@link BinaryDecoder} instances returned by this method do not buffer theirinput. In most cases a buffering BinaryDecoder is sufficient in combination with  {@link BinaryDecoder#inputStream()} which provides a buffer-aware viewon the data. <p/> A \"direct\" BinaryDecoder does not read ahead from an InputStream or other data source that cannot be rewound. From the perspective of a client, a \"direct\" decoder must never read beyond the minimum necessary bytes to service a  {@link BinaryDecoder} API read request.<p/> In the case that the improved performance of a buffering implementation does not outweigh the inconvenience of its buffering semantics, a \"direct\" decoder can be used."}]}, {"index": "1300", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroDeserializer.deserialize", "methodParameterType": "T#", "methodParameterName": "avroWrapperToReuse#", "methodBody": "@Override\n  public T deserialize(T avroWrapperToReuse) throws IOException {\n    // Create a new Avro wrapper if there isn't one to reuse.\n    if (null == avroWrapperToReuse) {\n      avroWrapperToReuse = createAvroWrapper();\n    }\n\n    // Deserialize the Avro datum from the input stream.\n    avroWrapperToReuse.datum(mAvroDatumReader.read(avroWrapperToReuse.datum(), mAvroDecoder));\n    return avroWrapperToReuse;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1301", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroDeserializer.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void close() throws IOException {\n    mAvroDecoder.inputStream().close();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.io.BinaryDecoder.inputStream", "java.io.InputStream.close"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.apache.avro.io.BinaryDecoder.inputStream": "Returns an  {@link java.io.InputStream} that is aware of any buffering thatmay occur in this BinaryDecoder. Readers that need to interleave decoding Avro data with other reads must access this InputStream to do so unless the implementation is 'direct' and does not read beyond the minimum bytes necessary from the source."}]}, {"index": "1302", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroDeserializer.createAvroWrapper", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract T createAvroWrapper();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Creates a new empty <code>T</code> (extends AvroWrapper) instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1303", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroDatumConverterFactory.java", "methodName": "org.apache.avro.hadoop.io.AvroDatumConverterFactory.AvroDatumConverterFactory", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public AvroDatumConverterFactory(Configuration conf) {\n    super(conf);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new <code>AvroDatumConverterFactory</code> instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1304", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroDatumConverterFactory.java", "methodName": "org.apache.avro.hadoop.io.AvroDatumConverterFactory.create", "methodParameterType": "Class<IN>#", "methodParameterName": "inputClass#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public <IN, OUT> AvroDatumConverter<IN, OUT> create(Class<IN> inputClass) {\n    boolean isMapOnly = ((JobConf) getConf()).getNumReduceTasks() == 0;\n    if (AvroKey.class.isAssignableFrom(inputClass)) {\n      Schema schema;\n      if (isMapOnly) {\n        schema = AvroJob.getMapOutputKeySchema(getConf());\n        if (null == schema) {\n          schema = AvroJob.getOutputKeySchema(getConf());\n        }\n      } else {\n        schema = AvroJob.getOutputKeySchema(getConf());\n      }\n      if (null == schema) {\n        throw new IllegalStateException(\"Writer schema for output key was not set. Use AvroJob.setOutputKeySchema().\");\n      }\n      return (AvroDatumConverter<IN, OUT>) new AvroWrapperConverter(schema);\n    }\n    if (AvroValue.class.isAssignableFrom(inputClass)) {\n      Schema schema;\n      if (isMapOnly) {\n        schema = AvroJob.getMapOutputValueSchema(getConf());\n        if (null == schema) {\n          schema = AvroJob.getOutputValueSchema(getConf());\n        }\n      } else {\n        schema = AvroJob.getOutputValueSchema(getConf());\n      }\n      if (null == schema) {\n        throw new IllegalStateException(\n            \"Writer schema for output value was not set. Use AvroJob.setOutputValueSchema().\");\n      }\n      return (AvroDatumConverter<IN, OUT>) new AvroWrapperConverter(schema);\n    }\n    if (BooleanWritable.class.isAssignableFrom(inputClass)) {\n      return (AvroDatumConverter<IN, OUT>) new BooleanWritableConverter();\n    }\n    if (BytesWritable.class.isAssignableFrom(inputClass)) {\n      return (AvroDatumConverter<IN, OUT>) new BytesWritableConverter();\n    }\n    if (ByteWritable.class.isAssignableFrom(inputClass)) {\n      return (AvroDatumConverter<IN, OUT>) new ByteWritableConverter();\n    }\n    if (DoubleWritable.class.isAssignableFrom(inputClass)) {\n      return (AvroDatumConverter<IN, OUT>) new DoubleWritableConverter();\n    }\n    if (FloatWritable.class.isAssignableFrom(inputClass)) {\n      return (AvroDatumConverter<IN, OUT>) new FloatWritableConverter();\n    }\n    if (IntWritable.class.isAssignableFrom(inputClass)) {\n      return (AvroDatumConverter<IN, OUT>) new IntWritableConverter();\n    }\n    if (LongWritable.class.isAssignableFrom(inputClass)) {\n      return (AvroDatumConverter<IN, OUT>) new LongWritableConverter();\n    }\n    if (NullWritable.class.isAssignableFrom(inputClass)) {\n      return (AvroDatumConverter<IN, OUT>) new NullWritableConverter();\n    }\n    if (Text.class.isAssignableFrom(inputClass)) {\n      return (AvroDatumConverter<IN, OUT>) new TextConverter();\n    }\n\n    throw new UnsupportedOperationException(\"Unsupported input type: \" + inputClass.getName());\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)CastExpression)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Creates a converter that turns objects of type <code>inputClass</code> into Avro data.", "call_func_name": ["org.apache.avro.hadoop.io.AvroDatumConverterFactory.getConf", "org.apache.hadoop.mapred.JobConf.getNumReduceTasks", "java.lang.Class.isAssignableFrom", "org.apache.avro.mapreduce.AvroJob.getMapOutputKeySchema", "org.apache.avro.mapreduce.AvroJob.getOutputKeySchema", "java.lang.IllegalStateException.<init>", "org.apache.avro.mapreduce.AvroJob.getMapOutputValueSchema", "org.apache.avro.mapreduce.AvroJob.getOutputValueSchema", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.toString", "java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""], [""], ["java.lang.Class"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.conf.Configuration"], ["java.lang.String"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.conf.Configuration"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroJob.getMapOutputKeySchema": "Gets the map output key schema."}, {"org.apache.avro.mapreduce.AvroJob.getOutputKeySchema": "Gets the job output key schema."}, {"org.apache.avro.mapreduce.AvroJob.getMapOutputValueSchema": "Gets the map output value schema."}, {"org.apache.avro.mapreduce.AvroJob.getOutputValueSchema": "Gets the job output value schema."}]}, {"index": "1305", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyDeserializer.AvroKeyDeserializer", "methodParameterType": "Schema#Schema#ClassLoader#", "methodParameterName": "writerSchema#readerSchema#classLoader#", "methodBody": "public AvroKeyDeserializer(Schema writerSchema, Schema readerSchema, ClassLoader classLoader) {\n    super(writerSchema, readerSchema, classLoader);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1306", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyDeserializer.AvroKeyDeserializer", "methodParameterType": "Schema#Schema#DatumReader<D>#", "methodParameterName": "writerSchema#readerSchema#datumReader#", "methodBody": "public AvroKeyDeserializer(Schema writerSchema, Schema readerSchema, DatumReader<D> datumReader) {\n    super(writerSchema, readerSchema, datumReader);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1307", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroKeyDeserializer.java", "methodName": "org.apache.avro.hadoop.io.AvroKeyDeserializer.createAvroWrapper", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  protected AvroWrapper<D> createAvroWrapper() {\n    return new AvroKey<>(null);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NullLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NullLiteral)NullLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new empty <code>AvroKey</code> instance.", "call_func_name": ["org.apache.avro.mapred.AvroKey.<init>"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "1308", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.accept", "methodParameterType": "Class<?>#", "methodParameterName": "c#", "methodBody": "@Override\n  public boolean accept(Class<?> c) {\n    return AvroKey.class.isAssignableFrom(c) || AvroValue.class.isAssignableFrom(c);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.Class.isAssignableFrom"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": "/"}, {"index": "1309", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.getDeserializer", "methodParameterType": "Class<AvroWrapper<T>>#", "methodParameterName": "c#", "methodBody": "@Override\n  public Deserializer<AvroWrapper<T>> getDeserializer(Class<AvroWrapper<T>> c) {\n    Configuration conf = getConf();\n    GenericData dataModel = createDataModel(conf);\n    if (AvroKey.class.isAssignableFrom(c)) {\n      Schema writerSchema = getKeyWriterSchema(conf);\n      Schema readerSchema = getKeyReaderSchema(conf);\n      DatumReader<T> datumReader = (readerSchema != null) ? dataModel.createDatumReader(writerSchema, readerSchema)\n          : dataModel.createDatumReader(writerSchema);\n      return new AvroKeyDeserializer<>(writerSchema, readerSchema, datumReader);\n    } else if (AvroValue.class.isAssignableFrom(c)) {\n      Schema writerSchema = getValueWriterSchema(conf);\n      Schema readerSchema = getValueReaderSchema(conf);\n      DatumReader<T> datumReader = (readerSchema != null) ? dataModel.createDatumReader(writerSchema, readerSchema)\n          : dataModel.createDatumReader(writerSchema);\n      return new AvroValueDeserializer<>(writerSchema, readerSchema, datumReader);\n    } else {\n      throw new IllegalStateException(\"Only AvroKey and AvroValue are supported.\");\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Gets an object capable of deserializing the output from a Mapper.", "call_func_name": ["org.apache.avro.hadoop.io.AvroSerialization.getConf", "org.apache.avro.hadoop.io.AvroSerialization.createDataModel", "java.lang.Class.isAssignableFrom", "org.apache.avro.hadoop.io.AvroSerialization.getKeyWriterSchema", "org.apache.avro.hadoop.io.AvroSerialization.getKeyReaderSchema", "org.apache.avro.generic.GenericData.createDatumReader", "org.apache.avro.generic.GenericData.createDatumReader", "org.apache.avro.hadoop.io.AvroKeyDeserializer.<init>", "org.apache.avro.hadoop.io.AvroSerialization.getValueWriterSchema", "org.apache.avro.hadoop.io.AvroSerialization.getValueReaderSchema", "org.apache.avro.hadoop.io.AvroValueDeserializer.<init>", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [[""], ["org.apache.hadoop.conf.Configuration"], ["java.lang.Class"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.avro.Schema", "org.apache.avro.Schema"], ["org.apache.avro.Schema"], ["org.apache.avro.Schema", "org.apache.avro.Schema", "org.apache.avro.io.DatumReader"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.avro.Schema", "org.apache.avro.Schema", "org.apache.avro.io.DatumReader"], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.hadoop.io.AvroSerialization.createDataModel": "Gets an instance of data model implementation, defaulting to {@link ReflectData} if not explicitly specified."}, {"org.apache.avro.hadoop.io.AvroSerialization.getKeyWriterSchema": "Gets the writer schema of the AvroKey datum that is being serialized/deserialized."}, {"org.apache.avro.hadoop.io.AvroSerialization.getKeyReaderSchema": "Gets the reader schema of the AvroKey datum that is being serialized/deserialized."}, {"org.apache.avro.generic.GenericData.createDatumReader": "Returns a  {@link DatumReader} for this kind of data."}, {"org.apache.avro.generic.GenericData.createDatumReader": "Returns a  {@link DatumReader} for this kind of data."}, {"org.apache.avro.hadoop.io.AvroSerialization.getValueWriterSchema": "Gets the writer schema of the AvroValue datum that is being serialized/deserialized."}, {"org.apache.avro.hadoop.io.AvroSerialization.getValueReaderSchema": "Gets the reader schema of the AvroValue datum that is being serialized/deserialized."}]}, {"index": "1310", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.getSerializer", "methodParameterType": "Class<AvroWrapper<T>>#", "methodParameterName": "c#", "methodBody": "@Override\n  public Serializer<AvroWrapper<T>> getSerializer(Class<AvroWrapper<T>> c) {\n    Configuration conf = getConf();\n    Schema schema;\n    if (AvroKey.class.isAssignableFrom(c)) {\n      schema = getKeyWriterSchema(conf);\n    } else if (AvroValue.class.isAssignableFrom(c)) {\n      schema = getValueWriterSchema(conf);\n    } else {\n      throw new IllegalStateException(\"Only AvroKey and AvroValue are supported.\");\n    }\n    GenericData dataModel = createDataModel(conf);\n    DatumWriter<T> datumWriter = dataModel.createDatumWriter(schema);\n    return new AvroSerializer<>(schema, datumWriter);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets an object capable of serializing output from a Mapper.", "call_func_name": ["org.apache.avro.hadoop.io.AvroSerialization.getConf", "java.lang.Class.isAssignableFrom", "org.apache.avro.hadoop.io.AvroSerialization.getKeyWriterSchema", "org.apache.avro.hadoop.io.AvroSerialization.getValueWriterSchema", "java.lang.IllegalStateException.<init>", "org.apache.avro.hadoop.io.AvroSerialization.createDataModel", "org.apache.avro.generic.GenericData.createDatumWriter", "org.apache.avro.hadoop.io.AvroSerializer.<init>"], "call_func_parameter": [[""], ["java.lang.Class"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.conf.Configuration"], ["java.lang.String"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.avro.Schema"], ["org.apache.avro.Schema", "org.apache.avro.io.DatumWriter"]], "passed_comments": [{"org.apache.avro.hadoop.io.AvroSerialization.getKeyWriterSchema": "Gets the writer schema of the AvroKey datum that is being serialized/deserialized."}, {"org.apache.avro.hadoop.io.AvroSerialization.getValueWriterSchema": "Gets the writer schema of the AvroValue datum that is being serialized/deserialized."}, {"org.apache.avro.hadoop.io.AvroSerialization.createDataModel": "Gets an instance of data model implementation, defaulting to {@link ReflectData} if not explicitly specified."}, {"org.apache.avro.generic.GenericData.createDatumWriter": "Returns a  {@link DatumWriter} for this kind of data."}]}, {"index": "1311", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.addToConfiguration", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static void addToConfiguration(Configuration conf) {\n    Collection<String> serializations = conf.getStringCollection(\"io.serializations\");\n    if (!serializations.contains(AvroSerialization.class.getName())) {\n      serializations.add(AvroSerialization.class.getName());\n      conf.setStrings(\"io.serializations\", serializations.toArray(new String[0]));\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds the AvroSerialization scheme to the configuration, so SerializationFactory instances constructed from the given configuration will be aware of it.", "call_func_name": ["org.apache.hadoop.conf.Configuration.getStringCollection", "java.lang.Class.getName", "java.util.Collection.contains", "java.util.Collection.add", "java.util.Collection.toArray", "org.apache.hadoop.conf.Configuration.setStrings"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object[]"], ["java.lang.String", "java.lang.String[]"]], "passed_comments": "/"}, {"index": "1312", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.setKeyWriterSchema", "methodParameterType": "Configuration#Schema#", "methodParameterName": "conf#schema#", "methodBody": "public static void setKeyWriterSchema(Configuration conf, Schema schema) {\n    if (null == schema) {\n      throw new IllegalArgumentException(\"Writer schema may not be null\");\n    }\n    conf.set(CONF_KEY_WRITER_SCHEMA, schema.toString());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the writer schema of the AvroKey datum that is being serialized/deserialized.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "org.apache.avro.Schema.toString", "org.apache.hadoop.conf.Configuration.set"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1313", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.setKeyReaderSchema", "methodParameterType": "Configuration#Schema#", "methodParameterName": "conf#schema#", "methodBody": "public static void setKeyReaderSchema(Configuration conf, Schema schema) {\n    conf.set(CONF_KEY_READER_SCHEMA, schema.toString());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the reader schema of the AvroKey datum that is being serialized/deserialized.", "call_func_name": ["org.apache.avro.Schema.toString", "org.apache.hadoop.conf.Configuration.set"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1314", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.setValueWriterSchema", "methodParameterType": "Configuration#Schema#", "methodParameterName": "conf#schema#", "methodBody": "public static void setValueWriterSchema(Configuration conf, Schema schema) {\n    if (null == schema) {\n      throw new IllegalArgumentException(\"Writer schema may not be null\");\n    }\n    conf.set(CONF_VALUE_WRITER_SCHEMA, schema.toString());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the writer schema of the AvroValue datum that is being serialized/deserialized.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "org.apache.avro.Schema.toString", "org.apache.hadoop.conf.Configuration.set"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1315", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.setValueReaderSchema", "methodParameterType": "Configuration#Schema#", "methodParameterName": "conf#schema#", "methodBody": "public static void setValueReaderSchema(Configuration conf, Schema schema) {\n    conf.set(CONF_VALUE_READER_SCHEMA, schema.toString());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the reader schema of the AvroValue datum that is being serialized/deserialized.", "call_func_name": ["org.apache.avro.Schema.toString", "org.apache.hadoop.conf.Configuration.set"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1316", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.setDataModelClass", "methodParameterType": "Configuration#Class<? extends GenericData>#", "methodParameterName": "conf#modelClass#", "methodBody": "public static void setDataModelClass(Configuration conf, Class<? extends GenericData> modelClass) {\n    conf.setClass(CONF_DATA_MODEL, modelClass, GenericData.class);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the data model class for de/serialization.", "call_func_name": ["org.apache.hadoop.conf.Configuration.setClass"], "call_func_parameter": [["java.lang.String", "java.lang.Class", "java.lang.Class"]], "passed_comments": "/"}, {"index": "1317", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.getKeyWriterSchema", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static Schema getKeyWriterSchema(Configuration conf) {\n    String json = conf.get(CONF_KEY_WRITER_SCHEMA);\n    return null == json ? null : new Schema.Parser().parse(json);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#NullLiteral#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(NullLiteral)NullLiteral(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the writer schema of the AvroKey datum that is being serialized/deserialized.", "call_func_name": ["org.apache.hadoop.conf.Configuration.get"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1318", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.getKeyReaderSchema", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static Schema getKeyReaderSchema(Configuration conf) {\n    String json = conf.get(CONF_KEY_READER_SCHEMA);\n    return null == json ? null : new Schema.Parser().parse(json);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#NullLiteral#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(NullLiteral)NullLiteral(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the reader schema of the AvroKey datum that is being serialized/deserialized.", "call_func_name": ["org.apache.hadoop.conf.Configuration.get"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1319", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.getValueWriterSchema", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static Schema getValueWriterSchema(Configuration conf) {\n    String json = conf.get(CONF_VALUE_WRITER_SCHEMA);\n    return null == json ? null : new Schema.Parser().parse(json);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#NullLiteral#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(NullLiteral)NullLiteral(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the writer schema of the AvroValue datum that is being serialized/deserialized.", "call_func_name": ["org.apache.hadoop.conf.Configuration.get"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1320", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.getValueReaderSchema", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static Schema getValueReaderSchema(Configuration conf) {\n    String json = conf.get(CONF_VALUE_READER_SCHEMA);\n    return null == json ? null : new Schema.Parser().parse(json);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#NullLiteral#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(NullLiteral)NullLiteral(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the reader schema of the AvroValue datum that is being serialized/deserialized.", "call_func_name": ["org.apache.hadoop.conf.Configuration.get"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1321", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.getDataModelClass", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static Class<? extends GenericData> getDataModelClass(Configuration conf) {\n    return conf.getClass(CONF_DATA_MODEL, ReflectData.class, GenericData.class);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the data model class for de/serialization.", "call_func_name": ["org.apache.hadoop.conf.Configuration.getClass"], "call_func_parameter": [["java.lang.String", "java.lang.Class", "java.lang.Class"]], "passed_comments": "/"}, {"index": "1322", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSerialization.java", "methodName": "org.apache.avro.hadoop.io.AvroSerialization.createDataModel", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static GenericData createDataModel(Configuration conf) {\n    Class<? extends GenericData> modelClass = getDataModelClass(conf);\n    return newDataModelInstance(modelClass, conf);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets an instance of data model implementation, defaulting to {@link ReflectData} if not explicitly specified.", "call_func_name": ["org.apache.avro.hadoop.io.AvroSerialization.getDataModelClass", "org.apache.avro.hadoop.io.AvroSerialization.newDataModelInstance"], "call_func_parameter": [["org.apache.hadoop.conf.Configuration"], ["java.lang.Class", "org.apache.hadoop.conf.Configuration"]], "passed_comments": [{"org.apache.avro.hadoop.io.AvroSerialization.getDataModelClass": "Gets the data model class for de/serialization."}]}, {"index": "1323", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSequenceFile.java", "methodName": "org.apache.avro.hadoop.io.AvroSequenceFile.AvroSequenceFile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private AvroSequenceFile() {\n  }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructor disabled for this container class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1324", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSequenceFile.java", "methodName": "org.apache.avro.hadoop.io.AvroSequenceFile.createWriter", "methodParameterType": "Writer.Options#", "methodParameterName": "options#", "methodBody": "public static SequenceFile.Writer createWriter(Writer.Options options) throws IOException {\n    return SequenceFile.createWriter(options.getFileSystem(), options.getConfigurationWithAvroSerialization(),\n        options.getOutputPath(), options.getKeyClass(), options.getValueClass(), options.getBufferSizeBytes(),\n        options.getReplicationFactor(), options.getBlockSizeBytes(), options.getCompressionType(),\n        options.getCompressionCodec(), options.getProgressable(), options.getMetadataWithAvroSchemas());\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a writer from a set of options. <p> Since there are different implementations of <code>Writer</code> depending on the compression type, this method constructs the appropriate subclass depending on the compression type given in the <code>options</code>. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1325", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/hadoop/io/AvroSequenceFile.java", "methodName": "org.apache.avro.hadoop.io.AvroSequenceFile.getMetadata", "methodParameterType": "FileSystem#Path#Configuration#", "methodParameterName": "fs#path#conf#", "methodBody": "private static Metadata getMetadata(FileSystem fs, Path path, Configuration conf) throws IOException {\n    try (SequenceFile.Reader metadataReader = new SequenceFile.Reader(fs, path, conf)) {\n      return metadataReader.getMetadata();\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Open and read just the metadata header from a SequenceFile.", "call_func_name": ["java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "1326", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroOutputFormatBase.java", "methodName": "org.apache.avro.mapreduce.AvroOutputFormatBase.getCompressionCodec", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "protected static CodecFactory getCompressionCodec(TaskAttemptContext context) {\n    if (FileOutputFormat.getCompressOutput(context)) {\n      // Default to deflate compression.\n      int deflateLevel = context.getConfiguration().getInt(org.apache.avro.mapred.AvroOutputFormat.DEFLATE_LEVEL_KEY,\n          CodecFactory.DEFAULT_DEFLATE_LEVEL);\n      int xzLevel = context.getConfiguration().getInt(org.apache.avro.mapred.AvroOutputFormat.XZ_LEVEL_KEY,\n          CodecFactory.DEFAULT_XZ_LEVEL);\n\n      String outputCodec = context.getConfiguration().get(AvroJob.CONF_OUTPUT_CODEC);\n\n      if (outputCodec == null) {\n        String compressionCodec = context.getConfiguration().get(\"mapred.output.compression.codec\");\n        String avroCodecName = HadoopCodecFactory.getAvroCodecName(compressionCodec);\n        if (avroCodecName != null) {\n          context.getConfiguration().set(AvroJob.CONF_OUTPUT_CODEC, avroCodecName);\n          return HadoopCodecFactory.fromHadoopString(compressionCodec);\n        } else {\n          return CodecFactory.deflateCodec(deflateLevel);\n        }\n      } else if (DataFileConstants.DEFLATE_CODEC.equals(outputCodec)) {\n        return CodecFactory.deflateCodec(deflateLevel);\n      } else if (DataFileConstants.XZ_CODEC.equals(outputCodec)) {\n        return CodecFactory.xzCodec(xzLevel);\n      } else {\n        return CodecFactory.fromString(outputCodec);\n      }\n\n    }\n\n    // No compression.\n    return CodecFactory.nullCodec();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#IfStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement)IfStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the configured compression codec from the task context.", "call_func_name": ["org.apache.hadoop.mapreduce.lib.output.FileOutputFormat.getCompressOutput", "org.apache.hadoop.mapreduce.TaskAttemptContext.getConfiguration", "org.apache.hadoop.conf.Configuration.getInt", "org.apache.hadoop.conf.Configuration.get", "org.apache.avro.hadoop.file.HadoopCodecFactory.getAvroCodecName", "org.apache.hadoop.conf.Configuration.set", "org.apache.avro.hadoop.file.HadoopCodecFactory.fromHadoopString", "org.apache.avro.file.CodecFactory.deflateCodec", "java.lang.String.equals", "org.apache.avro.file.CodecFactory.xzCodec", "org.apache.avro.file.CodecFactory.fromString", "org.apache.avro.file.CodecFactory.nullCodec"], "call_func_parameter": [["org.apache.hadoop.mapreduce.JobContext"], [""], ["java.lang.String", "int"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["int"], ["java.lang.Object"], ["int"], ["java.lang.String"], [""]], "passed_comments": [{"org.apache.avro.hadoop.file.HadoopCodecFactory.fromHadoopString": "Maps a hadoop codec name into a CodecFactory. Currently there are four hadoop codecs registered: <ul> <li> {@code org.apache.hadoop.io.compress.DeflateCodec} will map to{@code deflate}</li> <li> {@code org.apache.hadoop.io.compress.SnappyCodec} will map to{@code snappy}</li> <li> {@code org.apache.hadoop.io.compress.BZip2Codec} will map to{@code zbip2}</li> <li> {@code org.apache.hadoop.io.compress.GZipCodec} will map to{@code deflate}</li> </ul>"}, {"org.apache.avro.file.CodecFactory.deflateCodec": "Deflate codec, with specific compression. compressionLevel should be between 1 and 9, inclusive."}, {"org.apache.avro.file.CodecFactory.xzCodec": "XZ codec, with specific compression. compressionLevel should be between 1 and 9, inclusive."}, {"org.apache.avro.file.CodecFactory.fromString": "Maps a codec name into a CodecFactory. Currently there are six codecs registered by default: <ul> <li> {@code null}</li> <li> {@code deflate}</li> <li> {@code snappy}</li> <li> {@code bzip2}</li> <li> {@code xz}</li> <li> {@code zstandard}</li> </ul>"}, {"org.apache.avro.file.CodecFactory.nullCodec": "Null codec, for no compression."}]}, {"index": "1327", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroOutputFormatBase.java", "methodName": "org.apache.avro.mapreduce.AvroOutputFormatBase.getAvroFileOutputStream", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "protected OutputStream getAvroFileOutputStream(TaskAttemptContext context) throws IOException {\n    Path path = new Path(((FileOutputCommitter) getOutputCommitter(context)).getWorkPath(),\n        getUniqueFile(context, context.getConfiguration().get(\"avro.mo.config.namedOutput\", \"part\"),\n            org.apache.avro.mapred.AvroOutputFormat.EXT));\n    return path.getFileSystem(context.getConfiguration()).create(path);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#StringLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the target output stream where the Avro container file should be written.", "call_func_name": ["org.apache.avro.mapreduce.AvroOutputFormatBase.getOutputCommitter", "org.apache.hadoop.mapreduce.lib.output.FileOutputCommitter.getWorkPath", "org.apache.hadoop.mapreduce.TaskAttemptContext.getConfiguration", "org.apache.hadoop.conf.Configuration.get", "org.apache.avro.mapreduce.AvroOutputFormatBase.getUniqueFile", "org.apache.hadoop.fs.Path.<init>", "org.apache.hadoop.fs.Path.getFileSystem", "org.apache.hadoop.fs.FileSystem.create"], "call_func_parameter": [["org.apache.hadoop.mapreduce.TaskAttemptContext"], [""], [""], ["java.lang.String", "java.lang.String"], ["org.apache.hadoop.mapreduce.TaskAttemptContext", "java.lang.String", "java.lang.String"], ["org.apache.hadoop.fs.Path", "java.lang.String"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.fs.Path"]], "passed_comments": "/"}, {"index": "1328", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroOutputFormatBase.java", "methodName": "org.apache.avro.mapreduce.AvroOutputFormatBase.getSyncInterval", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "protected static int getSyncInterval(TaskAttemptContext context) {\n    return context.getConfiguration().getInt(org.apache.avro.mapred.AvroOutputFormat.SYNC_INTERVAL_KEY,\n        DataFileConstants.DEFAULT_SYNC_INTERVAL);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the configured sync interval from the task context.", "call_func_name": ["org.apache.hadoop.mapreduce.TaskAttemptContext.getConfiguration", "org.apache.hadoop.conf.Configuration.getInt"], "call_func_parameter": [[""], ["java.lang.String", "int"]], "passed_comments": "/"}, {"index": "1329", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyValueRecordWriter.java", "methodName": "org.apache.avro.mapreduce.AvroKeyValueRecordWriter.AvroKeyValueRecordWriter", "methodParameterType": "AvroDatumConverter<K,?>#AvroDatumConverter<V,?>#GenericData#CodecFactory#OutputStream#int#", "methodParameterName": "keyConverter#valueConverter#dataModel#compressionCodec#outputStream#syncInterval#", "methodBody": "public AvroKeyValueRecordWriter(AvroDatumConverter<K, ?> keyConverter, AvroDatumConverter<V, ?> valueConverter,\n      GenericData dataModel, CodecFactory compressionCodec, OutputStream outputStream, int syncInterval)\n      throws IOException {\n    // Create the generic record schema for the key/value pair.\n    mKeyValuePairSchema = AvroKeyValue.getSchema(keyConverter.getWriterSchema(), valueConverter.getWriterSchema());\n\n    // Create an Avro container file and a writer to it.\n    mAvroFileWriter = new DataFileWriter<GenericRecord>(dataModel.createDatumWriter(mKeyValuePairSchema));\n    mAvroFileWriter.setCodec(compressionCodec);\n    mAvroFileWriter.setSyncInterval(syncInterval);\n    mAvroFileWriter.create(mKeyValuePairSchema, outputStream);\n\n    // Keep a reference to the converters.\n    mKeyConverter = keyConverter;\n    mValueConverter = valueConverter;\n\n    // Create a reusable output record.\n    mOutputRecord = new AvroKeyValue<>(new GenericData.Record(mKeyValuePairSchema));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1330", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyValueRecordWriter.java", "methodName": "org.apache.avro.mapreduce.AvroKeyValueRecordWriter.AvroKeyValueRecordWriter", "methodParameterType": "AvroDatumConverter<K,?>#AvroDatumConverter<V,?>#GenericData#CodecFactory#OutputStream#", "methodParameterName": "keyConverter#valueConverter#dataModel#compressionCodec#outputStream#", "methodBody": "public AvroKeyValueRecordWriter(AvroDatumConverter<K, ?> keyConverter, AvroDatumConverter<V, ?> valueConverter,\n      GenericData dataModel, CodecFactory compressionCodec, OutputStream outputStream) throws IOException {\n    this(keyConverter, valueConverter, dataModel, compressionCodec, outputStream,\n        DataFileConstants.DEFAULT_SYNC_INTERVAL);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1331", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyValueRecordWriter.java", "methodName": "org.apache.avro.mapreduce.AvroKeyValueRecordWriter.getWriterSchema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Schema getWriterSchema() {\n    return mKeyValuePairSchema;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the writer schema for the key/value pair generic record.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1332", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyValueRecordWriter.java", "methodName": "org.apache.avro.mapreduce.AvroKeyValueRecordWriter.write", "methodParameterType": "K#V#", "methodParameterName": "key#value#", "methodBody": "@Override\n  public void write(K key, V value) throws IOException {\n    mOutputRecord.setKey(mKeyConverter.convert(key));\n    mOutputRecord.setValue(mValueConverter.convert(value));\n    mAvroFileWriter.append(mOutputRecord.get());\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1333", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyValueRecordWriter.java", "methodName": "org.apache.avro.mapreduce.AvroKeyValueRecordWriter.close", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "@Override\n  public void close(TaskAttemptContext context) throws IOException {\n    mAvroFileWriter.close();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.file.DataFileWriter.close"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.file.DataFileWriter.close": "Flush and close the file."}]}, {"index": "1334", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyValueRecordWriter.java", "methodName": "org.apache.avro.mapreduce.AvroKeyValueRecordWriter.sync", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public long sync() throws IOException {\n    return mAvroFileWriter.sync();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.file.DataFileWriter.sync"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.file.DataFileWriter.sync": "Return the current position as a value that may be passed to {@link DataFileReader#seek(long)}. Forces the end of the current block, emitting a synchronization marker. By default, this will also flush the block to the stream. If  {@linkplain #setFlushOnEveryBlock(boolean)} is called with param set tofalse, then this method may not flush the block. In this case, the {@linkplain #flush()} must be called to flush the stream."}]}, {"index": "1335", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyValueInputFormat.java", "methodName": "org.apache.avro.mapreduce.AvroKeyValueInputFormat.createRecordReader", "methodParameterType": "InputSplit#TaskAttemptContext#", "methodParameterName": "split#context#", "methodBody": "@Override\n  public RecordReader<AvroKey<K>, AvroValue<V>> createRecordReader(InputSplit split, TaskAttemptContext context)\n      throws IOException, InterruptedException {\n    Schema keyReaderSchema = AvroJob.getInputKeySchema(context.getConfiguration());\n    if (null == keyReaderSchema) {\n      LOG.warn(\"Key reader schema was not set. Use AvroJob.setInputKeySchema() if desired.\");\n      LOG.info(\"Using a key reader schema equal to the writer schema.\");\n    }\n    Schema valueReaderSchema = AvroJob.getInputValueSchema(context.getConfiguration());\n    if (null == valueReaderSchema) {\n      LOG.warn(\"Value reader schema was not set. Use AvroJob.setInputValueSchema() if desired.\");\n      LOG.info(\"Using a value reader schema equal to the writer schema.\");\n    }\n    return new AvroKeyValueRecordReader<>(keyReaderSchema, valueReaderSchema);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.hadoop.mapreduce.TaskAttemptContext.getConfiguration", "org.apache.avro.mapreduce.AvroJob.getInputKeySchema", "org.slf4j.Logger.warn", "org.slf4j.Logger.info", "org.apache.avro.mapreduce.AvroJob.getInputValueSchema", "org.apache.avro.mapreduce.AvroKeyValueRecordReader.<init>"], "call_func_parameter": [[""], ["org.apache.hadoop.conf.Configuration"], ["java.lang.String"], ["java.lang.String"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.avro.Schema", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroJob.getInputKeySchema": "Gets the job input key schema."}, {"org.apache.avro.mapreduce.AvroJob.getInputValueSchema": "Gets the job input value schema."}]}, {"index": "1336", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyRecordWriter.java", "methodName": "org.apache.avro.mapreduce.AvroKeyRecordWriter.AvroKeyRecordWriter", "methodParameterType": "Schema#GenericData#CodecFactory#OutputStream#int#", "methodParameterName": "writerSchema#dataModel#compressionCodec#outputStream#syncInterval#", "methodBody": "public AvroKeyRecordWriter(Schema writerSchema, GenericData dataModel, CodecFactory compressionCodec,\n      OutputStream outputStream, int syncInterval) throws IOException {\n    // Create an Avro container file and a writer to it.\n    mAvroFileWriter = new DataFileWriter<T>(dataModel.createDatumWriter(writerSchema));\n    mAvroFileWriter.setCodec(compressionCodec);\n    mAvroFileWriter.setSyncInterval(syncInterval);\n    mAvroFileWriter.create(writerSchema, outputStream);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1337", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyRecordWriter.java", "methodName": "org.apache.avro.mapreduce.AvroKeyRecordWriter.AvroKeyRecordWriter", "methodParameterType": "Schema#GenericData#CodecFactory#OutputStream#", "methodParameterName": "writerSchema#dataModel#compressionCodec#outputStream#", "methodBody": "public AvroKeyRecordWriter(Schema writerSchema, GenericData dataModel, CodecFactory compressionCodec,\n      OutputStream outputStream) throws IOException {\n    this(writerSchema, dataModel, compressionCodec, outputStream, DataFileConstants.DEFAULT_SYNC_INTERVAL);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1338", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyRecordWriter.java", "methodName": "org.apache.avro.mapreduce.AvroKeyRecordWriter.write", "methodParameterType": "AvroKey<T>#NullWritable#", "methodParameterName": "record#ignore#", "methodBody": "@Override\n  public void write(AvroKey<T> record, NullWritable ignore) throws IOException {\n    mAvroFileWriter.append(record.datum());\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.mapred.AvroKey.datum", "org.apache.avro.file.DataFileWriter.append"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1339", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyRecordWriter.java", "methodName": "org.apache.avro.mapreduce.AvroKeyRecordWriter.close", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "@Override\n  public void close(TaskAttemptContext context) throws IOException {\n    mAvroFileWriter.close();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.file.DataFileWriter.close"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.file.DataFileWriter.close": "Flush and close the file."}]}, {"index": "1340", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyRecordWriter.java", "methodName": "org.apache.avro.mapreduce.AvroKeyRecordWriter.sync", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public long sync() throws IOException {\n    return mAvroFileWriter.sync();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.file.DataFileWriter.sync"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.file.DataFileWriter.sync": "Return the current position as a value that may be passed to {@link DataFileReader#seek(long)}. Forces the end of the current block, emitting a synchronization marker. By default, this will also flush the block to the stream. If  {@linkplain #setFlushOnEveryBlock(boolean)} is called with param set tofalse, then this method may not flush the block. In this case, the {@linkplain #flush()} must be called to flush the stream."}]}, {"index": "1341", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroSequenceFileOutputFormat.java", "methodName": "org.apache.avro.mapreduce.AvroSequenceFileOutputFormat.getRecordWriter", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "@Override\n  public RecordWriter<K, V> getRecordWriter(TaskAttemptContext context) throws IOException, InterruptedException {\n    Configuration conf = context.getConfiguration();\n\n    // Configure compression if requested.\n    CompressionCodec codec = null;\n    CompressionType compressionType = CompressionType.NONE;\n    if (getCompressOutput(context)) {\n      // Find the kind of compression to do.\n      compressionType = getOutputCompressionType(conf);\n\n      // Find the right codec.\n      Class<?> codecClass = getOutputCompressorClass(context, DefaultCodec.class);\n      codec = (CompressionCodec) ReflectionUtils.newInstance(codecClass, conf);\n    }\n\n    // Get the path of the output file.\n    Path outputFile = getDefaultWorkFile(context, \"\");\n    FileSystem fs = outputFile.getFileSystem(conf);\n\n    // Configure the writer.\n    AvroSequenceFile.Writer.Options options = new AvroSequenceFile.Writer.Options().withFileSystem(fs)\n        .withConfiguration(conf).withOutputPath(outputFile).withKeyClass(context.getOutputKeyClass())\n        .withValueClass(context.getOutputValueClass()).withProgressable(context).withCompressionType(compressionType)\n        .withCompressionCodec(codec);\n    Schema keySchema = AvroJob.getOutputKeySchema(conf);\n    if (null != keySchema) {\n      options.withKeySchema(keySchema);\n    }\n    Schema valueSchema = AvroJob.getOutputValueSchema(conf);\n    if (null != valueSchema) {\n      options.withValueSchema(valueSchema);\n    }\n    final SequenceFile.Writer out = AvroSequenceFile.createWriter(options);\n\n    return new RecordWriter<K, V>() {\n      @Override\n      public void write(K key, V value) throws IOException {\n        out.append(key, value);\n      }\n\n      @Override\n      public void close(TaskAttemptContext context) throws IOException {\n        out.close();\n      }\n    };\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.hadoop.mapreduce.TaskAttemptContext.getConfiguration", "org.apache.avro.mapreduce.AvroSequenceFileOutputFormat.getCompressOutput", "org.apache.avro.mapreduce.AvroSequenceFileOutputFormat.getOutputCompressionType", "org.apache.avro.mapreduce.AvroSequenceFileOutputFormat.getOutputCompressorClass", "org.apache.hadoop.util.ReflectionUtils.newInstance", "org.apache.avro.mapreduce.AvroSequenceFileOutputFormat.getDefaultWorkFile", "org.apache.hadoop.fs.Path.getFileSystem", "org.apache.hadoop.mapreduce.TaskAttemptContext.getOutputKeyClass", "org.apache.hadoop.mapreduce.TaskAttemptContext.getOutputValueClass", "org.apache.avro.mapreduce.AvroJob.getOutputKeySchema", "org.apache.avro.mapreduce.AvroJob.getOutputValueSchema"], "call_func_parameter": [[""], ["org.apache.hadoop.mapreduce.JobContext"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.mapreduce.JobContext", "java.lang.Class"], ["java.lang.Class", "org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.mapreduce.TaskAttemptContext", "java.lang.String"], ["org.apache.hadoop.conf.Configuration"], [""], [""], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.conf.Configuration"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroSequenceFileOutputFormat.getOutputCompressionType": "Gets type of compression for the output sequence file."}, {"org.apache.avro.mapreduce.AvroJob.getOutputKeySchema": "Gets the job output key schema."}, {"org.apache.avro.mapreduce.AvroJob.getOutputValueSchema": "Gets the job output value schema."}]}, {"index": "1342", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroSequenceFileOutputFormat.java", "methodName": "org.apache.avro.mapreduce.AvroSequenceFileOutputFormat.setOutputCompressionType", "methodParameterType": "Job#CompressionType#", "methodParameterName": "job#compressionType#", "methodBody": "public static void setOutputCompressionType(Job job, CompressionType compressionType) {\n    setCompressOutput(job, true);\n    job.getConfiguration().set(FileOutputFormat.COMPRESS_TYPE, compressionType.name());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the type of compression for the output sequence file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1343", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroSequenceFileOutputFormat.java", "methodName": "org.apache.avro.mapreduce.AvroSequenceFileOutputFormat.getOutputCompressionType", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static CompressionType getOutputCompressionType(Configuration conf) {\n    String typeName = conf.get(FileOutputFormat.COMPRESS_TYPE);\n    if (typeName != null) {\n      return CompressionType.valueOf(typeName);\n    }\n    return SequenceFile.getDefaultCompressionType(conf);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets type of compression for the output sequence file.", "call_func_name": ["org.apache.hadoop.conf.Configuration.get", "org.apache.hadoop.io.SequenceFile.getDefaultCompressionType"], "call_func_parameter": [["java.lang.String"], ["org.apache.hadoop.conf.Configuration"]], "passed_comments": "/"}, {"index": "1344", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroRecordReaderBase.java", "methodName": "org.apache.avro.mapreduce.AvroRecordReaderBase.AvroRecordReaderBase", "methodParameterType": "Schema#", "methodParameterName": "readerSchema#", "methodBody": "protected AvroRecordReaderBase(Schema readerSchema) {\n    mReaderSchema = readerSchema;\n    mCurrentRecord = null;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1345", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroRecordReaderBase.java", "methodName": "org.apache.avro.mapreduce.AvroRecordReaderBase.initialize", "methodParameterType": "InputSplit#TaskAttemptContext#", "methodParameterName": "inputSplit#context#", "methodBody": "@Override\n  public void initialize(InputSplit inputSplit, TaskAttemptContext context) throws IOException, InterruptedException {\n    if (!(inputSplit instanceof FileSplit)) {\n      throw new IllegalArgumentException(\"Only compatible with FileSplits.\");\n    }\n    FileSplit fileSplit = (FileSplit) inputSplit;\n\n    // Open a seekable input stream to the Avro container file.\n    SeekableInput seekableFileInput = createSeekableInput(context.getConfiguration(), fileSplit.getPath());\n\n    // Wrap the seekable input stream in an Avro DataFileReader.\n    Configuration conf = context.getConfiguration();\n    GenericData dataModel = AvroSerialization.createDataModel(conf);\n    DatumReader<T> datumReader = dataModel.createDatumReader(mReaderSchema);\n    mAvroFileReader = createAvroFileReader(seekableFileInput, datumReader);\n\n    // Initialize the start and end offsets into the file based on the boundaries of\n    // the\n    // input split we're responsible for. We will read the first block that begins\n    // after the input split start boundary. We will read up to but not including\n    // the\n    // first block that starts after input split end boundary.\n\n    // Sync to the closest block/record boundary just after beginning of our input\n    // split.\n    mAvroFileReader.sync(fileSplit.getStart());\n\n    // Initialize the start position to the beginning of the first block of the\n    // input split.\n    mStartPosition = mAvroFileReader.previousSync();\n\n    // Initialize the end position to the end of the input split (this isn't\n    // necessarily\n    // on a block boundary so using this for reporting progress will be approximate.\n    mEndPosition = fileSplit.getStart() + fileSplit.getLength();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "org.apache.hadoop.mapreduce.TaskAttemptContext.getConfiguration", "org.apache.hadoop.mapreduce.lib.input.FileSplit.getPath", "org.apache.avro.mapreduce.AvroRecordReaderBase.createSeekableInput", "org.apache.avro.hadoop.io.AvroSerialization.createDataModel", "org.apache.avro.generic.GenericData.createDatumReader", "org.apache.avro.mapreduce.AvroRecordReaderBase.createAvroFileReader", "org.apache.hadoop.mapreduce.lib.input.FileSplit.getStart", "org.apache.avro.file.DataFileReader.sync", "org.apache.avro.file.DataFileReader.previousSync", "org.apache.hadoop.mapreduce.lib.input.FileSplit.getLength"], "call_func_parameter": [["java.lang.String"], [""], [""], ["org.apache.hadoop.conf.Configuration", "org.apache.hadoop.fs.Path"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.avro.Schema"], ["org.apache.avro.file.SeekableInput", "org.apache.avro.io.DatumReader"], [""], ["long"], [""], [""]], "passed_comments": [{"org.apache.avro.mapreduce.AvroRecordReaderBase.createSeekableInput": "Creates a seekable input stream to an Avro container file."}, {"org.apache.avro.hadoop.io.AvroSerialization.createDataModel": "Gets an instance of data model implementation, defaulting to {@link ReflectData} if not explicitly specified."}, {"org.apache.avro.generic.GenericData.createDatumReader": "Returns a  {@link DatumReader} for this kind of data."}, {"org.apache.avro.mapreduce.AvroRecordReaderBase.createAvroFileReader": "Creates an Avro container file reader from a seekable input stream."}, {"org.apache.avro.file.DataFileReader.sync": "Move to the next synchronization point after a position. To process a range of file entires, call this with the starting position, then check {@link #pastSync(long)} with the end point before each call to{@link #next()}."}, {"org.apache.avro.file.DataFileReader.previousSync": "Return the last synchronization point before our current position."}]}, {"index": "1346", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroRecordReaderBase.java", "methodName": "org.apache.avro.mapreduce.AvroRecordReaderBase.nextKeyValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public boolean nextKeyValue() throws IOException, InterruptedException {\n    assert null != mAvroFileReader;\n\n    if (mAvroFileReader.hasNext() && !mAvroFileReader.pastSync(mEndPosition)) {\n      mCurrentRecord = mAvroFileReader.next(mCurrentRecord);\n      return true;\n    }\n    return false;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#NullLiteral#SimpleName#InfixExpression#AssertStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(AssertStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression)AssertStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.AssertionError.<init>", "org.apache.avro.file.DataFileReader.hasNext", "org.apache.avro.file.DataFileReader.pastSync", "org.apache.avro.file.DataFileReader.next"], "call_func_parameter": [[""], [""], ["long"], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.file.DataFileReader.pastSync": "Return true if past the next synchronization point after a position."}]}, {"index": "1347", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroRecordReaderBase.java", "methodName": "org.apache.avro.mapreduce.AvroRecordReaderBase.getProgress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public float getProgress() throws IOException, InterruptedException {\n    assert null != mAvroFileReader;\n\n    if (mEndPosition == mStartPosition) {\n      // Trivial empty input split.\n      return 0.0f;\n    }\n    long bytesRead = mAvroFileReader.previousSync() - mStartPosition;\n    long bytesTotal = mEndPosition - mStartPosition;\n    LOG.debug(\"Progress: bytesRead=\" + bytesRead + \", bytesTotal=\" + bytesTotal);\n    return Math.min(1.0f, (float) bytesRead / (float) bytesTotal);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#NullLiteral#SimpleName#InfixExpression#AssertStatement#SimpleName#SimpleName#InfixExpression#NumberLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#PrimitiveType#SimpleName#CastExpression#PrimitiveType#SimpleName#CastExpression#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(AssertStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression)AssertStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.AssertionError.<init>", "org.apache.avro.file.DataFileReader.previousSync", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.debug", "java.lang.Math.min"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], ["long"], [""], ["java.lang.String"], ["float", "float"]], "passed_comments": [{"org.apache.avro.file.DataFileReader.previousSync": "Return the last synchronization point before our current position."}]}, {"index": "1348", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroRecordReaderBase.java", "methodName": "org.apache.avro.mapreduce.AvroRecordReaderBase.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void close() throws IOException {\n    if (null != mAvroFileReader) {\n      try {\n        mAvroFileReader.close();\n      } finally {\n        mAvroFileReader = null;\n      }\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.file.DataFileReader.close"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1349", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroRecordReaderBase.java", "methodName": "org.apache.avro.mapreduce.AvroRecordReaderBase.getCurrentRecord", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected T getCurrentRecord() {\n    return mCurrentRecord;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the current record read from the Avro container file. <p> Calling <code>nextKeyValue()</code> moves this to the next record. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1350", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroRecordReaderBase.java", "methodName": "org.apache.avro.mapreduce.AvroRecordReaderBase.createSeekableInput", "methodParameterType": "Configuration#Path#", "methodParameterName": "conf#path#", "methodBody": "protected SeekableInput createSeekableInput(Configuration conf, Path path) throws IOException {\n    return new FsInput(path, conf);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a seekable input stream to an Avro container file.", "call_func_name": ["org.apache.avro.mapred.FsInput.<init>"], "call_func_parameter": [["org.apache.hadoop.fs.Path", "org.apache.hadoop.conf.Configuration"]], "passed_comments": "/"}, {"index": "1351", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroRecordReaderBase.java", "methodName": "org.apache.avro.mapreduce.AvroRecordReaderBase.createAvroFileReader", "methodParameterType": "SeekableInput#DatumReader<T>#", "methodParameterName": "input#datumReader#", "methodBody": "protected DataFileReader<T> createAvroFileReader(SeekableInput input, DatumReader<T> datumReader) throws IOException {\n    return new DataFileReader<>(input, datumReader);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates an Avro container file reader from a seekable input stream.", "call_func_name": ["org.apache.avro.file.DataFileReader.<init>"], "call_func_parameter": [["org.apache.avro.file.SeekableInput", "org.apache.avro.io.DatumReader"]], "passed_comments": "/"}, {"index": "1352", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyValueOutputFormat.java", "methodName": "org.apache.avro.mapreduce.AvroKeyValueOutputFormat.getRecordWriter", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "@Override\n  @SuppressWarnings(\"unchecked\")\n  public RecordWriter<K, V> getRecordWriter(TaskAttemptContext context) throws IOException {\n    Configuration conf = context.getConfiguration();\n\n    AvroDatumConverterFactory converterFactory = new AvroDatumConverterFactory(conf);\n\n    AvroDatumConverter<K, ?> keyConverter = converterFactory.create((Class<K>) context.getOutputKeyClass());\n    AvroDatumConverter<V, ?> valueConverter = converterFactory.create((Class<V>) context.getOutputValueClass());\n\n    GenericData dataModel = AvroSerialization.createDataModel(conf);\n\n    OutputStream out = getAvroFileOutputStream(context);\n    try {\n      return new AvroKeyValueRecordWriter<>(keyConverter, valueConverter, dataModel, getCompressionCodec(context), out,\n          getSyncInterval(context));\n    } catch (IOException e) {\n      out.close();\n      throw e;\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.hadoop.mapreduce.TaskAttemptContext.getConfiguration", "org.apache.avro.hadoop.io.AvroDatumConverterFactory.<init>", "org.apache.hadoop.mapreduce.TaskAttemptContext.getOutputKeyClass", "org.apache.avro.hadoop.io.AvroDatumConverterFactory.create", "org.apache.hadoop.mapreduce.TaskAttemptContext.getOutputValueClass", "org.apache.avro.hadoop.io.AvroSerialization.createDataModel", "org.apache.avro.mapreduce.AvroKeyValueOutputFormat.getAvroFileOutputStream", "org.apache.avro.mapreduce.AvroKeyValueOutputFormat.getCompressionCodec", "org.apache.avro.mapreduce.AvroKeyValueOutputFormat.getSyncInterval", "org.apache.avro.mapreduce.AvroKeyValueRecordWriter.<init>", "java.io.OutputStream.close"], "call_func_parameter": [[""], ["org.apache.hadoop.conf.Configuration"], [""], ["java.lang.Class"], [""], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.mapreduce.TaskAttemptContext"], ["org.apache.hadoop.mapreduce.TaskAttemptContext"], ["org.apache.hadoop.mapreduce.TaskAttemptContext"], ["org.apache.avro.hadoop.io.AvroDatumConverter", "org.apache.avro.hadoop.io.AvroDatumConverter", "org.apache.avro.generic.GenericData", "org.apache.avro.file.CodecFactory", "java.io.OutputStream", "int"], [""]], "passed_comments": [{"org.apache.avro.hadoop.io.AvroDatumConverterFactory.create": "Creates a converter that turns objects of type <code>inputClass</code> into Avro data."}, {"org.apache.avro.hadoop.io.AvroSerialization.createDataModel": "Gets an instance of data model implementation, defaulting to {@link ReflectData} if not explicitly specified."}]}, {"index": "1353", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.AvroJob", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private AvroJob() {\n  }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Disable the constructor for this utility class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1354", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.setInputKeySchema", "methodParameterType": "Job#Schema#", "methodParameterName": "job#schema#", "methodBody": "public static void setInputKeySchema(Job job, Schema schema) {\n    job.getConfiguration().set(CONF_INPUT_KEY_SCHEMA, schema.toString());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the job input key schema.", "call_func_name": ["org.apache.hadoop.mapreduce.Job.getConfiguration", "org.apache.avro.Schema.toString", "org.apache.hadoop.conf.Configuration.set"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1355", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.setInputValueSchema", "methodParameterType": "Job#Schema#", "methodParameterName": "job#schema#", "methodBody": "public static void setInputValueSchema(Job job, Schema schema) {\n    job.getConfiguration().set(CONF_INPUT_VALUE_SCHEMA, schema.toString());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the job input value schema.", "call_func_name": ["org.apache.hadoop.mapreduce.Job.getConfiguration", "org.apache.avro.Schema.toString", "org.apache.hadoop.conf.Configuration.set"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1356", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.setMapOutputKeySchema", "methodParameterType": "Job#Schema#", "methodParameterName": "job#schema#", "methodBody": "public static void setMapOutputKeySchema(Job job, Schema schema) {\n    job.setMapOutputKeyClass(AvroKey.class);\n    job.setGroupingComparatorClass(AvroKeyComparator.class);\n    job.setSortComparatorClass(AvroKeyComparator.class);\n    AvroSerialization.setKeyWriterSchema(job.getConfiguration(), schema);\n    AvroSerialization.setKeyReaderSchema(job.getConfiguration(), schema);\n    AvroSerialization.addToConfiguration(job.getConfiguration());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the map output key schema.", "call_func_name": ["org.apache.hadoop.mapreduce.Job.setMapOutputKeyClass", "org.apache.hadoop.mapreduce.Job.setGroupingComparatorClass", "org.apache.hadoop.mapreduce.Job.setSortComparatorClass", "org.apache.hadoop.mapreduce.Job.getConfiguration", "org.apache.avro.hadoop.io.AvroSerialization.setKeyWriterSchema", "org.apache.avro.hadoop.io.AvroSerialization.setKeyReaderSchema", "org.apache.avro.hadoop.io.AvroSerialization.addToConfiguration"], "call_func_parameter": [["java.lang.Class"], ["java.lang.Class"], ["java.lang.Class"], [""], ["org.apache.hadoop.conf.Configuration", "org.apache.avro.Schema"], ["org.apache.hadoop.conf.Configuration", "org.apache.avro.Schema"], ["org.apache.hadoop.conf.Configuration"]], "passed_comments": [{"org.apache.avro.hadoop.io.AvroSerialization.setKeyWriterSchema": "Sets the writer schema of the AvroKey datum that is being serialized/deserialized."}, {"org.apache.avro.hadoop.io.AvroSerialization.setKeyReaderSchema": "Sets the reader schema of the AvroKey datum that is being serialized/deserialized."}, {"org.apache.avro.hadoop.io.AvroSerialization.addToConfiguration": "Adds the AvroSerialization scheme to the configuration, so SerializationFactory instances constructed from the given configuration will be aware of it."}]}, {"index": "1357", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.setMapOutputValueSchema", "methodParameterType": "Job#Schema#", "methodParameterName": "job#schema#", "methodBody": "public static void setMapOutputValueSchema(Job job, Schema schema) {\n    job.setMapOutputValueClass(AvroValue.class);\n    AvroSerialization.setValueWriterSchema(job.getConfiguration(), schema);\n    AvroSerialization.setValueReaderSchema(job.getConfiguration(), schema);\n    AvroSerialization.addToConfiguration(job.getConfiguration());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the map output value schema.", "call_func_name": ["org.apache.hadoop.mapreduce.Job.setMapOutputValueClass", "org.apache.hadoop.mapreduce.Job.getConfiguration", "org.apache.avro.hadoop.io.AvroSerialization.setValueWriterSchema", "org.apache.avro.hadoop.io.AvroSerialization.setValueReaderSchema", "org.apache.avro.hadoop.io.AvroSerialization.addToConfiguration"], "call_func_parameter": [["java.lang.Class"], [""], ["org.apache.hadoop.conf.Configuration", "org.apache.avro.Schema"], ["org.apache.hadoop.conf.Configuration", "org.apache.avro.Schema"], ["org.apache.hadoop.conf.Configuration"]], "passed_comments": [{"org.apache.avro.hadoop.io.AvroSerialization.setValueWriterSchema": "Sets the writer schema of the AvroValue datum that is being serialized/deserialized."}, {"org.apache.avro.hadoop.io.AvroSerialization.setValueReaderSchema": "Sets the reader schema of the AvroValue datum that is being serialized/deserialized."}, {"org.apache.avro.hadoop.io.AvroSerialization.addToConfiguration": "Adds the AvroSerialization scheme to the configuration, so SerializationFactory instances constructed from the given configuration will be aware of it."}]}, {"index": "1358", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.setOutputKeySchema", "methodParameterType": "Job#Schema#", "methodParameterName": "job#schema#", "methodBody": "public static void setOutputKeySchema(Job job, Schema schema) {\n    job.setOutputKeyClass(AvroKey.class);\n    job.getConfiguration().set(CONF_OUTPUT_KEY_SCHEMA, schema.toString());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the job output key schema.", "call_func_name": ["org.apache.hadoop.mapreduce.Job.setOutputKeyClass", "org.apache.hadoop.mapreduce.Job.getConfiguration", "org.apache.avro.Schema.toString", "org.apache.hadoop.conf.Configuration.set"], "call_func_parameter": [["java.lang.Class"], [""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1359", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.setOutputValueSchema", "methodParameterType": "Job#Schema#", "methodParameterName": "job#schema#", "methodBody": "public static void setOutputValueSchema(Job job, Schema schema) {\n    job.setOutputValueClass(AvroValue.class);\n    job.getConfiguration().set(CONF_OUTPUT_VALUE_SCHEMA, schema.toString());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the job output value schema.", "call_func_name": ["org.apache.hadoop.mapreduce.Job.setOutputValueClass", "org.apache.hadoop.mapreduce.Job.getConfiguration", "org.apache.avro.Schema.toString", "org.apache.hadoop.conf.Configuration.set"], "call_func_parameter": [["java.lang.Class"], [""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1360", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.setDataModelClass", "methodParameterType": "Job#Class<? extends GenericData>#", "methodParameterName": "job#modelClass#", "methodBody": "public static void setDataModelClass(Job job, Class<? extends GenericData> modelClass) {\n    AvroSerialization.setDataModelClass(job.getConfiguration(), modelClass);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the job data model class.", "call_func_name": ["org.apache.hadoop.mapreduce.Job.getConfiguration", "org.apache.avro.hadoop.io.AvroSerialization.setDataModelClass"], "call_func_parameter": [[""], ["org.apache.hadoop.conf.Configuration", "java.lang.Class"]], "passed_comments": [{"org.apache.avro.hadoop.io.AvroSerialization.setDataModelClass": "Sets the data model class for de/serialization."}]}, {"index": "1361", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.getInputKeySchema", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static Schema getInputKeySchema(Configuration conf) {\n    String schemaString = conf.get(CONF_INPUT_KEY_SCHEMA);\n    return schemaString != null ? new Schema.Parser().parse(schemaString) : null;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the job input key schema.", "call_func_name": ["org.apache.hadoop.conf.Configuration.get"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1362", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.getInputValueSchema", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static Schema getInputValueSchema(Configuration conf) {\n    String schemaString = conf.get(CONF_INPUT_VALUE_SCHEMA);\n    return schemaString != null ? new Schema.Parser().parse(schemaString) : null;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the job input value schema.", "call_func_name": ["org.apache.hadoop.conf.Configuration.get"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1363", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.getMapOutputKeySchema", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static Schema getMapOutputKeySchema(Configuration conf) {\n    return AvroSerialization.getKeyWriterSchema(conf);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the map output key schema.", "call_func_name": ["org.apache.avro.hadoop.io.AvroSerialization.getKeyWriterSchema"], "call_func_parameter": [["org.apache.hadoop.conf.Configuration"]], "passed_comments": [{"org.apache.avro.hadoop.io.AvroSerialization.getKeyWriterSchema": "Gets the writer schema of the AvroKey datum that is being serialized/deserialized."}]}, {"index": "1364", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.getMapOutputValueSchema", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static Schema getMapOutputValueSchema(Configuration conf) {\n    return AvroSerialization.getValueWriterSchema(conf);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the map output value schema.", "call_func_name": ["org.apache.avro.hadoop.io.AvroSerialization.getValueWriterSchema"], "call_func_parameter": [["org.apache.hadoop.conf.Configuration"]], "passed_comments": [{"org.apache.avro.hadoop.io.AvroSerialization.getValueWriterSchema": "Gets the writer schema of the AvroValue datum that is being serialized/deserialized."}]}, {"index": "1365", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.getOutputKeySchema", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static Schema getOutputKeySchema(Configuration conf) {\n    String schemaString = conf.get(CONF_OUTPUT_KEY_SCHEMA);\n    return schemaString != null ? new Schema.Parser().parse(schemaString) : null;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the job output key schema.", "call_func_name": ["org.apache.hadoop.conf.Configuration.get"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1366", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroJob.java", "methodName": "org.apache.avro.mapreduce.AvroJob.getOutputValueSchema", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static Schema getOutputValueSchema(Configuration conf) {\n    String schemaString = conf.get(CONF_OUTPUT_VALUE_SCHEMA);\n    return schemaString != null ? new Schema.Parser().parse(schemaString) : null;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the job output value schema.", "call_func_name": ["org.apache.hadoop.conf.Configuration.get"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1367", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.checkTokenName", "methodParameterType": "String#", "methodParameterName": "namedOutput#", "methodBody": "private static void checkTokenName(String namedOutput) {\n    if (namedOutput == null || namedOutput.length() == 0) {\n      throw new IllegalArgumentException(\"Name cannot be NULL or empty\");\n    }\n    for (char ch : namedOutput.toCharArray()) {\n      if ((ch >= 'A') && (ch <= 'Z')) {\n        continue;\n      }\n      if ((ch >= 'a') && (ch <= 'z')) {\n        continue;\n      }\n      if ((ch >= '0') && (ch <= '9')) {\n        continue;\n      }\n      throw new IllegalArgumentException(\"Name cannot have a '\" + ch + \"' char\");\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Checks if a named output name is valid token.", "call_func_name": ["java.lang.String.length", "java.lang.IllegalArgumentException.<init>", "java.lang.String.toCharArray", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["char"], [""]], "passed_comments": "/"}, {"index": "1368", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.checkBaseOutputPath", "methodParameterType": "String#", "methodParameterName": "outputPath#", "methodBody": "private static void checkBaseOutputPath(String outputPath) {\n    if (outputPath.equals(\"part\")) {\n      throw new IllegalArgumentException(\"output name cannot be 'part'\");\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Checks if output name is valid. name cannot be the name used for the default output", "call_func_name": ["java.lang.String.equals", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1369", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.checkNamedOutputName", "methodParameterType": "JobContext#String#boolean#", "methodParameterName": "job#namedOutput#alreadyDefined#", "methodBody": "private static void checkNamedOutputName(JobContext job, String namedOutput, boolean alreadyDefined) {\n    checkTokenName(namedOutput);\n    checkBaseOutputPath(namedOutput);\n    List<String> definedChannels = getNamedOutputsList(job);\n    if (alreadyDefined && definedChannels.contains(namedOutput)) {\n      throw new IllegalArgumentException(\"Named output '\" + namedOutput + \"' already alreadyDefined\");\n    } else if (!alreadyDefined && !definedChannels.contains(namedOutput)) {\n      throw new IllegalArgumentException(\"Named output '\" + namedOutput + \"' not defined\");\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Checks if a named output name is valid.", "call_func_name": ["org.apache.avro.mapreduce.AvroMultipleOutputs.checkTokenName", "org.apache.avro.mapreduce.AvroMultipleOutputs.checkBaseOutputPath", "org.apache.avro.mapreduce.AvroMultipleOutputs.getNamedOutputsList", "java.util.List.contains", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["org.apache.hadoop.mapreduce.JobContext"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroMultipleOutputs.checkTokenName": "Checks if a named output name is valid token."}, {"org.apache.avro.mapreduce.AvroMultipleOutputs.checkBaseOutputPath": "Checks if output name is valid. name cannot be the name used for the default output"}]}, {"index": "1370", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.addNamedOutput", "methodParameterType": "Job#String#Class<? extends OutputFormat>#Schema#", "methodParameterName": "job#namedOutput#outputFormatClass#keySchema#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public static void addNamedOutput(Job job, String namedOutput, Class<? extends OutputFormat> outputFormatClass,\n      Schema keySchema) {\n    addNamedOutput(job, namedOutput, outputFormatClass, keySchema, null);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a named output for the job. <p/>", "call_func_name": ["org.apache.avro.mapreduce.AvroMultipleOutputs.addNamedOutput"], "call_func_parameter": [["org.apache.hadoop.mapreduce.Job", "java.lang.String", "java.lang.Class", "org.apache.avro.Schema", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroMultipleOutputs.addNamedOutput": "Adds a named output for the job. <p/>"}]}, {"index": "1371", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.addNamedOutput", "methodParameterType": "Job#String#Class<? extends OutputFormat>#Schema#Schema#", "methodParameterName": "job#namedOutput#outputFormatClass#keySchema#valueSchema#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public static void addNamedOutput(Job job, String namedOutput, Class<? extends OutputFormat> outputFormatClass,\n      Schema keySchema, Schema valueSchema) {\n    checkNamedOutputName(job, namedOutput, true);\n    Configuration conf = job.getConfiguration();\n    conf.set(MULTIPLE_OUTPUTS, conf.get(MULTIPLE_OUTPUTS, \"\") + \" \" + namedOutput);\n    conf.setClass(MO_PREFIX + namedOutput + FORMAT, outputFormatClass, OutputFormat.class);\n    conf.set(MO_PREFIX + namedOutput + \".keyschema\", keySchema.toString());\n    if (valueSchema != null) {\n      conf.set(MO_PREFIX + namedOutput + \".valueschema\", valueSchema.toString());\n    }\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds a named output for the job. <p/>", "call_func_name": ["org.apache.avro.mapreduce.AvroMultipleOutputs.checkNamedOutputName", "org.apache.hadoop.mapreduce.Job.getConfiguration", "java.lang.StringBuilder.<init>", "org.apache.hadoop.conf.Configuration.get", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.hadoop.conf.Configuration.set", "org.apache.hadoop.conf.Configuration.setClass", "org.apache.avro.Schema.toString"], "call_func_parameter": [["org.apache.hadoop.mapreduce.JobContext", "java.lang.String", "boolean"], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Class", "java.lang.Class"], [""]], "passed_comments": [{"org.apache.avro.mapreduce.AvroMultipleOutputs.checkNamedOutputName": "Checks if a named output name is valid."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1372", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.setCountersEnabled", "methodParameterType": "Job#boolean#", "methodParameterName": "job#enabled#", "methodBody": "public static void setCountersEnabled(Job job, boolean enabled) {\n    job.getConfiguration().setBoolean(COUNTERS_ENABLED, enabled);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Enables or disables counters for the named outputs. The counters group is the  {@link AvroMultipleOutputs} class name. The namesof the counters are the same as the named outputs. These counters count the number records written to each output name. By default these counters are disabled.", "call_func_name": ["org.apache.hadoop.mapreduce.Job.getConfiguration", "org.apache.hadoop.conf.Configuration.setBoolean"], "call_func_parameter": [[""], ["java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "1373", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.getCountersEnabled", "methodParameterType": "JobContext#", "methodParameterName": "job#", "methodBody": "public static boolean getCountersEnabled(JobContext job) {\n    return job.getConfiguration().getBoolean(COUNTERS_ENABLED, false);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if the counters for the named outputs are enabled or not. By default these counters are disabled.", "call_func_name": ["org.apache.hadoop.mapreduce.JobContext.getConfiguration", "org.apache.hadoop.conf.Configuration.getBoolean"], "call_func_parameter": [[""], ["java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "1374", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.AvroMultipleOutputs", "methodParameterType": "TaskInputOutputContext<?,?,?,?>#", "methodParameterName": "context#", "methodBody": "public AvroMultipleOutputs(TaskInputOutputContext<?, ?, ?, ?> context) {\n    this.context = context;\n    namedOutputs = Collections.unmodifiableSet(new HashSet<>(AvroMultipleOutputs.getNamedOutputsList(context)));\n    recordWriters = new HashMap<>();\n    countersEnabled = getCountersEnabled(context);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#WildcardType#WildcardType#WildcardType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType(WildcardType)WildcardType(WildcardType)WildcardType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates and initializes multiple outputs support, it should be instantiated in the Mapper/Reducer setup method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1375", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.write", "methodParameterType": "String#Object#", "methodParameterName": "namedOutput#key#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public void write(String namedOutput, Object key) throws IOException, InterruptedException {\n    write(namedOutput, key, NullWritable.get(), namedOutput);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Write key and value to the namedOutput. Output path is a unique file generated for the namedOutput. For example, {namedOutput}-(m|r)-{part-number}", "call_func_name": ["org.apache.hadoop.io.NullWritable.get", "org.apache.avro.mapreduce.AvroMultipleOutputs.write"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object", "java.lang.Object", "java.lang.String"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroMultipleOutputs.write": "Write key and value to baseOutputPath using the namedOutput."}]}, {"index": "1376", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.write", "methodParameterType": "String#Object#Object#", "methodParameterName": "namedOutput#key#value#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public void write(String namedOutput, Object key, Object value) throws IOException, InterruptedException {\n    write(namedOutput, key, value, namedOutput);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Write key and value to the namedOutput. Output path is a unique file generated for the namedOutput. For example, {namedOutput}-(m|r)-{part-number}", "call_func_name": ["org.apache.avro.mapreduce.AvroMultipleOutputs.write"], "call_func_parameter": [["java.lang.String", "java.lang.Object", "java.lang.Object", "java.lang.String"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroMultipleOutputs.write": "Write key and value to baseOutputPath using the namedOutput."}]}, {"index": "1377", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.write", "methodParameterType": "String#Object#Object#String#", "methodParameterName": "namedOutput#key#value#baseOutputPath#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public void write(String namedOutput, Object key, Object value, String baseOutputPath)\n      throws IOException, InterruptedException {\n    checkNamedOutputName(context, namedOutput, false);\n    checkBaseOutputPath(baseOutputPath);\n    if (!namedOutputs.contains(namedOutput)) {\n      throw new IllegalArgumentException(\"Undefined named output '\" + namedOutput + \"'\");\n    }\n    TaskAttemptContext taskContext = getContext(namedOutput);\n    getRecordWriter(taskContext, baseOutputPath).write(key, value);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Write key and value to baseOutputPath using the namedOutput.", "call_func_name": ["org.apache.avro.mapreduce.AvroMultipleOutputs.checkNamedOutputName", "org.apache.avro.mapreduce.AvroMultipleOutputs.checkBaseOutputPath", "java.util.Set.contains", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.apache.avro.mapreduce.AvroMultipleOutputs.getContext", "org.apache.avro.mapreduce.AvroMultipleOutputs.getRecordWriter", "org.apache.hadoop.mapreduce.RecordWriter.write"], "call_func_parameter": [["org.apache.hadoop.mapreduce.JobContext", "java.lang.String", "boolean"], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["org.apache.hadoop.mapreduce.TaskAttemptContext", "java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroMultipleOutputs.checkNamedOutputName": "Checks if a named output name is valid."}, {"org.apache.avro.mapreduce.AvroMultipleOutputs.checkBaseOutputPath": "Checks if output name is valid. name cannot be the name used for the default output"}]}, {"index": "1378", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.write", "methodParameterType": "Object#Object#String#", "methodParameterName": "key#value#baseOutputPath#", "methodBody": "public void write(Object key, Object value, String baseOutputPath) throws IOException, InterruptedException {\n    write(key, value, null, null, baseOutputPath);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Write key value to an output file name. Gets the record writer from job's output format. Job's output format should be a FileOutputFormat.", "call_func_name": ["org.apache.avro.mapreduce.AvroMultipleOutputs.write"], "call_func_parameter": [["java.lang.Object", "java.lang.Object", "org.apache.avro.Schema", "org.apache.avro.Schema", "java.lang.String"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroMultipleOutputs.write": "Write key value to an output file name. Gets the record writer from job's output format. Job's output format should be a FileOutputFormat."}]}, {"index": "1379", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.write", "methodParameterType": "Object#Object#Schema#Schema#String#", "methodParameterName": "key#value#keySchema#valSchema#baseOutputPath#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public void write(Object key, Object value, Schema keySchema, Schema valSchema, String baseOutputPath)\n      throws IOException, InterruptedException {\n    checkBaseOutputPath(baseOutputPath);\n    Job job = Job.getInstance(context.getConfiguration());\n    setSchema(job, keySchema, valSchema);\n    TaskAttemptContext taskContext = createTaskAttemptContext(job.getConfiguration(), context.getTaskAttemptID());\n    getRecordWriter(taskContext, baseOutputPath).write(key, value);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Write key value to an output file name. Gets the record writer from job's output format. Job's output format should be a FileOutputFormat.", "call_func_name": ["org.apache.avro.mapreduce.AvroMultipleOutputs.checkBaseOutputPath", "org.apache.hadoop.mapreduce.TaskInputOutputContext.getConfiguration", "org.apache.hadoop.mapreduce.Job.getInstance", "org.apache.avro.mapreduce.AvroMultipleOutputs.setSchema", "org.apache.hadoop.mapreduce.Job.getConfiguration", "org.apache.hadoop.mapreduce.TaskInputOutputContext.getTaskAttemptID", "org.apache.avro.mapreduce.AvroMultipleOutputs.createTaskAttemptContext", "org.apache.avro.mapreduce.AvroMultipleOutputs.getRecordWriter", "org.apache.hadoop.mapreduce.RecordWriter.write"], "call_func_parameter": [["java.lang.String"], [""], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.mapreduce.Job", "org.apache.avro.Schema", "org.apache.avro.Schema"], [""], [""], ["org.apache.hadoop.conf.Configuration", "org.apache.hadoop.mapreduce.TaskAttemptID"], ["org.apache.hadoop.mapreduce.TaskAttemptContext", "java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroMultipleOutputs.checkBaseOutputPath": "Checks if output name is valid. name cannot be the name used for the default output"}]}, {"index": "1380", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.sync", "methodParameterType": "String#String#", "methodParameterName": "namedOutput#baseOutputPath#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public long sync(String namedOutput, String baseOutputPath) throws IOException, InterruptedException {\n    checkNamedOutputName(context, namedOutput, false);\n    checkBaseOutputPath(baseOutputPath);\n    if (!namedOutputs.contains(namedOutput)) {\n      throw new IllegalArgumentException(\"Undefined named output '\" + namedOutput + \"'\");\n    }\n    TaskAttemptContext taskContext = getContext(namedOutput);\n    RecordWriter recordWriter = getRecordWriter(taskContext, baseOutputPath);\n    long position = -1;\n    if (recordWriter instanceof Syncable) {\n      Syncable syncableWriter = (Syncable) recordWriter;\n      position = syncableWriter.sync();\n    }\n    return position;\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#PrefixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the record writer from job's output format. Job's output format should be a FileOutputFormat.If the record writer implements Syncable then returns the current position as a value that may be passed to DataFileReader.seek(long) otherwise returns -1. Forces the end of the current block, emitting a synchronization marker.", "call_func_name": ["org.apache.avro.mapreduce.AvroMultipleOutputs.checkNamedOutputName", "org.apache.avro.mapreduce.AvroMultipleOutputs.checkBaseOutputPath", "java.util.Set.contains", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.apache.avro.mapreduce.AvroMultipleOutputs.getContext", "org.apache.avro.mapreduce.AvroMultipleOutputs.getRecordWriter", "org.apache.avro.mapreduce.Syncable.sync"], "call_func_parameter": [["org.apache.hadoop.mapreduce.JobContext", "java.lang.String", "boolean"], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String"], ["org.apache.hadoop.mapreduce.TaskAttemptContext", "java.lang.String"], [""]], "passed_comments": [{"org.apache.avro.mapreduce.AvroMultipleOutputs.checkNamedOutputName": "Checks if a named output name is valid."}, {"org.apache.avro.mapreduce.AvroMultipleOutputs.checkBaseOutputPath": "Checks if output name is valid. name cannot be the name used for the default output"}, {"org.apache.avro.mapreduce.Syncable.sync": "Return the current position as a value that may be passed to DataFileReader.seek(long). Forces the end of the current block, emitting a synchronization marker."}]}, {"index": "1381", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapreduce.AvroMultipleOutputs.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public void close() throws IOException, InterruptedException {\n    for (RecordWriter writer : recordWriters.values()) {\n      writer.close(context);\n    }\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Closes all the opened outputs. This should be called from cleanup method of map/reduce task. If overridden subclasses must invoke <code>super.close()</code> at the end of their <code>close()</code>", "call_func_name": ["java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.hadoop.mapreduce.RecordWriter.close"], "call_func_parameter": [[""], [""], [""], [""], ["org.apache.hadoop.mapreduce.TaskAttemptContext"]], "passed_comments": "/"}, {"index": "1382", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyInputFormat.java", "methodName": "org.apache.avro.mapreduce.AvroKeyInputFormat.createRecordReader", "methodParameterType": "InputSplit#TaskAttemptContext#", "methodParameterName": "split#context#", "methodBody": "@Override\n  public RecordReader<AvroKey<T>, NullWritable> createRecordReader(InputSplit split, TaskAttemptContext context)\n      throws IOException, InterruptedException {\n    Schema readerSchema = AvroJob.getInputKeySchema(context.getConfiguration());\n    if (null == readerSchema) {\n      LOG.warn(\"Reader schema was not set. Use AvroJob.setInputKeySchema() if desired.\");\n      LOG.info(\"Using a reader schema equal to the writer schema.\");\n    }\n    return new AvroKeyRecordReader<>(readerSchema);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.hadoop.mapreduce.TaskAttemptContext.getConfiguration", "org.apache.avro.mapreduce.AvroJob.getInputKeySchema", "org.slf4j.Logger.warn", "org.slf4j.Logger.info", "org.apache.avro.mapreduce.AvroKeyRecordReader.<init>"], "call_func_parameter": [[""], ["org.apache.hadoop.conf.Configuration"], ["java.lang.String"], ["java.lang.String"], ["org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroJob.getInputKeySchema": "Gets the job input key schema."}]}, {"index": "1383", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroSequenceFileInputFormat.java", "methodName": "org.apache.avro.mapreduce.AvroSequenceFileInputFormat.createRecordReader", "methodParameterType": "InputSplit#TaskAttemptContext#", "methodParameterName": "inputSplit#context#", "methodBody": "@Override\n  public RecordReader<K, V> createRecordReader(InputSplit inputSplit, TaskAttemptContext context) throws IOException {\n    return new AvroSequenceFileRecordReader();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1384", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyRecordReader.java", "methodName": "org.apache.avro.mapreduce.AvroKeyRecordReader.AvroKeyRecordReader", "methodParameterType": "Schema#", "methodParameterName": "readerSchema#", "methodBody": "public AvroKeyRecordReader(Schema readerSchema) {\n    super(readerSchema);\n    mCurrentRecord = new AvroKey<>(null);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#SimpleName#SimpleName#SimpleType#ParameterizedType#NullLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NullLiteral)NullLiteral)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1385", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyRecordReader.java", "methodName": "org.apache.avro.mapreduce.AvroKeyRecordReader.nextKeyValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public boolean nextKeyValue() throws IOException, InterruptedException {\n    boolean hasNext = super.nextKeyValue();\n    mCurrentRecord.datum(getCurrentRecord());\n    return hasNext;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.mapreduce.AvroRecordReaderBase.nextKeyValue", "org.apache.avro.mapreduce.AvroKeyRecordReader.getCurrentRecord", "org.apache.avro.mapred.AvroKey.datum"], "call_func_parameter": [[""], [""], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroRecordReaderBase.nextKeyValue": "{@inheritDoc}"}]}, {"index": "1386", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyRecordReader.java", "methodName": "org.apache.avro.mapreduce.AvroKeyRecordReader.getCurrentKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public AvroKey<T> getCurrentKey() throws IOException, InterruptedException {\n    return mCurrentRecord;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.mapreduce.AvroKeyRecordReader.getCurrentKey"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.mapreduce.AvroKeyRecordReader.getCurrentKey": "{@inheritDoc}"}]}, {"index": "1387", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyRecordReader.java", "methodName": "org.apache.avro.mapreduce.AvroKeyRecordReader.getCurrentValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public NullWritable getCurrentValue() throws IOException, InterruptedException {\n    return NullWritable.get();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.hadoop.io.NullWritable.get", "org.apache.avro.mapreduce.AvroKeyRecordReader.getCurrentValue"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.apache.avro.mapreduce.AvroKeyRecordReader.getCurrentValue": "{@inheritDoc}"}]}, {"index": "1388", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyValueRecordReader.java", "methodName": "org.apache.avro.mapreduce.AvroKeyValueRecordReader.AvroKeyValueRecordReader", "methodParameterType": "Schema#Schema#", "methodParameterName": "keyReaderSchema#valueReaderSchema#", "methodBody": "public AvroKeyValueRecordReader(Schema keyReaderSchema, Schema valueReaderSchema) {\n    super(AvroKeyValue.getSchema(keyReaderSchema, valueReaderSchema));\n    mCurrentKey = new AvroKey<>(null);\n    mCurrentValue = new AvroValue<>(null);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#SimpleName#SimpleName#SimpleType#ParameterizedType#NullLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#NullLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NullLiteral)NullLiteral)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NullLiteral)NullLiteral)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1389", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyValueRecordReader.java", "methodName": "org.apache.avro.mapreduce.AvroKeyValueRecordReader.nextKeyValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public boolean nextKeyValue() throws IOException, InterruptedException {\n    boolean hasNext = super.nextKeyValue();\n    if (hasNext) {\n      AvroKeyValue<K, V> avroKeyValue = new AvroKeyValue<>(getCurrentRecord());\n      mCurrentKey.datum(avroKeyValue.getKey());\n      mCurrentValue.datum(avroKeyValue.getValue());\n    } else {\n      mCurrentKey.datum(null);\n      mCurrentValue.datum(null);\n    }\n    return hasNext;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.mapreduce.AvroRecordReaderBase.nextKeyValue", "org.apache.avro.mapreduce.AvroKeyValueRecordReader.getCurrentRecord", "org.apache.avro.hadoop.io.AvroKeyValue.<init>", "org.apache.avro.hadoop.io.AvroKeyValue.getKey", "org.apache.avro.mapred.AvroKey.datum", "org.apache.avro.hadoop.io.AvroKeyValue.getValue", "org.apache.avro.mapred.AvroValue.datum"], "call_func_parameter": [[""], [""], ["org.apache.avro.generic.GenericRecord"], [""], ["java.lang.Object"], [""], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroRecordReaderBase.nextKeyValue": "{@inheritDoc}"}, {"org.apache.avro.hadoop.io.AvroKeyValue.getKey": "Read the key."}, {"org.apache.avro.hadoop.io.AvroKeyValue.getValue": "Read the value."}]}, {"index": "1390", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyValueRecordReader.java", "methodName": "org.apache.avro.mapreduce.AvroKeyValueRecordReader.getCurrentKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public AvroKey<K> getCurrentKey() throws IOException, InterruptedException {\n    return mCurrentKey;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.mapreduce.AvroKeyValueRecordReader.getCurrentKey"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.mapreduce.AvroKeyValueRecordReader.getCurrentKey": "{@inheritDoc}"}]}, {"index": "1391", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyValueRecordReader.java", "methodName": "org.apache.avro.mapreduce.AvroKeyValueRecordReader.getCurrentValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public AvroValue<V> getCurrentValue() throws IOException, InterruptedException {\n    return mCurrentValue;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.mapreduce.AvroKeyValueRecordReader.getCurrentValue"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.avro.mapreduce.AvroKeyValueRecordReader.getCurrentValue": "{@inheritDoc}"}]}, {"index": "1392", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/Syncable.java", "methodName": "org.apache.avro.mapreduce.Syncable.sync", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long sync() throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Return the current position as a value that may be passed to DataFileReader.seek(long). Forces the end of the current block, emitting a synchronization marker.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1393", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyOutputFormat.java", "methodName": "org.apache.avro.mapreduce.AvroKeyOutputFormat.AvroKeyOutputFormat", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AvroKeyOutputFormat() {\n    this(new RecordWriterFactory());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1394", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyOutputFormat.java", "methodName": "org.apache.avro.mapreduce.AvroKeyOutputFormat.AvroKeyOutputFormat", "methodParameterType": "RecordWriterFactory#", "methodParameterName": "recordWriterFactory#", "methodBody": "protected AvroKeyOutputFormat(RecordWriterFactory recordWriterFactory) {\n    mRecordWriterFactory = recordWriterFactory;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1395", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapreduce/AvroKeyOutputFormat.java", "methodName": "org.apache.avro.mapreduce.AvroKeyOutputFormat.getRecordWriter", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "@Override\n  @SuppressWarnings(\"unchecked\")\n  public RecordWriter<AvroKey<T>, NullWritable> getRecordWriter(TaskAttemptContext context) throws IOException {\n    Configuration conf = context.getConfiguration();\n    // Get the writer schema.\n    Schema writerSchema = AvroJob.getOutputKeySchema(conf);\n    boolean isMapOnly = context.getNumReduceTasks() == 0;\n    if (isMapOnly) {\n      Schema mapOutputSchema = AvroJob.getMapOutputKeySchema(conf);\n      if (mapOutputSchema != null) {\n        writerSchema = mapOutputSchema;\n      }\n    }\n    if (null == writerSchema) {\n      throw new IOException(\"AvroKeyOutputFormat requires an output schema. Use AvroJob.setOutputKeySchema().\");\n    }\n\n    GenericData dataModel = AvroSerialization.createDataModel(conf);\n\n    OutputStream out = getAvroFileOutputStream(context);\n    try {\n      return mRecordWriterFactory.create(writerSchema, dataModel, getCompressionCodec(context), out,\n          getSyncInterval(context));\n    } catch (IOException e) {\n      out.close();\n      throw e;\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.hadoop.mapreduce.TaskAttemptContext.getConfiguration", "org.apache.avro.mapreduce.AvroJob.getOutputKeySchema", "org.apache.hadoop.mapreduce.TaskAttemptContext.getNumReduceTasks", "org.apache.avro.mapreduce.AvroJob.getMapOutputKeySchema", "java.io.IOException.<init>", "org.apache.avro.hadoop.io.AvroSerialization.createDataModel", "org.apache.avro.mapreduce.AvroKeyOutputFormat.getAvroFileOutputStream", "org.apache.avro.mapreduce.AvroKeyOutputFormat.getCompressionCodec", "org.apache.avro.mapreduce.AvroKeyOutputFormat.getSyncInterval", "java.io.OutputStream.close"], "call_func_parameter": [[""], ["org.apache.hadoop.conf.Configuration"], [""], ["org.apache.hadoop.conf.Configuration"], ["java.lang.String"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.mapreduce.TaskAttemptContext"], ["org.apache.hadoop.mapreduce.TaskAttemptContext"], ["org.apache.hadoop.mapreduce.TaskAttemptContext"], [""]], "passed_comments": [{"org.apache.avro.mapreduce.AvroJob.getOutputKeySchema": "Gets the job output key schema."}, {"org.apache.avro.mapreduce.AvroJob.getMapOutputKeySchema": "Gets the map output key schema."}, {"org.apache.avro.hadoop.io.AvroSerialization.createDataModel": "Gets an instance of data model implementation, defaulting to {@link ReflectData} if not explicitly specified."}]}, {"index": "1396", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroKey.java", "methodName": "org.apache.avro.mapred.AvroKey.AvroKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AvroKey() {\n    this(null);\n  }", "AST": "Javadoc#Modifier#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Wrap null. Construct  {@link AvroKey} wrapping no key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1397", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroKey.java", "methodName": "org.apache.avro.mapred.AvroKey.AvroKey", "methodParameterType": "T#", "methodParameterName": "datum#", "methodBody": "public AvroKey(T datum) {\n    super(datum);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Wrap a key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1398", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleInputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleInputs.addInputPath", "methodParameterType": "JobConf#Path#Schema#", "methodParameterName": "conf#path#inputSchema#", "methodBody": "private static void addInputPath(JobConf conf, Path path, Schema inputSchema) {\n\n    String schemaMapping = path.toString() + \";\" + toBase64(inputSchema.toString());\n\n    String schemas = conf.get(SCHEMA_KEY);\n    conf.set(SCHEMA_KEY, schemas == null ? schemaMapping : schemas + \",\" + schemaMapping);\n\n    conf.setInputFormat(DelegatingInputFormat.class);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ConditionalExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a  {@link Path} with a custom {@link Schema} to the list of inputs for themap-reduce job.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.apache.hadoop.fs.Path.toString", "java.lang.StringBuilder.append", "org.apache.avro.Schema.toString", "org.apache.avro.mapred.AvroMultipleInputs.toBase64", "java.lang.StringBuilder.toString", "org.apache.hadoop.mapred.JobConf.get", "org.apache.hadoop.mapred.JobConf.set", "org.apache.hadoop.mapred.JobConf.setInputFormat"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.Class"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1399", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleInputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleInputs.addInputPath", "methodParameterType": "JobConf#Path#Class<? extends AvroMapper>#Schema#", "methodParameterName": "conf#path#mapperClass#inputSchema#", "methodBody": "public static void addInputPath(JobConf conf, Path path, Class<? extends AvroMapper> mapperClass,\n      Schema inputSchema) {\n\n    addInputPath(conf, path, inputSchema);\n\n    String mapperMapping = path.toString() + \";\" + mapperClass.getName();\n    System.out.println(mapperMapping);\n    String mappers = conf.get(MAPPERS_KEY);\n    conf.set(MAPPERS_KEY, mappers == null ? mapperMapping : mappers + \",\" + mapperMapping);\n\n    conf.setMapperClass(DelegatingMapper.class);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#ConditionalExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ConditionalExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a  {@link Path} with a custom {@link Schema} and {@link AvroMapper} to thelist of inputs for the map-reduce job.", "call_func_name": ["org.apache.avro.mapred.AvroMultipleInputs.addInputPath", "java.lang.StringBuilder.<init>", "org.apache.hadoop.fs.Path.toString", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.toString", "java.io.PrintStream.println", "org.apache.hadoop.mapred.JobConf.get", "org.apache.hadoop.mapred.JobConf.set", "org.apache.hadoop.mapred.JobConf.setMapperClass"], "call_func_parameter": [["org.apache.hadoop.mapred.JobConf", "org.apache.hadoop.fs.Path", "org.apache.avro.Schema"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.Class"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleInputs.addInputPath": "Add a  {@link Path} with a custom {@link Schema} to the list of inputs for themap-reduce job."}]}, {"index": "1400", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleInputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleInputs.getMapperTypeMap", "methodParameterType": "JobConf#", "methodParameterName": "conf#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  static Map<Path, Class<? extends AvroMapper>> getMapperTypeMap(JobConf conf) {\n    if (conf.get(MAPPERS_KEY) == null) {\n      return Collections.emptyMap();\n    }\n    Map<Path, Class<? extends AvroMapper>> m = new HashMap<>();\n    String[] pathMappings = conf.get(MAPPERS_KEY).split(\",\");\n    for (String pathMapping : pathMappings) {\n      String[] split = pathMapping.split(\";\");\n      Class<? extends AvroMapper> mapClass;\n      try {\n        mapClass = (Class<? extends AvroMapper>) conf.getClassByName(split[1]);\n      } catch (ClassNotFoundException e) {\n        throw new RuntimeException(e);\n      }\n      m.put(new Path(split[0]), mapClass);\n    }\n    return m;\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#ArrayAccess#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves a map of  {@link Path}s to the  {@link AvroMapper} class that shouldbe used for them.", "call_func_name": ["org.apache.hadoop.mapred.JobConf.get", "java.util.Collections.emptyMap", "java.util.HashMap.<init>", "java.lang.String.split", "org.apache.hadoop.mapred.JobConf.getClassByName", "java.lang.RuntimeException.<init>", "org.apache.hadoop.fs.Path.<init>", "java.util.Map.put"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Throwable"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1401", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleInputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleInputs.getInputSchemaMap", "methodParameterType": "JobConf#", "methodParameterName": "conf#", "methodBody": "static Map<Path, Schema> getInputSchemaMap(JobConf conf) {\n    if (conf.get(SCHEMA_KEY) == null) {\n      return Collections.emptyMap();\n    }\n    Map<Path, Schema> m = new HashMap<>();\n    String[] schemaMappings = conf.get(SCHEMA_KEY).split(\",\");\n    Schema.Parser schemaParser = new Schema.Parser();\n    for (String schemaMapping : schemaMappings) {\n      String[] split = schemaMapping.split(\";\");\n      String schemaString = fromBase64(split[1]);\n      Schema inputSchema;\n      try {\n        inputSchema = schemaParser.parse(schemaString);\n      } catch (SchemaParseException e) {\n        throw new RuntimeException(e);\n      }\n      m.put(new Path(split[0]), inputSchema);\n    }\n    return m;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#ArrayAccess#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves a map of  {@link Path}s to the  {@link Schema} that should be usedfor them.", "call_func_name": ["org.apache.hadoop.mapred.JobConf.get", "java.util.Collections.emptyMap", "java.util.HashMap.<init>", "java.lang.String.split", "org.apache.avro.mapred.AvroMultipleInputs.fromBase64", "java.lang.RuntimeException.<init>", "org.apache.hadoop.fs.Path.<init>", "java.util.Map.put"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Throwable"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1402", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/FsInput.java", "methodName": "org.apache.avro.mapred.FsInput.FsInput", "methodParameterType": "Path#Configuration#", "methodParameterName": "path#conf#", "methodBody": "public FsInput(Path path, Configuration conf) throws IOException {\n    this(path, path.getFileSystem(conf));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct given a path and a configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1403", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/FsInput.java", "methodName": "org.apache.avro.mapred.FsInput.FsInput", "methodParameterType": "Path#FileSystem#", "methodParameterName": "path#fileSystem#", "methodBody": "public FsInput(Path path, FileSystem fileSystem) throws IOException {\n    this.len = fileSystem.getFileStatus(path).getLen();\n    this.stream = fileSystem.open(path);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct given a path and a  {@code FileSystem}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1404", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroReducer.java", "methodName": "org.apache.avro.mapred.AvroReducer.reduce", "methodParameterType": "K#Iterable<V>#AvroCollector<OUT>#Reporter#", "methodParameterName": "key#values#collector#reporter#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public void reduce(K key, Iterable<V> values, AvroCollector<OUT> collector, Reporter reporter) throws IOException {\n    if (outputPair == null)\n      outputPair = new Pair<>(AvroJob.getOutputSchema(getConf()));\n    for (V value : values) {\n      outputPair.set(key, value);\n      collector.collect((OUT) outputPair);\n    }\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Called with all map output values with a given key. By default, pairs key with each value, collecting  {@link Pair} instances.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1405", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroReducer.java", "methodName": "org.apache.avro.mapred.AvroReducer.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void close() throws IOException {\n    // no op\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "Subclasses can override this as desired.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1406", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroReducer.java", "methodName": "org.apache.avro.mapred.AvroReducer.configure", "methodParameterType": "JobConf#", "methodParameterName": "jobConf#", "methodBody": "@Override\n  public void configure(JobConf jobConf) {\n    // no op\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Subclasses can override this as desired.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1407", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroValue.java", "methodName": "org.apache.avro.mapred.AvroValue.AvroValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AvroValue() {\n    this(null);\n  }", "AST": "Javadoc#Modifier#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Wrap null. Construct  {@link AvroValue} wrapping no value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1408", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroValue.java", "methodName": "org.apache.avro.mapred.AvroValue.AvroValue", "methodParameterType": "T#", "methodParameterName": "datum#", "methodBody": "public AvroValue(T datum) {\n    super(datum);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Wrap a value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1409", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroWrapper.java", "methodName": "org.apache.avro.mapred.AvroWrapper.AvroWrapper", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AvroWrapper() {\n    this(null);\n  }", "AST": "Javadoc#Modifier#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Wrap null. Construct  {@link AvroWrapper} wrapping no datum.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1410", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroWrapper.java", "methodName": "org.apache.avro.mapred.AvroWrapper.AvroWrapper", "methodParameterType": "T#", "methodParameterName": "datum#", "methodBody": "public AvroWrapper(T datum) {\n    this.datum = datum;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Wrap a datum.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1411", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroWrapper.java", "methodName": "org.apache.avro.mapred.AvroWrapper.datum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public T datum() {\n    return datum;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the wrapped datum.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1412", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroWrapper.java", "methodName": "org.apache.avro.mapred.AvroWrapper.datum", "methodParameterType": "T#", "methodParameterName": "datum#", "methodBody": "public void datum(T datum) {\n    this.datum = datum;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the wrapped datum.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1413", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroWrapper.java", "methodName": "org.apache.avro.mapred.AvroWrapper.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public String toString() {\n    return datum.toString();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the wrapped datum as JSON.", "call_func_name": ["java.lang.Object.toString"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1414", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setInputSchema", "methodParameterType": "JobConf#Schema#", "methodParameterName": "job#s#", "methodBody": "public static void setInputSchema(JobConf job, Schema s) {\n    job.set(INPUT_SCHEMA, s.toString());\n    configureAvroInput(job);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configure a job's map input schema.", "call_func_name": ["org.apache.avro.Schema.toString", "org.apache.hadoop.mapred.JobConf.set", "org.apache.avro.mapred.AvroJob.configureAvroInput"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["org.apache.hadoop.mapred.JobConf"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1415", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.getInputSchema", "methodParameterType": "Configuration#", "methodParameterName": "job#", "methodBody": "public static Schema getInputSchema(Configuration job) {\n    String schemaString = job.get(INPUT_SCHEMA);\n    return schemaString != null ? new Schema.Parser().parse(schemaString) : null;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a job's map input schema.", "call_func_name": ["org.apache.hadoop.conf.Configuration.get"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1416", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setMapOutputSchema", "methodParameterType": "JobConf#Schema#", "methodParameterName": "job#s#", "methodBody": "public static void setMapOutputSchema(JobConf job, Schema s) {\n    job.set(MAP_OUTPUT_SCHEMA, s.toString());\n    configureAvroShuffle(job);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configure a job's map output schema. The map output schema defaults to the output schema and need only be specified when it differs. Thus must be a {@link Pair} schema.", "call_func_name": ["org.apache.avro.Schema.toString", "org.apache.hadoop.mapred.JobConf.set", "org.apache.avro.mapred.AvroJob.configureAvroShuffle"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["org.apache.hadoop.mapred.JobConf"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1417", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.getMapOutputSchema", "methodParameterType": "Configuration#", "methodParameterName": "job#", "methodBody": "public static Schema getMapOutputSchema(Configuration job) {\n    return new Schema.Parser().parse(job.get(MAP_OUTPUT_SCHEMA, job.get(OUTPUT_SCHEMA)));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a job's map output key schema.", "call_func_name": ["org.apache.hadoop.conf.Configuration.get", "org.apache.hadoop.conf.Configuration.get"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1418", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setOutputSchema", "methodParameterType": "JobConf#Schema#", "methodParameterName": "job#s#", "methodBody": "public static void setOutputSchema(JobConf job, Schema s) {\n    job.set(OUTPUT_SCHEMA, s.toString());\n    configureAvroOutput(job);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configure a job's output schema. Unless this is a map-only job, this must be a  {@link Pair} schema.", "call_func_name": ["org.apache.avro.Schema.toString", "org.apache.hadoop.mapred.JobConf.set", "org.apache.avro.mapred.AvroJob.configureAvroOutput"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["org.apache.hadoop.mapred.JobConf"]], "passed_comments": [{"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1419", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setOutputCodec", "methodParameterType": "JobConf#String#", "methodParameterName": "job#codec#", "methodBody": "public static void setOutputCodec(JobConf job, String codec) {\n    job.set(OUTPUT_CODEC, codec);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configure a job's output compression codec.", "call_func_name": ["org.apache.hadoop.mapred.JobConf.set"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1420", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setOutputMeta", "methodParameterType": "JobConf#String#String#", "methodParameterName": "job#key#value#", "methodBody": "public static void setOutputMeta(JobConf job, String key, String value) {\n    job.set(TEXT_PREFIX + key, value);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add metadata to job output files.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.hadoop.mapred.JobConf.set"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1421", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setOutputMeta", "methodParameterType": "JobConf#String#long#", "methodParameterName": "job#key#value#", "methodBody": "public static void setOutputMeta(JobConf job, String key, long value) {\n    job.set(TEXT_PREFIX + key, Long.toString(value));\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add metadata to job output files.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.Long.toString", "org.apache.hadoop.mapred.JobConf.set"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["long"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1422", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setOutputMeta", "methodParameterType": "JobConf#String#byte[]#", "methodParameterName": "job#key#value#", "methodBody": "public static void setOutputMeta(JobConf job, String key, byte[] value) {\n    try {\n      job.set(BINARY_PREFIX + key,\n          URLEncoder.encode(new String(value, StandardCharsets.ISO_8859_1), StandardCharsets.ISO_8859_1.name()));\n    } catch (UnsupportedEncodingException e) {\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Add metadata to job output files.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.<init>", "java.nio.charset.Charset.name", "java.net.URLEncoder.encode", "org.apache.hadoop.mapred.JobConf.set"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["byte[]", "java.nio.charset.Charset"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1423", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setInputSequenceFile", "methodParameterType": "JobConf#", "methodParameterName": "job#", "methodBody": "public static void setInputSequenceFile(JobConf job) {\n    job.setInputFormat(SequenceFileInputFormat.class);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Indicate that a job's input files are in SequenceFile format.", "call_func_name": ["org.apache.hadoop.mapred.JobConf.setInputFormat"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": "/"}, {"index": "1424", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setReflect", "methodParameterType": "JobConf#", "methodParameterName": "job#", "methodBody": "public static void setReflect(JobConf job) {\n    setInputReflect(job);\n    setMapOutputReflect(job);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Indicate that all a job's data should use the reflect representation.", "call_func_name": ["org.apache.avro.mapred.AvroJob.setInputReflect", "org.apache.avro.mapred.AvroJob.setMapOutputReflect"], "call_func_parameter": [["org.apache.hadoop.mapred.JobConf"], ["org.apache.hadoop.mapred.JobConf"]], "passed_comments": [{"org.apache.avro.mapred.AvroJob.setInputReflect": "Indicate that a job's input data should use reflect representation."}, {"org.apache.avro.mapred.AvroJob.setMapOutputReflect": "Indicate that a job's map output data should use reflect representation."}]}, {"index": "1425", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setInputReflect", "methodParameterType": "JobConf#", "methodParameterName": "job#", "methodBody": "public static void setInputReflect(JobConf job) {\n    job.setBoolean(INPUT_IS_REFLECT, true);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Indicate that a job's input data should use reflect representation.", "call_func_name": ["org.apache.hadoop.mapred.JobConf.setBoolean"], "call_func_parameter": [["java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "1426", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setMapOutputReflect", "methodParameterType": "JobConf#", "methodParameterName": "job#", "methodBody": "public static void setMapOutputReflect(JobConf job) {\n    job.setBoolean(MAP_OUTPUT_IS_REFLECT, true);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Indicate that a job's map output data should use reflect representation.", "call_func_name": ["org.apache.hadoop.mapred.JobConf.setBoolean"], "call_func_parameter": [["java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "1427", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.getOutputSchema", "methodParameterType": "Configuration#", "methodParameterName": "job#", "methodBody": "public static Schema getOutputSchema(Configuration job) {\n    return new Schema.Parser().parse(job.get(OUTPUT_SCHEMA));\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a job's output key schema.", "call_func_name": ["org.apache.hadoop.conf.Configuration.get"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "1428", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setMapperClass", "methodParameterType": "JobConf#Class<? extends AvroMapper>#", "methodParameterName": "job#c#", "methodBody": "public static void setMapperClass(JobConf job, Class<? extends AvroMapper> c) {\n    job.set(MAPPER, c.getName());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configure a job's mapper implementation.", "call_func_name": ["java.lang.Class.getName", "org.apache.hadoop.mapred.JobConf.set"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1429", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setCombinerClass", "methodParameterType": "JobConf#Class<? extends AvroReducer>#", "methodParameterName": "job#c#", "methodBody": "public static void setCombinerClass(JobConf job, Class<? extends AvroReducer> c) {\n    job.set(COMBINER, c.getName());\n    job.setCombinerClass(HadoopCombiner.class);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configure a job's combiner implementation.", "call_func_name": ["java.lang.Class.getName", "org.apache.hadoop.mapred.JobConf.set", "org.apache.hadoop.mapred.JobConf.setCombinerClass"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "1430", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setReducerClass", "methodParameterType": "JobConf#Class<? extends AvroReducer>#", "methodParameterName": "job#c#", "methodBody": "public static void setReducerClass(JobConf job, Class<? extends AvroReducer> c) {\n    job.set(REDUCER, c.getName());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configure a job's reducer implementation.", "call_func_name": ["java.lang.Class.getName", "org.apache.hadoop.mapred.JobConf.set"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1431", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.setDataModelClass", "methodParameterType": "JobConf#Class<? extends GenericData>#", "methodParameterName": "job#modelClass#", "methodBody": "public static void setDataModelClass(JobConf job, Class<? extends GenericData> modelClass) {\n    job.setClass(CONF_DATA_MODEL, modelClass, GenericData.class);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configure a job's data model implementation class.", "call_func_name": ["org.apache.hadoop.mapred.JobConf.setClass"], "call_func_parameter": [["java.lang.String", "java.lang.Class", "java.lang.Class"]], "passed_comments": "/"}, {"index": "1432", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroJob.java", "methodName": "org.apache.avro.mapred.AvroJob.getDataModelClass", "methodParameterType": "Configuration#", "methodParameterName": "conf#", "methodBody": "public static Class<? extends GenericData> getDataModelClass(Configuration conf) {\n    return conf.getClass(CONF_DATA_MODEL, ReflectData.class, GenericData.class);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the job's data model implementation class.", "call_func_name": ["org.apache.hadoop.conf.Configuration.getClass"], "call_func_parameter": [["java.lang.String", "java.lang.Class", "java.lang.Class"]], "passed_comments": "/"}, {"index": "1433", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.checkNamedOutput", "methodParameterType": "JobConf#String#boolean#", "methodParameterName": "conf#namedOutput#alreadyDefined#", "methodBody": "private static void checkNamedOutput(JobConf conf, String namedOutput, boolean alreadyDefined) {\n    List<String> definedChannels = getNamedOutputsList(conf);\n    if (alreadyDefined && definedChannels.contains(namedOutput)) {\n      throw new IllegalArgumentException(\"Named output '\" + namedOutput + \"' already alreadyDefined\");\n    } else if (!alreadyDefined && !definedChannels.contains(namedOutput)) {\n      throw new IllegalArgumentException(\"Named output '\" + namedOutput + \"' not defined\");\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Checks if a named output is alreadyDefined or not.", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.getNamedOutputsList", "java.util.List.contains", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["org.apache.hadoop.mapred.JobConf"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleOutputs.getNamedOutputsList": "Returns list of channel names."}]}, {"index": "1434", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.checkTokenName", "methodParameterType": "String#", "methodParameterName": "namedOutput#", "methodBody": "private static void checkTokenName(String namedOutput) {\n    if (namedOutput == null || namedOutput.length() == 0) {\n      throw new IllegalArgumentException(\"Name cannot be NULL or empty\");\n    }\n    for (char ch : namedOutput.toCharArray()) {\n      if ((ch >= 'A') && (ch <= 'Z')) {\n        continue;\n      }\n      if ((ch >= 'a') && (ch <= 'z')) {\n        continue;\n      }\n      if ((ch >= '0') && (ch <= '9')) {\n        continue;\n      }\n      throw new IllegalArgumentException(\"Name cannot have a '\" + ch + \"' char\");\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#SimpleName#CharacterLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)InfixExpression)ParenthesizedExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Checks if a named output name is valid token.", "call_func_name": ["java.lang.String.length", "java.lang.IllegalArgumentException.<init>", "java.lang.String.toCharArray", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["char"], [""]], "passed_comments": "/"}, {"index": "1435", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.checkNamedOutputName", "methodParameterType": "String#", "methodParameterName": "namedOutput#", "methodBody": "private static void checkNamedOutputName(String namedOutput) {\n    checkTokenName(namedOutput);\n    // name cannot be the name used for the default output\n    if (namedOutput.equals(\"part\")) {\n      throw new IllegalArgumentException(\"Named output name cannot be 'part'\");\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Checks if a named output name is valid.", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.checkTokenName", "java.lang.String.equals", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object"], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleOutputs.checkTokenName": "Checks if a named output name is valid token."}]}, {"index": "1436", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.getNamedOutputsList", "methodParameterType": "JobConf#", "methodParameterName": "conf#", "methodBody": "public static List<String> getNamedOutputsList(JobConf conf) {\n    List<String> names = new ArrayList<>();\n    StringTokenizer st = new StringTokenizer(conf.get(NAMED_OUTPUTS, \"\"), \" \");\n    while (st.hasMoreTokens()) {\n      names.add(st.nextToken());\n    }\n    return names;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns list of channel names.", "call_func_name": ["java.util.ArrayList.<init>", "org.apache.hadoop.mapred.JobConf.get", "java.util.StringTokenizer.<init>", "java.util.StringTokenizer.hasMoreTokens", "java.util.StringTokenizer.nextToken", "java.util.List.add"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1437", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.isMultiNamedOutput", "methodParameterType": "JobConf#String#", "methodParameterName": "conf#namedOutput#", "methodBody": "public static boolean isMultiNamedOutput(JobConf conf, String namedOutput) {\n    checkNamedOutput(conf, namedOutput, false);\n    return conf.getBoolean(MO_PREFIX + namedOutput + MULTI, false);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if a named output is multiple.", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.checkNamedOutput", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.hadoop.mapred.JobConf.getBoolean"], "call_func_parameter": [["org.apache.hadoop.mapred.JobConf", "java.lang.String", "boolean"], [""], ["java.lang.String"], [""], ["java.lang.String", "boolean"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleOutputs.checkNamedOutput": "Checks if a named output is alreadyDefined or not."}]}, {"index": "1438", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.getNamedOutputFormatClass", "methodParameterType": "JobConf#String#", "methodParameterName": "conf#namedOutput#", "methodBody": "public static Class<? extends OutputFormat> getNamedOutputFormatClass(JobConf conf, String namedOutput) {\n    checkNamedOutput(conf, namedOutput, false);\n    return conf.getClass(MO_PREFIX + namedOutput + FORMAT, null, OutputFormat.class);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#NullLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(NullLiteral)NullLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the named output OutputFormat.", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.checkNamedOutput", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.hadoop.mapred.JobConf.getClass"], "call_func_parameter": [["org.apache.hadoop.mapred.JobConf", "java.lang.String", "boolean"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Class", "java.lang.Class"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleOutputs.checkNamedOutput": "Checks if a named output is alreadyDefined or not."}]}, {"index": "1439", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.addNamedOutput", "methodParameterType": "JobConf#String#Class<? extends OutputFormat>#Schema#", "methodParameterName": "conf#namedOutput#outputFormatClass#schema#", "methodBody": "public static void addNamedOutput(JobConf conf, String namedOutput, Class<? extends OutputFormat> outputFormatClass,\n      Schema schema) {\n    addNamedOutput(conf, namedOutput, false, outputFormatClass, schema);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a named output for the job. <p/>", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.addNamedOutput"], "call_func_parameter": [["org.apache.hadoop.mapred.JobConf", "java.lang.String", "boolean", "java.lang.Class", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleOutputs.addNamedOutput": "Adds a named output for the job. <p/>"}]}, {"index": "1440", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.addMultiNamedOutput", "methodParameterType": "JobConf#String#Class<? extends OutputFormat>#Schema#", "methodParameterName": "conf#namedOutput#outputFormatClass#schema#", "methodBody": "public static void addMultiNamedOutput(JobConf conf, String namedOutput,\n      Class<? extends OutputFormat> outputFormatClass, Schema schema) {\n    addNamedOutput(conf, namedOutput, true, outputFormatClass, schema);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a multi named output for the job. <p/>", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.addNamedOutput"], "call_func_parameter": [["org.apache.hadoop.mapred.JobConf", "java.lang.String", "boolean", "java.lang.Class", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleOutputs.addNamedOutput": "Adds a named output for the job. <p/>"}]}, {"index": "1441", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.addNamedOutput", "methodParameterType": "JobConf#String#boolean#Class<? extends OutputFormat>#Schema#", "methodParameterName": "conf#namedOutput#multi#outputFormatClass#schema#", "methodBody": "private static void addNamedOutput(JobConf conf, String namedOutput, boolean multi,\n      Class<? extends OutputFormat> outputFormatClass, Schema schema) {\n    checkNamedOutputName(namedOutput);\n    checkNamedOutput(conf, namedOutput, true);\n    boolean isMapOnly = conf.getNumReduceTasks() == 0;\n    if (schema != null)\n      conf.set(MO_PREFIX + namedOutput + \".schema\", schema.toString());\n    conf.set(NAMED_OUTPUTS, conf.get(NAMED_OUTPUTS, \"\") + \" \" + namedOutput);\n    conf.setClass(MO_PREFIX + namedOutput + FORMAT, outputFormatClass, OutputFormat.class);\n    conf.setBoolean(MO_PREFIX + namedOutput + MULTI, multi);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a named output for the job. <p/>", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.checkNamedOutputName", "org.apache.avro.mapred.AvroMultipleOutputs.checkNamedOutput", "org.apache.hadoop.mapred.JobConf.getNumReduceTasks", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.Schema.toString", "org.apache.hadoop.mapred.JobConf.set", "org.apache.hadoop.mapred.JobConf.get", "org.apache.hadoop.mapred.JobConf.setClass", "org.apache.hadoop.mapred.JobConf.setBoolean"], "call_func_parameter": [["java.lang.String"], ["org.apache.hadoop.mapred.JobConf", "java.lang.String", "boolean"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Class", "java.lang.Class"], ["java.lang.String", "boolean"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleOutputs.checkNamedOutputName": "Checks if a named output name is valid."}, {"org.apache.avro.mapred.AvroMultipleOutputs.checkNamedOutput": "Checks if a named output is alreadyDefined or not."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}, {"org.apache.avro.Schema.toString": "Render this as <a href=\"https://json.org/\">JSON</a>."}]}, {"index": "1442", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.setCountersEnabled", "methodParameterType": "JobConf#boolean#", "methodParameterName": "conf#enabled#", "methodBody": "public static void setCountersEnabled(JobConf conf, boolean enabled) {\n    conf.setBoolean(COUNTERS_ENABLED, enabled);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Enables or disables counters for the named outputs. <p/> By default these counters are disabled. <p/> MultipleOutputs supports counters, by default the are disabled. The counters group is the  {@link AvroMultipleOutputs} class name.</p> The names of the counters are the same as the named outputs. For multi named outputs the name of the counter is the concatenation of the named output, and underscore '_' and the multiname.", "call_func_name": ["org.apache.hadoop.mapred.JobConf.setBoolean"], "call_func_parameter": [["java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "1443", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.getCountersEnabled", "methodParameterType": "JobConf#", "methodParameterName": "conf#", "methodBody": "public static boolean getCountersEnabled(JobConf conf) {\n    return conf.getBoolean(COUNTERS_ENABLED, false);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns if the counters for the named outputs are enabled or not. <p/> By default these counters are disabled. <p/> MultipleOutputs supports counters, by default the are disabled. The counters group is the  {@link AvroMultipleOutputs} class name.</p> The names of the counters are the same as the named outputs. For multi named outputs the name of the counter is the concatenation of the named output, and underscore '_' and the multiname.", "call_func_name": ["org.apache.hadoop.mapred.JobConf.getBoolean"], "call_func_parameter": [["java.lang.String", "boolean"]], "passed_comments": "/"}, {"index": "1444", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.AvroMultipleOutputs", "methodParameterType": "JobConf#", "methodParameterName": "job#", "methodBody": "public AvroMultipleOutputs(JobConf job) {\n    this.conf = job;\n    outputFormat = new InternalFileOutputFormat();\n    namedOutputs = Collections.unmodifiableSet(new HashSet<>(AvroMultipleOutputs.getNamedOutputsList(job)));\n    recordWriters = new HashMap<>();\n    countersEnabled = getCountersEnabled(job);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates and initializes multiple named outputs support, it should be instantiated in the Mapper/Reducer configure method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1445", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.getNamedOutputs", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Iterator<String> getNamedOutputs() {\n    return namedOutputs.iterator();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns iterator with the defined name outputs.", "call_func_name": ["java.util.Set.iterator"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1446", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.collect", "methodParameterType": "String#Reporter#Object#", "methodParameterName": "namedOutput#reporter#datum#", "methodBody": "public void collect(String namedOutput, Reporter reporter, Object datum) throws IOException {\n    getCollector(namedOutput, reporter).collect(datum);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Output Collector for the default schema. <p/>", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.getCollector", "org.apache.avro.mapred.AvroCollector.collect"], "call_func_parameter": [["java.lang.String", "org.apache.hadoop.mapred.Reporter"], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleOutputs.getCollector": "Gets the output collector for a named output. <p/>"}]}, {"index": "1447", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.collect", "methodParameterType": "String#Reporter#Schema#Object#", "methodParameterName": "namedOutput#reporter#schema#datum#", "methodBody": "public void collect(String namedOutput, Reporter reporter, Schema schema, Object datum) throws IOException {\n    getCollector(namedOutput, reporter, schema).collect(datum);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "OutputCollector with custom schema. <p/>", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.getCollector", "org.apache.avro.mapred.AvroCollector.collect"], "call_func_parameter": [["java.lang.String", "org.apache.hadoop.mapred.Reporter", "org.apache.avro.Schema"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "1448", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.collect", "methodParameterType": "String#Reporter#Schema#Object#String#", "methodParameterName": "namedOutput#reporter#schema#datum#baseOutputPath#", "methodBody": "public void collect(String namedOutput, Reporter reporter, Schema schema, Object datum, String baseOutputPath)\n      throws IOException {\n    getCollector(namedOutput, null, reporter, baseOutputPath, schema).collect(datum);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "OutputCollector with custom schema and file name. <p/>", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.getCollector", "org.apache.avro.mapred.AvroCollector.collect"], "call_func_parameter": [["java.lang.String", "java.lang.String", "org.apache.hadoop.mapred.Reporter", "java.lang.String", "org.apache.avro.Schema"], ["java.lang.Object"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleOutputs.getCollector": "Gets the output collector for a multi named output. <p/>"}]}, {"index": "1449", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.getCollector", "methodParameterType": "String#Reporter#", "methodParameterName": "namedOutput#reporter#", "methodBody": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n  public AvroCollector getCollector(String namedOutput, Reporter reporter) throws IOException {\n    return getCollector(namedOutput, null, reporter, namedOutput, null);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the output collector for a named output. <p/>", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.getCollector"], "call_func_parameter": [["java.lang.String", "java.lang.String", "org.apache.hadoop.mapred.Reporter", "java.lang.String", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleOutputs.getCollector": "Gets the output collector for a multi named output. <p/>"}]}, {"index": "1450", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.getCollector", "methodParameterType": "String#String#Reporter#", "methodParameterName": "namedOutput#multiName#reporter#", "methodBody": "@SuppressWarnings(\"rawtypes\")\n  public AvroCollector getCollector(String namedOutput, String multiName, Reporter reporter) throws IOException {\n    return getCollector(namedOutput, multiName, reporter, namedOutput, null);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the output collector for a named output. <p/>", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.getCollector"], "call_func_parameter": [["java.lang.String", "java.lang.String", "org.apache.hadoop.mapred.Reporter", "java.lang.String", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleOutputs.getCollector": "Gets the output collector for a multi named output. <p/>"}]}, {"index": "1451", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.getCollector", "methodParameterType": "String#String#Reporter#String#Schema#", "methodParameterName": "namedOutput#multiName#reporter#baseOutputFileName#schema#", "methodBody": "@SuppressWarnings({ \"unchecked\" })\n  private AvroCollector getCollector(String namedOutput, String multiName, Reporter reporter, String baseOutputFileName,\n      Schema schema) throws IOException {\n\n    checkNamedOutputName(namedOutput);\n    if (!namedOutputs.contains(namedOutput)) {\n      throw new IllegalArgumentException(\"Undefined named output '\" + namedOutput + \"'\");\n    }\n    boolean multi = isMultiNamedOutput(conf, namedOutput);\n\n    if (!multi && multiName != null) {\n      throw new IllegalArgumentException(\"Name output '\" + namedOutput + \"' has not been defined as multi\");\n    }\n    if (multi) {\n      checkTokenName(multiName);\n    }\n\n    String baseFileName = (multi) ? namedOutput + \"_\" + multiName : baseOutputFileName;\n\n    final RecordWriter writer = getRecordWriter(namedOutput, baseFileName, reporter, schema);\n\n    return new AvroCollector() {\n\n      @SuppressWarnings({ \"unchecked\" })\n      @Override\n      public void collect(Object key) throws IOException {\n        AvroWrapper wrapper = new AvroWrapper(key);\n        writer.write(wrapper, NullWritable.get());\n      }\n\n      public void collect(Object key, Object value) throws IOException {\n        writer.write(key, value);\n      }\n\n    };\n  }", "AST": "Javadoc#SimpleName#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#ParenthesizedExpression#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#ArrayInitializer#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the output collector for a multi named output. <p/>", "call_func_name": ["org.apache.avro.mapred.AvroMultipleOutputs.checkNamedOutputName", "java.util.Set.contains", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.apache.avro.mapred.AvroMultipleOutputs.isMultiNamedOutput", "org.apache.avro.mapred.AvroMultipleOutputs.checkTokenName", "org.apache.avro.mapred.AvroMultipleOutputs.getRecordWriter"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], ["org.apache.hadoop.mapred.JobConf", "java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String", "org.apache.hadoop.mapred.Reporter", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.mapred.AvroMultipleOutputs.checkNamedOutputName": "Checks if a named output name is valid."}, {"org.apache.avro.mapred.AvroMultipleOutputs.isMultiNamedOutput": "Returns if a named output is multiple."}, {"org.apache.avro.mapred.AvroMultipleOutputs.checkTokenName": "Checks if a named output name is valid token."}]}, {"index": "1452", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMultipleOutputs.java", "methodName": "org.apache.avro.mapred.AvroMultipleOutputs.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void close() throws IOException {\n    for (RecordWriter writer : recordWriters.values()) {\n      writer.close(null);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Closes all the opened named outputs. <p/> If overriden subclasses must invoke <code>super.close()</code> at the end of their <code>close()</code>", "call_func_name": ["java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.hadoop.mapred.RecordWriter.close"], "call_func_parameter": [[""], [""], [""], [""], ["org.apache.hadoop.mapred.Reporter"]], "passed_comments": "/"}, {"index": "1453", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroSerialization.java", "methodName": "org.apache.avro.mapred.AvroSerialization.getDeserializer", "methodParameterType": "Class<AvroWrapper<T>>#", "methodParameterName": "c#", "methodBody": "@Override\n  public Deserializer<AvroWrapper<T>> getDeserializer(Class<AvroWrapper<T>> c) {\n    Configuration conf = getConf();\n    boolean isKey = AvroKey.class.isAssignableFrom(c);\n    Schema schema = isKey ? Pair.getKeySchema(AvroJob.getMapOutputSchema(conf))\n        : Pair.getValueSchema(AvroJob.getMapOutputSchema(conf));\n    GenericData dataModel = AvroJob.createMapOutputDataModel(conf);\n    DatumReader<T> datumReader = dataModel.createDatumReader(schema);\n    return new AvroWrapperDeserializer(datumReader, isKey);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the specified map output deserializer. Defaults to the final output deserializer if no map output schema was specified.", "call_func_name": ["org.apache.avro.mapred.AvroSerialization.getConf", "java.lang.Class.isAssignableFrom", "org.apache.avro.mapred.AvroJob.getMapOutputSchema", "org.apache.avro.mapred.Pair.getKeySchema", "org.apache.avro.mapred.Pair.getValueSchema", "org.apache.avro.mapred.AvroJob.createMapOutputDataModel", "org.apache.avro.generic.GenericData.createDatumReader"], "call_func_parameter": [[""], ["java.lang.Class"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.avro.Schema"], ["org.apache.avro.Schema"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.mapred.AvroJob.getMapOutputSchema": "Return a job's map output key schema."}, {"org.apache.avro.mapred.Pair.getKeySchema": "Return a pair's key schema."}, {"org.apache.avro.mapred.Pair.getValueSchema": "Return a pair's value schema."}, {"org.apache.avro.generic.GenericData.createDatumReader": "Returns a  {@link DatumReader} for this kind of data."}]}, {"index": "1454", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroSerialization.java", "methodName": "org.apache.avro.mapred.AvroSerialization.getSerializer", "methodParameterType": "Class<AvroWrapper<T>>#", "methodParameterName": "c#", "methodBody": "@Override\n  public Serializer<AvroWrapper<T>> getSerializer(Class<AvroWrapper<T>> c) {\n    // AvroWrapper used for final output, AvroKey or AvroValue for map output\n    boolean isFinalOutput = c.equals(AvroWrapper.class);\n    Configuration conf = getConf();\n    Schema schema = isFinalOutput ? AvroJob.getOutputSchema(conf)\n        : (AvroKey.class.isAssignableFrom(c) ? Pair.getKeySchema(AvroJob.getMapOutputSchema(conf))\n            : Pair.getValueSchema(AvroJob.getMapOutputSchema(conf)));\n    GenericData dataModel = AvroJob.createDataModel(conf);\n    return new AvroWrapperSerializer(dataModel.createDatumWriter(schema));\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#ParenthesizedExpression#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(ConditionalExpression(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression)ParenthesizedExpression)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the specified output serializer.", "call_func_name": ["java.lang.Object.equals", "org.apache.avro.mapred.AvroSerialization.getConf", "org.apache.avro.mapred.AvroJob.getOutputSchema", "java.lang.Class.isAssignableFrom", "org.apache.avro.mapred.AvroJob.getMapOutputSchema", "org.apache.avro.mapred.Pair.getKeySchema", "org.apache.avro.mapred.Pair.getValueSchema", "org.apache.avro.mapred.AvroJob.createDataModel", "org.apache.avro.generic.GenericData.createDatumWriter"], "call_func_parameter": [["java.lang.Object"], [""], ["org.apache.hadoop.conf.Configuration"], ["java.lang.Class"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.avro.Schema"], ["org.apache.avro.Schema"], ["org.apache.hadoop.conf.Configuration"], ["org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.mapred.AvroJob.getOutputSchema": "Return a job's output key schema."}, {"org.apache.avro.mapred.AvroJob.getMapOutputSchema": "Return a job's map output key schema."}, {"org.apache.avro.mapred.Pair.getKeySchema": "Return a pair's key schema."}, {"org.apache.avro.mapred.Pair.getValueSchema": "Return a pair's value schema."}, {"org.apache.avro.generic.GenericData.createDatumWriter": "Returns a  {@link DatumWriter} for this kind of data."}]}, {"index": "1455", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/Pair.java", "methodName": "org.apache.avro.mapred.Pair.getKeySchema", "methodParameterType": "Schema#", "methodParameterName": "pair#", "methodBody": "public static Schema getKeySchema(Schema pair) {\n    checkIsPairSchema(pair);\n    return pair.getField(KEY).schema();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a pair's key schema.", "call_func_name": ["org.apache.avro.mapred.Pair.checkIsPairSchema", "org.apache.avro.Schema.getField"], "call_func_parameter": [["org.apache.avro.Schema"], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getField": "If this is a record, returns the Field with the given name <tt>fieldName</tt>. If there is no field by that name, a <tt>null</tt> is returned."}]}, {"index": "1456", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/Pair.java", "methodName": "org.apache.avro.mapred.Pair.getValueSchema", "methodParameterType": "Schema#", "methodParameterName": "pair#", "methodBody": "public static Schema getValueSchema(Schema pair) {\n    checkIsPairSchema(pair);\n    return pair.getField(VALUE).schema();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a pair's value schema.", "call_func_name": ["org.apache.avro.mapred.Pair.checkIsPairSchema", "org.apache.avro.Schema.getField"], "call_func_parameter": [["org.apache.avro.Schema"], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.Schema.getField": "If this is a record, returns the Field with the given name <tt>fieldName</tt>. If there is no field by that name, a <tt>null</tt> is returned."}]}, {"index": "1457", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/Pair.java", "methodName": "org.apache.avro.mapred.Pair.getPairSchema", "methodParameterType": "Schema#Schema#", "methodParameterName": "key#value#", "methodBody": "public static Schema getPairSchema(Schema key, Schema value) {\n    Map<Schema, Schema> valueSchemas;\n    synchronized (SCHEMA_CACHE) {\n      valueSchemas = SCHEMA_CACHE.computeIfAbsent(key, k -> new WeakHashMap<>());\n      Schema result;\n      result = valueSchemas.get(value);\n      if (result == null) {\n        result = makePairSchema(key, value);\n        valueSchemas.put(value, result);\n      }\n      return result;\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#LambdaExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#SynchronizedStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SynchronizedStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)LambdaExpression)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)SynchronizedStatement)Block)MethodDeclaration", "methodDoc": "Get a pair schema.", "call_func_name": ["java.util.function.Function.apply", "java.util.Map.computeIfAbsent", "java.util.Map.get", "org.apache.avro.mapred.Pair.makePairSchema", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.Object", "java.util.function.Function"], ["java.lang.Object"], ["org.apache.avro.Schema", "org.apache.avro.Schema"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "1458", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/Pair.java", "methodName": "org.apache.avro.mapred.Pair.key", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public K key() {\n    return key;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1459", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/Pair.java", "methodName": "org.apache.avro.mapred.Pair.key", "methodParameterType": "K#", "methodParameterName": "key#", "methodBody": "public void key(K key) {\n    this.key = key;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1460", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/Pair.java", "methodName": "org.apache.avro.mapred.Pair.value", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public V value() {\n    return value;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1461", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/Pair.java", "methodName": "org.apache.avro.mapred.Pair.value", "methodParameterType": "V#", "methodParameterName": "value#", "methodBody": "public void value(V value) {\n    this.value = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1462", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/Pair.java", "methodName": "org.apache.avro.mapred.Pair.set", "methodParameterType": "K#V#", "methodParameterName": "key#value#", "methodBody": "public void set(K key, V value) {\n    this.key = key;\n    this.value = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set both the key and value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1463", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherJob.java", "methodName": "org.apache.avro.mapred.tether.TetherJob.getExecutable", "methodParameterType": "JobConf#", "methodParameterName": "job#", "methodBody": "public static URI getExecutable(JobConf job) {\n    try {\n      return new URI(job.get(\"avro.tether.executable\"));\n    } catch (URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Get the URI of the application's executable.", "call_func_name": ["org.apache.hadoop.mapred.JobConf.get", "java.net.URI.<init>", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "1464", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherJob.java", "methodName": "org.apache.avro.mapred.tether.TetherJob.setExecutable", "methodParameterType": "JobConf#File#", "methodParameterName": "job#executable#", "methodBody": "public static void setExecutable(JobConf job, File executable) {\n    setExecutable(job, executable, new ArrayList<>(), false);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the URI for the application's executable. Normally this in HDFS.", "call_func_name": ["java.util.ArrayList.<init>", "org.apache.avro.mapred.tether.TetherJob.setExecutable"], "call_func_parameter": [[""], ["org.apache.hadoop.mapred.JobConf", "java.io.File", "java.util.List", "boolean"]], "passed_comments": [{"org.apache.avro.mapred.tether.TetherJob.setExecutable": "Set the URI for the application's executable (i.e the program to run in a subprocess and provides the mapper/reducer)."}]}, {"index": "1465", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherJob.java", "methodName": "org.apache.avro.mapred.tether.TetherJob.setExecutable", "methodParameterType": "JobConf#File#List<String>#boolean#", "methodParameterName": "job#executable#args#cached#", "methodBody": "public static void setExecutable(JobConf job, File executable, List<String> args, boolean cached) {\n    job.set(TETHER_EXEC, executable.toString());\n    if (args != null) {\n      StringBuilder sb = new StringBuilder();\n      for (String a : args) {\n        sb.append(a);\n        sb.append('\\n');\n      }\n      job.set(TETHER_EXEC_ARGS, sb.toString());\n    }\n    job.set(TETHER_EXEC_CACHED, (Boolean.valueOf(cached)).toString());\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the URI for the application's executable (i.e the program to run in a subprocess and provides the mapper/reducer).", "call_func_name": ["java.io.File.toString", "org.apache.hadoop.mapred.JobConf.set", "java.lang.StringBuilder.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.Boolean.valueOf", "java.lang.Boolean.toString"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], [""], [""], ["java.lang.String"], ["char"], [""], ["boolean"], [""]], "passed_comments": "/"}, {"index": "1466", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherJob.java", "methodName": "org.apache.avro.mapred.tether.TetherJob.getProtocol", "methodParameterType": "JobConf#", "methodParameterName": "job#", "methodBody": "public static TetheredProcess.Protocol getProtocol(JobConf job) {\n\n    if (job.get(TetherJob.TETHER_PROTOCOL) == null) {\n      return TetheredProcess.Protocol.NONE;\n    } else if (job.get(TetherJob.TETHER_PROTOCOL).equals(\"http\")) {\n      return TetheredProcess.Protocol.HTTP;\n    } else if (job.get(TetherJob.TETHER_PROTOCOL).equals(\"sasl\")) {\n      return TetheredProcess.Protocol.SASL;\n    } else {\n      throw new RuntimeException(\"Unknown value for protocol: \" + job.get(TetherJob.TETHER_PROTOCOL));\n    }\n\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Extract from the job configuration file an instance of the TRANSPROTO enumeration to represent the protocol to use for the communication", "call_func_name": ["org.apache.hadoop.mapred.JobConf.get", "java.lang.String.equals", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1467", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherJob.java", "methodName": "org.apache.avro.mapred.tether.TetherJob.runJob", "methodParameterType": "JobConf#", "methodParameterName": "job#", "methodBody": "public static RunningJob runJob(JobConf job) throws IOException {\n    setupTetherJob(job);\n    return JobClient.runJob(job);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Submit a job to the map/reduce cluster. All of the necessary modifications to the job to run under tether are made to the configuration.", "call_func_name": ["org.apache.avro.mapred.tether.TetherJob.setupTetherJob", "org.apache.hadoop.mapred.JobClient.runJob"], "call_func_parameter": [["org.apache.hadoop.mapred.JobConf"], ["org.apache.hadoop.mapred.JobConf"]], "passed_comments": "/"}, {"index": "1468", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherJob.java", "methodName": "org.apache.avro.mapred.tether.TetherJob.submitJob", "methodParameterType": "JobConf#", "methodParameterName": "conf#", "methodBody": "public static RunningJob submitJob(JobConf conf) throws IOException {\n    setupTetherJob(conf);\n    return new JobClient(conf).submitJob(conf);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Submit a job to the Map-Reduce framework.", "call_func_name": ["org.apache.avro.mapred.tether.TetherJob.setupTetherJob", "org.apache.hadoop.mapred.JobClient.<init>", "org.apache.hadoop.mapred.JobClient.submitJob"], "call_func_parameter": [["org.apache.hadoop.mapred.JobConf"], ["org.apache.hadoop.mapred.JobConf"], ["org.apache.hadoop.mapred.JobConf"]], "passed_comments": "/"}, {"index": "1469", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherJob.java", "methodName": "org.apache.avro.mapred.tether.TetherJob.setProtocol", "methodParameterType": "JobConf#String#", "methodParameterName": "job#proto#", "methodBody": "public static void setProtocol(JobConf job, String proto) throws IOException {\n    proto = proto.trim().toLowerCase();\n\n    if (!(proto.equals(\"http\") || proto.equals(\"sasl\"))) {\n      throw new IOException(\"protocol must be 'http' or 'sasl'\");\n    }\n\n    job.set(TETHER_PROTOCOL, proto);\n\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression)ParenthesizedExpression)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Determines which transport protocol (e.g http or sasl) used to communicate between the parent and subprocess", "call_func_name": ["java.lang.String.trim", "java.lang.String.toLowerCase", "java.lang.String.equals", "java.io.IOException.<init>", "org.apache.hadoop.mapred.JobConf.set"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1470", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherData.java", "methodName": "org.apache.avro.mapred.tether.TetherData.count", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int count() {\n    return count;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the count of records in the buffer. Used for task input only.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1471", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherData.java", "methodName": "org.apache.avro.mapred.tether.TetherData.count", "methodParameterType": "int#", "methodParameterName": "count#", "methodBody": "public void count(int count) {\n    this.count = count;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the count of records in the buffer. Used for task input only.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1472", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherData.java", "methodName": "org.apache.avro.mapred.tether.TetherData.buffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ByteBuffer buffer() {\n    return buffer;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the buffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1473", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherData.java", "methodName": "org.apache.avro.mapred.tether.TetherData.buffer", "methodParameterType": "ByteBuffer#", "methodParameterName": "buffer#", "methodBody": "public void buffer(ByteBuffer buffer) {\n    this.buffer = buffer;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the buffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1474", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherReducer.java", "methodName": "org.apache.avro.mapred.tether.TetherReducer.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void close() throws IOException {\n    if (process == null)\n      return;\n    try {\n      if (error)\n        process.inputClient.abort();\n      else\n        process.inputClient.complete();\n      process.outputService.waitForFinish();\n    } catch (InterruptedException e) {\n      throw new IOException(e);\n    } finally {\n      process.close();\n    }\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement)ReturnStatement)IfStatement(TryStatement(Block(IfStatement(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Handle the end of the input by closing down the application.", "call_func_name": ["org.apache.avro.mapred.tether.InputProtocol.abort", "org.apache.avro.mapred.tether.InputProtocol.complete", "org.apache.avro.mapred.tether.TetherOutputService.waitForFinish", "org.apache.avro.mapred.tether.TetheredProcess.close", "java.io.IOException.<init>"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Throwable"]], "passed_comments": [{"org.apache.avro.mapred.tether.InputProtocol.abort": "Transmit inputs to a map or reduce task sub-process."}, {"org.apache.avro.mapred.tether.InputProtocol.complete": "Transmit inputs to a map or reduce task sub-process."}]}, {"index": "1475", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/tether/TetherOutputFormat.java", "methodName": "org.apache.avro.mapred.tether.TetherOutputFormat.setDeflateLevel", "methodParameterType": "JobConf#int#", "methodParameterName": "job#level#", "methodBody": "public static void setDeflateLevel(JobConf job, int level) {\n    FileOutputFormat.setCompressOutput(job, true);\n    job.setInt(AvroOutputFormat.DEFLATE_LEVEL_KEY, level);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Enable output compression using the deflate codec and specify its level.", "call_func_name": ["org.apache.hadoop.mapred.FileOutputFormat.setCompressOutput", "org.apache.hadoop.mapred.JobConf.setInt"], "call_func_parameter": [["org.apache.hadoop.mapred.JobConf", "boolean"], ["java.lang.String", "int"]], "passed_comments": "/"}, {"index": "1476", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMapper.java", "methodName": "org.apache.avro.mapred.AvroMapper.map", "methodParameterType": "IN#AvroCollector<OUT>#Reporter#", "methodParameterName": "datum#collector#reporter#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public void map(IN datum, AvroCollector<OUT> collector, Reporter reporter) throws IOException {\n    collector.collect((OUT) datum);\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Called with each map input datum. By default, collects inputs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1477", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMapper.java", "methodName": "org.apache.avro.mapred.AvroMapper.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void close() throws IOException {\n    // no op\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block)Block)MethodDeclaration", "methodDoc": "Subclasses can override this as desired.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1478", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroMapper.java", "methodName": "org.apache.avro.mapred.AvroMapper.configure", "methodParameterType": "JobConf#", "methodParameterName": "jobConf#", "methodBody": "@Override\n  public void configure(JobConf jobConf) {\n    // no op\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Subclasses can override this as desired.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1479", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroOutputFormat.java", "methodName": "org.apache.avro.mapred.AvroOutputFormat.setDeflateLevel", "methodParameterType": "JobConf#int#", "methodParameterName": "job#level#", "methodBody": "public static void setDeflateLevel(JobConf job, int level) {\n    FileOutputFormat.setCompressOutput(job, true);\n    job.setInt(DEFLATE_LEVEL_KEY, level);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Enable output compression using the deflate codec and specify its level.", "call_func_name": ["org.apache.hadoop.mapred.FileOutputFormat.setCompressOutput", "org.apache.hadoop.mapred.JobConf.setInt"], "call_func_parameter": [["org.apache.hadoop.mapred.JobConf", "boolean"], ["java.lang.String", "int"]], "passed_comments": "/"}, {"index": "1480", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroOutputFormat.java", "methodName": "org.apache.avro.mapred.AvroOutputFormat.setSyncInterval", "methodParameterType": "JobConf#int#", "methodParameterName": "job#syncIntervalInBytes#", "methodBody": "public static void setSyncInterval(JobConf job, int syncIntervalInBytes) {\n    job.setInt(SYNC_INTERVAL_KEY, syncIntervalInBytes);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the sync interval to be used by the underlying  {@link DataFileWriter}.", "call_func_name": ["org.apache.hadoop.mapred.JobConf.setInt"], "call_func_parameter": [["java.lang.String", "int"]], "passed_comments": "/"}, {"index": "1481", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/AvroOutputFormat.java", "methodName": "org.apache.avro.mapred.AvroOutputFormat.getCodecFactory", "methodParameterType": "JobConf#", "methodParameterName": "job#", "methodBody": "static CodecFactory getCodecFactory(JobConf job) {\n    CodecFactory factory = null;\n\n    if (FileOutputFormat.getCompressOutput(job)) {\n      int deflateLevel = job.getInt(DEFLATE_LEVEL_KEY, DEFAULT_DEFLATE_LEVEL);\n      int xzLevel = job.getInt(XZ_LEVEL_KEY, DEFAULT_XZ_LEVEL);\n      String codecName = job.get(AvroJob.OUTPUT_CODEC);\n\n      if (codecName == null) {\n        String codecClassName = job.get(\"mapred.output.compression.codec\", null);\n        String avroCodecName = HadoopCodecFactory.getAvroCodecName(codecClassName);\n        if (codecClassName != null && avroCodecName != null) {\n          factory = HadoopCodecFactory.fromHadoopString(codecClassName);\n          job.set(AvroJob.OUTPUT_CODEC, avroCodecName);\n          return factory;\n        } else {\n          return CodecFactory.deflateCodec(deflateLevel);\n        }\n      } else {\n        if (codecName.equals(DEFLATE_CODEC)) {\n          factory = CodecFactory.deflateCodec(deflateLevel);\n        } else if (codecName.equals(XZ_CODEC)) {\n          factory = CodecFactory.xzCodec(xzLevel);\n        } else {\n          factory = CodecFactory.fromString(codecName);\n        }\n      }\n    }\n\n    return factory;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This will select the correct compression codec from the JobConf. The order of selection is as follows: <ul> <li>If mapred.output.compress is true then look for codec otherwise no compression</li> <li>Use avro.output.codec if populated</li> <li>Next use mapred.output.compression.codec if populated</li> <li>If not default to Deflate Codec</li> </ul>", "call_func_name": ["org.apache.hadoop.mapred.FileOutputFormat.getCompressOutput", "org.apache.hadoop.mapred.JobConf.getInt", "org.apache.hadoop.mapred.JobConf.get", "org.apache.hadoop.mapred.JobConf.get", "org.apache.avro.hadoop.file.HadoopCodecFactory.getAvroCodecName", "org.apache.avro.hadoop.file.HadoopCodecFactory.fromHadoopString", "org.apache.hadoop.mapred.JobConf.set", "org.apache.avro.file.CodecFactory.deflateCodec", "java.lang.String.equals", "org.apache.avro.file.CodecFactory.xzCodec", "org.apache.avro.file.CodecFactory.fromString"], "call_func_parameter": [["org.apache.hadoop.mapred.JobConf"], ["java.lang.String", "int"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String"], ["int"], ["java.lang.Object"], ["int"], ["java.lang.String"]], "passed_comments": [{"org.apache.avro.hadoop.file.HadoopCodecFactory.fromHadoopString": "Maps a hadoop codec name into a CodecFactory. Currently there are four hadoop codecs registered: <ul> <li> {@code org.apache.hadoop.io.compress.DeflateCodec} will map to{@code deflate}</li> <li> {@code org.apache.hadoop.io.compress.SnappyCodec} will map to{@code snappy}</li> <li> {@code org.apache.hadoop.io.compress.BZip2Codec} will map to{@code zbip2}</li> <li> {@code org.apache.hadoop.io.compress.GZipCodec} will map to{@code deflate}</li> </ul>"}, {"org.apache.avro.file.CodecFactory.deflateCodec": "Deflate codec, with specific compression. compressionLevel should be between 1 and 9, inclusive."}, {"org.apache.avro.file.CodecFactory.xzCodec": "XZ codec, with specific compression. compressionLevel should be between 1 and 9, inclusive."}, {"org.apache.avro.file.CodecFactory.fromString": "Maps a codec name into a CodecFactory. Currently there are six codecs registered by default: <ul> <li> {@code null}</li> <li> {@code deflate}</li> <li> {@code snappy}</li> <li> {@code bzip2}</li> <li> {@code xz}</li> <li> {@code zstandard}</li> </ul>"}]}, {"index": "1482", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/TaggedInputSplit.java", "methodName": "org.apache.avro.mapred.TaggedInputSplit.TaggedInputSplit", "methodParameterType": "InputSplit#Configuration#Class<? extends InputFormat>#Class<? extends AvroMapper>#Schema#", "methodParameterName": "inputSplit#conf#inputFormatClass#mapperClass#inputSchema#", "methodBody": "public TaggedInputSplit(InputSplit inputSplit, Configuration conf, Class<? extends InputFormat> inputFormatClass,\n      Class<? extends AvroMapper> mapperClass, Schema inputSchema) {\n    this.inputSplitClass = inputSplit.getClass();\n    this.inputSplit = inputSplit;\n    this.conf = conf;\n    this.inputFormatClass = inputFormatClass;\n    this.mapperClass = mapperClass;\n    this.schema = inputSchema;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TaggedInputSplit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1483", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/TaggedInputSplit.java", "methodName": "org.apache.avro.mapred.TaggedInputSplit.getInputSplit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public InputSplit getInputSplit() {\n    return inputSplit;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the original InputSplit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1484", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/TaggedInputSplit.java", "methodName": "org.apache.avro.mapred.TaggedInputSplit.getInputFormatClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class<? extends InputFormat> getInputFormatClass() {\n    return inputFormatClass;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the InputFormat class to use for this split.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1485", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/TaggedInputSplit.java", "methodName": "org.apache.avro.mapred.TaggedInputSplit.getMapperClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Class<? extends AvroMapper> getMapperClass() {\n    return mapperClass;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the Mapper class to use for this split.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1486", "file": "/root/repos/repos8/avro/lang/java/mapred/src/main/java/org/apache/avro/mapred/TaggedInputSplit.java", "methodName": "org.apache.avro.mapred.TaggedInputSplit.getSchema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Schema getSchema() {\n    return schema;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieves the Schema to use for this split.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1487", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-sources/java/org/apache/avro/mapred/tether/OutputProtocol.java", "methodName": "org.apache.avro.mapred.tether.OutputProtocol.configure", "methodParameterType": "int#", "methodParameterName": "port#", "methodBody": "void configure(int port);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transmit outputs from a map or reduce task to parent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1488", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-sources/java/org/apache/avro/mapred/tether/OutputProtocol.java", "methodName": "org.apache.avro.mapred.tether.OutputProtocol.output", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "datum#", "methodBody": "void output(java.nio.ByteBuffer datum);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transmit outputs from a map or reduce task to parent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1489", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-sources/java/org/apache/avro/mapred/tether/OutputProtocol.java", "methodName": "org.apache.avro.mapred.tether.OutputProtocol.outputPartitioned", "methodParameterType": "int#java.nio.ByteBuffer#", "methodParameterName": "partition#datum#", "methodBody": "void outputPartitioned(int partition, java.nio.ByteBuffer datum);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transmit outputs from a map or reduce task to parent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1490", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-sources/java/org/apache/avro/mapred/tether/OutputProtocol.java", "methodName": "org.apache.avro.mapred.tether.OutputProtocol.status", "methodParameterType": "java.lang.String#", "methodParameterName": "message#", "methodBody": "void status(java.lang.String message);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transmit outputs from a map or reduce task to parent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1491", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-sources/java/org/apache/avro/mapred/tether/OutputProtocol.java", "methodName": "org.apache.avro.mapred.tether.OutputProtocol.count", "methodParameterType": "java.lang.String#java.lang.String#long#", "methodParameterName": "group#name#amount#", "methodBody": "void count(java.lang.String group, java.lang.String name, long amount);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transmit outputs from a map or reduce task to parent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1492", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-sources/java/org/apache/avro/mapred/tether/OutputProtocol.java", "methodName": "org.apache.avro.mapred.tether.OutputProtocol.fail", "methodParameterType": "java.lang.String#", "methodParameterName": "message#", "methodBody": "void fail(java.lang.String message);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transmit outputs from a map or reduce task to parent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1493", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-sources/java/org/apache/avro/mapred/tether/OutputProtocol.java", "methodName": "org.apache.avro.mapred.tether.OutputProtocol.complete", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void complete();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Transmit outputs from a map or reduce task to parent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1494", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-sources/java/org/apache/avro/mapred/tether/InputProtocol.java", "methodName": "org.apache.avro.mapred.tether.InputProtocol.configure", "methodParameterType": "org.apache.avro.mapred.tether.TaskType#java.lang.String#java.lang.String#", "methodParameterName": "taskType#inSchema#outSchema#", "methodBody": "void configure(org.apache.avro.mapred.tether.TaskType taskType, java.lang.String inSchema, java.lang.String outSchema);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transmit inputs to a map or reduce task sub-process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1495", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-sources/java/org/apache/avro/mapred/tether/InputProtocol.java", "methodName": "org.apache.avro.mapred.tether.InputProtocol.partitions", "methodParameterType": "int#", "methodParameterName": "partitions#", "methodBody": "void partitions(int partitions);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transmit inputs to a map or reduce task sub-process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1496", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-sources/java/org/apache/avro/mapred/tether/InputProtocol.java", "methodName": "org.apache.avro.mapred.tether.InputProtocol.input", "methodParameterType": "java.nio.ByteBuffer#long#", "methodParameterName": "data#count#", "methodBody": "void input(java.nio.ByteBuffer data, long count);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Transmit inputs to a map or reduce task sub-process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1497", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-sources/java/org/apache/avro/mapred/tether/InputProtocol.java", "methodName": "org.apache.avro.mapred.tether.InputProtocol.abort", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void abort();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Transmit inputs to a map or reduce task sub-process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1498", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-sources/java/org/apache/avro/mapred/tether/InputProtocol.java", "methodName": "org.apache.avro.mapred.tether.InputProtocol.complete", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void complete();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Transmit inputs to a map or reduce task sub-process.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1499", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<TextStats> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1500", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<TextStats> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1501", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<TextStats> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<TextStats>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1502", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this TextStats to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1503", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static TextStats fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a TextStats from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1504", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.TextStats", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TextStats() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1505", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.TextStats", "methodParameterType": "java.lang.CharSequence#java.lang.Integer#", "methodParameterName": "name#count#", "methodBody": "public TextStats(java.lang.CharSequence name, java.lang.Integer count) {\n    this.name = name;\n    this.count = count;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1506", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.CharSequence getName() {\n    return name;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1507", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.setName", "methodParameterType": "java.lang.CharSequence#", "methodParameterName": "value#", "methodBody": "public void setName(java.lang.CharSequence value) {\n    this.name = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1508", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.getCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getCount() {\n    return count;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'count' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1509", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.setCount", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "public void setCount(int value) {\n    this.count = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'count' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1510", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.mapreduce.TextStats.Builder newBuilder() {\n    return new org.apache.avro.mapreduce.TextStats.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TextStats RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1511", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.newBuilder", "methodParameterType": "org.apache.avro.mapreduce.TextStats.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.mapreduce.TextStats.Builder newBuilder(org.apache.avro.mapreduce.TextStats.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.mapreduce.TextStats.Builder();\n    } else {\n      return new org.apache.avro.mapreduce.TextStats.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TextStats RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1512", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/avro/org/apache/avro/mapreduce/TextStats.java", "methodName": "org.apache.avro.mapreduce.TextStats.newBuilder", "methodParameterType": "org.apache.avro.mapreduce.TextStats#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.mapreduce.TextStats.Builder newBuilder(org.apache.avro.mapreduce.TextStats other) {\n    if (other == null) {\n      return new org.apache.avro.mapreduce.TextStats.Builder();\n    } else {\n      return new org.apache.avro.mapreduce.TextStats.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new TextStats RecordBuilder by copying an existing TextStats instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1513", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<Foo> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1514", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<Foo> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1515", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<Foo> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<Foo>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1516", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this Foo to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1517", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static Foo fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a Foo from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1518", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.Foo", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Foo() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1519", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.Foo", "methodParameterType": "java.lang.CharSequence#", "methodParameterName": "label#", "methodBody": "public Foo(java.lang.CharSequence label) {\n    this.label = label;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1520", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.getLabel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.CharSequence getLabel() {\n    return label;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'label' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1521", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.setLabel", "methodParameterType": "java.lang.CharSequence#", "methodParameterName": "value#", "methodBody": "public void setLabel(java.lang.CharSequence value) {\n    this.label = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'label' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1522", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.Foo.Builder newBuilder() {\n    return new org.apache.avro.Foo.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Foo RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1523", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.newBuilder", "methodParameterType": "org.apache.avro.Foo.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.Foo.Builder newBuilder(org.apache.avro.Foo.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.Foo.Builder();\n    } else {\n      return new org.apache.avro.Foo.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Foo RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1524", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Foo.java", "methodName": "org.apache.avro.Foo.newBuilder", "methodParameterType": "org.apache.avro.Foo#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.Foo.Builder newBuilder(org.apache.avro.Foo other) {\n    if (other == null) {\n      return new org.apache.avro.Foo.Builder();\n    } else {\n      return new org.apache.avro.Foo.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Foo RecordBuilder by copying an existing Foo instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1525", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<FooBarSpecificRecord> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1526", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<FooBarSpecificRecord> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1527", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<FooBarSpecificRecord> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<FooBarSpecificRecord>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1528", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this FooBarSpecificRecord to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1529", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static FooBarSpecificRecord fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a FooBarSpecificRecord from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1530", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.FooBarSpecificRecord", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public FooBarSpecificRecord() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1531", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.FooBarSpecificRecord", "methodParameterType": "java.lang.Integer#java.lang.CharSequence#java.util.List<java.lang.CharSequence>#java.util.List<java.lang.Integer>#org.apache.avro.TypeEnum#", "methodParameterName": "id#name#nicknames#relatedids#typeEnum#", "methodBody": "public FooBarSpecificRecord(java.lang.Integer id, java.lang.CharSequence name, java.util.List<java.lang.CharSequence> nicknames, java.util.List<java.lang.Integer> relatedids, org.apache.avro.TypeEnum typeEnum) {\n    this.id = id;\n    this.name = name;\n    this.nicknames = nicknames;\n    this.relatedids = relatedids;\n    this.typeEnum = typeEnum;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1532", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getId() {\n    return id;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'id' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1533", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.setId", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "public void setId(int value) {\n    this.id = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'id' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1534", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.CharSequence getName() {\n    return name;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1535", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.setName", "methodParameterType": "java.lang.CharSequence#", "methodParameterName": "value#", "methodBody": "public void setName(java.lang.CharSequence value) {\n    this.name = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'name' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1536", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getNicknames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.List<java.lang.CharSequence> getNicknames() {\n    return nicknames;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nicknames' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1537", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.setNicknames", "methodParameterType": "java.util.List<java.lang.CharSequence>#", "methodParameterName": "value#", "methodBody": "public void setNicknames(java.util.List<java.lang.CharSequence> value) {\n    this.nicknames = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'nicknames' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1538", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getRelatedids", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.List<java.lang.Integer> getRelatedids() {\n    return relatedids;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'relatedids' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1539", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.setRelatedids", "methodParameterType": "java.util.List<java.lang.Integer>#", "methodParameterName": "value#", "methodBody": "public void setRelatedids(java.util.List<java.lang.Integer> value) {\n    this.relatedids = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'relatedids' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1540", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.getTypeEnum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.TypeEnum getTypeEnum() {\n    return typeEnum;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'typeEnum' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1541", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.setTypeEnum", "methodParameterType": "org.apache.avro.TypeEnum#", "methodParameterName": "value#", "methodBody": "public void setTypeEnum(org.apache.avro.TypeEnum value) {\n    this.typeEnum = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'typeEnum' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1542", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.FooBarSpecificRecord.Builder newBuilder() {\n    return new org.apache.avro.FooBarSpecificRecord.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new FooBarSpecificRecord RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1543", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.newBuilder", "methodParameterType": "org.apache.avro.FooBarSpecificRecord.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.FooBarSpecificRecord.Builder newBuilder(org.apache.avro.FooBarSpecificRecord.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.FooBarSpecificRecord.Builder();\n    } else {\n      return new org.apache.avro.FooBarSpecificRecord.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new FooBarSpecificRecord RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1544", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/FooBarSpecificRecord.java", "methodName": "org.apache.avro.FooBarSpecificRecord.newBuilder", "methodParameterType": "org.apache.avro.FooBarSpecificRecord#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.FooBarSpecificRecord.Builder newBuilder(org.apache.avro.FooBarSpecificRecord other) {\n    if (other == null) {\n      return new org.apache.avro.FooBarSpecificRecord.Builder();\n    } else {\n      return new org.apache.avro.FooBarSpecificRecord.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new FooBarSpecificRecord RecordBuilder by copying an existing FooBarSpecificRecord instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1545", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<Interop> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1546", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<Interop> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1547", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<Interop> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<Interop>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1548", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this Interop to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1549", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static Interop fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a Interop from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1550", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.Interop", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Interop() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1551", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.Interop", "methodParameterType": "java.lang.Integer#java.lang.Long#java.lang.CharSequence#java.lang.Boolean#java.lang.Float#java.lang.Double#java.nio.ByteBuffer#java.lang.Void#java.util.List<java.lang.Double>#java.util.Map<java.lang.CharSequence,org.apache.avro.Foo>#java.lang.Object#org.apache.avro.Kind#org.apache.avro.MD5#org.apache.avro.Node#", "methodParameterName": "intField#longField#stringField#boolField#floatField#doubleField#bytesField#nullField#arrayField#mapField#unionField#enumField#fixedField#recordField#", "methodBody": "public Interop(java.lang.Integer intField, java.lang.Long longField, java.lang.CharSequence stringField, java.lang.Boolean boolField, java.lang.Float floatField, java.lang.Double doubleField, java.nio.ByteBuffer bytesField, java.lang.Void nullField, java.util.List<java.lang.Double> arrayField, java.util.Map<java.lang.CharSequence,org.apache.avro.Foo> mapField, java.lang.Object unionField, org.apache.avro.Kind enumField, org.apache.avro.MD5 fixedField, org.apache.avro.Node recordField) {\n    this.intField = intField;\n    this.longField = longField;\n    this.stringField = stringField;\n    this.boolField = boolField;\n    this.floatField = floatField;\n    this.doubleField = doubleField;\n    this.bytesField = bytesField;\n    this.nullField = nullField;\n    this.arrayField = arrayField;\n    this.mapField = mapField;\n    this.unionField = unionField;\n    this.enumField = enumField;\n    this.fixedField = fixedField;\n    this.recordField = recordField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1552", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getIntField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getIntField() {\n    return intField;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'intField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1553", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setIntField", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "public void setIntField(int value) {\n    this.intField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'intField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1554", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getLongField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getLongField() {\n    return longField;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'longField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1555", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setLongField", "methodParameterType": "long#", "methodParameterName": "value#", "methodBody": "public void setLongField(long value) {\n    this.longField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'longField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1556", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getStringField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.CharSequence getStringField() {\n    return stringField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'stringField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1557", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setStringField", "methodParameterType": "java.lang.CharSequence#", "methodParameterName": "value#", "methodBody": "public void setStringField(java.lang.CharSequence value) {\n    this.stringField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'stringField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1558", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getBoolField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean getBoolField() {\n    return boolField;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'boolField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1559", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setBoolField", "methodParameterType": "boolean#", "methodParameterName": "value#", "methodBody": "public void setBoolField(boolean value) {\n    this.boolField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'boolField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1560", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getFloatField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public float getFloatField() {\n    return floatField;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'floatField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1561", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setFloatField", "methodParameterType": "float#", "methodParameterName": "value#", "methodBody": "public void setFloatField(float value) {\n    this.floatField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'floatField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1562", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getDoubleField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public double getDoubleField() {\n    return doubleField;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'doubleField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1563", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setDoubleField", "methodParameterType": "double#", "methodParameterName": "value#", "methodBody": "public void setDoubleField(double value) {\n    this.doubleField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'doubleField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1564", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getBytesField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer getBytesField() {\n    return bytesField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'bytesField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1565", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setBytesField", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "value#", "methodBody": "public void setBytesField(java.nio.ByteBuffer value) {\n    this.bytesField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'bytesField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1566", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getNullField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.Void getNullField() {\n    return nullField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'nullField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1567", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setNullField", "methodParameterType": "java.lang.Void#", "methodParameterName": "value#", "methodBody": "public void setNullField(java.lang.Void value) {\n    this.nullField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'nullField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1568", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getArrayField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.List<java.lang.Double> getArrayField() {\n    return arrayField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'arrayField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1569", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setArrayField", "methodParameterType": "java.util.List<java.lang.Double>#", "methodParameterName": "value#", "methodBody": "public void setArrayField(java.util.List<java.lang.Double> value) {\n    this.arrayField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'arrayField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1570", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getMapField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.Map<java.lang.CharSequence,org.apache.avro.Foo> getMapField() {\n    return mapField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'mapField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1571", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setMapField", "methodParameterType": "java.util.Map<java.lang.CharSequence,org.apache.avro.Foo>#", "methodParameterName": "value#", "methodBody": "public void setMapField(java.util.Map<java.lang.CharSequence,org.apache.avro.Foo> value) {\n    this.mapField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'mapField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1572", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getUnionField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.Object getUnionField() {\n    return unionField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'unionField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1573", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setUnionField", "methodParameterType": "java.lang.Object#", "methodParameterName": "value#", "methodBody": "public void setUnionField(java.lang.Object value) {\n    this.unionField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'unionField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1574", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getEnumField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.Kind getEnumField() {\n    return enumField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'enumField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1575", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setEnumField", "methodParameterType": "org.apache.avro.Kind#", "methodParameterName": "value#", "methodBody": "public void setEnumField(org.apache.avro.Kind value) {\n    this.enumField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'enumField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1576", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getFixedField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.MD5 getFixedField() {\n    return fixedField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'fixedField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1577", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setFixedField", "methodParameterType": "org.apache.avro.MD5#", "methodParameterName": "value#", "methodBody": "public void setFixedField(org.apache.avro.MD5 value) {\n    this.fixedField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'fixedField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1578", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.getRecordField", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public org.apache.avro.Node getRecordField() {\n    return recordField;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'recordField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1579", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.setRecordField", "methodParameterType": "org.apache.avro.Node#", "methodParameterName": "value#", "methodBody": "public void setRecordField(org.apache.avro.Node value) {\n    this.recordField = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'recordField' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1580", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.Interop.Builder newBuilder() {\n    return new org.apache.avro.Interop.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Interop RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1581", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.newBuilder", "methodParameterType": "org.apache.avro.Interop.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.Interop.Builder newBuilder(org.apache.avro.Interop.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.Interop.Builder();\n    } else {\n      return new org.apache.avro.Interop.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Interop RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1582", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Interop.java", "methodName": "org.apache.avro.Interop.newBuilder", "methodParameterType": "org.apache.avro.Interop#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.Interop.Builder newBuilder(org.apache.avro.Interop other) {\n    if (other == null) {\n      return new org.apache.avro.Interop.Builder();\n    } else {\n      return new org.apache.avro.Interop.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Interop RecordBuilder by copying an existing Interop instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1583", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.getEncoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageEncoder<Node> getEncoder() {\n    return ENCODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageEncoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1584", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.getDecoder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static BinaryMessageDecoder<Node> getDecoder() {\n    return DECODER;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the BinaryMessageDecoder instance used by this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1585", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.createDecoder", "methodParameterType": "SchemaStore#", "methodParameterName": "resolver#", "methodBody": "public static BinaryMessageDecoder<Node> createDecoder(SchemaStore resolver) {\n    return new BinaryMessageDecoder<Node>(MODEL$, SCHEMA$, resolver);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new BinaryMessageDecoder instance for this class that uses the specified  {@link SchemaStore}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1586", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.toByteBuffer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {\n    return ENCODER.encode(this);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Serializes this Node to a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1587", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.fromByteBuffer", "methodParameterType": "java.nio.ByteBuffer#", "methodParameterName": "b#", "methodBody": "public static Node fromByteBuffer(\n      java.nio.ByteBuffer b) throws java.io.IOException {\n    return DECODER.decode(b);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Deserializes a Node from a ByteBuffer.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1588", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.Node", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Node() {}", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Default constructor.  Note that this does not initialize fields to their default values from the schema.  If that is desired then one should use <code>newBuilder()</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1589", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.Node", "methodParameterType": "java.lang.CharSequence#java.util.List<org.apache.avro.Node>#", "methodParameterName": "label#children#", "methodBody": "public Node(java.lang.CharSequence label, java.util.List<org.apache.avro.Node> children) {\n    this.label = label;\n    this.children = children;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "All-args constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1590", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.getLabel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.lang.CharSequence getLabel() {\n    return label;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'label' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1591", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.setLabel", "methodParameterType": "java.lang.CharSequence#", "methodParameterName": "value#", "methodBody": "public void setLabel(java.lang.CharSequence value) {\n    this.label = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'label' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1592", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.getChildren", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public java.util.List<org.apache.avro.Node> getChildren() {\n    return children;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the value of the 'children' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1593", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.setChildren", "methodParameterType": "java.util.List<org.apache.avro.Node>#", "methodParameterName": "value#", "methodBody": "public void setChildren(java.util.List<org.apache.avro.Node> value) {\n    this.children = value;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the value of the 'children' field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1594", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.newBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static org.apache.avro.Node.Builder newBuilder() {\n    return new org.apache.avro.Node.Builder();\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Node RecordBuilder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1595", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.newBuilder", "methodParameterType": "org.apache.avro.Node.Builder#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.Node.Builder newBuilder(org.apache.avro.Node.Builder other) {\n    if (other == null) {\n      return new org.apache.avro.Node.Builder();\n    } else {\n      return new org.apache.avro.Node.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Node RecordBuilder by copying an existing Builder.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1596", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/Node.java", "methodName": "org.apache.avro.Node.newBuilder", "methodParameterType": "org.apache.avro.Node#", "methodParameterName": "other#", "methodBody": "public static org.apache.avro.Node.Builder newBuilder(org.apache.avro.Node other) {\n    if (other == null) {\n      return new org.apache.avro.Node.Builder();\n    } else {\n      return new org.apache.avro.Node.Builder(other);\n    }\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates a new Node RecordBuilder by copying an existing Node instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1597", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/MD5.java", "methodName": "org.apache.avro.MD5.MD5", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public MD5() {\n    super();\n  }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new MD5", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1598", "file": "/root/repos/repos8/avro/lang/java/mapred/target/generated-test-sources/java/org/apache/avro/MD5.java", "methodName": "org.apache.avro.MD5.MD5", "methodParameterType": "byte[]#", "methodParameterName": "bytes#", "methodBody": "public MD5(byte[] bytes) {\n    super(bytes);\n  }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates a new MD5 with the given bytes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1599", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/TrevniMetadataTool.java", "methodName": "org.apache.avro.tool.TrevniMetadataTool.dump", "methodParameterType": "Input#PrintStream#boolean#", "methodParameterName": "input#out#pretty#", "methodBody": "public void dump(Input input, PrintStream out, boolean pretty) throws IOException {\n    this.generator = FACTORY.createGenerator(out, JsonEncoding.UTF8);\n    if (pretty) {\n      generator.useDefaultPrettyPrinter();\n    } else { // ensure newline separation\n      MinimalPrettyPrinter pp = new MinimalPrettyPrinter();\n      pp.setRootValueSeparator(System.getProperty(\"line.separator\"));\n      generator.setPrettyPrinter(pp);\n    }\n\n    ColumnFileReader reader = new ColumnFileReader(input);\n\n    generator.writeStartObject();\n    generator.writeNumberField(\"rowCount\", reader.getRowCount());\n    generator.writeNumberField(\"columnCount\", reader.getColumnCount());\n\n    generator.writeFieldName(\"metadata\");\n    dump(reader.getMetaData());\n\n    generator.writeFieldName(\"columns\");\n    generator.writeStartArray();\n    for (ColumnMetaData c : reader.getColumnMetaData())\n      dump(c);\n    generator.writeEndArray();\n\n    generator.writeEndObject();\n\n    generator.flush();\n    out.println();\n    reader.close();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Read a Trevni file and print each row as a JSON object.", "call_func_name": ["com.fasterxml.jackson.core.JsonFactory.createGenerator", "com.fasterxml.jackson.core.JsonGenerator.useDefaultPrettyPrinter", "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.<init>", "java.lang.System.getProperty", "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setRootValueSeparator", "com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter", "org.apache.trevni.ColumnFileReader.<init>", "com.fasterxml.jackson.core.JsonGenerator.writeStartObject", "org.apache.trevni.ColumnFileReader.getRowCount", "com.fasterxml.jackson.core.JsonGenerator.writeNumberField", "org.apache.trevni.ColumnFileReader.getColumnCount", "com.fasterxml.jackson.core.JsonGenerator.writeFieldName", "org.apache.trevni.ColumnFileReader.getMetaData", "org.apache.avro.tool.TrevniMetadataTool.dump", "com.fasterxml.jackson.core.JsonGenerator.writeStartArray", "org.apache.trevni.ColumnFileReader.getColumnMetaData", "com.fasterxml.jackson.core.JsonGenerator.writeEndArray", "com.fasterxml.jackson.core.JsonGenerator.writeEndObject", "com.fasterxml.jackson.core.JsonGenerator.flush", "java.io.PrintStream.println", "org.apache.trevni.ColumnFileReader.close"], "call_func_parameter": [["java.io.OutputStream", "com.fasterxml.jackson.core.JsonEncoding"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["com.fasterxml.jackson.core.PrettyPrinter"], ["org.apache.trevni.Input"], [""], [""], ["java.lang.String", "long"], [""], ["java.lang.String"], [""], ["org.apache.trevni.MetaData"], [""], [""], [""], [""], [""], [""], [""]], "passed_comments": [{"org.apache.trevni.ColumnFileReader.getRowCount": "Return the number of rows in this file."}, {"org.apache.trevni.ColumnFileReader.getColumnCount": "Return the number of columns in this file."}, {"org.apache.trevni.ColumnFileReader.getMetaData": "Return this file's metadata."}, {"org.apache.trevni.ColumnFileReader.getColumnMetaData": "Return all columns' metadata."}, {"org.apache.trevni.ColumnFileReader.getColumnMetaData": "Return a column's metadata."}, {"org.apache.trevni.ColumnFileReader.getColumnMetaData": "Return a column's metadata."}]}, {"index": "1600", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Main.java", "methodName": "org.apache.avro.tool.Main.run", "methodParameterType": "String[]#", "methodParameterName": "args#", "methodBody": "private int run(String[] args) throws Exception {\n    if (args.length != 0) {\n      Tool tool = tools.get(args[0]);\n      if (tool != null) {\n        return tool.run(System.in, System.out, System.err, Arrays.asList(args).subList(1, args.length));\n      }\n    }\n    System.err.print(\"Version \");\n    try (InputStream versionInput = Main.class.getClassLoader().getResourceAsStream(\"VERSION.txt\")) {\n      printStream(versionInput);\n    }\n    System.err.print(\" of \");\n    try (InputStream noticeInput = Main.class.getClassLoader().getResourceAsStream(\"META-INF/NOTICE\")) {\n      printHead(noticeInput, 5);\n    }\n    System.err.println(\"----------------\");\n\n    System.err.println(\"Available tools:\");\n    for (Tool k : tools.values()) {\n      System.err.printf(\"%\" + maxLen + \"s  %s\\n\", k.getName(), k.getShortDescription());\n    }\n\n    return 1;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)TryStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Delegates to tool specified on the command-line.", "call_func_name": ["java.util.Map.get", "java.util.Arrays.asList", "java.util.List.subList", "org.apache.avro.tool.Tool.run", "java.io.PrintStream.print", "java.lang.Class.getClassLoader", "java.lang.ClassLoader.getResourceAsStream", "org.apache.avro.tool.Main.printStream", "java.io.InputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.avro.tool.Main.printHead", "java.io.PrintStream.println", "java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.avro.tool.Tool.getName", "org.apache.avro.tool.Tool.getShortDescription", "java.io.PrintStream.printf"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object[]"], ["int", "int"], ["java.io.InputStream", "java.io.PrintStream", "java.io.PrintStream", "java.util.List"], ["java.lang.String"], [""], ["java.lang.String"], ["java.io.InputStream"], [""], ["java.lang.Throwable"], ["java.io.InputStream", "int"], ["java.lang.String"], [""], [""], [""], [""], [""], ["java.lang.String"], ["int"], [""], [""], [""], ["java.lang.String", "java.lang.Object[]"]], "passed_comments": [{"org.apache.avro.tool.Tool.run": "Runs the tool with supplied arguments. Input and output streams are customizable for easier testing."}, {"org.apache.avro.tool.Tool.getName": "Name of tool, to be used in listings."}, {"org.apache.avro.tool.Tool.getShortDescription": "1-line description to be used in command listings."}]}, {"index": "1601", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.fileOrStdin", "methodParameterType": "String#InputStream#", "methodParameterName": "filename#stdin#", "methodBody": "static BufferedInputStream fileOrStdin(String filename, InputStream stdin) throws IOException {\n    return new BufferedInputStream(filename.equals(\"-\") ? stdin : openFromFS(filename));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns stdin if filename is \"-\", else opens the File in the owning filesystem and returns an InputStream for it. Relative paths will be opened in the default filesystem.", "call_func_name": ["java.lang.String.equals", "org.apache.avro.tool.Util.openFromFS", "java.io.BufferedInputStream.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"], ["java.io.InputStream"]], "passed_comments": [{"org.apache.avro.tool.Util.openFromFS": "Returns an InputStream for the file using the owning filesystem, or the default if none is given."}]}, {"index": "1602", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.fileOrStdout", "methodParameterType": "String#OutputStream#", "methodParameterName": "filename#stdout#", "methodBody": "static BufferedOutputStream fileOrStdout(String filename, OutputStream stdout) throws IOException {\n    return new BufferedOutputStream(filename.equals(\"-\") ? stdout : createFromFS(filename));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns stdout if filename is \"-\", else opens the file from the owning filesystem and returns an OutputStream for it. Relative paths will be opened in the default filesystem.", "call_func_name": ["java.lang.String.equals", "org.apache.avro.tool.Util.createFromFS", "java.io.BufferedOutputStream.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.lang.String"], ["java.io.OutputStream"]], "passed_comments": [{"org.apache.avro.tool.Util.createFromFS": "Opens the file for writing in the owning filesystem, or the default if none is given."}]}, {"index": "1603", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.openFromFS", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "static InputStream openFromFS(String filename) throws IOException {\n    Path p = new Path(filename);\n    return p.getFileSystem(new Configuration()).open(p);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an InputStream for the file using the owning filesystem, or the default if none is given.", "call_func_name": ["org.apache.hadoop.fs.Path.<init>", "org.apache.hadoop.conf.Configuration.<init>", "org.apache.hadoop.fs.Path.getFileSystem", "org.apache.hadoop.fs.FileSystem.open"], "call_func_parameter": [["java.lang.String"], [""], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.fs.Path"]], "passed_comments": "/"}, {"index": "1604", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.openFromFS", "methodParameterType": "Path#", "methodParameterName": "filename#", "methodBody": "static InputStream openFromFS(Path filename) throws IOException {\n    return filename.getFileSystem(new Configuration()).open(filename);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an InputStream for the file using the owning filesystem, or the default if none is given.", "call_func_name": ["org.apache.hadoop.conf.Configuration.<init>", "org.apache.hadoop.fs.Path.getFileSystem", "org.apache.hadoop.fs.FileSystem.open"], "call_func_parameter": [[""], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.fs.Path"]], "passed_comments": "/"}, {"index": "1605", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.openSeekableFromFS", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "static FsInput openSeekableFromFS(String filename) throws IOException {\n    return new FsInput(new Path(filename), new Configuration());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a seekable FsInput using the owning filesystem, or the default if none is given.", "call_func_name": ["org.apache.hadoop.fs.Path.<init>", "org.apache.hadoop.conf.Configuration.<init>", "org.apache.avro.mapred.FsInput.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["org.apache.hadoop.fs.Path", "org.apache.hadoop.conf.Configuration"]], "passed_comments": "/"}, {"index": "1606", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.createFromFS", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "static OutputStream createFromFS(String filename) throws IOException {\n    Path p = new Path(filename);\n    return new BufferedOutputStream(p.getFileSystem(new Configuration()).create(p));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Opens the file for writing in the owning filesystem, or the default if none is given.", "call_func_name": ["org.apache.hadoop.fs.Path.<init>", "org.apache.hadoop.conf.Configuration.<init>", "org.apache.hadoop.fs.Path.getFileSystem", "org.apache.hadoop.fs.FileSystem.create", "java.io.BufferedOutputStream.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.fs.Path"], ["java.io.OutputStream"]], "passed_comments": "/"}, {"index": "1607", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.close", "methodParameterType": "InputStream#", "methodParameterName": "in#", "methodBody": "static void close(InputStream in) {\n    if (!System.in.equals(in)) {\n      try {\n        in.close();\n      } catch (IOException e) {\n        System.err.println(\"could not close InputStream \" + in.toString());\n      }\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Closes the inputstream created from  {@link Util.fileOrStdin} unless it isSystem.in.", "call_func_name": ["java.lang.Object.equals", "java.io.InputStream.close", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Object.toString", "java.lang.StringBuilder.toString", "java.io.PrintStream.println"], "call_func_parameter": [["java.lang.Object"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1608", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.close", "methodParameterType": "OutputStream#", "methodParameterName": "out#", "methodBody": "static void close(OutputStream out) {\n    if (!System.out.equals(out)) {\n      try {\n        out.close();\n      } catch (IOException e) {\n        System.err.println(\"could not close OutputStream \" + out.toString());\n      }\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Closes the outputstream created from  {@link Util.fileOrStdout} unless it isSystem.out.", "call_func_name": ["java.lang.Object.equals", "java.io.OutputStream.close", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Object.toString", "java.lang.StringBuilder.toString", "java.io.PrintStream.println"], "call_func_parameter": [["java.lang.Object"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "1609", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.parseSchemaFromFS", "methodParameterType": "String#", "methodParameterName": "filename#", "methodBody": "static Schema parseSchemaFromFS(String filename) throws IOException {\n    InputStream stream = openFromFS(filename);\n    try {\n      return new Schema.Parser().parse(stream);\n    } finally {\n      close(stream);\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Parses a schema from the specified file.", "call_func_name": ["org.apache.avro.tool.Util.openFromFS", "org.apache.avro.tool.Util.close"], "call_func_parameter": [["java.lang.String"], ["java.io.InputStream"]], "passed_comments": [{"org.apache.avro.tool.Util.openFromFS": "Returns an InputStream for the file using the owning filesystem, or the default if none is given."}, {"org.apache.avro.tool.Util.close": "Closes the inputstream created from  {@link Util.fileOrStdin} unless it isSystem.in."}]}, {"index": "1610", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.getFiles", "methodParameterType": "String#", "methodParameterName": "fileOrDirName#", "methodBody": "static List<Path> getFiles(String fileOrDirName) throws IOException {\n    List<Path> pathList = new ArrayList<>();\n    Path path = new Path(fileOrDirName);\n    FileSystem fs = path.getFileSystem(new Configuration());\n\n    if (fs.isFile(path)) {\n      pathList.add(path);\n    } else if (fs.isDirectory(path)) {\n      for (FileStatus status : fs.listStatus(path)) {\n        if (!status.isDirectory()) {\n          pathList.add(status.getPath());\n        }\n      }\n    } else {\n      FileStatus[] fileStatuses = fs.globStatus(path);\n      if (fileStatuses != null) {\n        for (FileStatus status : fileStatuses) {\n          pathList.add(status.getPath());\n        }\n      } else {\n        throw new FileNotFoundException(fileOrDirName);\n      }\n    }\n    Collections.sort(pathList);\n    return pathList;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If pathname is a file, this method returns a list with a single absolute Path to that file. If pathname is a directory, this method returns a list of Pathes to all the files within this directory. Only files inside that directory are included, no subdirectories or files in subdirectories will be added. If pathname is a glob pattern, all files matching the pattern are included. The List is sorted alphabetically.", "call_func_name": ["java.util.ArrayList.<init>", "org.apache.hadoop.fs.Path.<init>", "org.apache.hadoop.conf.Configuration.<init>", "org.apache.hadoop.fs.Path.getFileSystem", "org.apache.hadoop.fs.FileSystem.isFile", "java.util.List.add", "org.apache.hadoop.fs.FileSystem.isDirectory", "org.apache.hadoop.fs.FileSystem.listStatus", "org.apache.hadoop.fs.FileStatus.isDirectory", "org.apache.hadoop.fs.FileStatus.getPath", "org.apache.hadoop.fs.FileSystem.globStatus", "java.io.FileNotFoundException.<init>", "java.util.Collections.sort"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.fs.Path"], ["java.lang.Object"], ["org.apache.hadoop.fs.Path"], ["org.apache.hadoop.fs.Path"], [""], [""], ["org.apache.hadoop.fs.Path"], ["java.lang.String"], ["java.util.List"]], "passed_comments": "/"}, {"index": "1611", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.getFiles", "methodParameterType": "List<String>#", "methodParameterName": "fileOrDirNames#", "methodBody": "static List<Path> getFiles(List<String> fileOrDirNames) throws IOException {\n    ArrayList<Path> pathList = new ArrayList<>();\n    for (String name : fileOrDirNames) {\n      pathList.addAll(getFiles(name));\n    }\n    Collections.sort(pathList);\n    return pathList;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Concatenate the result of  {@link #getFiles(String)} applied to all file ordirectory names. The list is sorted alphabetically and contains no subdirectories or files within those. The list is sorted alphabetically.", "call_func_name": ["java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.tool.Util.getFiles", "java.util.ArrayList.addAll", "java.util.Collections.sort"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String"], ["java.util.Collection"], ["java.util.List"]], "passed_comments": [{"org.apache.avro.tool.Util.getFiles": "If pathname is a file, this method returns a list with a single absolute Path to that file. If pathname is a directory, this method returns a list of Pathes to all the files within this directory. Only files inside that directory are included, no subdirectories or files in subdirectories will be added. If pathname is a glob pattern, all files matching the pattern are included. The List is sorted alphabetically."}, {"org.apache.avro.tool.Util.getFiles": "Concatenate the result of  {@link #getFiles(String)} applied to all file ordirectory names. The list is sorted alphabetically and contains no subdirectories or files within those. The list is sorted alphabetically."}]}, {"index": "1612", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.jsonToGenericDatum", "methodParameterType": "Schema#String#", "methodParameterName": "schema#jsonData#", "methodBody": "static Object jsonToGenericDatum(Schema schema, String jsonData) throws IOException {\n    GenericDatumReader<Object> reader = new GenericDatumReader<>(schema);\n    Object datum = reader.read(null, DecoderFactory.get().jsonDecoder(schema, jsonData));\n    return datum;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts a String JSON object into a generic datum. This is inefficient (creates extra objects), so should be used sparingly.", "call_func_name": ["org.apache.avro.generic.GenericDatumReader.<init>", "org.apache.avro.io.DecoderFactory.get", "org.apache.avro.io.DecoderFactory.jsonDecoder", "org.apache.avro.generic.GenericDatumReader.read"], "call_func_parameter": [["org.apache.avro.Schema"], [""], ["org.apache.avro.Schema", "java.lang.String"], ["java.lang.Object", "org.apache.avro.io.Decoder"]], "passed_comments": [{"org.apache.avro.io.DecoderFactory.get": "Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions. All creator methods create objects with default settings."}, {"org.apache.avro.io.DecoderFactory.jsonDecoder": "Creates a  {@link JsonDecoder} using the String provided for reading data thatconforms to the Schema provided. <p/>"}]}, {"index": "1613", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.datumFromFile", "methodParameterType": "Schema#String#", "methodParameterName": "schema#file#", "methodBody": "static Object datumFromFile(Schema schema, String file) throws IOException {\n    try (DataFileReader<Object> in = new DataFileReader<>(new File(file), new GenericDatumReader<>(schema))) {\n      return in.next();\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Reads and returns the first datum in a data file.", "call_func_name": ["java.io.File.<init>", "org.apache.avro.generic.GenericDatumReader.<init>", "org.apache.avro.file.DataFileReader.<init>", "org.apache.avro.file.DataFileReader.next", "org.apache.avro.file.DataFileReader.close", "java.lang.Throwable.addSuppressed"], "call_func_parameter": [["java.lang.String"], ["org.apache.avro.Schema"], ["java.io.File", "org.apache.avro.io.DatumReader"], [""], [""], ["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "1614", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Util.java", "methodName": "org.apache.avro.tool.Util.encodeHex", "methodParameterType": "byte[]#", "methodParameterName": "data#", "methodBody": "static String encodeHex(final byte[] data) {\n    final int l = data.length;\n    final char[] out = new char[l << 1];\n    // two characters form the hex value.\n    for (int i = 0, j = 0; i < l; i++) {\n      out[j++] = DIGITS_LOWER[(0xF0 & data[i]) >>> 4];\n      out[j++] = DIGITS_LOWER[0x0F & data[i]];\n    }\n    return new String(out);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#NumberLiteral#InfixExpression#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#NumberLiteral#SimpleName#SimpleName#ArrayAccess#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#NumberLiteral#SimpleName#SimpleName#ArrayAccess#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression)ArrayAccess)Assignment)ExpressionStatement)Block)ForStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order. The returned array will be double the length of the passed array, as it takes two characters to represent any given byte.", "call_func_name": ["java.lang.String.<init>"], "call_func_parameter": [["char[]"]], "passed_comments": "/"}, {"index": "1615", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Tool.java", "methodName": "org.apache.avro.tool.Tool.run", "methodParameterType": "InputStream#PrintStream#PrintStream#List<String>#", "methodParameterName": "in#out#err#args#", "methodBody": "int run(InputStream in, PrintStream out, PrintStream err, List<String> args) throws Exception;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Runs the tool with supplied arguments. Input and output streams are customizable for easier testing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1616", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Tool.java", "methodName": "org.apache.avro.tool.Tool.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Name of tool, to be used in listings.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1617", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/Tool.java", "methodName": "org.apache.avro.tool.Tool.getShortDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getShortDescription();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "1-line description to be used in command listings.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1618", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/TrevniToJsonTool.java", "methodName": "org.apache.avro.tool.TrevniToJsonTool.toJson", "methodParameterType": "Input#PrintStream#boolean#", "methodParameterName": "input#out#pretty#", "methodBody": "public void toJson(Input input, PrintStream out, boolean pretty) throws IOException {\n    this.generator = FACTORY.createGenerator(out, JsonEncoding.UTF8);\n    if (pretty) {\n      generator.useDefaultPrettyPrinter();\n    } else { // ensure newline separation\n      MinimalPrettyPrinter pp = new MinimalPrettyPrinter();\n      pp.setRootValueSeparator(System.getProperty(\"line.separator\"));\n      generator.setPrettyPrinter(pp);\n    }\n\n    ColumnFileReader reader = new ColumnFileReader(input);\n\n    int columnCount = (int) reader.getColumnCount();\n    this.values = new ColumnValues[columnCount];\n    this.shortNames = new String[columnCount];\n    for (int i = 0; i < columnCount; i++) {\n      values[i] = reader.getValues(i);\n      shortNames[i] = shortName(reader.getColumnMetaData(i));\n    }\n\n    List<ColumnMetaData> roots = reader.getRoots();\n    for (long row = 0; row < reader.getRowCount(); row++) {\n      for (ColumnValues v : values)\n        v.startRow();\n      generator.writeStartObject();\n      for (ColumnMetaData root : roots)\n        valueToJson(root);\n      generator.writeEndObject();\n    }\n    generator.flush();\n    out.println();\n    reader.close();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Read a Trevni file and print each row as a JSON object.", "call_func_name": ["com.fasterxml.jackson.core.JsonFactory.createGenerator", "com.fasterxml.jackson.core.JsonGenerator.useDefaultPrettyPrinter", "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.<init>", "java.lang.System.getProperty", "com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setRootValueSeparator", "com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter", "org.apache.trevni.ColumnFileReader.<init>", "org.apache.trevni.ColumnFileReader.getColumnCount", "org.apache.trevni.ColumnFileReader.getValues", "org.apache.trevni.ColumnFileReader.getColumnMetaData", "org.apache.avro.tool.TrevniToJsonTool.shortName", "org.apache.trevni.ColumnFileReader.getRoots", "org.apache.trevni.ColumnFileReader.getRowCount", "org.apache.trevni.ColumnValues.startRow", "com.fasterxml.jackson.core.JsonGenerator.writeStartObject", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.tool.TrevniToJsonTool.valueToJson", "com.fasterxml.jackson.core.JsonGenerator.writeEndObject", "com.fasterxml.jackson.core.JsonGenerator.flush", "java.io.PrintStream.println", "org.apache.trevni.ColumnFileReader.close"], "call_func_parameter": [["java.io.OutputStream", "com.fasterxml.jackson.core.JsonEncoding"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["com.fasterxml.jackson.core.PrettyPrinter"], ["org.apache.trevni.Input"], [""], ["int"], ["int"], ["org.apache.trevni.ColumnMetaData"], [""], [""], [""], [""], [""], [""], [""], ["org.apache.trevni.ColumnMetaData"], [""], [""], [""], [""]], "passed_comments": [{"org.apache.trevni.ColumnFileReader.getColumnCount": "Return the number of columns in this file."}, {"org.apache.trevni.ColumnFileReader.getValues": "Return an iterator over values in a column."}, {"org.apache.trevni.ColumnFileReader.getColumnMetaData": "Return a column's metadata."}, {"org.apache.trevni.ColumnFileReader.getRoots": "Return root columns' metadata. Roots are columns that have no parent."}, {"org.apache.trevni.ColumnFileReader.getRowCount": "Return the number of rows in this file."}, {"org.apache.trevni.ColumnValues.startRow": "Expert: Must be called before any calls to  {@link #nextLength()} or{@link #nextValue()}."}]}, {"index": "1619", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/TrevniUtil.java", "methodName": "org.apache.avro.tool.TrevniUtil.input", "methodParameterType": "String#InputStream#", "methodParameterName": "filename#stdin#", "methodBody": "static InputStream input(String filename, InputStream stdin) throws IOException {\n    if (filename.equals(\"-\"))\n      return new BufferedInputStream(stdin);\n    else if (filename.startsWith(\"hdfs://\")) {\n      FileSystem fs = FileSystem.get(URI.create(filename), new Configuration());\n      return new BufferedInputStream(fs.open(new Path(filename)));\n    } else {\n      return new BufferedInputStream(new FileInputStream(new File(filename)));\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Returns stdin if filename is \"-\", else opens the local or HDFS file and returns an InputStream for it.", "call_func_name": ["java.lang.String.equals", "java.io.BufferedInputStream.<init>", "java.lang.String.startsWith", "java.net.URI.create", "org.apache.hadoop.conf.Configuration.<init>", "org.apache.hadoop.fs.FileSystem.get", "org.apache.hadoop.fs.Path.<init>", "org.apache.hadoop.fs.FileSystem.open", "java.io.File.<init>", "java.io.FileInputStream.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.io.InputStream"], ["java.lang.String"], ["java.lang.String"], [""], ["java.net.URI", "org.apache.hadoop.conf.Configuration"], ["java.lang.String"], ["org.apache.hadoop.fs.Path"], ["java.lang.String"], ["java.io.File"]], "passed_comments": "/"}, {"index": "1620", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/TrevniUtil.java", "methodName": "org.apache.avro.tool.TrevniUtil.output", "methodParameterType": "String#OutputStream#", "methodParameterName": "filename#stdout#", "methodBody": "static OutputStream output(String filename, OutputStream stdout) throws IOException {\n    if (filename.equals(\"-\"))\n      return new BufferedOutputStream(stdout);\n    else if (filename.startsWith(\"hdfs://\")) {\n      FileSystem fs = FileSystem.get(URI.create(filename), new Configuration());\n      return new BufferedOutputStream(fs.create(new Path(filename)));\n    } else {\n      return new BufferedOutputStream(new FileOutputStream(new File(filename)));\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Returns stdout if filename is \"-\", else opens the local or HDFS file and returns an OutputStream for it.", "call_func_name": ["java.lang.String.equals", "java.io.BufferedOutputStream.<init>", "java.lang.String.startsWith", "java.net.URI.create", "org.apache.hadoop.conf.Configuration.<init>", "org.apache.hadoop.fs.FileSystem.get", "org.apache.hadoop.fs.Path.<init>", "org.apache.hadoop.fs.FileSystem.create", "java.io.File.<init>", "java.io.FileOutputStream.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.io.OutputStream"], ["java.lang.String"], ["java.lang.String"], [""], ["java.net.URI", "org.apache.hadoop.conf.Configuration"], ["java.lang.String"], ["org.apache.hadoop.fs.Path"], ["java.lang.String"], ["java.io.File"]], "passed_comments": "/"}, {"index": "1621", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/CatTool.java", "methodName": "org.apache.avro.tool.CatTool.skip", "methodParameterType": "long#", "methodParameterName": "skip#", "methodBody": "private long skip(long skip) throws IOException {\n    long skipped = 0;\n    while (0 < skip && reader.hasNext()) {\n      reader.next(reuse);\n      skip--;\n      skipped++;\n    }\n    if ((0 < skip) && hasNextInput()) { // goto next file\n      nextInput();\n      skipped = skipped + skip(skip);\n    }\n    return skipped;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#NumberLiteral#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#NumberLiteral#SimpleName#InfixExpression#ParenthesizedExpression#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "skips a number of records from the input", "call_func_name": ["org.apache.avro.file.DataFileStream.hasNext", "org.apache.avro.file.DataFileStream.next", "org.apache.avro.tool.CatTool.hasNextInput", "org.apache.avro.tool.CatTool.nextInput", "org.apache.avro.tool.CatTool.skip"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""], ["long"]], "passed_comments": [{"org.apache.avro.file.DataFileStream.hasNext": "True if more entries remain in this file."}, {"org.apache.avro.tool.CatTool.skip": "skips a number of records from the input"}]}, {"index": "1622", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/CatTool.java", "methodName": "org.apache.avro.tool.CatTool.writeRecords", "methodParameterType": "long#double#", "methodParameterName": "count#samplerate#", "methodBody": "private long writeRecords(long count, double samplerate) throws IOException {\n    long written = 0;\n    while (written < count && reader.hasNext()) {\n      reuse = reader.next(reuse);\n      sampleCounter = sampleCounter + samplerate;\n      if (sampleCounter >= 1) {\n        writer.append(reuse);\n        written++;\n        sampleCounter--;\n      }\n    }\n    totalCopied = totalCopied + written;\n    if (written < count && hasNextInput()) { // goto next file\n      nextInput();\n      written = written + writeRecords(count - written, samplerate);\n    }\n    return written;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#InfixExpression#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement)Block)WhileStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "writes records with the given samplerate The record at position offset is guaranteed to be taken", "call_func_name": ["org.apache.avro.file.DataFileStream.hasNext", "org.apache.avro.file.DataFileStream.next", "org.apache.avro.file.DataFileWriter.append", "org.apache.avro.tool.CatTool.hasNextInput", "org.apache.avro.tool.CatTool.nextInput", "org.apache.avro.tool.CatTool.writeRecords"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.Object"], [""], [""], ["long", "double"]], "passed_comments": [{"org.apache.avro.file.DataFileStream.hasNext": "True if more entries remain in this file."}, {"org.apache.avro.tool.CatTool.writeRecords": "writes records with the given samplerate The record at position offset is guaranteed to be taken"}]}, {"index": "1623", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/ConcatTool.java", "methodName": "org.apache.avro.tool.ConcatTool.run", "methodParameterType": "InputStream#PrintStream#PrintStream#List<String>#", "methodParameterName": "in#out#err#args#", "methodBody": "@Override\n  public int run(InputStream in, PrintStream out, PrintStream err, List<String> args) throws Exception {\n\n    if (args.isEmpty()) {\n      printHelp(out);\n      return 0;\n    }\n\n    OutputStream output = out;\n    if (args.size() > 1) {\n      output = Util.fileOrStdout(args.get(args.size() - 1), out);\n      args = args.subList(0, args.size() - 1);\n    }\n\n    DataFileWriter<GenericRecord> writer = new DataFileWriter<>(new GenericDatumWriter<>());\n    Schema schema = null;\n    Map<String, byte[]> metadata = new TreeMap<>();\n    String inputCodec = null;\n\n    for (String inFile : expandsInputFiles(args)) {\n      InputStream input = Util.fileOrStdin(inFile, in);\n      DataFileStream<GenericRecord> reader = new DataFileStream<>(input, new GenericDatumReader<>());\n\n      if (schema == null) {\n        // this is the first file - set up the writer, and store the\n        // Schema & metadata we'll use.\n        schema = reader.getSchema();\n        for (String key : reader.getMetaKeys()) {\n          if (!DataFileWriter.isReservedMeta(key)) {\n            byte[] metadatum = reader.getMeta(key);\n            metadata.put(key, metadatum);\n            writer.setMeta(key, metadatum);\n          }\n        }\n        inputCodec = reader.getMetaString(DataFileConstants.CODEC);\n        if (inputCodec == null) {\n          inputCodec = DataFileConstants.NULL_CODEC;\n        }\n        writer.setCodec(CodecFactory.fromString(inputCodec));\n        writer.create(schema, output);\n      } else {\n        // check that we're appending to the same schema & metadata.\n        if (!schema.equals(reader.getSchema())) {\n          err.println(\"input files have different schemas\");\n          reader.close();\n          return 1;\n        }\n        for (String key : reader.getMetaKeys()) {\n          if (!DataFileWriter.isReservedMeta(key)) {\n            byte[] metadatum = reader.getMeta(key);\n            byte[] writersMetadatum = metadata.get(key);\n            if (!Arrays.equals(metadatum, writersMetadatum)) {\n              err.println(\"input files have different non-reserved metadata\");\n              reader.close();\n              return 2;\n            }\n          }\n        }\n        String thisCodec = reader.getMetaString(DataFileConstants.CODEC);\n        if (thisCodec == null) {\n          thisCodec = DataFileConstants.NULL_CODEC;\n        }\n        if (!inputCodec.equals(thisCodec)) {\n          err.println(\"input files have different codecs\");\n          reader.close();\n          return 3;\n        }\n      }\n\n      writer.appendAllFrom(reader, /* recompress */ false);\n      reader.close();\n    }\n\n    writer.close();\n    return 0;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NumberLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#PrimitiveType#Dimension#ArrayType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NumberLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NumberLiteral#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NumberLiteral#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return 0 for success, 1 if the schemas of the input files differ, 2 if thenon-reserved input metadata differs, 3 if the input files are encoded with more than one codec.", "call_func_name": ["java.util.List.isEmpty", "org.apache.avro.tool.ConcatTool.printHelp", "java.util.List.size", "java.util.List.get", "org.apache.avro.tool.Util.fileOrStdout", "java.util.List.subList", "org.apache.avro.generic.GenericDatumWriter.<init>", "org.apache.avro.file.DataFileWriter.<init>", "java.util.TreeMap.<init>", "org.apache.avro.tool.ConcatTool.expandsInputFiles", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.tool.Util.fileOrStdin", "org.apache.avro.generic.GenericDatumReader.<init>", "org.apache.avro.file.DataFileStream.<init>", "org.apache.avro.file.DataFileStream.getSchema", "org.apache.avro.file.DataFileStream.getMetaKeys", "org.apache.avro.file.DataFileWriter.isReservedMeta", "org.apache.avro.file.DataFileStream.getMeta", "java.util.Map.put", "org.apache.avro.file.DataFileWriter.setMeta", "org.apache.avro.file.DataFileStream.getMetaString", "org.apache.avro.file.CodecFactory.fromString", "org.apache.avro.file.DataFileWriter.setCodec", "org.apache.avro.file.DataFileWriter.create", "org.apache.avro.Schema.equals", "java.io.PrintStream.println", "org.apache.avro.file.DataFileStream.close", "java.util.Map.get", "java.util.Arrays.equals", "java.lang.String.equals", "org.apache.avro.file.DataFileWriter.appendAllFrom", "org.apache.avro.file.DataFileWriter.close"], "call_func_parameter": [[""], ["java.io.PrintStream"], [""], ["int"], ["java.lang.String", "java.io.OutputStream"], ["int", "int"], [""], ["org.apache.avro.io.DatumWriter"], [""], ["java.util.List"], [""], [""], [""], ["java.lang.String", "java.io.InputStream"], [""], ["java.io.InputStream", "org.apache.avro.io.DatumReader"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"], ["java.lang.String", "byte[]"], ["java.lang.String"], ["java.lang.String"], ["org.apache.avro.file.CodecFactory"], ["org.apache.avro.Schema", "java.io.OutputStream"], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.Object"], ["byte[]", "byte[]"], ["java.lang.Object"], ["org.apache.avro.file.DataFileStream", "boolean"], [""]], "passed_comments": [{"org.apache.avro.tool.Util.fileOrStdout": "Returns stdout if filename is \"-\", else opens the file from the owning filesystem and returns an OutputStream for it. Relative paths will be opened in the default filesystem."}, {"org.apache.avro.tool.ConcatTool.expandsInputFiles": "Processes a list of input files to expand directories if needed."}, {"org.apache.avro.tool.Util.fileOrStdin": "Returns stdin if filename is \"-\", else opens the File in the owning filesystem and returns an InputStream for it. Relative paths will be opened in the default filesystem."}, {"org.apache.avro.file.DataFileStream.getSchema": "Return the schema used in this file."}, {"org.apache.avro.file.DataFileStream.getMetaKeys": "Return the list of keys in the metadata"}, {"org.apache.avro.file.DataFileStream.getMeta": "Return the value of a metadata property."}, {"org.apache.avro.file.DataFileWriter.setMeta": "Set a metadata property."}, {"org.apache.avro.file.DataFileStream.getMetaString": "Return the value of a metadata property."}, {"org.apache.avro.file.CodecFactory.fromString": "Maps a codec name into a CodecFactory. Currently there are six codecs registered by default: <ul> <li> {@code null}</li> <li> {@code deflate}</li> <li> {@code snappy}</li> <li> {@code bzip2}</li> <li> {@code xz}</li> <li> {@code zstandard}</li> </ul>"}, {"org.apache.avro.file.DataFileWriter.setCodec": "Configures this writer to use the given codec. May not be reset after writes have begun."}, {"org.apache.avro.file.DataFileWriter.create": "Open a new file for data matching a schema with a random sync."}, {"org.apache.avro.file.DataFileStream.close": "Close this reader."}, {"org.apache.avro.file.DataFileWriter.appendAllFrom": "Appends data from another file. otherFile must have the same schema. Data blocks will be copied without de-serializing data. If the codecs of the two files are compatible, data blocks are copied directly without decompression. If the codecs are not compatible, blocks from otherFile are uncompressed and then compressed using this file's codec. <p/> If the recompress flag is set all blocks are decompressed and then compressed using this file's codec. This is useful when the two files have compatible compression codecs but different codec options. For example, one might append a file compressed with deflate at compression level 1 to a file with deflate at compression level 7. If <i>recompress</i> is false, blocks will be copied without changing the compression level. If true, they will be converted to the new compression level."}, {"org.apache.avro.file.DataFileWriter.close": "Flush and close the file."}]}, {"index": "1624", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/ConcatTool.java", "methodName": "org.apache.avro.tool.ConcatTool.expandsInputFiles", "methodParameterType": "List<String>#", "methodParameterName": "args#", "methodBody": "private static List<String> expandsInputFiles(List<String> args) throws IOException {\n    List<String> files = new ArrayList<>();\n\n    for (String arg : args) {\n      if (arg.equals(\"-\")) {\n        files.add(arg);\n      } else {\n        List<Path> paths = Util.getFiles(arg);\n        for (Path path : paths) {\n          files.add(path.toString());\n        }\n      }\n    }\n\n    return files;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Processes a list of input files to expand directories if needed.", "call_func_name": ["java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.equals", "java.util.List.add", "org.apache.avro.tool.Util.getFiles", "org.apache.hadoop.fs.Path.toString"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.String"], [""]], "passed_comments": [{"org.apache.avro.tool.Util.getFiles": "If pathname is a file, this method returns a list with a single absolute Path to that file. If pathname is a directory, this method returns a list of Pathes to all the files within this directory. Only files inside that directory are included, no subdirectories or files in subdirectories will be added. If pathname is a glob pattern, all files matching the pattern are included. The List is sorted alphabetically."}, {"org.apache.avro.tool.Util.getFiles": "Concatenate the result of  {@link #getFiles(String)} applied to all file ordirectory names. The list is sorted alphabetically and contains no subdirectories or files within those. The list is sorted alphabetically."}]}, {"index": "1625", "file": "/root/repos/repos8/avro/lang/java/tools/src/main/java/org/apache/avro/tool/SpecificCompilerTool.java", "methodName": "org.apache.avro.tool.SpecificCompilerTool.determineInputs", "methodParameterType": "List<File>#FilenameFilter#", "methodParameterName": "inputs#filter#", "methodBody": "private static File[] determineInputs(List<File> inputs, FilenameFilter filter) {\n    Set<File> fileSet = new LinkedHashSet<>(); // preserve order and uniqueness\n\n    for (File file : inputs) {\n      // if directory, look at contents to see what files match extension\n      if (file.isDirectory()) {\n        File[] files = file.listFiles(filter);\n        Collections.addAll(fileSet, files != null ? files : new File[0]);\n      }\n      // otherwise, just add the file.\n      else {\n        fileSet.add(file);\n      }\n    }\n\n    if (fileSet.size() > 0) {\n      System.err.println(\"Input files to compile:\");\n      for (File file : fileSet) {\n        System.err.println(\"  \" + file);\n      }\n    } else {\n      System.err.println(\"No input files found.\");\n    }\n\n    return fileSet.toArray(new File[0]);\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#ConditionalExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)ConditionalExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For a List of files or directories, returns a File[] containing each file passed as well as each file with a matching extension found in the directory.", "call_func_name": ["java.util.LinkedHashSet.<init>", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.io.File.isDirectory", "java.io.File.listFiles", "java.util.Collections.addAll", "java.util.Set.add", "java.util.Set.size", "java.io.PrintStream.println", "java.util.Set.iterator", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.Set.toArray"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.io.FilenameFilter"], ["java.util.Collection", "java.lang.Object[]"], ["java.lang.Object"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "1626", "file": "/root/repos/repos8/avro/lang/java/thrift/src/main/java/org/apache/avro/thrift/ThriftData.java", "methodName": "org.apache.avro.thrift.ThriftData.get", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ThriftData get() {\n    return INSTANCE;\n  }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the singleton instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1627", "file": "/root/repos/repos8/avro/lang/java/thrift/src/main/java/org/apache/avro/thrift/ThriftData.java", "methodName": "org.apache.avro.thrift.ThriftData.getSchema", "methodParameterType": "Class#", "methodParameterName": "c#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  public Schema getSchema(Class c) {\n    Schema schema = schemaCache.get(c);\n\n    if (schema == null) { // cache miss\n      try {\n        if (TEnum.class.isAssignableFrom(c)) { // enum\n          List<String> symbols = new ArrayList<>();\n          for (Enum e : ((Class<? extends Enum>) c).getEnumConstants())\n            symbols.add(e.name());\n          schema = Schema.createEnum(c.getName(), null, null, symbols);\n        } else if (TBase.class.isAssignableFrom(c)) { // struct\n          schema = Schema.createRecord(c.getName(), null, null, Throwable.class.isAssignableFrom(c));\n          List<Field> fields = new ArrayList<>();\n          for (FieldMetaData f : FieldMetaData.getStructMetaDataMap((Class<? extends TBase>) c).values()) {\n            Schema s = getSchema(f.valueMetaData);\n            if (f.requirementType == TFieldRequirementType.OPTIONAL && (s.getType() != Schema.Type.UNION))\n              s = nullable(s);\n            fields.add(new Field(f.fieldName, s, null, null));\n          }\n          schema.setFields(fields);\n        } else {\n          throw new RuntimeException(\"Not a Thrift-generated class: \" + c);\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      schemaCache.put(c, schema); // update cache\n    }\n    return schema;\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#NullLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#NullLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#NullLiteral#NullLiteral#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(ParenthesizedExpression(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)EnhancedForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral(NullLiteral)NullLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)ParenthesizedExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a record schema given a thrift generated class.", "call_func_name": ["java.util.Map.get", "java.lang.Class.isAssignableFrom", "java.util.ArrayList.<init>", "java.lang.Class.getEnumConstants", "java.lang.Enum.name", "java.util.List.add", "java.lang.Class.getName", "org.apache.avro.Schema.createEnum", "org.apache.avro.Schema.createRecord", "org.apache.thrift.meta_data.FieldMetaData.getStructMetaDataMap", "java.util.Map.values", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.apache.avro.thrift.ThriftData.getSchema", "org.apache.avro.Schema.getType", "org.apache.avro.thrift.ThriftData.nullable", "org.apache.avro.Schema.setFields", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.RuntimeException.<init>", "java.lang.RuntimeException.<init>", "java.util.Map.put"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Class"], [""], [""], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.util.List"], ["java.lang.String", "java.lang.String", "java.lang.String", "boolean"], ["java.lang.Class"], [""], [""], [""], [""], ["org.apache.thrift.meta_data.FieldValueMetaData"], [""], ["org.apache.avro.Schema"], ["java.util.List"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["java.lang.Throwable"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.apache.avro.Schema.createEnum": "Create an enum schema."}, {"org.apache.avro.Schema.createRecord": "Create a named record schema."}, {"org.apache.avro.Schema.getType": "Return the type of this schema."}, {"org.apache.avro.Schema.setFields": "If this is a record, set its fields. The fields can be set only once in a schema."}]}, {"index": "1628", "file": "/root/repos/repos8/avro/lang/java/thrift/src/main/java/org/apache/avro/thrift/ThriftDatumReader.java", "methodName": "org.apache.avro.thrift.ThriftDatumReader.ThriftDatumReader", "methodParameterType": "Schema#", "methodParameterName": "schema#", "methodBody": "public ThriftDatumReader(Schema schema) {\n    this(schema, schema, ThriftData.get());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct where the writer's and reader's schemas are the same.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1629", "file": "/root/repos/repos8/avro/lang/java/thrift/src/main/java/org/apache/avro/thrift/ThriftDatumReader.java", "methodName": "org.apache.avro.thrift.ThriftDatumReader.ThriftDatumReader", "methodParameterType": "Schema#Schema#", "methodParameterName": "writer#reader#", "methodBody": "public ThriftDatumReader(Schema writer, Schema reader) {\n    this(writer, reader, ThriftData.get());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct given writer's and reader's schema.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1630", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/AvroColumnWriter.java", "methodName": "org.apache.trevni.avro.AvroColumnWriter.sizeEstimate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long sizeEstimate() {\n    return writer.sizeEstimate();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the approximate size of the file that will be written. Tries to slightly over-estimate. Indicates both the size in memory of the buffered data as well as the size of the file that will be written by {@link #writeTo(OutputStream)}.", "call_func_name": ["org.apache.trevni.ColumnFileWriter.sizeEstimate"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.trevni.ColumnFileWriter.sizeEstimate": "Return the approximate size of the file that will be written. Tries to slightly over-estimate. Indicates both the size in memory of the buffered data as well as the size of the file that will be written by {@link #writeTo(OutputStream)}."}]}, {"index": "1631", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/AvroColumnWriter.java", "methodName": "org.apache.trevni.avro.AvroColumnWriter.writeTo", "methodParameterType": "OutputStream#", "methodParameterName": "out#", "methodBody": "public void writeTo(OutputStream out) throws IOException {\n    writer.writeTo(out);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Write all rows added to the named output stream.", "call_func_name": ["org.apache.trevni.ColumnFileWriter.writeTo"], "call_func_parameter": [["java.io.OutputStream"]], "passed_comments": [{"org.apache.trevni.ColumnFileWriter.writeTo": "Write all rows added to the named output stream."}]}, {"index": "1632", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/AvroColumnWriter.java", "methodName": "org.apache.trevni.avro.AvroColumnWriter.writeTo", "methodParameterType": "File#", "methodParameterName": "file#", "methodBody": "public void writeTo(File file) throws IOException {\n    writer.writeTo(file);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Write all rows added to the named file.", "call_func_name": ["org.apache.trevni.ColumnFileWriter.writeTo"], "call_func_parameter": [["java.io.File"]], "passed_comments": [{"org.apache.trevni.ColumnFileWriter.writeTo": "Write all rows added to the named file."}]}, {"index": "1633", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/AvroColumnWriter.java", "methodName": "org.apache.trevni.avro.AvroColumnWriter.write", "methodParameterType": "D#", "methodParameterName": "value#", "methodBody": "public void write(D value) throws IOException {\n    writer.startRow();\n    int count = write(value, schema, 0);\n    assert (count == writer.getColumnCount());\n    writer.endRow();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#AssertStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(AssertStatement(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)AssertStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a row to the file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1634", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/HadoopInput.java", "methodName": "org.apache.trevni.avro.HadoopInput.HadoopInput", "methodParameterType": "Path#Configuration#", "methodParameterName": "path#conf#", "methodBody": "public HadoopInput(Path path, Configuration conf) throws IOException {\n    this.stream = path.getFileSystem(conf).open(path);\n    this.len = path.getFileSystem(conf).getFileStatus(path).getLen();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct given a path and a configuration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1635", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/AvroColumnator.java", "methodName": "org.apache.trevni.avro.AvroColumnator.getColumns", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ColumnMetaData[] getColumns() {\n    return columns.toArray(new ColumnMetaData[0]);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return columns for the schema.", "call_func_name": ["java.util.List.toArray"], "call_func_parameter": [["java.lang.Object[]"]], "passed_comments": "/"}, {"index": "1636", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/AvroColumnator.java", "methodName": "org.apache.trevni.avro.AvroColumnator.getArrayWidths", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int[] getArrayWidths() {\n    int[] result = new int[arrayWidths.size()];\n    int i = 0;\n    for (Integer width : arrayWidths)\n      result[i++] = width;\n    return result;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#Assignment#ExpressionStatement#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return array giving the number of columns immediately following each column that are descendents of that column.", "call_func_name": ["java.util.List.size", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.Integer.intValue"], "call_func_parameter": [[""], [""], [""], [""], [""]], "passed_comments": "/"}, {"index": "1637", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/AvroColumnReader.java", "methodName": "org.apache.trevni.avro.AvroColumnReader.AvroColumnReader", "methodParameterType": "Params#", "methodParameterName": "params#", "methodBody": "public AvroColumnReader(Params params) throws IOException {\n    this.reader = new ColumnFileReader(params.input);\n    this.model = params.model;\n    this.fileSchema = new Schema.Parser().parse(reader.getMetaData().getString(AvroColumnWriter.SCHEMA_KEY));\n    this.readSchema = params.schema == null ? fileSchema : params.schema;\n    initialize();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ConditionalExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct a reader for a file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1638", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/AvroColumnReader.java", "methodName": "org.apache.trevni.avro.AvroColumnReader.getFileSchema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Schema getFileSchema() {\n    return fileSchema;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the schema for data in this file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1639", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/AvroColumnReader.java", "methodName": "org.apache.trevni.avro.AvroColumnReader.getRowCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getRowCount() {\n    return reader.getRowCount();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the number of rows in this file.", "call_func_name": ["org.apache.trevni.ColumnFileReader.getRowCount"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.trevni.ColumnFileReader.getRowCount": "Return the number of rows in this file."}]}, {"index": "1640", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/AvroTrevniOutputFormat.java", "methodName": "org.apache.trevni.avro.AvroTrevniOutputFormat.setMeta", "methodParameterType": "JobConf#String#String#", "methodParameterName": "job#key#value#", "methodBody": "public static void setMeta(JobConf job, String key, String value) {\n    job.set(META_PREFIX + key, value);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add metadata to job output files.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.hadoop.mapred.JobConf.set"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "1641", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniRecordReaderBase.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniRecordReaderBase.initialize", "methodParameterType": "InputSplit#TaskAttemptContext#", "methodParameterName": "inputSplit#context#", "methodBody": "@Override\n  public void initialize(InputSplit inputSplit, TaskAttemptContext context) throws IOException, InterruptedException {\n    final FileSplit file = (FileSplit) inputSplit;\n    context.setStatus(file.toString());\n\n    final AvroColumnReader.Params params = new AvroColumnReader.Params(\n        new HadoopInput(file.getPath(), context.getConfiguration()));\n    params.setModel(ReflectData.get());\n\n    if (AvroJob.getInputKeySchema(context.getConfiguration()) != null) {\n      params.setSchema(AvroJob.getInputKeySchema(context.getConfiguration()));\n    }\n\n    reader = new AvroColumnReader<>(params);\n    rows = reader.getRowCount();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.hadoop.mapreduce.lib.input.FileSplit.toString", "org.apache.hadoop.mapreduce.TaskAttemptContext.setStatus", "org.apache.hadoop.mapreduce.lib.input.FileSplit.getPath", "org.apache.hadoop.mapreduce.TaskAttemptContext.getConfiguration", "org.apache.trevni.avro.HadoopInput.<init>", "org.apache.avro.reflect.ReflectData.get", "org.apache.avro.mapreduce.AvroJob.getInputKeySchema", "org.apache.trevni.avro.AvroColumnReader.getRowCount"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["org.apache.hadoop.fs.Path", "org.apache.hadoop.conf.Configuration"], [""], ["org.apache.hadoop.conf.Configuration"], [""]], "passed_comments": [{"org.apache.avro.reflect.ReflectData.get": "Return the singleton instance."}, {"org.apache.avro.mapreduce.AvroJob.getInputKeySchema": "Gets the job input key schema."}, {"org.apache.trevni.avro.AvroColumnReader.getRowCount": "Return the number of rows in this file."}]}, {"index": "1642", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniRecordReaderBase.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniRecordReaderBase.nextKeyValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public boolean nextKeyValue() throws IOException, InterruptedException {\n    if (!reader.hasNext())\n      return false;\n    mCurrentRecord = reader.next();\n    row++;\n    return true;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.trevni.avro.AvroColumnReader.hasNext", "org.apache.trevni.avro.AvroColumnReader.next"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "1643", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniRecordReaderBase.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniRecordReaderBase.getCurrentRecord", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected T getCurrentRecord() {\n    return mCurrentRecord;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the current record read from the Trevni container file. <p> Calling <code>nextKeyValue()</code> moves this to the next record. </p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1644", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniRecordReaderBase.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniRecordReaderBase.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public void close() throws IOException {\n    reader.close();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.trevni.avro.AvroColumnReader.close"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1645", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniRecordReaderBase.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniRecordReaderBase.getProgress", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public float getProgress() throws IOException, InterruptedException {\n    return row / rows;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1646", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyValueOutputFormat.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueOutputFormat.getRecordWriter", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "@Override\n  public RecordWriter<AvroKey<K>, AvroValue<V>> getRecordWriter(TaskAttemptContext context)\n      throws IOException, InterruptedException {\n\n    return new AvroTrevniKeyValueRecordWriter<>(context);\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordWriter.<init>"], "call_func_parameter": [["org.apache.hadoop.mapreduce.TaskAttemptContext"]], "passed_comments": "/"}, {"index": "1647", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyValueInputFormat.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueInputFormat.createRecordReader", "methodParameterType": "InputSplit#TaskAttemptContext#", "methodParameterName": "split#context#", "methodBody": "@Override\n  public RecordReader<AvroKey<K>, AvroValue<V>> createRecordReader(InputSplit split, TaskAttemptContext context)\n      throws IOException, InterruptedException {\n\n    return new AvroTrevniKeyValueRecordReader<>();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordReader.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "1648", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyValueRecordWriter.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordWriter.AvroTrevniKeyValueRecordWriter", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "public AvroTrevniKeyValueRecordWriter(TaskAttemptContext context) throws IOException {\n    super(context);\n\n    mKeyValuePairSchema = initSchema(context);\n    keyValueRecord = new AvroKeyValue<>(new GenericData.Record(mKeyValuePairSchema));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SuperConstructorInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1649", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyValueRecordWriter.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordWriter.write", "methodParameterType": "AvroKey<K>#AvroValue<V>#", "methodParameterName": "key#value#", "methodBody": "@Override\n  public void write(AvroKey<K> key, AvroValue<V> value) throws IOException, InterruptedException {\n\n    keyValueRecord.setKey(key.datum());\n    keyValueRecord.setValue(value.datum());\n    writer.write(keyValueRecord.get());\n    if (writer.sizeEstimate() >= blockSize) // block full\n      flush();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.mapred.AvroKey.datum", "org.apache.avro.hadoop.io.AvroKeyValue.setKey", "org.apache.avro.mapred.AvroValue.datum", "org.apache.avro.hadoop.io.AvroKeyValue.setValue", "org.apache.avro.hadoop.io.AvroKeyValue.get", "org.apache.trevni.avro.AvroColumnWriter.write", "org.apache.trevni.avro.AvroColumnWriter.sizeEstimate", "org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordWriter.flush"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.lang.Object"], [""], ["java.lang.Object"], [""], [""]], "passed_comments": [{"org.apache.avro.hadoop.io.AvroKeyValue.get": "Gets the wrapped key/value GenericRecord."}, {"org.apache.trevni.avro.AvroColumnWriter.sizeEstimate": "Return the approximate size of the file that will be written. Tries to slightly over-estimate. Indicates both the size in memory of the buffered data as well as the size of the file that will be written by {@link #writeTo(OutputStream)}."}]}, {"index": "1650", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyValueRecordWriter.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordWriter.initSchema", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "@SuppressWarnings(\"unchecked\")\n  @Override\n  protected Schema initSchema(TaskAttemptContext context) {\n    AvroDatumConverterFactory converterFactory = new AvroDatumConverterFactory(context.getConfiguration());\n\n    keyConverter = converterFactory.create((Class<K>) context.getOutputKeyClass());\n    valueConverter = converterFactory.create((Class<V>) context.getOutputValueClass());\n\n    // Create the generic record schema for the key/value pair.\n    return AvroKeyValue.getSchema(keyConverter.getWriterSchema(), valueConverter.getWriterSchema());\n\n  }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#CastExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.hadoop.mapreduce.TaskAttemptContext.getConfiguration", "org.apache.avro.hadoop.io.AvroDatumConverterFactory.<init>", "org.apache.hadoop.mapreduce.TaskAttemptContext.getOutputKeyClass", "org.apache.avro.hadoop.io.AvroDatumConverterFactory.create", "org.apache.hadoop.mapreduce.TaskAttemptContext.getOutputValueClass", "org.apache.avro.hadoop.io.AvroDatumConverter.getWriterSchema", "org.apache.avro.hadoop.io.AvroKeyValue.getSchema"], "call_func_parameter": [[""], ["org.apache.hadoop.conf.Configuration"], [""], ["java.lang.Class"], [""], [""], ["org.apache.avro.Schema", "org.apache.avro.Schema"]], "passed_comments": [{"org.apache.avro.hadoop.io.AvroDatumConverterFactory.create": "Creates a converter that turns objects of type <code>inputClass</code> into Avro data."}, {"org.apache.avro.hadoop.io.AvroDatumConverter.getWriterSchema": "Gets the writer schema that should be used to serialize the output Avro datum."}, {"org.apache.avro.hadoop.io.AvroKeyValue.getSchema": "Creates a KeyValuePair generic record schema."}]}, {"index": "1651", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyValueRecordReader.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordReader.getCurrentKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public AvroKey<K> getCurrentKey() throws IOException, InterruptedException {\n    return mCurrentKey;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordReader.getCurrentKey"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordReader.getCurrentKey": "{@inheritDoc}"}]}, {"index": "1652", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyValueRecordReader.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordReader.getCurrentValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public AvroValue<V> getCurrentValue() throws IOException, InterruptedException {\n    return mCurrentValue;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordReader.getCurrentValue"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordReader.getCurrentValue": "{@inheritDoc}"}]}, {"index": "1653", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyValueRecordReader.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordReader.nextKeyValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public boolean nextKeyValue() throws IOException, InterruptedException {\n    boolean hasNext = super.nextKeyValue();\n    AvroKeyValue<K, V> avroKeyValue = new AvroKeyValue<>(getCurrentRecord());\n    mCurrentKey.datum(avroKeyValue.getKey());\n    mCurrentValue.datum(avroKeyValue.getValue());\n    return hasNext;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.trevni.avro.mapreduce.AvroTrevniRecordReaderBase.nextKeyValue", "org.apache.trevni.avro.mapreduce.AvroTrevniKeyValueRecordReader.getCurrentRecord", "org.apache.avro.hadoop.io.AvroKeyValue.<init>", "org.apache.avro.hadoop.io.AvroKeyValue.getKey", "org.apache.avro.mapred.AvroKey.datum", "org.apache.avro.hadoop.io.AvroKeyValue.getValue", "org.apache.avro.mapred.AvroValue.datum"], "call_func_parameter": [[""], [""], ["org.apache.avro.generic.GenericRecord"], [""], ["java.lang.Object"], [""], ["java.lang.Object"]], "passed_comments": [{"org.apache.trevni.avro.mapreduce.AvroTrevniRecordReaderBase.nextKeyValue": "{@inheritDoc}"}, {"org.apache.avro.hadoop.io.AvroKeyValue.getKey": "Read the key."}, {"org.apache.avro.hadoop.io.AvroKeyValue.getValue": "Read the value."}]}, {"index": "1654", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniRecordWriterBase.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniRecordWriterBase.AvroTrevniRecordWriterBase", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "public AvroTrevniRecordWriterBase(TaskAttemptContext context) throws IOException {\n\n    schema = initSchema(context);\n    meta = filterMetadata(context.getConfiguration());\n    writer = new AvroColumnWriter<>(schema, meta, ReflectData.get());\n\n    Path outputPath = FileOutputFormat.getOutputPath(context);\n\n    String dir = FileOutputFormat.getUniqueFile(context, \"part\", \"\");\n    dirPath = new Path(outputPath.toString() + \"/\" + dir);\n    fs = dirPath.getFileSystem(context.getConfiguration());\n    fs.mkdirs(dirPath);\n\n    blockSize = fs.getDefaultBlockSize(dirPath);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1655", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniRecordWriterBase.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniRecordWriterBase.initSchema", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "abstract protected Schema initSchema(TaskAttemptContext context);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Use the task context to construct a schema for writing", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1656", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniRecordWriterBase.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniRecordWriterBase.flush", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void flush() throws IOException {\n    try (OutputStream out = fs.create(new Path(dirPath, \"part-\" + (part++) + EXT))) {\n      writer.writeTo(out);\n    }\n    writer = new AvroColumnWriter<>(schema, meta, ReflectData.get());\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#PostfixExpression#ParenthesizedExpression#SimpleName#InfixExpression#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(ParenthesizedExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ParenthesizedExpression(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "A Trevni flush will close the current file and prep a new writer", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.apache.hadoop.fs.Path.<init>", "org.apache.hadoop.fs.FileSystem.create", "org.apache.trevni.avro.AvroColumnWriter.writeTo", "java.io.OutputStream.close", "java.lang.Throwable.addSuppressed", "org.apache.avro.reflect.ReflectData.get", "org.apache.trevni.avro.AvroColumnWriter.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["org.apache.hadoop.fs.Path", "java.lang.String"], ["org.apache.hadoop.fs.Path"], ["java.io.OutputStream"], [""], ["java.lang.Throwable"], [""], ["org.apache.avro.Schema", "org.apache.trevni.ColumnFileMetaData", "org.apache.avro.generic.GenericData"]], "passed_comments": [{"org.apache.trevni.avro.AvroColumnWriter.writeTo": "Write all rows added to the named output stream."}, {"org.apache.avro.reflect.ReflectData.get": "Return the singleton instance."}]}, {"index": "1657", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniRecordWriterBase.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniRecordWriterBase.close", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "arg0#", "methodBody": "@Override\n  public void close(TaskAttemptContext arg0) throws IOException, InterruptedException {\n    flush();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.trevni.avro.mapreduce.AvroTrevniRecordWriterBase.flush"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.trevni.avro.mapreduce.AvroTrevniRecordWriterBase.flush": "A Trevni flush will close the current file and prep a new writer"}]}, {"index": "1658", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyRecordReader.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyRecordReader.getCurrentKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public AvroKey<T> getCurrentKey() throws IOException, InterruptedException {\n    return mCurrentKey;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.trevni.avro.mapreduce.AvroTrevniKeyRecordReader.getCurrentKey"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.trevni.avro.mapreduce.AvroTrevniKeyRecordReader.getCurrentKey": "{@inheritDoc}"}]}, {"index": "1659", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyRecordReader.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyRecordReader.getCurrentValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public NullWritable getCurrentValue() throws IOException, InterruptedException {\n    return NullWritable.get();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.trevni.avro.mapreduce.AvroTrevniKeyRecordReader.getCurrentValue"], "call_func_parameter": [[""]], "passed_comments": [{"org.apache.trevni.avro.mapreduce.AvroTrevniKeyRecordReader.getCurrentValue": "{@inheritDoc}"}]}, {"index": "1660", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyRecordReader.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyRecordReader.nextKeyValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n  public boolean nextKeyValue() throws IOException, InterruptedException {\n    boolean hasNext = super.nextKeyValue();\n    mCurrentKey.datum(getCurrentRecord());\n    return hasNext;\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#PrimitiveType#SimpleName#SimpleName#SuperMethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SuperMethodInvocation(SimpleName)SimpleName)SuperMethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.trevni.avro.mapreduce.AvroTrevniRecordReaderBase.nextKeyValue", "org.apache.trevni.avro.mapreduce.AvroTrevniKeyRecordReader.getCurrentRecord", "org.apache.avro.mapred.AvroKey.datum"], "call_func_parameter": [[""], [""], ["java.lang.Object"]], "passed_comments": [{"org.apache.trevni.avro.mapreduce.AvroTrevniRecordReaderBase.nextKeyValue": "{@inheritDoc}"}]}, {"index": "1661", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyRecordWriter.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyRecordWriter.AvroTrevniKeyRecordWriter", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "public AvroTrevniKeyRecordWriter(TaskAttemptContext context) throws IOException {\n    super(context);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1662", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyRecordWriter.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyRecordWriter.write", "methodParameterType": "AvroKey<T>#NullWritable#", "methodParameterName": "key#value#", "methodBody": "@Override\n  public void write(AvroKey<T> key, NullWritable value) throws IOException, InterruptedException {\n    writer.write(key.datum());\n    if (writer.sizeEstimate() >= blockSize) // block full\n      flush();\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.avro.mapred.AvroKey.datum", "org.apache.trevni.avro.AvroColumnWriter.write", "org.apache.trevni.avro.AvroColumnWriter.sizeEstimate", "org.apache.trevni.avro.mapreduce.AvroTrevniKeyRecordWriter.flush"], "call_func_parameter": [[""], ["java.lang.Object"], [""], [""]], "passed_comments": [{"org.apache.trevni.avro.AvroColumnWriter.sizeEstimate": "Return the approximate size of the file that will be written. Tries to slightly over-estimate. Indicates both the size in memory of the buffered data as well as the size of the file that will be written by {@link #writeTo(OutputStream)}."}]}, {"index": "1663", "file": "/root/repos/repos8/avro/lang/java/trevni/avro/src/main/java/org/apache/trevni/avro/mapreduce/AvroTrevniKeyRecordWriter.java", "methodName": "org.apache.trevni.avro.mapreduce.AvroTrevniKeyRecordWriter.initSchema", "methodParameterType": "TaskAttemptContext#", "methodParameterName": "context#", "methodBody": "@Override\n  protected Schema initSchema(TaskAttemptContext context) {\n    boolean isMapOnly = context.getNumReduceTasks() == 0;\n    return isMapOnly ? AvroJob.getMapOutputKeySchema(context.getConfiguration())\n        : AvroJob.getOutputKeySchema(context.getConfiguration());\n  }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.apache.hadoop.mapreduce.TaskAttemptContext.getNumReduceTasks", "org.apache.hadoop.mapreduce.TaskAttemptContext.getConfiguration", "org.apache.avro.mapreduce.AvroJob.getMapOutputKeySchema", "org.apache.avro.mapreduce.AvroJob.getOutputKeySchema"], "call_func_parameter": [[""], [""], ["org.apache.hadoop.conf.Configuration"], ["org.apache.hadoop.conf.Configuration"]], "passed_comments": [{"org.apache.avro.mapreduce.AvroJob.getMapOutputKeySchema": "Gets the map output key schema."}, {"org.apache.avro.mapreduce.AvroJob.getOutputKeySchema": "Gets the job output key schema."}]}, {"index": "1664", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/InputFile.java", "methodName": "org.apache.trevni.InputFile.InputFile", "methodParameterType": "File#", "methodParameterName": "file#", "methodBody": "public InputFile(File file) throws IOException {\n    this.channel = new FileInputStream(file).getChannel();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct for the given file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1665", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/InputBytes.java", "methodName": "org.apache.trevni.InputBytes.InputBytes", "methodParameterType": "byte[]#", "methodParameterName": "data#", "methodBody": "public InputBytes(byte[] data) {\n    super(data);\n  }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct for the given bytes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1666", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/InputBytes.java", "methodName": "org.apache.trevni.InputBytes.InputBytes", "methodParameterType": "ByteBuffer#", "methodParameterName": "data#", "methodBody": "public InputBytes(ByteBuffer data) {\n    super(data.array(), data.position(), data.limit());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct for the given bytes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1667", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/Checksum.java", "methodName": "org.apache.trevni.Checksum.size", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract int size();", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The number of bytes per checksum.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1668", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/Checksum.java", "methodName": "org.apache.trevni.Checksum.compute", "methodParameterType": "ByteBuffer#", "methodParameterName": "data#", "methodBody": "public abstract ByteBuffer compute(ByteBuffer data);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Compute a checksum.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1669", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/Codec.java", "methodName": "org.apache.trevni.Codec.compress", "methodParameterType": "ByteBuffer#", "methodParameterName": "uncompressedData#", "methodBody": "abstract ByteBuffer compress(ByteBuffer uncompressedData) throws IOException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Compress data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1670", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/Codec.java", "methodName": "org.apache.trevni.Codec.decompress", "methodParameterType": "ByteBuffer#", "methodParameterName": "compressedData#", "methodBody": "abstract ByteBuffer decompress(ByteBuffer compressedData) throws IOException;", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Decompress data", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1671", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileWriter.java", "methodName": "org.apache.trevni.ColumnFileWriter.ColumnFileWriter", "methodParameterType": "ColumnFileMetaData#ColumnMetaData#", "methodParameterName": "fileMeta#columnMeta#", "methodBody": "public ColumnFileWriter(ColumnFileMetaData fileMeta, ColumnMetaData... columnMeta) throws IOException {\n    checkColumns(columnMeta);\n    this.metaData = fileMeta;\n    this.columnCount = columnMeta.length;\n    this.columns = new ColumnOutputBuffer[columnCount];\n    for (int i = 0; i < columnCount; i++) {\n      ColumnMetaData c = columnMeta[i];\n      c.setDefaults(metaData);\n      columns[i] = c.isArray() ? new ArrayColumnOutputBuffer(this, c) : new ColumnOutputBuffer(this, c);\n      size += OutputBuffer.BLOCK_SIZE; // over-estimate\n    }\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#ThisExpression#SimpleName#ClassInstanceCreation#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName)ClassInstanceCreation)ConditionalExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Construct given metadata for each column in the file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1672", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileWriter.java", "methodName": "org.apache.trevni.ColumnFileWriter.sizeEstimate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long sizeEstimate() {\n    return size;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the approximate size of the file that will be written. Tries to slightly over-estimate. Indicates both the size in memory of the buffered data as well as the size of the file that will be written by {@link #writeTo(OutputStream)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1673", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileWriter.java", "methodName": "org.apache.trevni.ColumnFileWriter.getMetaData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ColumnFileMetaData getMetaData() {\n    return metaData;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return this file's metadata.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1674", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileWriter.java", "methodName": "org.apache.trevni.ColumnFileWriter.getColumnCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getColumnCount() {\n    return columnCount;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the number of columns in the file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1675", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileWriter.java", "methodName": "org.apache.trevni.ColumnFileWriter.writeRow", "methodParameterType": "Object#", "methodParameterName": "row#", "methodBody": "public void writeRow(Object... row) throws IOException {\n    startRow();\n    for (int column = 0; column < columnCount; column++)\n      writeValue(row[column], column);\n    endRow();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#ExpressionStatement#ForStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)ForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a row to the file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1676", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileWriter.java", "methodName": "org.apache.trevni.ColumnFileWriter.startRow", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void startRow() throws IOException {\n    for (int column = 0; column < columnCount; column++)\n      columns[column].startRow();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#ExpressionStatement#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)ForStatement)Block)MethodDeclaration", "methodDoc": "Expert: Called before any values are written to a row.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1677", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileWriter.java", "methodName": "org.apache.trevni.ColumnFileWriter.writeLength", "methodParameterType": "int#int#", "methodParameterName": "length#column#", "methodBody": "public void writeLength(int length, int column) throws IOException {\n    columns[column].writeLength(length);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Expert: Declare a count of items to be written to an array column or a column whose parent is an array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1678", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileWriter.java", "methodName": "org.apache.trevni.ColumnFileWriter.writeValue", "methodParameterType": "Object#int#", "methodParameterName": "value#column#", "methodBody": "public void writeValue(Object value, int column) throws IOException {\n    columns[column].writeValue(value);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Expert: Add a value to a row. For values in array columns or whose parents are array columns, this must be preceded by a call to {@link #writeLength(int,int)} and must be called that many times. For normalcolumns this is called once for each row in the column.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1679", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileWriter.java", "methodName": "org.apache.trevni.ColumnFileWriter.endRow", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void endRow() throws IOException {\n    for (int column = 0; column < columnCount; column++)\n      columns[column].endRow();\n    rowCount++;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#ExpressionStatement#ForStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)ForStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Expert: Called after all values are written to a row.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1680", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileWriter.java", "methodName": "org.apache.trevni.ColumnFileWriter.writeTo", "methodParameterType": "File#", "methodParameterName": "file#", "methodBody": "public void writeTo(File file) throws IOException {\n    try (OutputStream out = new FileOutputStream(file)) {\n      writeTo(out);\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Write all rows added to the named file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1681", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileWriter.java", "methodName": "org.apache.trevni.ColumnFileWriter.writeTo", "methodParameterType": "OutputStream#", "methodParameterName": "out#", "methodBody": "public void writeTo(OutputStream out) throws IOException {\n    writeHeader(out);\n\n    for (int column = 0; column < columnCount; column++)\n      columns[column].writeTo(out);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(MethodInvocation(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)ForStatement)Block)MethodDeclaration", "methodDoc": "Write all rows added to the named output stream.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1682", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/MetaData.java", "methodName": "org.apache.trevni.MetaData.getCodec", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCodec() {\n    return getString(CODEC_KEY);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the compression codec name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1683", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/MetaData.java", "methodName": "org.apache.trevni.MetaData.setCodec", "methodParameterType": "String#", "methodParameterName": "codec#", "methodBody": "public T setCodec(String codec) {\n    setReserved(CODEC_KEY, codec);\n    return (T) this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ThisExpression#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the compression codec name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1684", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/MetaData.java", "methodName": "org.apache.trevni.MetaData.getChecksum", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getChecksum() {\n    return getString(CHECKSUM_KEY);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the checksum algorithm name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1685", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/MetaData.java", "methodName": "org.apache.trevni.MetaData.setChecksum", "methodParameterType": "String#", "methodParameterName": "checksum#", "methodBody": "public T setChecksum(String checksum) {\n    setReserved(CHECKSUM_KEY, checksum);\n    return (T) this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ThisExpression#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the checksum algorithm name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1686", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/MetaData.java", "methodName": "org.apache.trevni.MetaData.getString", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public String getString(String key) {\n    byte[] value = get(key);\n    if (value == null && defaults != null)\n      value = defaults.get(key);\n    if (value == null)\n      return null;\n    return new String(value, StandardCharsets.UTF_8);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the value of a metadata property as a String.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1687", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/MetaData.java", "methodName": "org.apache.trevni.MetaData.getLong", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public long getLong(String key) {\n    return Long.parseLong(getString(key));\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the value of a metadata property as a long.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1688", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/MetaData.java", "methodName": "org.apache.trevni.MetaData.getBoolean", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public boolean getBoolean(String key) {\n    return get(key) != null;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true iff a key has any value, false if it is not present.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1689", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/MetaData.java", "methodName": "org.apache.trevni.MetaData.set", "methodParameterType": "String#byte[]#", "methodParameterName": "key#value#", "methodBody": "public T set(String key, byte[] value) {\n    if (isReserved(key)) {\n      throw new TrevniRuntimeException(\"Cannot set reserved key: \" + key);\n    }\n    put(key, value);\n    return (T) this;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#ThisExpression#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set a metadata property to a binary value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1690", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/MetaData.java", "methodName": "org.apache.trevni.MetaData.isReserved", "methodParameterType": "String#", "methodParameterName": "key#", "methodBody": "public static boolean isReserved(String key) {\n    return key.startsWith(RESERVED_KEY_PREFIX);\n  }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Test if a metadata key is reserved.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1691", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/MetaData.java", "methodName": "org.apache.trevni.MetaData.set", "methodParameterType": "String#String#", "methodParameterName": "key#value#", "methodBody": "public T set(String key, String value) {\n    return set(key, value.getBytes(StandardCharsets.UTF_8));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set a metadata property to a String value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1692", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/MetaData.java", "methodName": "org.apache.trevni.MetaData.set", "methodParameterType": "String#long#", "methodParameterName": "key#value#", "methodBody": "public T set(String key, long value) {\n    return set(key, Long.toString(value));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set a metadata property to a long value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1693", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileReader.java", "methodName": "org.apache.trevni.ColumnFileReader.ColumnFileReader", "methodParameterType": "File#", "methodParameterName": "file#", "methodBody": "public ColumnFileReader(File file) throws IOException {\n    this(new InputFile(file));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Construct reading from the named file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1694", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileReader.java", "methodName": "org.apache.trevni.ColumnFileReader.ColumnFileReader", "methodParameterType": "Input#", "methodParameterName": "file#", "methodBody": "public ColumnFileReader(Input file) throws IOException {\n    this.file = file;\n    readHeader();\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct reading from the provided input.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1695", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileReader.java", "methodName": "org.apache.trevni.ColumnFileReader.getRowCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getRowCount() {\n    return rowCount;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the number of rows in this file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1696", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileReader.java", "methodName": "org.apache.trevni.ColumnFileReader.getColumnCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getColumnCount() {\n    return columnCount;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the number of columns in this file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1697", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileReader.java", "methodName": "org.apache.trevni.ColumnFileReader.getMetaData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ColumnFileMetaData getMetaData() {\n    return metaData;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return this file's metadata.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1698", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileReader.java", "methodName": "org.apache.trevni.ColumnFileReader.getColumnMetaData", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ColumnMetaData[] getColumnMetaData() {\n    ColumnMetaData[] result = new ColumnMetaData[columnCount];\n    for (int i = 0; i < columnCount; i++)\n      result[i] = columns[i].metaData;\n    return result;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#ArrayAccess#SimpleName#FieldAccess#Assignment#ExpressionStatement#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(FieldAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)FieldAccess)Assignment)ExpressionStatement)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return all columns' metadata.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1699", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileReader.java", "methodName": "org.apache.trevni.ColumnFileReader.getRoots", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<ColumnMetaData> getRoots() {\n    List<ColumnMetaData> result = new ArrayList<>();\n    for (int i = 0; i < columnCount; i++)\n      if (columns[i].metaData.getParent() == null)\n        result.add(columns[i].metaData);\n    return result;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#FieldAccess#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#IfStatement#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(IfStatement(InfixExpression(MethodInvocation(FieldAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement)IfStatement)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return root columns' metadata. Roots are columns that have no parent.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1700", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileReader.java", "methodName": "org.apache.trevni.ColumnFileReader.getColumnMetaData", "methodParameterType": "int#", "methodParameterName": "number#", "methodBody": "public ColumnMetaData getColumnMetaData(int number) {\n    return columns[number].metaData;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ArrayAccess#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(FieldAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a column's metadata.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1701", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileReader.java", "methodName": "org.apache.trevni.ColumnFileReader.getColumnMetaData", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public ColumnMetaData getColumnMetaData(String name) {\n    return getColumn(name).metaData;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return a column's metadata.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1702", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileReader.java", "methodName": "org.apache.trevni.ColumnFileReader.getValues", "methodParameterType": "String#", "methodParameterName": "columnName#", "methodBody": "public <T extends Comparable> ColumnValues<T> getValues(String columnName) throws IOException {\n    return new ColumnValues<>(getColumn(columnName));\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return an iterator over values in the named column.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1703", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnFileReader.java", "methodName": "org.apache.trevni.ColumnFileReader.getValues", "methodParameterType": "int#", "methodParameterName": "column#", "methodBody": "public <T extends Comparable> ColumnValues<T> getValues(int column) throws IOException {\n    return new ColumnValues<>(columns[column]);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ArrayAccess#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return an iterator over values in a column.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1704", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnValues.java", "methodName": "org.apache.trevni.ColumnValues.getRow", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getRow() {\n    return row;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the current row number within this file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1705", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnValues.java", "methodName": "org.apache.trevni.ColumnValues.seek", "methodParameterType": "long#", "methodParameterName": "r#", "methodBody": "public void seek(long r) throws IOException {\n    if (r < row || r >= column.lastRow(block)) // not in current block\n      startBlock(column.findBlock(r)); // seek to block start\n    while (r > row && hasNext()) { // skip within block\n      values.skipValue(type);\n      row++;\n    }\n    previous = null;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#WhileStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement(WhileStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)WhileStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Seek to the named row.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1706", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnValues.java", "methodName": "org.apache.trevni.ColumnValues.seek", "methodParameterType": "T#", "methodParameterName": "v#", "methodBody": "public void seek(T v) throws IOException {\n    if (!column.metaData.hasIndexValues())\n      throw new TrevniRuntimeException(\"Column does not have value index: \" + column.metaData.getName());\n\n    if (previous == null // not in current block?\n        || previous.compareTo(v) > 0\n        || (block != column.blockCount() - 1 && column.firstValues[block + 1].compareTo(v) <= 0))\n      startBlock(column.findBlock(v)); // seek to block start\n\n    while (hasNext()) { // scan block\n      long savedPosition = values.tell();\n      T savedPrevious = previous;\n      if (next().compareTo(v) >= 0) {\n        values.seek(savedPosition);\n        previous = savedPrevious;\n        row--;\n        return;\n      }\n    }\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#IfStatement#SimpleName#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#ReturnStatement#Block#IfStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ParenthesizedExpression)InfixExpression(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)IfStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "Seek to the named value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1707", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnValues.java", "methodName": "org.apache.trevni.ColumnValues.startRow", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void startRow() throws IOException {\n    if (row >= column.lastRow(block)) {\n      if (block >= column.blockCount())\n        throw new TrevniRuntimeException(\"Read past end of column.\");\n      startBlock(block + 1);\n    }\n    row++;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Expert: Must be called before any calls to  {@link #nextLength()} or{@link #nextValue()}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1708", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnValues.java", "methodName": "org.apache.trevni.ColumnValues.nextLength", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int nextLength() throws IOException {\n    if (!column.metaData.isArray())\n      throw new TrevniRuntimeException(\"Column is not array: \" + column.metaData.getName());\n    assert arrayLength == 0;\n    return arrayLength = values.readLength();\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#NumberLiteral#InfixExpression#AssertStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(AssertStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)AssertStatement(ReturnStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Expert: Returns the next length in an array column.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1709", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnValues.java", "methodName": "org.apache.trevni.ColumnValues.nextValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public T nextValue() throws IOException {\n    arrayLength--;\n    return previous = values.readValue(type);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(ReturnStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Expert: Returns the next value in a column.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1710", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnMetaData.java", "methodName": "org.apache.trevni.ColumnMetaData.ColumnMetaData", "methodParameterType": "String#ValueType#", "methodParameterName": "name#type#", "methodBody": "public ColumnMetaData(String name, ValueType type) {\n    this.name = name;\n    setReserved(NAME_KEY, name);\n    this.type = type;\n    setReserved(TYPE_KEY, type.getName());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Construct given a name and type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1711", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnMetaData.java", "methodName": "org.apache.trevni.ColumnMetaData.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n    return name;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return this column's name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1712", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnMetaData.java", "methodName": "org.apache.trevni.ColumnMetaData.getType", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ValueType getType() {\n    return type;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return this column's type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1713", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnMetaData.java", "methodName": "org.apache.trevni.ColumnMetaData.getParent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ColumnMetaData getParent() {\n    return parent;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return this column's parent or null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1714", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnMetaData.java", "methodName": "org.apache.trevni.ColumnMetaData.getChildren", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<ColumnMetaData> getChildren() {\n    return children;\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return this column's children or null.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1715", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnMetaData.java", "methodName": "org.apache.trevni.ColumnMetaData.isArray", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isArray() {\n    return isArray;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if this column is an array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1716", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnMetaData.java", "methodName": "org.apache.trevni.ColumnMetaData.getNumber", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getNumber() {\n    return number;\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return this column's number in a file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1717", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnMetaData.java", "methodName": "org.apache.trevni.ColumnMetaData.hasIndexValues", "methodParameterType": "boolean#", "methodParameterName": "values#", "methodBody": "public ColumnMetaData hasIndexValues(boolean values) {\n    if (isArray)\n      throw new TrevniRuntimeException(\"Array column cannot have index: \" + this);\n    this.values = values;\n    return setReservedBoolean(VALUES_KEY, values);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set whether this column has an index of blocks by value. This only makes sense for sorted columns and permits one to seek into a column by value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1718", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnMetaData.java", "methodName": "org.apache.trevni.ColumnMetaData.setParent", "methodParameterType": "ColumnMetaData#", "methodParameterName": "parent#", "methodBody": "public ColumnMetaData setParent(ColumnMetaData parent) {\n    if (!parent.isArray())\n      throw new TrevniRuntimeException(\"Parent is not an array: \" + parent);\n    if (values)\n      throw new TrevniRuntimeException(\"Array column cannot have index: \" + this);\n    this.parent = parent;\n    parent.children.add(this);\n    return setReserved(PARENT_KEY, parent.getName());\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(IfStatement(SimpleName)SimpleName(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set this column's parent. A parent must be a preceding array column.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1719", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnMetaData.java", "methodName": "org.apache.trevni.ColumnMetaData.isArray", "methodParameterType": "boolean#", "methodParameterName": "isArray#", "methodBody": "public ColumnMetaData isArray(boolean isArray) {\n    if (values)\n      throw new TrevniRuntimeException(\"Array column cannot have index: \" + this);\n    this.isArray = isArray;\n    return setReservedBoolean(ARRAY_KEY, isArray);\n  }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#StringLiteral#ThisExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set whether this column is an array.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1720", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/ColumnMetaData.java", "methodName": "org.apache.trevni.ColumnMetaData.hasIndexValues", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean hasIndexValues() {\n    return getBoolean(VALUES_KEY);\n  }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get whether this column has an index of blocks by value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1721", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/Input.java", "methodName": "org.apache.trevni.Input.length", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long length() throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Return the total length of the input.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1722", "file": "/root/repos/repos8/avro/lang/java/trevni/core/src/main/java/org/apache/trevni/Input.java", "methodName": "org.apache.trevni.Input.read", "methodParameterType": "long#byte[]#int#int#", "methodParameterName": "position#b#start#len#", "methodBody": "int read(long position, byte[] b, int start, int len) throws IOException;", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Positioned read.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}]